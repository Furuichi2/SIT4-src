;	*******************************************
;	***					***
;	***	SH4のみ ﾄﾚﾝﾄﾞﾌﾟﾛｸﾞﾗﾑ		***
;	***		ﾛｰﾀﾞｺﾏﾝﾄﾞﾌﾟﾛｸﾞﾗﾑ	***
;	***	sh2ではこのﾌｧｲﾙはﾘﾝｸしない	***
;	***	2006-04-24			***
;	*******************************************
	.LIST	OFF
	.INCLUDE	"cm_equ1.equ"		; //共通定義:必ず実行ﾌﾟﾛｸﾞﾗﾑにｲﾝｸﾙｰﾄﾞする事
	.INCLUDE	"ssa_pfom.equ"		; //equ定義
	.INCLUDE	"ssa_khad.equ"		; //equ定義
	.INCLUDE	"shn_cmd1.mac"		; 
	.INCLUDE	"ssa_kmc1.mac"		; //
	.INCLUDE	"ssa_ver1.equ"		; //

	.LIST	ON

	.SECTION	P,CODE			;
;	//	***********************************
;	//	***	EXTERN 宣言 PROGRAM	***
;	//	***********************************
	.IMPORT	_FPU_DIVS_32REG2_DIV_32REG4_R2_MOD_R1	;R2...R1
	.IMPORT	_PV_LINK_DG_CHG_CLNK_DG1		;
	.IMPORT	_FPU_DIVS_32REG2_32REG1_R4_32REG2_R2;
	.IMPORT	_FPU_R2_MUL_R1_DIV_R4;
	.IMPORT	_DIVS_64R1R2_32R4_32R2	;

;	//	***********************************
;	//	***	EXTERN 宣言 MEMORY,HARD	***
;	//	***********************************
	.IMPORT		_SVP_KAJYUU_PV1		;

	.IMPORT		_SVP_SMPSTR_KAJ		; ｻﾝﾌﾟﾘﾝｸﾞ　ﾄﾘｶﾞ荷重
	.IMPORT		_SVP_SMPSTR_AGL		; ｻﾝﾌﾟﾘﾝｸﾞ　ﾄﾘｶﾞ角度
	.IMPORT		_SVP_SMPSTR_FUK		; ｻﾝﾌﾟﾘﾝｸﾞ　ﾄﾘｶﾞ負荷率
	.IMPORT		_SVP_SMPSTR_SEH		; ｻﾝﾌﾟﾘﾝｸﾞ　ﾄﾘｶﾞｼｰｹﾝｽ（上位ｱﾄﾞﾚｽ）
	.IMPORT		_SVP_SMPSTR_SQL		; ｻﾝﾌﾟﾘﾝｸﾞ　ﾄﾘｶﾞｼｰｹﾝｽ（下位ｱﾄﾞﾚｽ）
	.IMPORT		_SVP_SMPMAX_CNT		; ｻﾝﾌﾟﾘﾝｸﾞ　最大個数
	.IMPORT		_SVP_SMPTRG_CNT		; ｻﾝﾌﾟﾘﾝｸﾞ　ﾌﾟﾘﾄﾘｶﾞ個数
	.IMPORT		_SVP_SMPCYC_TIM		; ｻﾝﾌﾟﾘﾝｸﾞ　周期
	.IMPORT		_SVP_MOADR0_SQH		;

	.IMPORT		_SVP_SMP_CNT		;
	.IMPORT		_SVP_TRD_CNT		;
	.IMPORT		_SVP_ORGCAL_DAT1	;演算係数1(→機種コード)
	.IMPORT		_SVP_ORGCAL_DAT2	;演算係数2(→機種番号)

	.IMPORT		_SVP_SMPCYC_TIM2	;ﾀｲﾏﾌﾟﾘｾｯﾄ　画面専用設定　ﾀｲﾏ周期

	.IMPORT		_PVPAB_KAJLIV_LFT		;//荷重生（TON）(1word)
	.IMPORT		_PVPAB_KAJLIV_TTL		;//荷重生（TON）(1word)
	.IMPORT		_PVPAB_KAJLIV_RIH		;//荷重生（TON）(1word)

	.IMPORT		_PV_OUT_SPD_PER		;
	.IMPORT		_PV_ENC_SPD_PER		;
	.IMPORT		_RNA_CTL_POS1		;//制御位置
	.IMPORT		_LINK_SV_OBJ_ABSPLS	;//制御位置
	.IMPORT		_LINK_PV_ABSPLS;//制御位置
	.IMPORT		_CB_SEQ_CB_COM345	;//

	.IMPORT		_PVP_POWER_MONI		;


	.IMPORT		_SQ_CBWK_TOP		;
	.IMPORT		_CTL_ENC360		;360.0度//360ｴﾝｺｰﾀﾞ<360ｴﾝｺｰﾀﾞ>
	.IMPORT		_INC_ENC360		;
	.IMPORT		_OBJDIG_CLANK		;
	.IMPORT		_OBJ_ENC360		;

	.IMPORT		_SEQAB_DP_TOP
	.IMPORT		_WPV_POWER_MONI		;2006-09-30ABS TRQ
	.IMPORT		_WPV_AD_DATA		;2006-09-30符号 AD

	.IMPORT		_SVP_MOADRF_SQH		;2006-09-30 DEBU 999/998
	.IMPORT		_SVP_MOADRF_SQL		;2006-09-30 DEBU 999/998



;;;;	.IMPORT		_PVPAB_ARA1_KAJ_L		;//2byte
;;;;	.IMPORT		_PVPAB_ARA1_KAJ_R		;//2byte
;;;;	.IMPORT		_PVPAB_ARA1_KAJ_T

;	-------------------------------------------
	.IMPORT		_BTOA_LFT_MAX	;
	.IMPORT		_BTOA_RIH_MAX	;
	.IMPORT		_BTOA_TTL_MAX	;

	.IMPORT		_BTOA_LFT_MIN	;
	.IMPORT		_BTOA_RIH_MIN	;
	.IMPORT		_BTOA_TTL_MIN	;


	.IMPORT		_BTOA_LFT_HAB	;
	.IMPORT		_BTOA_RIH_HAB	;
	.IMPORT		_BTOA_TTL_HAB	;

;	----------区間,ｻｲｸﾙｼｮｯﾄ用----------------
	.IMPORT		_SET1_KAJAREA_SEL;//ﾄﾚﾝﾄﾞ荷重表示選択0:(最大),1:(最小),2(幅)

	.IMPORT		_BTOA_LFT_TRDMAX	;
	.IMPORT		_BTOA_RIH_TRDMAX	;
	.IMPORT		_BTOA_TTL_TRDMAX	;

	.IMPORT		_BTOA_LFT_TRDMIN	;
	.IMPORT		_BTOA_RIH_TRDMIN	;
	.IMPORT		_BTOA_TTL_TRDMIN	;

	.IMPORT		_BTOA_LFT_TRDHAB	;
	.IMPORT		_BTOA_RIH_TRDHAB	;
	.IMPORT		_BTOA_TTL_TRDHAB	;





	.IMPORT		_KJYUU_NEW_DAT_PV	;//4byte

	.IMPORT		_PVX_DYHITO_POS		;(HOS=1)
	.IMPORT		_PRD_DAI_POS1		;//補正含む
                      
	.IMPORT		_PVP_MENTE_CNT		;2006-12-01

	.import		_RNA_ABS_MINPOS	;//20061204
	.IMPORT		_SHOT_MOST_DOWN_POS;20071212
	.IMPORT		_CPOS_CTL_MATH;


	.IMPORT		_RNA_ABS_POS	;[2009-09-25]

;-----------2010-09-21------------
	.IMPORT		_PVP_IVW_DOT	;2010-09-21
	.IMPORT		_PV_AD_DATA
	.IMPORT		_PVP_ECO_METER	;ECO METER
	.IMPORT		_PVP_POWER_KWH	;1CYCLE
	.IMPORT		_PVP_EPM_SYOHI	;消費
	.IMPORT		_PVP_EPM_KAISE	;回生


;	------ 2014-09-27--
	.IMPORT		_CAM_NOW_DIG
	.IMPORT		_SET1_MOTREP_USEFUL	;
	.IMPORT		_SVP_MOTREP_CNT		;繰り返し回数


;	------ 2017-06-29
	.EXPORT		_TRD_SMP_PV_SEQ		;
	.EXPORT		_PV_IVW_DAT_DSP		;
	.EXPORT		_MON_SV_IVW_USED	;
	.EXPORT		_TRD_SEQMONI_01		;



_PC_START_SWBIT	.EQU	BIT15		;BIT12->BIT15

;	//	***********************************
;	//	***	PUBLIC 宣言 PROGRAM	***
;	//	***********************************
	.MACRO	TREND_FORM_INTEL REG,LG
	.ENDM

;	//	***********************************
;	//	***	PUBLIC 宣言 PROGRAM	***
;	//	***********************************
	.MACRO	TREND_FORM_INTEL4B SRCREG,DSTREG,LG
;;	SWAP.\LG	\SRCREG,\DSTREG		;
	MOV	\SRCREG,\DSTREG			;
	SHLR16	\DSTREG				;上位
	.ENDM

	.MACRO	KOBAYASHI_TOOL SRCREG,LG
;;	SWAP.\LG \SRCREG,\SRCREG
	.ENDM

;	***************************************************
;	***						***
;	***						***
;	***		データ転送			***
;	***						***
;	***************************************************
_TRD_BUF_SMP_MAX	.EQU	5000	;
_SHT_BUF_SMP_MAX	.EQU	5000	;


	.EXPORT	_CPUA_TREND_SV_MOV
_CPUA_TREND_SV_MOV
	SUB_START

	MEM_MOV_TO_MEM	SRC_ADR=_SVP_SMPSTR_KAJ,L1=W,DST_ADR=_TRD_SVP_SMPSTR_KAJ,L2=W,WKREG1=R1,WKREG2=R2,WKREG3=R3
	MEM_MOV_TO_MEM	SRC_ADR=_SVP_SMPSTR_AGL,L1=W,DST_ADR=_TRD_SVP_SMPSTR_AGL,L2=W,WKREG1=R1,WKREG2=R2,WKREG3=R3

;;	MEM_MOV_TO_MEM	SRC_ADR=_SVP_SMPSTR_FUK,L1=W,DST_ADR=_TRD_SVP_SMPSTR_FUK,L2=W,WKREG1=R1,WKREG2=R2,WKREG3=R3
	MOV.L	#_SVP_SMPSTR_FUK,R1	;
	MOV.W	@R1,R2			;100%-->100.0%
	MOV.W	#D'10,R3		;
	DMULS.L	R2,R3			;
	STS	MACL,R2			;
	MOV.L	#_TRD_SVP_SMPSTR_FUK,R1	;
	MOV.W	R2,@R1			;

	MEM_MOV_TO_MEM	SRC_ADR=_SVP_SMPSTR_SEH,L1=W,DST_ADR=_TRD_SVP_SMPSTR_SEH,L2=W,WKREG1=R1,WKREG2=R2,WKREG3=R3
	MEM_MOV_TO_MEM	SRC_ADR=_SVP_SMPSTR_SQL,L1=W,DST_ADR=_TRD_SVP_SMPSTR_SQL,L2=W,WKREG1=R1,WKREG2=R2,WKREG3=R3

;	-------- 2018-11-11 [4/4]--------
	MOV.L	#_CB_SEQ_CB_COM345,R1			;
	MOV.W	@R1,R3							;.BIT10
	MOV.W	#BIT10,R4						;
	TST		R4,R3							;
	TST_BIT_OF CPUA_TRD_SVMV_030			;

	MOV.W	#D'5000,R2
	REG_MOV_TO_MEM	DST_ADR=_TRD_SVP_SMPMAX_CNT,L1=W,DT_REG=R2,WKREG1=R1
	MOV.W	#D'4000,R2
	REG_MOV_TO_MEM	DST_ADR=_TRD_SVP_SMPTRG_CNT,L1=W,DT_REG=R2,WKREG1=R1
	MOV.W	#D'1,R2
	REG_MOV_TO_MEM	DST_ADR=_TRD_SVP_SMPCYC_TIM,L1=W,DT_REG=R2,WKREG1=R1
	M_BRA	CPUA_TRD_SVMV_050

CPUA_TRD_SVMV_030
	MEM_MOV_TO_MEM	SRC_ADR=_SVP_SMPMAX_CNT,L1=W,DST_ADR=_TRD_SVP_SMPMAX_CNT,L2=W,WKREG1=R1,WKREG2=R2,WKREG3=R3
	MEM_MOV_TO_MEM	SRC_ADR=_SVP_SMPTRG_CNT,L1=W,DST_ADR=_TRD_SVP_SMPTRG_CNT,L2=W,WKREG1=R1,WKREG2=R2,WKREG3=R3
	MEM_MOV_TO_MEM	SRC_ADR=_SVP_SMPCYC_TIM,L1=W,DST_ADR=_TRD_SVP_SMPCYC_TIM,L2=W,WKREG1=R1,WKREG2=R2,WKREG3=R3
CPUA_TRD_SVMV_050








;	=== 2006-11-20 ===	SHIMA(HMI:V01z)
	MEM_MOV_TO_MEM	SRC_ADR=_SVP_SMP_CNT,L1=W,DST_ADR=_TRD_SVP_SMP_CNT,L2=W,WKREG1=R1,WKREG2=R2,WKREG3=R3	;ｻﾝﾌﾟﾘﾝｸﾞ収集形式　毎
	MEM_MOV_TO_MEM	SRC_ADR=_SVP_TRD_CNT,L1=W,DST_ADR=_SHT_SVP_SHT_CNT,L2=W,WKREG1=R1,WKREG2=R2,WKREG3=R3	;ﾄﾚﾝﾄﾞ収集形式　毎
	MEM_MOV_TO_MEM	SRC_ADR=_SVP_SMPMAX_CNT,L1=W,DST_ADR=_SHT_SVP_SMPMAX_CNT,L2=W,WKREG1=R1,WKREG2=R2,WKREG3=R3

	M_BRA	CPUA_TRD_SVMV_100			;2010-09-21


CPUA_TRD_SVMV_100:
	FAR_JSR	#_PAR_IVW_MOVE,R0
	FAR_JSR	#_SET_IVW_MOVE,R0
	
;	-------- 2010-09-21---
	MEM_MOV_TO_MEM	SRC_ADR=_MON_SV_IVW_USED,L1=W,DST_ADR=_TRD_IVW_USED,L2=W,WKREG1=R1,WKREG2=R2,WKREG3=R3
	MEM_MOV_TO_MEM	SRC_ADR=_MON_SV_IVW_RNGE,L1=W,DST_ADR=_TRD_IVW_RNGE,L2=W,WKREG1=R1,WKREG2=R2,WKREG3=R3
	MEM_MOV_TO_MEM	SRC_ADR=_MON_SV_IVW_RNGE,L1=W,DST_ADR=_PVP_IVW_DOT,L2=W,WKREG1=R1,WKREG2=R2,WKREG3=R3

	MEM_MOV_TO_MEM	SRC_ADR=_MON_SV_IVW_CSEL,L1=W,DST_ADR=_TRD_IVW_CSEL,L2=W,WKREG1=R1,WKREG2=R2,WKREG3=R3



CPUA_TRD_SVMV_200:


	FAR_JSR	#_TRD_DATA_SV_INI,R0
	FAR_JSR	#_SHT_DATA_SV_INI,R0

;	-------- 2007-01-11 -----------
	MOV.L	#_SVP_ORGCAL_DAT1,R1		;
	MOV.L	@R1,R0				;
	MOV.L	#_TRD_MCN_COD,R1		;
	MOV.W	R0,@R1				;

	MOV.L	#_SVP_ORGCAL_DAT2,R1		;
	MOV.L	@R1,R0				;
	MOV.L	#_TRD_MCN_NUM,R1		;
	MOV.W	R0,@R1				;


	MOV.L	#_SEQAB_DP_TOP+103*2,R1		;
	MOV.W	@R1,R0				;
	SHLR8	R0				;
	SHLR2	R0				;
	SHLR2	R0				;
	SHLR2	R0				;14bit SHIFT
	AND	#(BIT1+BIT0),R0			;
	MOV.L	#_TRD_DATA_LKFLG,R1		;
	MOV.W	R0,@R1				;BIT1=1 LOCK

	NOT	R0,R0				;
	AND	#(BIT1+BIT0),R0			;
	MOV.L	#_TRD_DATA_LOCK,R1		;
	MOV.W	R0,@R1				;BIT1=1 読出OK


;	--------- 2012-09-25 -----------
	FAR_JSR	#_TRD_MONIADR_MOVE,R0

;	---------- 2012-10-18 ------
	MOV.W	#H'005A,R0			;
	MOV.L	#_TRD_PASOCOM_CD,R1		;[46,47] ﾊﾟｿｺﾝ側の機能ﾁｪｯｸｺｰﾄﾞ005A
	MOV.W	R0,@R1				;

;	---------- 2014-09-30-----------
	MOV.L	#_SET1_MOTREP_USEFUL,R1		;
	MOV.W	@R1,R0				;
	MOV.L	#_TRD_REP_USE,R1		;[80,81] 1:繰返実行する/0:しない
	MOV.W	R0,@R1				;

	MOV.L	#_SVP_MOTREP_CNT,R1		;繰り返し回数
	MOV.W	@R1,R0				;
	MOV.L	#_TRD_REP_CNT,R1		;[82,83] 1~:繰返回数
	MOV.W	R0,@R1				;




	SUB_END
	M_RTS

;	***************************************************
;	***						***
;	***						***
;	***		起動時設定関連			***
;	***		起動時以外でも可能にしておく	***
;	***						***
;	***************************************************
_TRD_DATA_SV_INI
	SUB_START

	MOV.W	#1,R0				;
	MOV.L	#_TRD_INFO_SMPTYP,R1		;
	MOV.W	R0,@R1				;

	MOV.W	#_TRD_BUF_SMP_MAX,R4		;
	MOV.L	#_TRD_SVP_SMPTRG_CNT,R1		;
	MOV.W	@R1,R0				;
	CMP/HS	R0,R4				;R0=<R4(5000)
	BT	TRD_SVINI050		;
	MOV	R4,R0				;
TRD_SVINI050

	MOV.L	#_TRD_SVP_SMPMAX_CNT,R1		;MAX
	MOV.W	@R1,R2				;
	CMP/HS	R2,R4				;
	BT	TRD_SVINI100			;
	MOV	R4,R2				;MAX
TRD_SVINI100
	CMP/PL	R2				;+?
	BT	TRD_SVINI120			;
	MOV	#1,R2				;1~5000
TRD_SVINI120


	CMP/HS	R0,R2				;TRG=<MAX
	BT	TRD_SVINI150			;
	MOV	R2,R0				;TRG=MAX
TRD_SVINI150

	MOV.L	#_TRD_INFO_SMPMAX,R1		;MAX.SET
	MOV.W	R2,@R1				;

	MOV.L	#_TRD_INFO_SMPPRE,R1		;PRETRIG
	MOV.W	R0,@R1				;

	SUB	R0,R2				;
	MOV.L	#_TRD_INFO_SMPDLY,R1		;DLY.SET
	MOV.W	R2,@R1				;







	SUB_END
	M_RTS

;	***********************************
;	***				***
;	***	2012-09-25		***
;	***				***
;	***********************************
	.ALIGN 4
_TRD_MONIADR_MOVE
	SUB_START

	MOV.W	#D'16,R3			;
	MOV.L	#_SVP_MOADR0_SQH,R5		; モニタアドレス０　ｼｰｹﾝｽ上位　V01v　060713
	MOV.L	#_TRD_SEQMONI_01,R6		;4byte->2byte[12BIT[SEQ.ADR]+4BIT[SEQ.BIT]]

TRD_MONIADR_MVLOP100
	MOV.W	@R5+,R2				;
	MOV.W	@R5+,R0				;
	AND	#(BIT3+BIT2+BIT1+BIT0),R0	;
	SHLL2	R2				;
	SHLL2	R2				;
	OR	R0,R2				;
	MOV.W	R2,@R6				;
	ADD	#2,R6				;
	ADD	#-1,R3				;
	TST	R3,R3				;
	TST_BIT_ON TRD_MONIADR_MVLOP100		;

	SUB_END
	M_RTS


;	***************************************************
;	***						***
;	***						***
;	***						***
;	***		トレンド			***
;	***		INT				***
;	***						***
;	***						***
;	***************************************************
;	Idle	0
;	START	BIT0
;	TRG	BIT1
;	DLY	BIT2
;	END	BIT6
;

	.EXPORT	_CPUA_TREND_SMPLING	
_CPUA_TREND_SMPLING:
	SUB_START


	FAR_JSR	#_CPUA_DATA_SMP_MAK2,R0		;[2009-09-25] SMP1,SMP2共通

	FAR_JSR	#_PV1_IVW_DATMAK,R0		;[2010-09-21]電力測定

;	---------- 2009-09-25 画面ｻﾝﾌﾟﾘﾝｸﾞ　ﾄﾚﾝﾄﾞ--------------
	MOV.L	#_SEQAB_DP_TOP+24*2,R1			;
	MOV.W	@R1,R0					;
	MOV.W	#BIT7,R4
	TST	R4,R0					;
	TST_BIT_OF CPUA_TRD_SMP005			;
	FAR_JSR	#_GAMEN_SMP2_TRD2,R0	;[2009-09-25]
CPUA_TRD_SMP005:
;	---------- 2009-09-25 画面ｻﾝﾌﾟﾘﾝｸﾞ　ﾄﾚﾝﾄﾞEND--------------




;	-------- 2007-01-11 ﾛｰﾀﾞｺﾏﾝﾄﾞ------------
	MOV.L	#_TRD_DATA_LKFLG,R0		;
	MOV.W	@R0,R0				;BIT1=1 LOCK
	TST	#BIT1,R0			;
	TST_BIT_OF CPUA_TRD_SMP010		;

	M_BRA	CPUA_TRD_SMP_EXT		;
CPUA_TRD_SMP010:
;	----------------------------------







	FAR_JSR	#_CPUA_TREND_CMD_MAK,R0		;2006-11-21[ｻﾝﾌﾟﾘﾝｸﾞ]
	FAR_JSR	#_CPUA_SHOT_TREND,R0		;2006-11-21[1SHOT]

;;;	MOV.L	#_TRD_CNTL_MAIN_COM,R1		;
;;;	MOV.W	@R1,R0				;ON?
;;;	MOV.L	#_TRD_CNTL_INT_WRK,R1		;
;;;	MOV.W	@R1,R2				;
;;;	MOV.W	R0,@R1				;
;;	XOR	R0,R2				;
;;;	AND	R2,R0				;
;;;	MOV.L	#_TRD_CNTL_INT_EDG,R1		;
;;;	MOV.W	R0,@R1				;
;;	MOV	R0,R6				;R6:COMAND

	MOV.L	#_TRD_CNTL_MAIN_COM,R1		;
	MOV.W	@R1,R6				;ON?

	MOV.L	#_TRD_CNTL_INT_FLG,R5		;
	MOV.W	@R5,R0				;
	TST	R0,R0				;
	TST_BIT_OF CPUA_TRD_SMP050		;

;	--- 動作中中断チェック----
	TST	R6,R6				;COM:ON-EDGE
;;;;	TST_BIT_ON CPUA_TRD_SMP100		;ON EDGE? 再計測
	TST_BIT_OF CPUA_TRD_SMP090		;中断
	M_BRA	CPUA_TRD_SMP200			;

;	----- OFF IDLE ------
CPUA_TRD_SMP050:
	TST	R6,R6				;COM:ON-EDGE
	TST_BIT_ON CPUA_TRD_SMP100		;ON EDGE?
	M_BRA	CPUA_TRD_SMP900			;IDLE


;	--- 終了--------
CPUA_TRD_SMP090:						;
	XOR	R0,R0						;
	MOV.L	#_TRD_CNTL_INT_FLG,R5				;
	MOV.W	R0,@R5						;_TRD_CNTL_INT_FLG
	MOV.L	#_TRD_INFO_SMPSTS,R1										;
	MOV.W	R0,@R1												;
	MEM1_BIT0_F_ADCLR MEM=(_SQ_CBWK_TOP+_WKSQCB209),LG=W,BIT=~(BIT15+BIT14+BIT13),WKRG1=R1,WKRG2=R4	;														:
	M_BRA	CPUA_TRD_SMP250											;






;	--- INITAL計測開始 ---
CPUA_TRD_SMP100:				;
	XOR	R0,R0				;
	MOV.L	#_TRD_CNTL_INT_PNT,R1		;
	MOV.W	R0,@R1				;
	MOV.L	#_TRD_INFO_SMPADR,R1		;
	MOV.W	R0,@R1				;

	XOR	R0,R0				;
	MOV.L	#_TRD_CNTL_INT_DLY,R1		;遅延ｶｳﾝﾀ
	MOV.W	R0,@R1				;
	MOV.L	#_TRD_CNTL_INT_PRE,R1		;
	MOV.W	R0,@R1				;ﾌﾟﾚﾄﾘｶﾞ時間

	MOV.L	#_TRD_CNTL_INT_FLG,R5		;
	MOV.W	#BIT0,R0			;
	MOV.W	R0,@R5				;_TRD_CNTL_INT_FLG

	MOV.W	#1,R0				;
	MOV.L	#_TRD_INFO_SMPSTS,R1		;
	MOV.W	R0,@R1				;

	MEM1_BIT0_F_ADCLR MEM=(_SQ_CBWK_TOP+_WKSQCB209),LG=W,BIT=~(BIT15+BIT14+BIT13),WKRG1=R1,WKRG2=R4	;
	MEM1_BIT0_F_ORSET MEM=(_SQ_CBWK_TOP+_WKSQCB209),LG=W,BIT=(BIT14),WKRG1=R1,WKRG2=R4		;

;;20090925	FAR_JSR	#_CPUA_DATA_SMP_MAKE,R0		;
	FAR_JSR	#_CPUA_DATA_SMP_MAK1,R0		;2009-09-25


	FAR_JSR	#_CPUA_SMP_TRIG_CHK,R0		;DUMMY

	XOR	R0,R0				;
	MOV.L	#_TRD_CH_CONF,R1		;
	MOV.W	R0,@R1				;
	FAR_JSR	#_TRD_ADR_DISP_REF_INI,R0	;
	M_BRA	CPUA_TRD_SMP250			;


;	-------- 計測中---------
CPUA_TRD_SMP200:
	MOV.L	#_TRD_CNTL_INT_TIM,R5		;
	MOV.W	@R5,R0				;
	ADD	#1,R0				;
	MOV.L	#_TRD_SVP_SMPCYC_TIM,R1		;
	MOV.W	@R1,R2				;
	CMP/HS	R2,R0				;
	BF	CPUA_TRD_SMP220			;
	XOR	R0,R0				;
CPUA_TRD_SMP220:				;
	MOV.W	R0,@R5				;


CPUA_TRD_SMP250:
	MOV.L	#_TRD_CNTL_INT_FLG,R5		;
	MOV.W	@R5,R0				;
	TST	#BIT6,R0			;END?
	TST_BIT_OF CPUA_TRD_SMP280		;YES END(Flg ON 状態で終了する)
	M_BRA	CPUA_TRD_SMP900			;SMPLING-END
CPUA_TRD_SMP280					;YES END(Flg ON 状態で終了する)
	TST	#BIT1,R0			;
	TST_BIT_OF CPUA_TRD_SMP300		;
	M_BRA	CPUA_TRD_SMP500			;SMPLING

;	------------------------------------

CPUA_TRD_SMP300:



;	-------- 2018-11-11 [3/4]--------
	MOV.L	#_CB_COM345_ON,R1				;
	MOV.W	@R1,R0							;
	MOV.W	#BIT12,R4						;
	TST		R4,R0							;
	TST_BIT_ON CPUA_TRD_SMP315				;強制ﾄﾘｶﾞ ONｴｯｼﾞ

	MOV.L	#_CB_SEQ_CB_COM345,R1			;
	MOV.W	@R1,R0							;.BIT11
	MOV.W	#BIT11,R4						;
	TST		R4,R0							;画面ﾄﾘｶﾞ無視
	TST_BIT_ON CPUA_TRD_SMP320				;

	FAR_JSR	#_CPUA_SMP_TRIG_CHK,R0			;
	TST	R0,R0								;
	TST_BIT_OF CPUA_TRD_SMP320				;

CPUA_TRD_SMP315:

	MEM1_BIT0_TO_BIT7_ORSET MEM=_TRD_CNTL_INT_FLG,LG=W,BIT=BIT2,WKREG=R5			;bit-set

CPUA_TRD_SMP320:
;;2018-11-11
;;2018-11-11	FAR_JSR	#_CPUA_SMP_TRIG_CHK,R0								;
;;2018-11-11	TST	R0,R0										;
;;2018-11-11	TST_BIT_OF CPUA_TRD_SMP320								;
;;2018-11-11	MEM1_BIT0_TO_BIT7_ORSET MEM=_TRD_CNTL_INT_FLG,LG=W,BIT=BIT2,WKREG=R5			;bit-set
;;2018-11-11
;;2018-11-11CPUA_TRD_SMP320:

	MOV.L	#_TRD_CNTL_INT_TIM,R5		;
	MOV.W	@R5,R0				;
	TST	R0,R0				;
	TST_BIT_ON CPUA_TRD_SMP500		;

	MOV.L	#_TRD_CNTL_INT_PRE,R5			;
	MOV.W	@R5,R2					;
	MOV.L	#_TRD_INFO_SMPPRE,R1			;
	MOV.W	@R1,R4					;
	CMP/HS	R4,R2					;R4 =< R2
	BT	CPUA_TRD_SMP350				;
	ADD	#1,R2					;
	MOV.W	R2,@R5					;
	M_BRA	CPUA_TRD_SMP500				;ﾌﾟﾘﾄﾘｶﾞ中はﾄﾘｶﾞ条件は参照しない
CPUA_TRD_SMP350:
	MOV.L	#_TRD_CNTL_INT_FLG,R1
	MOV.W	@R1,R0
	TST	#BIT2,R0									;
	TST_BIT_OF CPUA_TRD_SMP500								;
	MEM1_BIT0_TO_BIT7_ORSET MEM=_TRD_CNTL_INT_FLG,LG=W,BIT=BIT1,WKREG=R5			;bit-set
	MEM1_BIT0_F_ORSET MEM=(_SQ_CBWK_TOP+_WKSQCB209),LG=W,BIT=(BIT13),WKRG1=R1,WKRG2=R4	;
	FAR_JSR	#_TRD_ADR_DISP_TRG,R0								;

;	--------- SMPLING -----------
CPUA_TRD_SMP500:
;;;;200-0925	FAR_JSR	#_CPUA_DATA_SMP_MAKE,R0		;(SMP2と共通化するため)

	FAR_JSR	#_CPUA_DATA_SMP_MAK1,R0		;2009-09-25

	MOV.L	#_TRD_CNTL_INT_TIM,R5		;
	MOV.W	@R5,R0				;
	TST	R0,R0				;
	TST_BIT_ON CPUA_TRD_SMP900		;

;	-------- 先にﾎﾟｲﾝﾀをﾘﾌﾚｯｼｭする-----
	FAR_JSR	#_TRD_ADR_DISP_REF1,R0		;

;	----------- ｻﾝﾌﾟﾘﾝｸﾞ----------------
	FAR_JSR	#_CPUA_DATA_SMP_TO_BUF,R0	;


;	--------- 終了チェック------------
	MOV.L	#_TRD_CNTL_INT_FLG,R5		;
	MOV.W	@R5,R0				;
	TST	#BIT1,R0			;
	TST_BIT_OF CPUA_TRD_SMP900		;

;	----- トリガON状態----------------
	MOV.L	#_TRD_CNTL_INT_DLY,R1		;遅延ｶｳﾝﾀ
	MOV.W	@R1,R0				;
	ADD	#1,R0				;
	MOV.W	R0,@R1				;
	MOV.L	#_TRD_INFO_SMPDLY,R1		;
	MOV.W	@R1,R2				;
	CMP/HS	R2,R0				;
	BF	CPUA_TRD_SMP900			;R2 =< R0(DLY)
;	--------終了-----------------------------
	MEM1_BIT0_TO_BIT7_ORSET MEM=_TRD_CNTL_INT_FLG,LG=W,BIT=BIT6,WKREG=R5	;bit-set
	XOR	R0,R0				;
	MOV.L	#_TRD_INFO_SMPSTS,R1		;
	MOV.W	R0,@R1				;
	MEM1_BIT0_F_ORSET MEM=(_SQ_CBWK_TOP+_WKSQCB209),LG=W,BIT=(BIT15),WKRG1=R1,WKRG2=R4	;END
	MEM1_BIT0_F_ADCLR MEM=(_SQ_CBWK_TOP+_WKSQCB209),LG=W,BIT=(~(BIT14+BIT13)),WKRG1=R1,WKRG2=R4	;
	M_BRA	CPUA_TRD_SMP900			;


CPUA_TRD_SMP900:
	FAR_JSR	#_TRD_ADR_DISP_REF0,R0

	MOV.L	#_SQ_CBWK_TOP+_WKSQCB209,R1	;
	MOV.W	@R1,R0				;
	MOV.L	#_TRD_SHT_SEQ_STS,R1		;
	MOV.W	R0,@R1				;

CPUA_TRD_SMP_EXT:

	SUB_END
	M_RTS

_TRD_ADR_DISP_REF_INI:
	SUB_START

	MOV.L	#_TRD_INFO_SMPTYP,R1	;
	MOV.L	#_TRD_PV_INFO_SMPTYP,R2	;
	MOV.W	@R1,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R2			;


	MOV.L	#_TRD_INFO_SMPMAX,R1
	MOV.L	#_TRD_PV_INFO_SMPMAX,R2
	MOV.W	@R1,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R2			;

	MOV.L	#_TRD_INFO_SMPDLY,R1
	MOV.L	#_TRD_PV_INFO_SMPDLY,R2
	MOV.W	@R1,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R2			;

	MOV.L	#_TRD_SVP_SMPCYC_TIM,R1
	MOV.L	#_TRD_PV_INFO_SMPCYC,R2
	MOV.W	@R1,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R2			;


	SUB_END
	M_RTS

;	------- 毎スキャン---
_TRD_ADR_DISP_REF0:
	SUB_START


	MOV.L	#_TRD_INFO_SMPSTS,R1
	MOV.L	#_TRD_PV_INFO_SMPSTS,R2
	MOV.W	@R1,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R2			;


	SUB_END
	M_RTS

_TRD_ADR_DISP_REF1:
	SUB_START
	MOV.L	#_TRD_INFO_SMPADR,R1		;
	MOV.L	#_TRD_PV_INFO_SMPADR,R2		;
	MOV.W	@R1,R0				;
	TREND_FORM_INTEL REG=R0,LG=B		;
	MOV.W	R0,@R2				;

	MOV.L	#_TRD_CNTL_INT_PNT,R1		;0CLRする必要はない
	MOV.L	#_TRD_PV_INFO_SMPNUM,R2		;
	MOV.W	@R1,R0				;
	TREND_FORM_INTEL REG=R0,LG=B		;
	MOV.W	R0,@R2				;
	SUB_END
	M_RTS

	
_TRD_ADR_DISP_TRG:
	SUB_START
	MOV.L	#_TRD_INFO_SMPADR,R1		;
	MOV.L	#_TRD_PV_INFO_TRGADR,R2		;
	MOV.W	@R1,R0				;
	TREND_FORM_INTEL REG=R0,LG=B		;
	MOV.W	R0,@R2				;

	MOV.L	#_TRD_CNTL_INT_PNT,R1		;0CLRする必要はない
	MOV.L	#_TRD_PV_INFO_TRGNUM,R2		;
	MOV.W	@R1,R0				;
	TREND_FORM_INTEL REG=R0,LG=B		;
	MOV.W	R0,@R2				;

	SUB_END
	M_RTS
	
;	*******************************************
;	***					***
;	***					***
;	***		項目に対する		***
;	***		ﾃﾞｰﾀを収集		***
;	***					***
;	*******************************************
;_TRD_SMP_PV1		.SRES	4*16		;64byte
;;;;;;;;;;;;2010-09-21_CPUA_DATA_SMP_MAKE
AAAAAAAA
	SUB_START

	FAR_JSR	#_CPUA_DATA_SMP_MAK1,R0		;20090925
	FAR_JSR	#_CPUA_DATA_SMP_MAK2,R0		;20090925

;;;20090925	MOV.L	#_TRD_INFO_SMPADR,R1		;
;;	MOV.W	@R1,R0				;
;;	MOV.L	#_TRD_SMP_PV_NUM,R4		;
;;	MOV.W	R0,@R4				;
;;
;;
;;	MOV.L	#_CTL_ENC360,R1					;360.0度//360ｴﾝｺｰﾀﾞ<360ｴﾝｺｰﾀﾞ>
;;	MOV.W	@R1,R2						;
;;	MOV.L	#_TRD_SMP_PV_ECDG,R4				;
;;	MOV.W	R2,@R4						;
;;
;;
;;	MOV.L	#_INC_ENC360,R1					;
;;	MOV.W	@R1,R2						;
;;	FAR_JSR	#_PV_LINK_DG_CHG_CLNK_DG1,R0			;
;;	MOV.L	#_TRD_SMP_PV_PGDG,R4			;
;;	MOV.W	R2,@R4					;
;;
;;
;;	FAR_JSR	#_TRD_SEQ_PV_MAKE,R0		;ANS R0
;;	MOV.L	#_TRD_SMP_PV_SEQ,R4		;
;;	MOV.W	R0,@R4				;
;;

	SUB_END
	M_RTS

;	----------20090925 分割 --------
_CPUA_DATA_SMP_MAK1
	SUB_START
	MOV.L	#_TRD_INFO_SMPADR,R1		;
	MOV.W	@R1,R0				;
	MOV.L	#_TRD_SMP_PV_NUM,R4		;
	MOV.W	R0,@R4				;

	SUB_END
	M_RTS


;	----------20090925 分割 --------
_CPUA_DATA_SMP_MAK2
	SUB_START

	MOV.L	#_CTL_ENC360,R1					;360.0度//360ｴﾝｺｰﾀﾞ<360ｴﾝｺｰﾀﾞ>
	MOV.W	@R1,R2						;
	MOV.L	#_TRD_SMP_PV_ECDG,R4				;
	MOV.W	R2,@R4						;


	MOV.L	#_INC_ENC360,R1					;
	MOV.W	@R1,R2						;
	FAR_JSR	#_PV_LINK_DG_CHG_CLNK_DG1,R0			;
	MOV.L	#_TRD_SMP_PV_PGDG,R4			;
	MOV.W	R2,@R4					;


	FAR_JSR	#_TRD_SEQ_PV_MAKE,R0		;ANS R0
	MOV.L	#_TRD_SMP_PV_SEQ,R4		;
	MOV.W	R0,@R4				;

	SUB_END
	M_RTS






;	***********************************
;	***				***
;	***				***
;	***				***
;	***********************************
;	1024
_TRD_SEQ_PV_MAKE:
	SUB_START
	MOV.L	#_SQ_TST_BIT,R9		;
	MOV.L	#_SEQAB_DP_TOP,R8		;
	MOV.L	#H'000003FF,R6		;1023.MAX
	XOR	R7,R7			;
	MOV.L	#_SVP_MOADR0_SQH,R5	;
	MOV.W	#D'16,R3		;

TRD_SEQ_PVMAK100:
	MOV.W	@R5+,R1			;ADR
	AND	R6,R1			;
	SHLL	R1			;2byte
	ADD	R8,R1			;SEQAB_DP_TOP.
	MOV.W	@R5+,R0			;BIT
	AND	#H'0F,R0			;
	SHLL	R0			;
	ADD	R9,R0			;
	MOV.W	@R0,R4			;BIT
	MOV.W	@R1,R2			;SEQ DATA LOAD
	TST	R4,R2			;OFF THEN 1
	ROTCR	R7			;
	ADD	#-1,R3			;
	TST	R3,R3			;
	TST_BIT_ON TRD_SEQ_PVMAK100	;
	NOT	R7,R0			;
	SWAP.W	R0,R0			;
	SUB_END
	M_RTS


_TRD_TRIG_SEQ:
	SUB_START
	MOV.L	#_SQ_TST_BIT,R9		;
	MOV.L	#_SEQAB_DP_TOP,R8		;
	MOV.L	#H'000003FF,R6		;1023.MAX
	XOR	R7,R7			;
	MOV.L	#_TRD_SVP_SMPSTR_SEH,R5	;

	MOV.W	@R5+,R1			;ADR
	AND	R6,R1			;
	SHLL	R1			;2byte
	ADD	R8,R1			;SEQAB_DP_TOP.
	MOV.W	@R5+,R0			;BIT
	AND	#H'0F,R0			;
	SHLL	R0			;
	ADD	R9,R0			;
	MOV.W	@R0,R4			;BIT
	MOV.W	@R1,R2			;SEQ DATA LOAD
	TST	R4,R2			;OFF THEN 1
	ROTCL	R7			;
	MOV	R7,R0			;
	XOR	#BIT0,R0		;

	SUB_END
	M_RTS



	.ALIGN 4
_SQ_TST_BIT
	.DATA.W		BIT0	;
	.DATA.W		BIT1	;
	.DATA.W		BIT2	;
	.DATA.W		BIT3	;
	.DATA.W		BIT4	;
	.DATA.W		BIT5	;
	.DATA.W		BIT6	;
	.DATA.W		BIT7	;
	.DATA.W		BIT8	;
	.DATA.W		BIT9	;
	.DATA.W		BIT10	;
	.DATA.W		BIT11	;
	.DATA.W		BIT12	;
	.DATA.W		BIT13	;
	.DATA.W		BIT14	;
	.DATA.W		BIT15	;


;	*******************************************
;	***					***
;	***					***
;	***		転送			***
;	***					***
;	***					***
;	*******************************************
_CPUA_DATA_SMP_TO_BUF
	SUB_START

	MOV.L	#_TRD_CNTL_INT_PNT,R1	;
	MOV.W	@R1,R0			;
	SHLL2	R0			;32byte
	SHLL2	R0			;32byte
	SHLL	R0			;32byte 2,4,8,16,32
	MOV.L	#_TREND_DATA_TOP,R5	;
	ADD	R0,R5			;

;	---- <01:NUM>2byte ---
	MOV.L	#_TRD_SMP_PV_NUM,R4	;OK
	MOV.W	@R4+,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	-------- DEBUG ---------
	MOV.L	#_SVP_MOADRF_SQH,R4	;
	MOV.W	@R4,R0			;
	MOV.W	#D'999,R4		;
	CMP/EQ	R4,R0			;
	BF	TRDBUG_MOV_SEL100		;
	FAR_JSR	#_SMP_DATA_MOVE_TYPE3,R0	;cpub
	M_BRA	TRDBUG_MOV_SELEND		;
	
TRDBUG_MOV_SEL100
	MOV.W	#D'998,R4			;
	CMP/EQ	R4,R0				;
	BF	TRDBUG_MOV_SEL200		;
	FAR_JSR	#_SMP_DATA_MOVE_TYPE2,R0	;cpub
	M_BRA	TRDBUG_MOV_SELEND		;

TRDBUG_MOV_SEL200

	MOV.W	#D'997,R4			;
	CMP/EQ	R4,R0				;
	BF	TRDBUG_MOV_SEL300		;
	FAR_JSR	#_SMP_DATA_MOVE_TYPE4,R0	;
	M_BRA	TRDBUG_MOV_SELEND		;

TRDBUG_MOV_SEL300
	MOV.W	#D'996,R4			;
	CMP/EQ	R4,R0				;
	BF	TRDBUG_MOV_SEL400		;
	FAR_JSR	#_SMP_DATA_MOVE_TYPE5,R0	;電力
	M_BRA	TRDBUG_MOV_SELEND		;

TRDBUG_MOV_SEL400
	MOV.W	#D'995,R4			;
	CMP/EQ	R4,R0				;
	BF	TRDBUG_MOV_SEL500		;
	FAR_JSR	#_SMP_DATA_MOVE_TYPE6,R0	;2011-02-19 速度ﾌｨﾙﾀなし　上昇無効異常チェック
	M_BRA	TRDBUG_MOV_SELEND		;

TRDBUG_MOV_SEL500


	MOV.W	#D'994,R4			;
	CMP/EQ	R4,R0				;
	BF	TRDBUG_MOV_SEL600		;
	FAR_JSR	#_SMP_DATA_MOVE_TYPE7,R0	;2011-08-01　型タッチ機能チェック
	M_BRA	TRDBUG_MOV_SELEND		;


TRDBUG_MOV_SEL600

	MOV.W	#D'993,R4			;
	CMP/EQ	R4,R0				;
	BF	TRDBUG_MOV_SEL700		;
	FAR_JSR	#_SMP_DATA_MOVE_TYPE8,R0	;2012-03-06 制動試験２
	M_BRA	TRDBUG_MOV_SELEND		;

TRDBUG_MOV_SEL700		;

;	========= 2012-09-26
	MOV.W	#D'992,R4			;
	CMP/EQ	R4,R0				;
	BF	TRDBUG_MOV_SEL710		;
	FAR_JSR	#_SMP_DATA_MOVE_TYPE9,R0	;2012-09-25 ｵｰﾊﾞﾋｰﾄ電流
	M_BRA	TRDBUG_MOV_SELEND		;

TRDBUG_MOV_SEL710		;

;	========= 2012-10-01[反転ﾁｪｯｸ]
	MOV.W	#D'991,R4			;
	CMP/EQ	R4,R0				;
	BF	TRDBUG_MOV_SEL720		;
	FAR_JSR	#_SMP_DATA_MOVE_TYPE10,R0	;
	M_BRA	TRDBUG_MOV_SELEND		;

TRDBUG_MOV_SEL720		;

;	========= 2012-10-19[角度関連]
	MOV.W	#D'990,R4			;
	CMP/EQ	R4,R0				;
	BF	TRDBUG_MOV_SEL730		;
	FAR_JSR	#_SMP_DATA_MOVE_TYPE11,R0	;
	M_BRA	TRDBUG_MOV_SELEND		;

TRDBUG_MOV_SEL730		;

;	========= 荷重
	MOV.W	#D'989,R4			;
	CMP/EQ	R4,R0				;
	BF	TRDBUG_MOV_SEL740		;
	FAR_JSR	#_SMP_DATA_MOVE_TYPE12,R0	;ｽｷｬﾝ→荷重=
	M_BRA	TRDBUG_MOV_SELEND		;

TRDBUG_MOV_SEL740		;


;	========= 2013-06-19[手動ﾊﾟﾙｻ]
	MOV.W	#D'988,R4			;
	CMP/EQ	R4,R0				;
	BF	TRDBUG_MOV_SEL750		;
	FAR_JSR	#_SMP_DATA_MOVE_TYPE13,R0	;
	M_BRA	TRDBUG_MOV_SELEND		;

TRDBUG_MOV_SEL750		;


	MOV.W	#D'987,R4			;
	CMP/EQ	R4,R0				;
	BF	TRDBUG_MOV_SEL760		;
	FAR_JSR	#_SMP_DATA_MOVE_TYPE14,R0	;(ｽﾗｲﾄﾞ自動調整)
	M_BRA	TRDBUG_MOV_SELEND		;

TRDBUG_MOV_SEL760		;

;	========= 2016-04-11 TYPE15,TYPE16 ﾌｨｰﾀﾞ用========
	MOV.W	#D'979,R4			;
	CMP/EQ	R4,R0				;
	BF	TRDBUG_MOV_SEL770_1		;
	FAR_JSR	#_SMP_DATA_MOVE_TYPE15,R0	;
	M_BRA	TRDBUG_MOV_SELEND		;

TRDBUG_MOV_SEL770_1		;


;	========= 2016-04-11 TYPE15,TYPE16 ﾌｨｰﾀﾞ用========
	MOV.W	#D'978,R4			;
	CMP/EQ	R4,R0				;
	BF	TRDBUG_MOV_SEL770_2		;
	FAR_JSR	#_SMP_DATA_MOVE_TYPE16,R0	;
	M_BRA	TRDBUG_MOV_SELEND		;

TRDBUG_MOV_SEL770_2		;



;	========= 2013-06-19[CPUA1]=====
	MOV.W	#D'910,R4			;
	CMP/EQ	R4,R0				;
	BF	TRDBUG_MOV_SEL800		;
	FAR_JSR	#_SMP_DATA_MOVE_SPECA,R0	;
	M_BRA	TRDBUG_MOV_SELEND		;

TRDBUG_MOV_SEL800		;

	MOV.W	#D'911,R4			;
	CMP/EQ	R4,R0				;
	BF	TRDBUG_MOV_SEL820		;
	FAR_JSR	#_SMP_DATA_MOVE_SPECB,R0	;
	M_BRA	TRDBUG_MOV_SELEND		;

TRDBUG_MOV_SEL820		;


;--------------[901~] KOMAS---------------------------
	MOV.W	#D'901,R4			;
	CMP/EQ	R4,R0				;
	BF	TRDBUG_MOV_SEL900		;
	FAR_JSR	#_SMP_DATA_MOVE_TYPEA1,R0	;
	M_BRA	TRDBUG_MOV_SELEND		;

TRDBUG_MOV_SEL900



	FAR_JSR	#_SMP_DATA_MOVE_TYPE1,R0	;STD

TRDBUG_MOV_SELEND





;	============================
	MOV.L	#_TRD_INFO_SMPADR,R5				;
	MOV.W	@R5,R2						;
	ADD	#1,R2						;
	MOV.W	R2,@R5						;

	MOV.L	#_TRD_INFO_SMPMAX,R1				;MAX.SET
	MOV.W	@R1,R4						;
	FAR_JSR	#_FPU_DIVS_32REG2_DIV_32REG4_R2_MOD_R1,R0	;R2...R1
	MOV.L	#_TRD_CNTL_INT_PNT,R6				;
	MOV.W	R1,@R6						;

	TST	R1,R1						;
	TST_BIT_ON CPUA_DATA_SMPTOBUF_100			;余り0以外 exit

	MOV.L	#_TRD_INFO_SMPADR,R5				;
	MOV.W	@R5,R2						;
	MOV.W	#D'29999,R4					;
	CMP/HS	R4,R2						;10000を超えた
	BF	CPUA_DATA_SMPTOBUF_100				;
	XOR	R2,R2						;
	MOV.W	R2,@R5						;余りがないからOK
CPUA_DATA_SMPTOBUF_100						;

	SUB_END
	M_RTS


;	*******************************************
;	***					***
;	***		標準			***
;	***					***
;	*******************************************
_SMP_DATA_MOVE_TYPE1
	SUB_START

;	---- <02:DIG>2byte ---
	MOV.L	#_TRD_SMP_PV_ECDG,R4	;OK
	MOV.W	@R4+,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <03:DIG>2byte ---
	MOV.L	#_TRD_SMP_PV_PGDG,R4	;OK
	MOV.W	@R4+,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <04:SPD>2byte ---
	MOV.L	#_PV_OUT_SPD_PER,R4	;OK
	MOV.W	@R4+,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <05:SPD>2byte ---
	MOV.L	#_PV_ENC_SPD_PER,R4	;OK
	MOV.W	@R4+,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;


;	---- <06:PRS 左>2byte ---
	MOV.L	#_PVPAB_KAJLIV_LFT,R4	;
	MOV.L	@R4+,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <07:PRS 右>2byte ---
	MOV.L	#_PVPAB_KAJLIV_RIH,R4	;
	MOV.L	@R4+,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <08:PRS 合計>2byte ---
	MOV.L	#_PVPAB_KAJLIV_TTL,R4	;
	MOV.L	@R4+,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <09:RENRA >4byte ---
	MOV.L	#_RNA_CTL_POS1,R4		;//制御位置 OK
	MOV.L	@R4,R0				;

	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L
	TREND_FORM_INTEL REG=R1,LG=B	;
	MOV.W	R1,@R5				;上位
	ADD	#2,R5				;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;下位
	ADD	#2,R5				;


;	---- <10:目標ﾊﾟﾙｽ>4byte ---
;;;;	MOV.L	#_LINK_SV_OBJ_ABSPLS+4,R4	;//制御位置 OK
	MOV.L	#_LINK_RL_OBJ_ABSPLS+4,R4	;
	MOV.L	@R4,R0				;
	MOV.L	#H'3FFFFFFF,R3			;
	AND	R3,R0				;
	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L
	TREND_FORM_INTEL REG=R1,LG=B		;
	MOV.W	R1,@R5				;上位
	ADD	#2,R5				;
	TREND_FORM_INTEL REG=R0,LG=B		;
	MOV.W	R0,@R5				;下位
	ADD	#2,R5				;


;	---- <11:実位置>4byte ---
	MOV.L	#_LINK_PV_ABSPLS+4,R4	;//制御位置 OK
	MOV.L	@R4,R0				;
	MOV.L	#H'3FFFFFFF,R3			;
	AND	R3,R0				;
	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L
	TREND_FORM_INTEL REG=R1,LG=B	;
	MOV.W	R1,@R5				;上位
	ADD	#2,R5				;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;下位
	ADD	#2,R5				;


;	---- <12:SEQ>2byte ---
	MOV.L	#_TRD_SMP_PV_SEQ,R4		;
	MOV.W	@R4,R0				;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;
	ADD	#2,R5				;

;	---- <13:AD>2byte ---
;;2006-09-30	MOV.L	#_PVP_POWER_MONI,R4		;
;;	MOV.W	@R4,R0				;
;;;;2006-12-05	MOV.L	#_WPV_AD_DATA,R4		;2006-09-30符号付
;;;;2006-12-05	MOV.W	@R4,R0				;
;;2010-09-21	MOV.L	#_PVP_POWER_MONI,R4		;2006-12-05(とりあえず)
;;2010-09-21	MOV.W	@R4,R0				;2006-12-05(とりあえず)


;	------- 2010-09-21-----------
	MOV.L	#_PVP_POWER_MONI,R4		;
	MOV.W	@R4,R0				;

	MOV.L	#_MON_SV_IVW_USED,R1		;//0:過負荷モニタ 5A:
	MOV.W	@R1,R4				;
	TST	R4,R4				;
	TST_BIT_OF SMP_DATA_MV_TYP1_100		;

	MOV.L	#_PV_IVW_DAT_DSP,R4		;[単位切り替え付き]
	MOV.L	@R4,R0				;

SMP_DATA_MV_TYP1_100:

	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;
	ADD	#2,R5				;

	SUB_END
	M_RTS


;	*******************************************
;	***					***
;	***		標準			***
;	***					***
;	*******************************************
	.ALIGN 4
_SMP_DATA_MOVE_TYPEA1
	SUB_START

;	---- <02:DIG>2byte ---
	MOV.L	#_TRD_SMP_PV_ECDG,R4	;OK
	MOV.W	@R4+,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <03:DIG>2byte ---
	MOV.L	#_TRD_SMP_PV_PGDG,R4	;OK
	MOV.W	@R4+,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <04:SPD>2byte ---
	MOV.L	#_PV_OUT_SPD_PER,R4	;OK
	MOV.W	@R4+,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <05:SPD>2byte ---
	MOV.L	#_PV_ENC_SPD_PER,R4	;OK
	MOV.W	@R4+,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;


;	---- <06:PRS 左>2byte ---
	MOV.L	#_PVPAB_KAJLIV_LFT,R4	;
	MOV.L	@R4+,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <07:PRS 右>2byte ---
	MOV.L	#_PVPAB_KAJLIV_RIH,R4	;
	MOV.L	@R4+,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <08:PRS 合計>2byte ---
	MOV.L	#_PVPAB_KAJLIV_TTL,R4	;
	MOV.L	@R4+,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <09:RENRA >4byte ---
	MOV.L	#_RNA_ABS_POS,R4		;//ABS位置
	MOV.L	@R4,R0				;

	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L
	TREND_FORM_INTEL REG=R1,LG=B	;
	MOV.W	R1,@R5				;上位
	ADD	#2,R5				;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;下位
	ADD	#2,R5				;


;	---- <10:目標ﾊﾟﾙｽ>4byte ---
	MOV.L	#_LINK_RL_OBJ_ABSPLS+4,R4	;
	MOV.L	@R4,R0				;
	MOV.L	#H'3FFFFFFF,R3			;
	AND	R3,R0				;
	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L
	TREND_FORM_INTEL REG=R1,LG=B		;
	MOV.W	R1,@R5				;上位
	ADD	#2,R5				;
	TREND_FORM_INTEL REG=R0,LG=B		;
	MOV.W	R0,@R5				;下位
	ADD	#2,R5				;


;	---- <11:実位置>4byte ---
	MOV.L	#_LINK_PV_ABSPLS+4,R4	;//制御位置 OK
	MOV.L	@R4,R0				;
	MOV.L	#H'3FFFFFFF,R3			;
	AND	R3,R0				;
	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L
	TREND_FORM_INTEL REG=R1,LG=B	;
	MOV.W	R1,@R5				;上位
	ADD	#2,R5				;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;下位
	ADD	#2,R5				;


;	---- <12:SEQ>2byte ---
	MOV.L	#_TRD_SMP_PV_SEQ,R4		;
	MOV.W	@R4,R0				;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;
	ADD	#2,R5				;

;	---- <13:AD>2byte ---
;	------- 2010-09-21-----------
	MOV.L	#_PVP_POWER_MONI,R4		;
	MOV.W	@R4,R0				;

	MOV.L	#_MON_SV_IVW_USED,R1		;//0:過負荷モニタ 5A:
	MOV.W	@R1,R4				;
	TST	R4,R4				;
	TST_BIT_OF SMP_DATA_MV_TYPA1_100	;

	MOV.L	#_PV_IVW_DAT_DSP,R4		;[単位切り替え付き]
	MOV.L	@R4,R0				;

SMP_DATA_MV_TYPA1_100:

	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;
	ADD	#2,R5				;

	SUB_END
	M_RTS




;	*******************************************
;	***					***
;	***	DBG2				***
;	***					***
;	*******************************************
	.IMPORT	_FREQ_SV_SPD		;
	.IMPORT	_LINK_RL_OBJ_ABSPLS	;20060919
	.IMPORT	_POSCTL_RL_SPD		;

	.IMPORT	_SH4_STEP_NO	;工程二重回路ﾁｪｯｸ用
	.IMPORT	_SH2_STEP_NO	;工程二重回路ﾁｪｯｸ用
	.IMPORT	_SH4_POS_STS1	;上記信号 SH4==> WRITE SH2 ==>BIT7 CLR
	.IMPORT	_SH2_POS_STS1	;上記信号 SH2==> WRITE SH4 ==>BIT7 CLR
	.IMPORT	_SH4_CMP_STS1	;(二重化異常信号 203同様      生)
	.IMPORT	_SH2_CMP_STS1	;(二重化異常信号 273同様      生)
	.IMPORT	_SH4_CMP_STS2	;(二重化異常信号 BIT0位置決中 生)
	.IMPORT	_SH2_CMP_STS2	;(二重化異常信号 BIT0位置決中 生)

	.IMPORT	_SH_SQ200_IN	;
	.IMPORT	_SH_CNTSTOP_FLG	;
	.IMPORT	_CMP_RECOVER_FLG
	
	.IMPORT	_CHK_LSI_LOAD_OUT_CNT	;2007-11-28
	.IMPORT	_POSLSI_DRIV_SHIN	;2007-11-28
	.IMPORT	_POSLSI_CHK_DLT		;
	.IMPORT	_POSLSI_CHK_CNT		;

	.IMPORT	_SH2_OBJ_ENC360		;ﾓﾆﾀ 2015-03-15
	.IMPORT	_SH2_PV_OUT_SPD_PER	;
	.IMPORT	_SH2_PV_ENC_SPD_PER	;

	.IMPORT	_W4_PV_CTL_KJYU_TTL_P	;制御値:2015-04-10

	.ALIGN 4
_SMP_DATA_MOVE_TYPE2
	SUB_START

;	---- <02:DIG>2byte ---
;;;;;	MOV.L	#_INC_ENC360,R4		;
	MOV.L	#_OBJ_ENC360,R4		;
	MOV.W	@R4,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <03:DIG>2byte ---
;;;	MOV.L	#_TRD_SMP_PV_PGDG,R4	;[CPUBのSV_OBJ]
	MOV.L	#_SH2_OBJ_ENC360,R4	;
	MOV.W	@R4,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <04:SPD>2byte ---
	MOV.L	#_PV_OUT_SPD_PER,R4	;
	MOV.W	@R4+,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <05:SPD>2byte ---
	MOV.L	#_SH2_PV_OUT_SPD_PER,R4	;
	MOV.W	@R4+,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;


;	---- <06:PRS 左>2byte ---
	MOV.L	#_PV_ENC_SPD_PER,R4	;
	MOV.W	@R4+,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <07:PRS 右>2byte ---
	MOV.L	#_SH2_PV_ENC_SPD_PER,R4	;
	MOV.W	@R4+,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <08:PRS 合計>2byte ---
	.IMPORT	_OUTPLS_DELT
;;;;;;;;	MOV.L	#_OUTPLS_DELT,R4	;SH4
;;;;;;;;;	MOV.W	@R4+,R0			;

	MOV.L	#_W4_PV_CTL_KJYU_TTL_P,R4	;//制御値=ﾌｨﾙﾀ値予定
	MOV.L	@R4+,R0				;

	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <09:RENRA >4byte ---
	MOV.L	#_LINK_PV_ABSPLS+4,R4			;//制御位置 OK
	MOV.L	@R4,R0					;
	MOV.L	#H'3FFFFFF,R3				;
	AND	R3,R0					;
	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L	;
	TREND_FORM_INTEL REG=R1,LG=B			;
	MOV.W	R1,@R5					;上位
	ADD	#2,R5					;
	TREND_FORM_INTEL REG=R0,LG=B			;
	MOV.W	R0,@R5					;下位
	ADD	#2,R5					;


;	---- <10:目標ﾊﾟﾙｽ>4byte ---
	MOV.L	#_LINK_RL_OBJ_ABSPLS+4,R4		;
	MOV.L	@R4,R0					;
	MOV.L	#H'3FFFFFF,R3				;
	AND	R3,R0					;
	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L	;
	TREND_FORM_INTEL REG=R1,LG=B			;
	MOV.W	R1,@R5					;上位
	ADD	#2,R5					;
	TREND_FORM_INTEL REG=R0,LG=B			;
	MOV.W	R0,@R5					;下位
	ADD	#2,R5					;


;	---- <11:実位置>4byte ---
	MOV.L	#_SH_POSCTL_RL_ABSPLS+8+4,R4		;CPUB
	MOV.L	@R4,R0					;
	MOV.L	#H'3FFFFFF,R3				;
	AND	R3,R0					;
	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L	;
	TREND_FORM_INTEL REG=R1,LG=B			;
	MOV.W	R1,@R5					;上位
	ADD	#2,R5					;
	TREND_FORM_INTEL REG=R0,LG=B			;
	MOV.W	R0,@R5					;下位
	ADD	#2,R5					;


;	---- <12:SEQ>2byte ---
	MOV.L	#_TRD_SMP_PV_SEQ,R4			;
	MOV.W	@R4,R0					;
	TREND_FORM_INTEL REG=R0,LG=B			;
	MOV.W	R0,@R5					;
	ADD	#2,R5					;

;	---- <13:AD>2byte ---
;;;;	MOV.L	#_CMP_RECOVER_FLG,R4			;
	MOV.L	#_INC_ENC360,R4				;
	MOV.W	@R4,R0					;
	TREND_FORM_INTEL REG=R0,LG=B			;
	MOV.W	R0,@R5					;
	ADD	#2,R5					;

	SUB_END
	M_RTS

;	*******************************************
;	***					***
;	***	DBG3				***
;	***					***
;	*******************************************
;	速度 1/8する 250,000HZまでは正で表示
;	2048*3000/60=1024000･･･1/4
;
;
;
;

	.IMPORT	_SH_POSCTL_SV_SPD	;.SRES	4*2	;[+0:SH4 +4:SH2] 
	.IMPORT	_SH_POSCTL_RL_SPD	;.SRES	4*2	;[+0:SH4 +4:SH2]OK
	.IMPORT	_SH_POSCTL_ACC		;.SRES	4*2	;
	.IMPORT	_SH_POSCTL_OFS		;.SRES	4*2	;
	.IMPORT	_SH_POSCTL_SV_ABSPLS	;.SRES	8*2	;
	.IMPORT	_SH_POSCTL_RL_ABSPLS	;.SRES	8*2	;OK
	.IMPORT	_SH_POSCTL_PV_ABSPLS	;.SRES	8*2	;OK
	.IMPORT	_SH_POSCTL_REST_PLS	;.SRES	4*2	;OK
	.IMPORT	_SH_POSCTL_CAL_REST	;.SRES	4*2	;演算(SV-PV)
	.IMPORT	_SH_POSCTL_HENSA	;.SRES	4*2	;演算(SV-PV)
	.IMPORT	_SH_POSCTL_LSIFREQ	;.SRES	4*2	;LSI


_SH4_4B		.EQU	0
_SH2_4B		.EQU	4
_SH4_8B		.EQU	0
_SH2_8B		.EQU	8

_SMP_DATA_MOVE_TYPE3
	SUB_START

;	---- <02:LSI>2byte ---
	MOV.L	#_SH_POSCTL_LSIFREQ+_SH4_4B,R4		;CPUA
	MOV.L	@R4+,R0				;
	TREND_FORM_INTEL REG=R0,LG=B		;
	MOV.W	R0,@R5				;
	ADD	#2,R5				;

;	---- <03:LSI>2byte ---
	MOV.L	#_SH_POSCTL_LSIFREQ+_SH2_4B,R4	;CPUB
	MOV.L	@R4+,R0				;
	TREND_FORM_INTEL REG=R0,LG=B		;
	MOV.W	R0,@R5				;
	ADD	#2,R5				;

;	---- <04:SPEED>2byte ---
	MOV.L	#_SH_POSCTL_RL_SPD+_SH4_4B,R4	;OK
	MOV.L	@R4+,R0				;
	SHLR2	R0				;1/8(2013-02-13)
	SHLR	R0				;
	TREND_FORM_INTEL REG=R0,LG=B		;
	MOV.W	R0,@R5				;
	ADD	#2,R5				;

;	---- <05:SPEED>2byte ---
	MOV.L	#_SH_POSCTL_RL_SPD+_SH2_4B,R4	;OK
	MOV.L	@R4+,R0				;
	SHLR2	R0				;1/8(2013-02-13)
	SHLR	R0				;
	TREND_FORM_INTEL REG=R0,LG=B		;
	MOV.W	R0,@R5				;
	ADD	#2,R5				;


;	---- <06:残りﾊﾟﾙｽ>2byte ---
	MOV.L	#_SH_POSCTL_REST_PLS+_SH4_4B,R4	;
	MOV.L	@R4+,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <07:残りﾊﾟﾙｽ>2byte ---
	MOV.L	#_SH_POSCTL_REST_PLS+_SH2_4B,R4	;
	MOV.L	@R4+,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <08:PRS 合計>2byte ---
;;	MOV.L	#_PVPAB_KAJLIV_TTL,R4			;
;;	MOV.L	@R4+,R0					;
	MOV.L	#_FREQ_SV_SPD,R4			;
	MOV.L	@R4,R0					;
	TREND_FORM_INTEL REG=R0,LG=B			;
	MOV.W	R0,@R5					;
	ADD	#2,R5					;

;	---- <09:RENRA >4byte ---
	MOV.L	#_LINK_PV_ABSPLS+4,R4			;//制御位置 OK
	MOV.L	@R4,R0					;
	MOV.L	#H'3FFFFFF,R3				;3F,FFFF
	AND	R3,R0					;

	KOBAYASHI_TOOL SRCREG=R0,LG=W			;
	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L	;
	TREND_FORM_INTEL REG=R1,LG=B			;
	MOV.W	R1,@R5					;上位
	ADD	#2,R5					;
	TREND_FORM_INTEL REG=R0,LG=B			;
	MOV.W	R0,@R5					;下位
	ADD	#2,R5					;


;	---- <10:目標ﾊﾟﾙｽ>4byte -------------------CPUA 目標----
	MOV.L	#_SH_POSCTL_RL_ABSPLS+_SH4_8B+4,R4		;20060919
	MOV.L	@R4,R0					;
	MOV.L	#H'3FFFFFF,R3				;
	AND	R3,R0					;
	KOBAYASHI_TOOL SRCREG=R0,LG=W			;
	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L	;
	TREND_FORM_INTEL REG=R1,LG=B			;
	MOV.W	R1,@R5					;上位
	ADD	#2,R5					;
	TREND_FORM_INTEL REG=R0,LG=B			;
	MOV.W	R0,@R5					;下位
	ADD	#2,R5					;


;	---- <11:実位置>4byte -----------------------CPUB 目標---
	MOV.L	#_SH_POSCTL_RL_ABSPLS+_SH2_8B+4,R4		;
	MOV.L	@R4,R0					;
	MOV.L	#H'3FFFFFF,R3				;
	AND	R3,R0					;
	KOBAYASHI_TOOL SRCREG=R0,LG=W			;
	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L	;
	TREND_FORM_INTEL REG=R1,LG=B			;
	MOV.W	R1,@R5					;上位
	ADD	#2,R5					;
	TREND_FORM_INTEL REG=R0,LG=B			;
	MOV.W	R0,@R5					;下位
	ADD	#2,R5					;

;	---- <12:REST>2byte ---
;;;;2013-02-08	MOV.L	#_SH_POSCTL_CAL_REST+_SH4_4B,R4		;
;;;;	MOV.L	@R4,R0				;

	MOV.L	#_TRD_SMP_PV_SEQ,R4		;SEQ
	MOV.W	@R4,R0				;

	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;
	ADD	#2,R5				;


;	---- <13:REST>2byte ---
;;;;2013-08-20	MOV.L	#_SH_POSCTL_CAL_REST+_SH2_4B,R4		;
;;;;2013-08-20	MOV.L	@R4,R0				;

	MOV.L	#_POSLSI_CHK_CNT,R4					;
	MOV.W	@R4,R0

	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;
	ADD	#2,R5				;

	SUB_END
	M_RTS


;	*******************************************
;	***					***
;	***		加速テスト		***
;	***					***
;	*******************************************
	.IMPORT	_ACC_MONITOR_DAT1
	.IMPORT	_ACC_MONITOR_DAT2
	.IMPORT	_ACC_MONITOR_DAT3
	.IMPORT	_ACC_MONITOR_DAT4
	.IMPORT	_ACC_MONITOR_DAT5
	.IMPORT	_ACC_MONITOR_DAT6
	.IMPORT	_ACC_MONITOR_DAT7
	.IMPORT	_ACC_MONITOR_DAT8

_SMP_DATA_MOVE_TYPE4
	SUB_START

;	---- <02:DIG>2byte ---
;;	MOV.L	#_TRD_SMP_PV_ECDG,R4	;OK
;;	MOV.W	@R4+,R0			;
	MOV.L	#_ACC_MONITOR_DAT2,R4	;
	MOV.L	@R4,R0
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <03:DIG>2byte ---
;;;	MOV.L	#_TRD_SMP_PV_PGDG,R4	;OK
;;	MOV.W	@R4+,R0			;
	MOV.L	#_ACC_MONITOR_DAT3,R4	;
	MOV.L	@R4,R0
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <04:SPD>2byte ---
;;	MOV.L	#_PV_OUT_SPD_PER,R4	;OK
;;	MOV.W	@R4+,R0			;

	MOV.L	#_OUTPLS_DELT,R4	;符号付
	MOV.W	@R4,R0			;

	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <05:SPD>2byte ---
;;	MOV.L	#_PV_ENC_SPD_PER,R4	;OK
;;	MOV.W	@R4+,R0			;

	.IMPORT	_ENCPLS_DELT		;
	MOV.L	#_ENCPLS_DELT,R4;	;符号付
	MOV.W	@R4,R0			;R2(dt2) 

	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;


;	---- <06:PRS 左>2byte ---
;;	MOV.L	#_PVPAB_KAJLIV_LFT,R4	;
;;	MOV.L	@R4+,R0			;
	MOV.L	#_ACC_MONITOR_DAT6,R4	;
	MOV.L	@R4,R0

	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <07:PRS 右>2byte ---
;;	MOV.L	#_PVPAB_KAJLIV_RIH,R4	;
;;	MOV.L	@R4+,R0			;
	MOV.L	#_ACC_MONITOR_DAT7,R4	;
	MOV.L	@R4,R0
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <08:PRS 合計>2byte ---
;;	MOV.L	#_PVPAB_KAJLIV_TTL,R4	;
;;	MOV.L	@R4+,R0			;
	MOV.L	#_ACC_MONITOR_DAT8,R4	;
	MOV.L	@R4,R0
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <09:RENRA >4byte ---
;;	MOV.L	#_RNA_CTL_POS1,R4		;//制御位置 OK
;;	MOV.L	@R4,R0				;
	MOV.L	#_ACC_MONITOR_DAT1,R4	;
	MOV.L	@R4,R0			;

	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L
	TREND_FORM_INTEL REG=R1,LG=B	;
	MOV.W	R1,@R5				;上位
	ADD	#2,R5				;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;下位
	ADD	#2,R5				;


;	---- <10:目標ﾊﾟﾙｽ>4byte ---
;;;;	MOV.L	#_LINK_SV_OBJ_ABSPLS+4,R4	;//制御位置 OK
	MOV.L	#_LINK_RL_OBJ_ABSPLS+4,R4	;
	MOV.L	@R4,R0				;
	MOV.L	#H'3FFFFFFF,R3			;
	AND	R3,R0				;
	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L
	TREND_FORM_INTEL REG=R1,LG=B		;
	MOV.W	R1,@R5				;上位
	ADD	#2,R5				;
	TREND_FORM_INTEL REG=R0,LG=B		;
	MOV.W	R0,@R5				;下位
	ADD	#2,R5				;


;	---- <11:実位置>4byte ---
	MOV.L	#_LINK_PV_ABSPLS+4,R4	;//制御位置 OK
	MOV.L	@R4,R0				;
	MOV.L	#H'3FFFFFFF,R3			;
	AND	R3,R0				;
	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L
	TREND_FORM_INTEL REG=R1,LG=B	;
	MOV.W	R1,@R5				;上位
	ADD	#2,R5				;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;下位
	ADD	#2,R5				;


;	---- <12:SEQ>2byte ---
	MOV.L	#_TRD_SMP_PV_SEQ,R4		;
	MOV.W	@R4,R0				;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;
	ADD	#2,R5				;

;	---- <13:AD>2byte ---
;;	MOV.L	#_PVP_POWER_MONI,R4		;
;;	MOV.W	@R4,R0				;
	MOV.L	#_ACC_MONITOR_DAT4,R4	;
	MOV.L	@R4,R0

	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;
	ADD	#2,R5				;

	SUB_END
	M_RTS

;	*******************************************
;	***					***
;	***		電力テスト		***
;	***					***
;	*******************************************

_SMP_DATA_MOVE_TYPE5
	SUB_START

;	---- <02:DIG>2byte ---
;;;	MOV.L	#_TRD_SMP_PV_ECDG,R4	;OK[360ｴﾝｺｰﾀﾞ]
;;;	MOV.W	@R4+,R0			;
	MOV.L	#_PV_AD_DATA,R4		;0~1000= 0V~10.00V
	MOV.W	@R4,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <03:DIG>2byte ---
;;;;	MOV.L	#_TRD_SMP_PV_PGDG,R4	;OK
;;;;	MOV.W	@R4+,R0			;

	MOV.L	#_PVP_POWER_KWH,R4	;***.** kwh
	MOV.W	@R4,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <04:SPD>2byte ---
;;	MOV.L	#_PV_OUT_SPD_PER,R4	;OK
;;	MOV.W	@R4+,R0			;

	MOV.L	#_OUTPLS_DELT,R4	;符号付
	MOV.W	@R4,R0			;

	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <05:SPD>2byte ---
;;	MOV.L	#_PV_ENC_SPD_PER,R4	;OK
;;	MOV.W	@R4+,R0			;

	MOV.L	#_ENCPLS_DELT,R4;	;符号付
	MOV.W	@R4,R0			;R2(dt2) 

	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;


;	---- <06:PRS 左>2byte ---
;;	MOV.L	#_PVPAB_KAJLIV_LFT,R4	;
;;	MOV.L	@R4+,R0			;

;;;	MOV.L	#_PVP_EPM_SYOHI,R4	;消費 0.01kw 固定

	MOV.L	#_CYC_IVW_PV2,R4	;確定ﾃﾞｰﾀ 0.01kw 回生
	MOV.W	@R4,R0

	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <07:PRS 右>2byte ---
;;	MOV.L	#_PVPAB_KAJLIV_RIH,R4	;
;;	MOV.L	@R4+,R0			;

;;;	MOV.L	#_PVP_EPM_KAISE,R4	;回生 0.01kw 固定[+ data]

	MOV.L	#_CYC_IVWKAI_PV2,R4	;確定ﾃﾞｰﾀ 0.01kw 回生
	MOV.W	@R4,R0			;

	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <08:PRS 合計>2byte ---
;;	MOV.L	#_PVPAB_KAJLIV_TTL,R4	;
;;	MOV.L	@R4+,R0			;
	MOV.L	#_CYC_IVWPULS_PV2,R4	;
	MOV.W	@R4,R0			;

	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <09:RENRA >4byte ---
;;	MOV.L	#_RNA_CTL_POS1,R4		;//制御位置 OK
;;	MOV.L	@R4,R0				;
	MOV.L	#_PV_IVW_DAT_INP,R4		;+/- 10w data
	MOV.L	@R4,R0				;

	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L
	TREND_FORM_INTEL REG=R1,LG=B	;
	MOV.W	R1,@R5				;上位
	ADD	#2,R5				;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;下位
	ADD	#2,R5				;


;	---- <10:目標ﾊﾟﾙｽ>4byte ---
;;;	MOV.L	#_LINK_RL_OBJ_ABSPLS+4,R4	;
;;;	MOV.L	@R4,R0				;
;;;	MOV.L	#H'3FFFFFFF,R3			;
;;;	AND	R3,R0				;

	MOV.L	#_CYC_SEK_WORK+4,R4		;有効1sec
	MOV.L	@R4,R0				;

	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L
	TREND_FORM_INTEL REG=R1,LG=B		;
	MOV.W	R1,@R5				;上位
	ADD	#2,R5				;
	TREND_FORM_INTEL REG=R0,LG=B		;
	MOV.W	R0,@R5				;下位
	ADD	#2,R5				;


;	---- <11:実位置>4byte ---
;;;;	MOV.L	#_LINK_PV_ABSPLS+4,R4	;//制御位置 OK
;;;;	MOV.L	@R4,R0				;
;;;;	MOV.L	#H'3FFFFFFF,R3			;
;;;;	AND	R3,R0				;

	MOV.L	#_PV_TRQ_NM_DAT,R4		;+/- 1w data
	MOV.L	@R4,R0				;[+/-AD相当]

	MOV.L	#_CYC_SEK_KAIWORK+4,R4		;有効1sec
	MOV.L	@R4,R0				;

	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L
	TREND_FORM_INTEL REG=R1,LG=B	;
	MOV.W	R1,@R5				;上位
	ADD	#2,R5				;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;下位
	ADD	#2,R5				;


;	---- <12:SEQ>2byte ---
	MOV.L	#_TRD_SMP_PV_SEQ,R4		;
	MOV.W	@R4,R0				;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;
	ADD	#2,R5				;

;	---- <13:AD>2byte ---
;;	MOV.L	#_PVP_POWER_MONI,R4		;
;;	MOV.W	@R4,R0				;

	MOV.L	#_PV_IVW_DAT_DSP,R4		;[単位切り替え]
	MOV.L	@R4,R0				;


	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;
	ADD	#2,R5				;

	SUB_END
	M_RTS





	.IMPORT	_BBN_MESURE_SSPD
	.IMPORT	_BBN_MESURE_PSPD
	.IMPORT	_BBN_MESURE_DLY_SSPD	;
	.IMPORT	_ACCERR_ACC_HENSA	;
	.IMPORT	_ACCERR_ERR_CNT		;

;	--------- 実使用データ
	.IMPORT	_ACCERR_ACC_OBJ				;
	.IMPORT	_ACCERR_ACC_PV				;


	.IMPORT	_RNA_BBN_MESURE_SSPD		;
	.IMPORT	_RNA_BBN_MEUSRE_ACC		;


	.IMPORT	_SETX_UPERR_ERRCMPDAT;

;	*******************************************************************
;	***								***
;	***	上昇無効速度デバック
;	***	995							***
;	*******************************************************************

	.MACRO	DAT_R0_P
	CMP/PZ	R0
	BT	CAL10\@		;
	NEG	R0,R0		;
CAL10\@:
	.ENDM

	.ALIGN 4

	.IMPORT	_DEBUG_ENC360_STS	;2012-05-07

_SMP_DATA_MOVE_TYPE6
	SUB_START

;	---- <02:DIG>2byte ---
;;;;	MOV.L	#_TRD_SMP_PV_ECDG,R4	;OK
;;;;	MOV.W	@R4+,R0			;

	MOV.L	#_OBJ_ENC360,R4		;2012-05-07
	MOV.W	@R4,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <03:DIG>2byte ---
	MOV.L	#_TRD_SMP_PV_PGDG,R4	;OK
	MOV.W	@R4+,R0			;


	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <04:SPD>2byte ---
	MOV.L	#_PV_OUT_SPD_PER,R4	;OK
	MOV.W	@R4+,R0			;0.01%

;;;	MOV.L	#_OUTPLS_DELT,R4	;符号付
;;;	MOV.W	@R4,R0			;

	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <05:SPD>2byte ---
	MOV.L	#_PV_ENC_SPD_PER,R4	;OK
	MOV.W	@R4+,R0			;0.01%

;;;	MOV.L	#_ENCPLS_DELT,R4;	;符号付
;;;	MOV.W	@R4,R0			;R2(dt2) 

	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;


;	---- <06:PRS 左>2byte ---
;;;	MOV.L	#_PVPAB_KAJLIV_LFT,R4	;
;;;	MOV.L	@R4+,R0			;

	MOV.L	#_BBN_MESURE_SSPD,R4	;//4byte SV-POS[2個だけ][[[[[[[[[[[[[[]]]]]]]]]]]
	MOV.L	@R4,R0			;
	DAT_R0_P


	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <07:PRS 右>2byte ---
;;;	MOV.L	#_PVPAB_KAJLIV_RIH,R4	;
;;;	MOV.L	@R4+,R0			;

	MOV.L	#_BBN_MESURE_PSPD,R4		;//4byte SV-POS[2個だけ][[[[[[[[[[[[[[[[]]]]]]]]]]]]
	MOV.L	@R4,R0
	DAT_R0_P

	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <08:PRS 合計>2byte ---
;;;	MOV.L	#_PVPAB_KAJLIV_TTL,R4	;
;;;	MOV.L	@R4+,R0			;

	MOV.L	#_BBN_MESURE_DLY_SSPD,R4	;目標からの遅れ目標
	MOV.L	@R4,R0
	DAT_R0_P


	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <09:RENRA >4byte ---
	MOV.L	#_RNA_CTL_POS1,R4		;//制御位置 OK
	MOV.L	@R4,R0				;

	MOV.L	#_ACCERR_ACC_HENSA,R4			;
	MOV.L	@R4,R0

	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L
	TREND_FORM_INTEL REG=R1,LG=B	;
	MOV.W	R1,@R5				;上位
	ADD	#2,R5				;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;下位
	ADD	#2,R5				;


;	---- <10:目標ﾊﾟﾙｽ>4byte ---
	MOV.L	#_LINK_RL_OBJ_ABSPLS+4,R4	;
	MOV.L	@R4,R0				;

	MOV.L	#H'3FFFFFFF,R3			;
	AND	R3,R0				;
	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L
	TREND_FORM_INTEL REG=R1,LG=B		;
	MOV.W	R1,@R5				;上位
	ADD	#2,R5				;
	TREND_FORM_INTEL REG=R0,LG=B		;
	MOV.W	R0,@R5				;下位
	ADD	#2,R5				;


;	---- <11:実位置>4byte ---
	MOV.L	#_LINK_PV_ABSPLS+4,R4	;//制御位置 OK
	MOV.L	@R4,R0				;

;;;;;	MOV.L	#_BBN_MESURE_SSPD,R4		;//4byte SV-POS[2個だけ][[[[[[[[[[[[[[]]]]]]]]]]]
;;;;;	MOV.L	@R4,R0				;

	MOV.L	#H'3FFFFFFF,R3			;
	AND	R3,R0				;
	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L
	TREND_FORM_INTEL REG=R1,LG=B	;
	MOV.W	R1,@R5				;上位
	ADD	#2,R5				;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;下位
	ADD	#2,R5				;


;	---- <12:SEQ>2byte ---
	MOV.L	#_TRD_SMP_PV_SEQ,R4		;
	MOV.W	@R4,R0				;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;
	ADD	#2,R5				;

;	---- <13:AD>2byte ---

;	------- 2010-09-21-----------
	MOV.L	#_SETX_UPERR_ERRCMPDAT,R4	;
	MOV.L	@R4,R0				;

;;;;;;;;;	MOV.L	#_DEBUG_ENC360_STS,R4		;2012-05-07
;;;;;;;;;	MOV.W	@R4,R0				;


	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;
	ADD	#2,R5				;

	SUB_END
	M_RTS



;	*******************************************************************
;	***								***
;	***	金型タッチデバック
;	***								***
;	*******************************************************************
;;;	MOV.L	#_BBN_MESURE_PSPD,R14		;実速度
;;;	MOV.L	#_BBN_MESURE_SSPD,R14		;目標速度
;;;	MOV.L	#_BBN_MESURE_DLY_SSPD,R1	;目標からの遅れ目標
;;;	MOV.L	#_ACCERR_ACC_HENSA,R1			;
;;;	MOV.L	R2,@R1					;
;;;	MOV.L	#_ACCERR_ERR_CNT,R1			;
;;;	MOV.W	@R1,R0					;



	.ALIGN 4
_SMP_DATA_MOVE_TYPE7
	SUB_START

;	---- <02:DIG>2byte ---
;;;;;;;	MOV.L	#_TRD_SMP_PV_ECDG,R4	;OK
	MOV.L	#_CAM_NOW_DIG,R4
	MOV.W	@R4+,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <03:DIG>2byte ---
	MOV.L	#_TRD_SMP_PV_PGDG,R4	;OK
	MOV.W	@R4+,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <04:SPD>2byte ---
	MOV.L	#_PV_OUT_SPD_PER,R4	;OK
	MOV.W	@R4+,R0			;0.01%
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <05:SPD>2byte ---
	MOV.L	#_PV_ENC_SPD_PER,R4	;OK
	MOV.W	@R4+,R0			;0.01%
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;


;	---- <06:PRS 左>2byte ---
;;;;;;;;;2014-09-04	MOV.L	#_PVPAB_KAJLIV_LFT,R4	;
;;;;;;;;;2014-09-04	MOV.L	@R4+,R0			;
	MOV.L	#_INC_ENC360,R4			;
	MOV.W	@R4,R0				;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <07:PRS 右>2byte ---
;;;;;;;	MOV.L	#_PVPAB_KAJLIV_RIH,R4	;
;;;;;;;	MOV.L	@R4+,R0			;
	MOV.L	#_OBJ_ENC360,R4		;2014-09-04
	MOV.W	@R4,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <08:PRS 合計>2byte ---
	MOV.L	#_PVPAB_KAJLIV_TTL,R4	;
	MOV.L	@R4+,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <09:RENRA >4byte ---
	MOV.L	#_RNA_CTL_POS1,R4		;//制御位置 OK
	MOV.L	@R4,R0				;
	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L
	TREND_FORM_INTEL REG=R1,LG=B	;
	MOV.W	R1,@R5				;上位
	ADD	#2,R5				;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;下位
	ADD	#2,R5				;


;	---- <10:目標ﾊﾟﾙｽ>4byte ---
;;;;	MOV.L	#_LINK_RL_OBJ_ABSPLS+4,R4	;
	MOV.L	#_RNA_BBN_MEUSRE_ACC,R4		;
	MOV.L	@R4,R0				;0.01mm/s 1000.00mm/s

;;;;;	MOV.L	#H'3FFFFFFF,R3			;
;;;;;	AND	R3,R0				;
	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L
	TREND_FORM_INTEL REG=R1,LG=B		;
	MOV.W	R1,@R5				;上位
	ADD	#2,R5				;
	TREND_FORM_INTEL REG=R0,LG=B		;
	MOV.W	R0,@R5				;下位
	ADD	#2,R5				;


;	---- <11:実位置>4byte ---
;;;;;	MOV.L	#_LINK_PV_ABSPLS+4,R4		;//制御位置 OK
	MOV.L	#_RNA_BBN_MESURE_SSPD,R4	;
	MOV.L	@R4,R0				;

;;;;;	MOV.L	#H'3FFFFFFF,R3			;
;;;;;	AND	R3,R0				;
	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L
	TREND_FORM_INTEL REG=R1,LG=B	;
	MOV.W	R1,@R5				;上位
	ADD	#2,R5				;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;下位
	ADD	#2,R5				;


;	---- <12:SEQ>2byte ---
	MOV.L	#_TRD_SMP_PV_SEQ,R4		;
	MOV.W	@R4,R0				;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;
	ADD	#2,R5				;

;	---- <13:AD>2byte ---

;	------- 2010-09-21-----------
	MOV.L	#_PVP_POWER_MONI,R4		;
	MOV.W	@R4,R0				;

	MOV.L	#_MON_SV_IVW_USED,R1		;//0:過負荷モニタ 5A:
	MOV.W	@R1,R4				;
	TST	R4,R4				;
	TST_BIT_OF SMP_DATA_MV_TYP7_100		;

	MOV.L	#_PV_IVW_DAT_DSP,R4		;[単位切り替え付き]
	MOV.L	@R4,R0				;

SMP_DATA_MV_TYP7_100:

	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;
	ADD	#2,R5				;

	SUB_END
	M_RTS








;	*******************************************************************
;	***								***
;	***	制動試験２デバック
;	***								***
;	*******************************************************************
	.ALIGN 4
;//	***************************************************
;//	***		制動試験監視２			***
;//	***		2012-03-06			***
;//	***************************************************
;//	加速度算出
	.IMPORT	_BKTMCL_ACCDAT		;
	.IMPORT	_BKTMCL_ACCDAT_UNIT	;// PLS/S/S

	.IMPORT	_BKTMCL_TOTAL_TIMPV	;//
;//	.IMPORT	_BKTMCL_BBNFLT_TIMPV	;//演算時Td測定
	.IMPORT	_BKTMCL_TMDEF_PV		;//固定時
	.IMPORT	_BKTMCL_STOP_TIMPV	;ﾃﾞﾊﾞｯｸのため
	.IMPORT	_BKTMCL_SETX_TMDEF	;//T0演算に使用(計算結果または固定)
;//	S4b	WPAR_BKTMCL_ACCCK	;//pls/s/s

	.IMPORT	_BKTMCL_BRKSTR_SPD	;//PLS/S
	.IMPORT	_BKTMCL_BRKSTX_SPD	;//PLS/S 2012-03-26
	.IMPORT	_BKTMCL_BRKSTP_SPD	;//PLS/S
	.IMPORT	_BKTMCL_BRK_TIMPV	;//最大速度時のﾌﾞﾚｰｷ時間


	.ALIGN 4
_SMP_DATA_MOVE_TYPE8
	SUB_START

;	---- <02:DIG>2byte ---
	MOV.L	#_TRD_SMP_PV_ECDG,R4	;OK
	MOV.W	@R4+,R0			;

	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <03:DIG>2byte ---
	MOV.L	#_TRD_SMP_PV_PGDG,R4	;OK
	MOV.W	@R4+,R0			;


	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <04:SPD>2byte ---
;;;;	MOV.L	#_PV_OUT_SPD_PER,R4	;OK
;;;;	MOV.W	@R4+,R0			;0.01%

	MOV.L	#_BKTMCL_ACCDAT,R4	;2012-03-19
	MOV.L	@R4,R0			;
	SHAR	R0			;1/2
	SHAR	R0			;1/4
	SHAR	R0			;1/8
	DAT_R0_P
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <05:SPD>2byte ---
	MOV.L	#_PV_ENC_SPD_PER,R4	;OK
	MOV.W	@R4+,R0			;0.01%
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;


;	---- <06:PRS 左>2byte ---
;;;	MOV.L	#_PVPAB_KAJLIV_LFT,R4	;
;;;	MOV.L	@R4+,R0			;

	MOV.L	#_BKTMCL_TOTAL_TIMPV,R4	;
	MOV.W	@R4,R0

	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <07:PRS 右>2byte ---
;;;	MOV.L	#_PVPAB_KAJLIV_RIH,R4	;
;;;	MOV.L	@R4+,R0			;

	MOV.L	#_BKTMCL_SETX_TMDEF,R4	;
	MOV.W	@R4,R0

	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <08:PRS 合計>2byte ---
;;;	MOV.L	#_PVPAB_KAJLIV_TTL,R4	;
;;;	MOV.L	@R4+,R0			;

	MOV.L	#_BKTMCL_BRK_TIMPV,R4	;//最大速度時のﾌﾞﾚｰｷ時間
	MOV.W	@R4,R0			;

	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <09:RENRA >4byte ---
;;	MOV.L	#_RNA_CTL_POS1,R4		;//制御位置 OK
;;	MOV.L	@R4,R0				;

	MOV.L	#_BKTMCL_ACCDAT_UNIT,R4		;// PLS/S/S
	MOV.L	@R4,R0				;

	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L
	TREND_FORM_INTEL REG=R1,LG=B	;
	MOV.W	R1,@R5				;上位
	ADD	#2,R5				;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;下位
	ADD	#2,R5				;


;	---- <10:目標ﾊﾟﾙｽ>4byte ---
;;;	MOV.L	#_LINK_RL_OBJ_ABSPLS+4,R4	;
;;	MOV.L	@R4,R0				;
	MOV.L	#_BKTMCL_BRKSTP_SPD,R4		;//PLS/Sブレーキ制動停止速度2012-03-19
	MOV.L	@R4,R0				;

	MOV.L	#H'3FFFFFFF,R3			;
	AND	R3,R0				;
	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L
	TREND_FORM_INTEL REG=R1,LG=B		;
	MOV.W	R1,@R5				;上位
	ADD	#2,R5				;
	TREND_FORM_INTEL REG=R0,LG=B		;
	MOV.W	R0,@R5				;下位
	ADD	#2,R5				;


;	---- <11:実位置>4byte ---
;;;	MOV.L	#_LINK_PV_ABSPLS+4,R4	;//制御位置 OK
;;;	MOV.L	@R4,R0				;

;;;;	MOV.L	#_BKTMCL_BRKSTR_SPD,R4	;//PLS/S
	MOV.L	#_BKTMCL_BRKSTX_SPD,R4	;2012-03-26
	MOV.L	@R4,R0			;

	MOV.L	#H'3FFFFFFF,R3			;
	AND	R3,R0				;
	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L
	TREND_FORM_INTEL REG=R1,LG=B	;
	MOV.W	R1,@R5				;上位
	ADD	#2,R5				;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;下位
	ADD	#2,R5				;


;	---- <12:SEQ>2byte ---
	MOV.L	#_TRD_SMP_PV_SEQ,R4		;
	MOV.W	@R4,R0				;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;
	ADD	#2,R5				;

;	---- <13:AD>2byte ---

;;;	MOV.L	#_PVP_POWER_MONI,R4		;
;;;	MOV.W	@R4,R0				;

;;	MOV.L	#_BKTMCL_BBNFLT_TIMPV,R4	;//演算時Td測定
	MOV.L	#_BKTMCL_STOP_TIMPV,R4		;ﾃﾞﾊﾞｯｸのため
	MOV.W	@R4,R0				;


	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;
	ADD	#2,R5				;

	SUB_END
	M_RTS


;	*******************************************
;	***					***
;	***		発生電流		***
;	***		2012-09-25		***
;	***					***
;	*******************************************
;;;	.IMPORT	_SETX_OVERH_LNGTH	;//1mm Main->OVERH SOFT
;;;	.IMPORT	_SETX_OVERH_AMP		;//OVERH->AMP閾値

	.ALIGN 4
_SMP_DATA_MOVE_TYPE9
	SUB_START

;	---- <02:DIG>2byte ---
;;;	MOV.L	#_OBJ_ENC360,R4		;2012-09-25
;;;	MOV.W	@R4,R0			;

	MOV.L	#_SETX_OVERH_LNGTH,R4	;//1mm Main->OVERH SOFT
	MOV.L	@R4,R0			;
	ADD	R0,R0
	MOV	R0,R4
	ADD	R0,R0
	ADD	R0,R0
	ADD	R4,R0

	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <03:DIG>2byte ---
	MOV.L	#_TRD_SMP_PV_PGDG,R4	;
	MOV.W	@R4+,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <04:SPD>2byte ---
;;;	MOV.L	#_PV_OUT_SPD_PER,R4	;OK
;;;	MOV.W	@R4+,R0			;
	MOV.L	#_CYC2_SEK_TIME,R4
	MOV.L	@R4,R0			;

	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <05:SPD>2byte ---
	MOV.L	#_PV_ENC_SPD_PER,R4	;OK
	MOV.W	@R4+,R0			;


	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;


;	---- <06:PRS 左>2byte ---
;;	MOV.L	#_PVPAB_KAJLIV_LFT,R4	;
;;	MOV.L	@R4+,R0			;

	MOV.L	#_SETX_OVERH_AMP,R4	;//OVERH->AMP閾値
	MOV.L	@R4,R0			;


	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <07:PRS 右>2byte ---
;;	MOV.L	#_PVPAB_KAJLIV_RIH,R4	;
;;	MOV.L	@R4+,R0			;

	MOV.L	#_PV_OVERH_AMP_AVL,R4	;平均値
	MOV.L	@R4,R0			;

	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <08:PRS 合計>2byte ---
	MOV.L	#_PVPAB_KAJLIV_TTL,R4	;
	MOV.L	@R4+,R0			;

	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <09:RENRA >4byte ---
	MOV.L	#_RNA_CTL_POS1,R4		;//制御位置 OK
	MOV.L	@R4,R0				;

	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L
	TREND_FORM_INTEL REG=R1,LG=B	;
	MOV.W	R1,@R5				;上位
	ADD	#2,R5				;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;下位
	ADD	#2,R5				;


;	---- <10:目標ﾊﾟﾙｽ>4byte ---
;;;	MOV.L	#_LINK_RL_OBJ_ABSPLS+4,R4	;
;;;	MOV.L	@R4,R0				;
;;;	MOV.L	#H'3FFFFFFF,R3			;
;;;	AND	R3,R0				;

	MOV.L	#_PV_ABS_OVERH_TRQSEK+2*4,R4	;
	MOV.L	@R4,R0				;
	MOV.L	#H'7FFFFFFF,R3			;
	AND	R3,R0				;


	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L
	TREND_FORM_INTEL REG=R1,LG=B		;
	MOV.W	R1,@R5				;上位
	ADD	#2,R5				;
	TREND_FORM_INTEL REG=R0,LG=B		;
	MOV.W	R0,@R5				;下位
	ADD	#2,R5				;


;	---- <11:実位置>4byte ---
	MOV.L	#_LINK_PV_ABSPLS+4,R4	;//制御位置 OK
	MOV.L	@R4,R0				;
	MOV.L	#H'3FFFFFFF,R3			;
	AND	R3,R0				;

	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L
	TREND_FORM_INTEL REG=R1,LG=B	;
	MOV.W	R1,@R5				;上位
	ADD	#2,R5				;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;下位
	ADD	#2,R5				;


;	---- <12:SEQ>2byte ---
	MOV.L	#_TRD_SMP_PV_SEQ,R4		;
	MOV.W	@R4,R0				;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;
	ADD	#2,R5				;

;	---- <13:AD>2byte ---
;;	MOV.L	#_PVP_POWER_MONI,R4		;
;;	MOV.W	@R4,R0				;

;;	MOV.L	#_PV_IVW_DAT_DSP,R4		;[単位切り替え]
;;	MOV.L	@R4,R0				;

	MOV.L	#_PV_ABS_OVERH_TRQ,R4		;
	MOV.L	@R4,R0				;


	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;
	ADD	#2,R5				;

	SUB_END
	M_RTS


;	*******************************************
;	***					***
;	***		反転ﾁｪｯｸ		***
;	***					***
;	*******************************************
	.IMPORT	_POSCTL_SV_OFS_SPD	;
	.IMPORT	_CALC_FULCLS_MXPLS	;

	.ALIGN 4
_SMP_DATA_MOVE_TYPE10
	SUB_START

;	---- <02:DIG>2byte ---
	MOV.L	#_OBJ_ENC360,R4		;目標角度(PG)
	MOV.W	@R4,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <03:DIG>2byte ---
	MOV.L	#_TRD_SMP_PV_PGDG,R4	;実角度(PG)
	MOV.W	@R4+,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <04:SPD>2byte ---
	MOV.L	#_OUTPLS_DELT,R4	;符号付
	MOV.W	@R4,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <05:SPD>2byte ---
	MOV.L	#_ENCPLS_DELT,R4;	;符号付
	MOV.W	@R4,R0			;R2(dt2) 
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;


;	---- <06:PRS 左>2byte ---
;;;;	MOV.L	#_PVPAB_KAJLIV_LFT,R4	;*
;;;;	MOV.L	@R4+,R0			;
	MOV.L	#_POSCTL_SV_OFS_SPD,R4		;
	MOV.L	@R4+,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <07:PRS 右>2byte ---
;;;;	MOV.L	#_PVPAB_KAJLIV_RIH,R4	;*
;;;	MOV.L	@R4+,R0			;
	MOV.L	#_CALC_FULCLS_MXPLS,R4
	MOV.L	@R4,R0			;

	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <08:PRS 合計>2byte ---
	MOV.L	#_PVPAB_KAJLIV_TTL,R4	;*
	MOV.L	@R4+,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <09:RENRA >4byte ---
	MOV.L	#_RNA_CTL_POS1,R4		;//制御位置 OK
	MOV.L	@R4,R0				;(下死点上高さ)

;	-------------- ﾃﾞｰﾀ調査用------------
	.IMPORT	_SET_CLSINC_SPDBAS_PLS
	MOV.L	#_SET_CLSINC_SPDBAS_PLS,R4
	MOV.L	@R4,R0

	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L
	TREND_FORM_INTEL REG=R1,LG=B	;
	MOV.W	R1,@R5				;上位
	ADD	#2,R5				;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;下位
	ADD	#2,R5				;


;	---- <10:目標ﾊﾟﾙｽ>4byte ---
	MOV.L	#_LINK_RL_OBJ_ABSPLS+4,R4	;
	MOV.L	@R4,R0				;
	MOV.L	#H'3FFFFFFF,R3			;
	AND	R3,R0				;
	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L
	TREND_FORM_INTEL REG=R1,LG=B		;
	MOV.W	R1,@R5				;上位
	ADD	#2,R5				;
	TREND_FORM_INTEL REG=R0,LG=B		;
	MOV.W	R0,@R5				;下位
	ADD	#2,R5				;


;	---- <11:実位置>4byte ---
;;;;	MOV.L	#_LINK_PV_ABSPLS+4,R4	;//制御位置 OK
;;;;	MOV.L	@R4,R0				;
	MOV.L	#_RNA_ABS_POS,R4		;//ABS位置
	MOV.L	@R4,R0				;
	MOV.L	#H'3FFFFFFF,R3			;
	AND	R3,R0				;
	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L
	TREND_FORM_INTEL REG=R1,LG=B	;
	MOV.W	R1,@R5				;上位
	ADD	#2,R5				;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;下位
	ADD	#2,R5				;


;	---- <12:SEQ>2byte ---
	MOV.L	#_TRD_SMP_PV_SEQ,R4		;
	MOV.W	@R4,R0				;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;
	ADD	#2,R5				;

;	---- <13:AD>2byte ---
	MOV.L	#_PVP_POWER_MONI,R4		;
	MOV.W	@R4,R0				;

	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;
	ADD	#2,R5				;

	SUB_END
	M_RTS

;	*******************************************
;	***					***
;	***	角度				***
;	***	2012-10-19			***
;	*******************************************
;	input たくさんのレジスタ
	.ALIGN 4
_SMP_DATA_MOVE_TYPE11
	SUB_START

;	---- <02:DIG>2byte ---
	MOV.L	#_TRD_SMP_PV_ECDG,R4	;_CTL_ENC360 ﾒｲﾝｼｬﾌﾄ角度
	MOV.W	@R4+,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <03:DIG>2byte ---
	MOV.L	#_TRD_SMP_PV_PGDG,R4	;_INC_ENC360をｸﾗﾝｸ変換した角度
	MOV.W	@R4+,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <04:SPD>2byte ---
	MOV.L	#_PV_OUT_SPD_PER,R4	;OK
	MOV.W	@R4+,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <05:SPD>2byte ---
	MOV.L	#_PV_ENC_SPD_PER,R4	;OK
	MOV.W	@R4+,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;


;	---- <06:PRS 左>2byte ---
;;	MOV.L	#_PVPAB_KAJLIV_LFT,R4	;
;;	MOV.L	@R4+,R0			;

	MOV.L	#_INC_ENC360,R4		;ｸﾗﾝｸ変換前角度(360と同じか?)
	MOV.W	@R4+,R0			;

	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <07:PRS 右>2byte ---
;;;	MOV.L	#_PVPAB_KAJLIV_RIH,R4	;
;;;	MOV.L	@R4+,R0			;
	MOV.L	#_OBJ_ENC360,R4		;目標角度(PG)
	MOV.W	@R4,R0			;

	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <08:PRS 合計>2byte ---
	MOV.L	#_PVPAB_KAJLIV_TTL,R4	;
	MOV.L	@R4+,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <09:RENRA >4byte ---
;;;;;	MOV.L	#_RNA_CTL_POS1,R4		;//制御位置 OK
;;;;;	MOV.L	@R4,R0				;
	MOV.L	#_RNA_ABS_POS,R4		;//ABS位置
	MOV.L	@R4,R0				;

	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L
	TREND_FORM_INTEL REG=R1,LG=B	;
	MOV.W	R1,@R5				;上位
	ADD	#2,R5				;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;下位
	ADD	#2,R5				;


;	---- <10:目標ﾊﾟﾙｽ>4byte ---
	MOV.L	#_LINK_RL_OBJ_ABSPLS+4,R4	;
	MOV.L	@R4,R0				;
	MOV.L	#H'3FFFFFFF,R3			;
	AND	R3,R0				;
	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L
	TREND_FORM_INTEL REG=R1,LG=B		;
	MOV.W	R1,@R5				;上位
	ADD	#2,R5				;
	TREND_FORM_INTEL REG=R0,LG=B		;
	MOV.W	R0,@R5				;下位
	ADD	#2,R5				;


;	---- <11:実位置>4byte ---
	MOV.L	#_LINK_PV_ABSPLS+4,R4	;//制御位置 OK
	MOV.L	@R4,R0				;
	MOV.L	#H'3FFFFFFF,R3			;
	AND	R3,R0				;
	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L
	TREND_FORM_INTEL REG=R1,LG=B	;
	MOV.W	R1,@R5				;上位
	ADD	#2,R5				;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;下位
	ADD	#2,R5				;


;	---- <12:SEQ>2byte ---
	MOV.L	#_TRD_SMP_PV_SEQ,R4		;
	MOV.W	@R4,R0				;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;
	ADD	#2,R5				;



;	------- POWER MONI
	MOV.L	#_OBJDIG_CLANK,R4
	MOV.W	@R4,R0

	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;
	ADD	#2,R5				;

	SUB_END
	M_RTS

;	*******************************************
;	***					***
;	***	SCAN				***
;	***					***
;	*******************************************
	.IMPORT	_WPV_SCAN_TIM_REAL		;
	.IMPORT	_WPV_SCAN_TIM_AVL		;[AVL]

	.IMPORT	_PVP_DYHITO_POS			;ﾀﾞｲﾊｲﾄ実測 生産初期画面表示値 
	.IMPORT	_SH2_DBG_KAGEN			;

	.IMPORT	_RNA_ABS_MD_DT0			;
	.IMPORT	_RNA_ABS_MD_DT1			;
	.IMPORT	_PVX_DAI_POS1			;ﾀﾞｲﾊｲﾄ表示値・制御値
	.IMPORT	_SCAN_DBG_CNT			;
	.IMPORT	_POSINER_SV_POS			;




;	---左荷重が最小時の 合計荷重,左荷重,右荷重----------
;;	.IMPORT	_BTOA_LFTMIN_LFT
;;	.IMPORT	_BTOA_LFTMIN_RIH
;;	.IMPORT	_BTOA_LFTMIN_TTL

;	---右荷重が最小時の 合計荷重,左荷重,右荷重----------
;;	.IMPORT	_BTOA_RIHMIN_LFT
;;	.IMPORT	_BTOA_RIHMIN_RIH
;;	.IMPORT	_BTOA_RIHMIN_TTL

;	---合計荷重が最小時の 合計荷重,左荷重,右荷重----------
;;	.IMPORT	_BTOA_TTLMIN_LFT
;;	.IMPORT	_BTOA_TTLMIN_RIH
;;	.IMPORT	_BTOA_TTLMIN_TTL

	.ALIGN 4
_SMP_DATA_MOVE_TYPE12
	SUB_START

	PUSH_REG1 R7
	PUSH_REG1 R8
	PUSH_REG1 R9

;	----------------------[989.0生]
	MOV.L	#_PVPAB_KAJLIV_LFT,R7	;生
	MOV.L	#_PVPAB_KAJLIV_RIH,R8	;
	MOV.L	#_PVPAB_KAJLIV_TTL,R9	;

	MOV.L	#_SVP_MOADRF_SQL,R4	;
	MOV.W	@R4,R0			;
	CMP/EQ	#1,R0			;
	BF	TRD_MINKAJYUU_100

;	--- 全部最小荷重の動作[989.1]--
	MOV.L	#_BTOA_LFT_MIN,R7	;
	MOV.L	#_BTOA_RIH_MIN,R8	;
	MOV.L	#_BTOA_TTL_MIN,R9	;
	M_BRA	TRD_MINKAJYUU_700	;

TRD_MINKAJYUU_100	;
	CMP/EQ	#2,R0			;
	BF	TRD_MINKAJYUU_200	;

;	--- 全部最大荷重の動作[989.2]--
	MOV.L	#_BTOA_LFT_MAX,R7	;
	MOV.L	#_BTOA_RIH_MAX,R8	;
	MOV.L	#_BTOA_TTL_MAX,R9	;
	M_BRA	TRD_MINKAJYUU_700	;

TRD_MINKAJYUU_200	;
	CMP/EQ	#3,R0			;
	BF	TRD_MINKAJYUU_300	;

;	--- 全区間の最大−最小＝幅-[989.3]--
	MOV.L	#_BTOA_LFT_HAB,R7	;
	MOV.L	#_BTOA_RIH_HAB,R8	;
	MOV.L	#_BTOA_TTL_HAB,R9	;
	M_BRA	TRD_MINKAJYUU_700	;

TRD_MINKAJYUU_300	;


;	============== トレンド区間のデバック===========
	CMP/EQ	#4,R0			;
	BF	TRD_MINKAJYUU_400	;

;	--- 区間 左ﾁｪｯｸ[989.4]--
	MOV.L	#_BTOA_LFT_TRDMAX,R7	;
	MOV.L	#_BTOA_LFT_TRDMIN,R8	;
	MOV.L	#_BTOA_LFT_TRDHAB,R9	;
	M_BRA	TRD_MINKAJYUU_700	;

TRD_MINKAJYUU_400	;
	CMP/EQ	#5,R0			;
	BF	TRD_MINKAJYUU_500	;

;	--- 区間 右ﾁｪｯｸ[989.5]--
	MOV.L	#_BTOA_RIH_TRDMAX,R7	;
	MOV.L	#_BTOA_RIH_TRDMIN,R8	;
	MOV.L	#_BTOA_RIH_TRDHAB,R9	;
	M_BRA	TRD_MINKAJYUU_700	;

TRD_MINKAJYUU_500	;
	CMP/EQ	#6,R0			;
	BF	TRD_MINKAJYUU_700	;

;	--- 区間の合計[989.6]--
	MOV.L	#_BTOA_TTL_TRDMAX,R7	;
	MOV.L	#_BTOA_TTL_TRDMIN,R8	;
	MOV.L	#_BTOA_TTL_TRDHAB,R9	;
	M_BRA	TRD_MINKAJYUU_700	;

TRD_MINKAJYUU_700	;

;	---- <02:DIG>2byte ---
	MOV.L	#_TRD_SMP_PV_ECDG,R4	;OK
	MOV.W	@R4+,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <03:DIG>2byte ---
	MOV.L	#_TRD_SMP_PV_PGDG,R4	;OK
	MOV.W	@R4+,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <04:SPD>2byte ---
	MOV.L	#_PV_OUT_SPD_PER,R4	;OK
	MOV.W	@R4+,R0			;

	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <05:SPD>2byte ---
	MOV.L	#_PV_ENC_SPD_PER,R4	;OK
	MOV.W	@R4+,R0			;

	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;


;	---- <06:PRS 左>2byte ---
	MOV.L	#_PVPAB_KAJLIV_LFT,R4	;
	MOV.L	@R4+,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <07:PRS 右>2byte ---
	MOV.L	#_PVPAB_KAJLIV_RIH,R4	;
	MOV.L	@R4+,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <08:PRS 合計>2byte ---
	MOV.L	#_PVPAB_KAJLIV_TTL,R4	;
	MOV.L	@R4+,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <09:RENRA >4byte ---
;;;;	MOV.L	#_RNA_CTL_POS1,R4		;//制御位置 OK
;;;	MOV.L	@R4,R0				;
	MOV	R7,R4				;
	MOV.L	@R4+,R0				;
	
	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L
	TREND_FORM_INTEL REG=R1,LG=B	;
	MOV.W	R1,@R5				;上位
	ADD	#2,R5				;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;下位
	ADD	#2,R5				;


;	---- <10:目標ﾊﾟﾙｽ>4byte ---
;;;;	MOV.L	#_LINK_RL_OBJ_ABSPLS+4,R4	;
;;;;	MOV.L	@R4,R0				;
;;;;	MOV.L	#H'3FFFFFFF,R3			;
;;;;	AND	R3,R0				;
	MOV	R8,R4				;
	MOV.L	@R4+,R0				;

	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L
	TREND_FORM_INTEL REG=R1,LG=B		;
	MOV.W	R1,@R5				;上位
	ADD	#2,R5				;
	TREND_FORM_INTEL REG=R0,LG=B		;
	MOV.W	R0,@R5				;下位
	ADD	#2,R5				;


;	---- <11:実位置>4byte ---
;;;;	MOV.L	#_LINK_PV_ABSPLS+4,R4		;
;;;;	MOV.L	@R4,R0				;
;;;;	MOV.L	#H'3FFFFFFF,R3			;
;;;;	AND	R3,R0				;
	MOV	R9,R4				;
	MOV.L	@R4+,R0				;

	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L
	TREND_FORM_INTEL REG=R1,LG=B	;
	MOV.W	R1,@R5				;上位
	ADD	#2,R5				;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;下位
	ADD	#2,R5				;


;	---- <12:SEQ>2byte ---
	MOV.L	#_TRD_SMP_PV_SEQ,R4		;
	MOV.W	@R4,R0				;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;
	ADD	#2,R5				;



;	------- 2010-09-21-----------
	MOV.L	#_PVP_POWER_MONI,R4		;
	MOV.W	@R4,R0				;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;
	ADD	#2,R5				;

	POP_REG1 R9
	POP_REG1 R8
	POP_REG1 R7

	SUB_END
	M_RTS




;	*******************************************
;	***					***
;	***	988	手動ﾊﾟﾙｻ		***
;	***					***
;	*******************************************
	.IMPORT	_EXQ_LT_PROC_CNT1	;ﾃﾞﾊﾞｯｸ用
	.IMPORT	_EXQ_LT_PROC_CNT2	;ﾃﾞﾊﾞｯｸ用
	.IMPORT	_EXQ_LT_PROC_CNT3	;ﾃﾞﾊﾞｯｸ用
	.IMPORT	_EXQ_LT_PROC_CNT4	;ﾃﾞﾊﾞｯｸ用
	.IMPORT	_CPUA_SV_STEP		;
	.IMPORT	_CPUB_SV_STEP		;
	.IMPORT	_CPUA_DNM_DIR_NOW	;
	.IMPORT	_CPUB_DNM_DIR_NOW	;

	.ALIGN 4
_SMP_DATA_MOVE_TYPE13
	SUB_START

;	---- <02:DIG>2byte ---
	MOV.L	#_OBJ_ENC360,R4		;目標角度(PG)
	MOV.W	@R4+,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <03:DIG>2byte ---
	MOV.L	#_TRD_SMP_PV_PGDG,R4	;INC_ENC360
	MOV.W	@R4+,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <04:SPD>2byte ---
	MOV.L	#_CPUA_SV_STEP,R4	;
	MOV.W	@R4+,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;


	MOV.L	#_CPUB_SV_STEP,R4	;符号付
	MOV.W	@R4,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;


;	---- <06:PRS 左>2byte ---
	MOV.L	#_SH4_STEP_NO,R4	;
	MOV.L	@R4,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <07:PRS 右>2byte ---
	MOV.L	#_SH2_STEP_NO,R4	;
	MOV.L	@R4+,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <08:PRS 合計>2byte ---
	MOV.L	#_EXQ_LT_PROC_CNT2,R4	;
	MOV.W	@R4,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <09:RENRA >4byte ---
	MOV.L	#_CPUA_DNM_DIR_NOW,R4	;
	MOV.W	@R4,R0			;

	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L
	TREND_FORM_INTEL REG=R1,LG=B	;
	MOV.W	R1,@R5				;上位
	ADD	#2,R5				;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;下位
	ADD	#2,R5				;


;	---- <10:目標ﾊﾟﾙｽ>4byte ---
	MOV.L	#_LINK_RL_OBJ_ABSPLS+4,R4		;CPUA
	MOV.L	@R4,R0					;
	MOV.L	#H'3FFFFFFF,R3				;
	AND	R3,R0					;
	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L	;
	TREND_FORM_INTEL REG=R1,LG=B			;
	MOV.W	R1,@R5					;上位
	ADD	#2,R5					;
	TREND_FORM_INTEL REG=R0,LG=B			;
	MOV.W	R0,@R5					;下位
	ADD	#2,R5					;


;	---- <11:実位置>4byte ---
	MOV.L	#_SH_POSCTL_RL_ABSPLS+_SH2_8B+4,R4	;CPUB
	MOV.L	@R4,R0					;
	MOV.L	@R4,R0					;
	MOV.L	#H'3FFFFFFF,R3				;
	AND	R3,R0					;
	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L	;
	TREND_FORM_INTEL REG=R1,LG=B			;
	MOV.W	R1,@R5					;上位
	ADD	#2,R5					;
	TREND_FORM_INTEL REG=R0,LG=B			;
	MOV.W	R0,@R5					;下位
	ADD	#2,R5					;


;	---- <12:SEQ>2byte ---
	MOV.L	#_TRD_SMP_PV_SEQ,R4		;
	MOV.W	@R4,R0				;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;
	ADD	#2,R5				;



;	------- 2010-09-21-----------
	MOV.L	#_CPUB_DNM_DIR_NOW,R4		;
	MOV.W	@R4,R0				;


	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;
	ADD	#2,R5				;

	SUB_END
	M_RTS


;;;;;	*******************************************
;;;;;	***					***
;;;;;	***	988	手動ﾊﾟﾙｻ		***
;;;;;	***					***
;;;;;	*******************************************
;;;;	.IMPORT	_TEP_POS_ADD_CNT		;
;;;;	.IMPORT	_TEP_CHG_SPD1		;起動時はSPD1,SPD2とも同じ速度
;;;;	.IMPORT	_TEP_CHG_SPD2		;
;;;;	.IMPORT	_TEP_CNTSMP_TIM		;
;;;;	.IMPORT	_TEP_STEP_WTTM		;
;;;;
;;;;	.ALIGN 4
;;;;_SMP_DATA_MOVE_TYPE13
;;;;	SUB_START
;;;;
;;;;;	---- <02:DIG>2byte ---
;;;;	MOV.L	#_OBJ_ENC360,R4		;目標角度(PG)
;;;;	MOV.W	@R4+,R0			;
;;;;	TREND_FORM_INTEL REG=R0,LG=B	;
;;;;	MOV.W	R0,@R5			;
;;;;	ADD	#2,R5			;
;;;;
;;;;;	---- <03:DIG>2byte ---
;;;;	MOV.L	#_TRD_SMP_PV_PGDG,R4	;INC_ENC360
;;;;	MOV.W	@R4+,R0			;
;;;;	TREND_FORM_INTEL REG=R0,LG=B	;
;;;;	MOV.W	R0,@R5			;
;;;;	ADD	#2,R5			;
;;;;
;;;;;	---- <04:SPD>2byte ---
;;;;	MOV.L	#_PV_OUT_SPD_PER,R4	;
;;;;	MOV.W	@R4+,R0			;
;;;;	TREND_FORM_INTEL REG=R0,LG=B	;
;;;;	MOV.W	R0,@R5			;
;;;;	ADD	#2,R5			;
;;;;
;;;;;	---- <05:SPD>2byte ---
;;;;
;;;;	MOV.L	#_OUTPLS_DELT,R4	;符号付
;;;;	MOV.W	@R4,R0			;
;;;;	TREND_FORM_INTEL REG=R0,LG=B	;
;;;;	MOV.W	R0,@R5			;
;;;;	ADD	#2,R5			;
;;;;
;;;;
;;;;;	---- <06:PRS 左>2byte ---
;;;;
;;;;	MOV.L	#_TEP_CHG_SPD1,R4	;
;;;;	MOV.L	@R4,R0			;
;;;;
;;;;	TREND_FORM_INTEL REG=R0,LG=B	;
;;;;	MOV.W	R0,@R5			;
;;;;	ADD	#2,R5			;
;;;;
;;;;;	---- <07:PRS 右>2byte ---
;;;;
;;;;	MOV.L	#_TEP_CHG_SPD2,R4	;
;;;;	MOV.L	@R4,R0			;
;;;;	TREND_FORM_INTEL REG=R0,LG=B	;
;;;;	MOV.W	R0,@R5			;
;;;;	ADD	#2,R5			;
;;;;
;;;;;	---- <08:PRS 合計>2byte ---
;;;;	MOV.L	#_TEP_CNTSMP_TIM,R4	;
;;;;	MOV.W	@R4,R0			;
;;;;	TREND_FORM_INTEL REG=R0,LG=B	;
;;;;	MOV.W	R0,@R5			;
;;;;	ADD	#2,R5			;
;;;;
;;;;;	---- <09:RENRA >4byte ---
;;;;
;;;;	MOV.L	#_TEP_POS_ADD_CNT,R4		;
;;;;	MOV.L	@R4,R0				;
;;;;
;;;;	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L
;;;;	TREND_FORM_INTEL REG=R1,LG=B	;
;;;;	MOV.W	R1,@R5				;上位
;;;;	ADD	#2,R5				;
;;;;	TREND_FORM_INTEL REG=R0,LG=B	;
;;;;	MOV.W	R0,@R5				;下位
;;;;	ADD	#2,R5				;
;;;;
;;;;
;;;;;	---- <10:目標ﾊﾟﾙｽ>4byte ---
;;;;	MOV.L	#_LINK_RL_OBJ_ABSPLS+4,R4	;
;;;;	MOV.L	@R4,R0				;
;;;;	MOV.L	#H'3FFFFFFF,R3			;
;;;;	AND	R3,R0				;
;;;;	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L
;;;;	TREND_FORM_INTEL REG=R1,LG=B		;
;;;;	MOV.W	R1,@R5				;上位
;;;;	ADD	#2,R5				;
;;;;	TREND_FORM_INTEL REG=R0,LG=B		;
;;;;	MOV.W	R0,@R5				;下位
;;;;	ADD	#2,R5				;
;;;;
;;;;
;;;;;	---- <11:実位置>4byte ---
;;;;	MOV.L	#_SH_POSCTL_RL_ABSPLS+_SH2_8B+4,R4		;
;;;;	MOV.L	@R4,R0				;
;;;;	MOV.L	#H'3FFFFFFF,R3			;
;;;;	AND	R3,R0				;
;;;;	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L
;;;;	TREND_FORM_INTEL REG=R1,LG=B	;
;;;;	MOV.W	R1,@R5				;上位
;;;;	ADD	#2,R5				;
;;;;	TREND_FORM_INTEL REG=R0,LG=B	;
;;;;	MOV.W	R0,@R5				;下位
;;;;	ADD	#2,R5				;
;;;;
;;;;
;;;;;	---- <12:SEQ>2byte ---
;;;;	MOV.L	#_TRD_SMP_PV_SEQ,R4		;
;;;;	MOV.W	@R4,R0				;
;;;;	TREND_FORM_INTEL REG=R0,LG=B	;
;;;;	MOV.W	R0,@R5				;
;;;;	ADD	#2,R5				;
;;;;
;;;;
;;;;
;;;;;	------- 2010-09-21-----------
;;;;
;;;;	MOV.L	#_TEP_STEP_WTTM,R4				;
;;;;	MOV.W	@R4,R0				;
;;;;
;;;;
;;;;	TREND_FORM_INTEL REG=R0,LG=B	;
;;;;	MOV.W	R0,@R5				;
;;;;	ADD	#2,R5				;
;;;;
;;;;	SUB_END
;;;;	M_RTS


;	*******************************************
;	***					***
;	***	スライド自動調整		***
;	***	2014-08-04			***
;	*******************************************
;	input たくさんのレジスタ
;;;	_KJYUU_NEW_DAT_PV
	.import	_KJYUU_IN_DAT_PV
	.import	_PVPAB_ARA1_KAJ_T

	.IMPORT	_SVP_ATSLID_OBJ1
	.ALIGN 4
_SMP_DATA_MOVE_TYPE14
	SUB_START

;	---- <02:DIG>2byte ---
	MOV.L	#_TRD_SMP_PV_ECDG,R4	;_CTL_ENC360 ﾒｲﾝｼｬﾌﾄ角度
	MOV.W	@R4+,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <03:DIG>2byte ---
	MOV.L	#_TRD_SMP_PV_PGDG,R4	;_INC_ENC360をｸﾗﾝｸ変換した角度
	MOV.W	@R4+,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <04:SPD>2byte ---
	MOV.L	#_PV_OUT_SPD_PER,R4	;OK
	MOV.W	@R4+,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <05:SPD>2byte ---
	MOV.L	#_PV_ENC_SPD_PER,R4	;OK
	MOV.W	@R4+,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;


;	---- <06:PRS 左>2byte ---
;;	MOV.L	#_PVPAB_KAJLIV_LFT,R4	;
;;	MOV.L	@R4+,R0			;
;;	MOV.L	#_INC_ENC360,R4		;ｸﾗﾝｸ変換前角度(360と同じか?)
;;;	MOV.W	@R4+,R0			;

	MOV.L	#_PVPAB_ARA1_KAJ_T,R4	;IN
	MOV.L	@R4+,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <07:PRS 右>2byte ---
;;;	MOV.L	#_PVPAB_KAJLIV_RIH,R4	;
;;;	MOV.L	@R4+,R0			;
;;;	MOV.L	#_OBJ_ENC360,R4		;目標角度(PG)
;;;	MOV.W	@R4,R0			;

	MOV.L	#_KJYUU_IN_DAT_PV,R4	;
	MOV.L	@R4,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <08:PRS 合計>2byte ---
;;;;;;	MOV.L	#_PVPAB_KAJLIV_TTL,R4	;
;;;;;;	MOV.L	@R4+,R0			;
;;;;;;	MOV.L	#_SVP_ATSLID_OBJ1,R4
;;;;;;	MOV.L	@R4+,R0			;

	MOV.L	#_KJYUU_NEW_DAT_PV,R4	;
	MOV.L	@R4+,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <09:RENRA >4byte ---
;;;;;	MOV.L	#_RNA_CTL_POS1,R4		;//制御位置 OK
;;;;;	MOV.L	@R4,R0				;
	MOV.L	#_RNA_ABS_POS,R4		;//ABS位置
	MOV.L	@R4,R0				;

	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L
	TREND_FORM_INTEL REG=R1,LG=B	;
	MOV.W	R1,@R5				;上位
	ADD	#2,R5				;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;下位
	ADD	#2,R5				;


;	---- <10:目標ﾊﾟﾙｽ>4byte ---
;;;;	MOV.L	#_LINK_RL_OBJ_ABSPLS+4,R4	;
;;;;	MOV.L	@R4,R0				;
;;;;	MOV.L	#H'3FFFFFFF,R3			;
;;;;	AND	R3,R0				;

	MOV.L	#_PVX_DAI_POS1,R4		;ダイハイト表示
	MOV.L	@R4,R0				;

	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L
	TREND_FORM_INTEL REG=R1,LG=B		;
	MOV.W	R1,@R5				;上位
	ADD	#2,R5				;
	TREND_FORM_INTEL REG=R0,LG=B		;
	MOV.W	R0,@R5				;下位
	ADD	#2,R5				;


;	---- <11:実位置>4byte ---
;;;;;	MOV.L	#_LINK_PV_ABSPLS+4,R4	;//制御位置 OK
;;;;;	MOV.L	@R4,R0				;
;;;;;	MOV.L	#H'3FFFFFFF,R3			;
;;;;;	AND	R3,R0				;

	MOV.L	#_POSINER_SV_POS,R4
	MOV.L	@R4,R0				;

	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L
	TREND_FORM_INTEL REG=R1,LG=B	;
	MOV.W	R1,@R5				;上位
	ADD	#2,R5				;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;下位
	ADD	#2,R5				;


;	---- <12:SEQ>2byte ---
	MOV.L	#_TRD_SMP_PV_SEQ,R4		;
	MOV.W	@R4,R0				;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;
	ADD	#2,R5				;



;	------- POWER MONI
	MOV.L	#_OBJDIG_CLANK,R4
	MOV.W	@R4,R0

	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;
	ADD	#2,R5				;

	SUB_END
	M_RTS


;	*******************************************
;	***					***
;	***	フィーダー			***
;	***					***
;	*******************************************
	.IMPORT		_PVPX_LFEED_POS			;//ﾌｨｰﾀﾞ現在位置表示
	.IMPORT		_PVPX_LFD_PVABSPOS1		;//ﾌｨｰﾀﾞ現在位置1(ABS)
	.IMPORT		_PVPX_LFD_PVABSPOS2		;//ﾌｨｰﾀﾞ現在位置2(ABS)
	.IMPORT		_PVPX_LFD_PVABSPLS1		;//ﾌｨｰﾀﾞ現在位置PLS1(ABS)
	.IMPORT		_PVPX_LFD_PVABSPLS2		;//ﾌｨｰﾀﾞ現在位置PLS2(ABS)

	.IMPORT		_PVPX_LFD_PVINCPOS1		;//ﾌｨｰﾀﾞ現在位置1(INC)
	.IMPORT		_PVPX_LFD_PVINCPOS2		;//ﾌｨｰﾀﾞ現在位置2(INC)
	.IMPORT		_PVPX_LFD_PVINCPLS1		;//ﾌｨｰﾀﾞ現在位置PLS1(INC)
	.IMPORT		_PVPX_LFD_PVINCPLS2		;//ﾌｨｰﾀﾞ現在位置PLS2(INC)

	.IMPORT		_PVPX_LFD_OBJABSPLS		;//ﾌｨｰﾀﾞ現在位置1(ABS)
	.IMPORT		_PVPX_LFD_OBJINCPLS		;//ﾌｨｰﾀﾞ現在位置PLS1(INC)

	.IMPORT		_PVPX_LFD_OBJSPD		;//+/- PER
	.IMPORT		_PVPX_LFD_ENCSPD		;//+/- PER

_SMP_DATA_MOVE_TYPE15
	SUB_START

;	---- <02:DIG>2byte ---
	MOV.L	#_OBJDIG_CLANK,R4	;
	MOV.W	@R4,R0			;ﾒｲﾝｼｬﾌﾄ:目標ｸﾗﾝｸ角度
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <03:DIG>2byte ---
	MOV.L	#_TRD_SMP_PV_PGDG,R4	;
	MOV.W	@R4+,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <04:SPD>2byte ---
	MOV.L	#_PVPX_LFD_OBJSPD,R4	;OK
	MOV.W	@R4+,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <05:SPD>2byte ---
	MOV.L	#_PVPX_LFD_ENCSPD,R4	;OK
	MOV.W	@R4+,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;


;	---- <06:PRS 左>2byte ---
	MOV.L	#_PVPX_LFD_OBJINCPLS+2,R4	;INC-目標
	MOV.W	@R4+,R0				;
	MOV.L	#H'7FFF,R3			;
	AND	R3,R0				;
	TREND_FORM_INTEL REG=R0,LG=B		;
	MOV.W	R0,@R5				;
	ADD	#2,R5				;

;	---- <07:PRS 右>2byte ---
	MOV.L	#_PVPX_LFD_PVINCPLS1+2,R4	;INC1-実測
	MOV.W	@R4+,R0				;
	MOV.L	#H'7FFF,R3			;
	AND	R3,R0				;
	TREND_FORM_INTEL REG=R0,LG=B		;
	MOV.W	R0,@R5				;
	ADD	#2,R5				;

;	---- <08:PRS 合計>2byte ---
	MOV.L	#_PVPX_LFD_PVABSPLS2+2,R4	;ABC-実測2
	MOV.W	@R4+,R0				;
	MOV.L	#H'7FFF,R3			;
	AND	R3,R0				;
	TREND_FORM_INTEL REG=R0,LG=B		;
	MOV.W	R0,@R5				;
	ADD	#2,R5				;

;	---- <09:RENRA >4byte ---
	MOV.L	#_PVPX_LFEED_POS,R4		;//ﾌｨｰﾀﾞ現在位置表示mm
	MOV.L	@R4,R0				;
	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L
	TREND_FORM_INTEL REG=R1,LG=B		;
	MOV.W	R1,@R5				;上位
	ADD	#2,R5				;
	TREND_FORM_INTEL REG=R0,LG=B		;
	MOV.W	R0,@R5				;下位
	ADD	#2,R5				;


;	---- <10:目標ﾊﾟﾙｽ>4byte ---
	MOV.L	#_PVPX_LFD_OBJABSPLS,R4	;//ﾌｨｰﾀﾞ現在位置1(ABS)
	MOV.L	@R4,R0				;
	MOV.L	#H'3FFFFFFF,R3			;
	AND	R3,R0				;
	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L
	TREND_FORM_INTEL REG=R1,LG=B		;
	MOV.W	R1,@R5				;上位
	ADD	#2,R5				;
	TREND_FORM_INTEL REG=R0,LG=B		;
	MOV.W	R0,@R5				;下位
	ADD	#2,R5				;


;	---- <11:実位置>4byte ---
	MOV.L	#_PVPX_LFD_PVABSPLS1,R4	;//ﾌｨｰﾀﾞ現在位置1(ABS)
	MOV.L	@R4,R0				;
	MOV.L	#H'3FFFFFFF,R3			;
	AND	R3,R0				;
	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L
	TREND_FORM_INTEL REG=R1,LG=B	;
	MOV.W	R1,@R5				;上位
	ADD	#2,R5				;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;下位
	ADD	#2,R5				;


;	---- <12:SEQ>2byte ---
	MOV.L	#_TRD_SMP_PV_SEQ,R4		;
	MOV.W	@R4,R0				;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;
	ADD	#2,R5				;

;	---- <13:AD>2byte ---
	MOV.L	#_PVP_POWER_MONI,R4		;
	MOV.W	@R4,R0				;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;
	ADD	#2,R5				;

	SUB_END
	M_RTS


_SMP_DATA_MOVE_TYPE16
	SUB_START

;	---- <02:DIG>2byte ---
	MOV.L	#_OBJDIG_CLANK,R4	;
	MOV.W	@R4,R0			;ﾒｲﾝｼｬﾌﾄ:目標ｸﾗﾝｸ角度
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <03:DIG>2byte ---
	MOV.L	#_TRD_SMP_PV_PGDG,R4	;
	MOV.W	@R4+,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <04:SPD>2byte ---
	MOV.L	#_PVPX_LFD_OBJSPD,R4	;OK
	MOV.W	@R4+,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <05:SPD>2byte ---
	MOV.L	#_PVPX_LFD_ENCSPD,R4	;OK
	MOV.W	@R4+,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;


;	---- <06:PRS 左>2byte ---
	MOV.L	#_PVPX_LFD_OBJINCPLS+2,R4	;INC-目標
	MOV.W	@R4+,R0				;
	MOV.L	#H'7FFF,R3			;
	AND	R3,R0				;
	TREND_FORM_INTEL REG=R0,LG=B		;
	MOV.W	R0,@R5				;
	ADD	#2,R5				;

;	---- <07:PRS 右>2byte ---
	MOV.L	#_PVPX_LFD_PVINCPLS1+2,R4	;INC1-実測
	MOV.W	@R4+,R0				;
	MOV.L	#H'7FFF,R3			;
	AND	R3,R0				;
	TREND_FORM_INTEL REG=R0,LG=B		;
	MOV.W	R0,@R5				;
	ADD	#2,R5				;

;	---- <08:PRS 合計>2byte ---
	MOV.L	#_PV_OUT_SPD_PER,R4	;OK
	MOV.W	@R4+,R0			;
	TREND_FORM_INTEL REG=R0,LG=B		;
	MOV.W	R0,@R5				;
	ADD	#2,R5				;

;	---- <09:RENRA >4byte ---
;;;;;;	MOV.L	#_RNA_ABS_POS,R4		;//ABS位置
;;;;;;	MOV.L	@R4,R0				;

	MOV.L	#_PVPX_LFD_OBJABSPLS,R4	;//ﾌｨｰﾀﾞ現在位置1(ABS)
	MOV.L	@R4,R0				;
	MOV.L	#H'3FFFFFFF,R3			;
	AND	R3,R0				;

	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L
	TREND_FORM_INTEL REG=R1,LG=B		;
	MOV.W	R1,@R5				;上位
	ADD	#2,R5				;
	TREND_FORM_INTEL REG=R0,LG=B		;
	MOV.W	R0,@R5				;下位
	ADD	#2,R5				;

;	---- <10:目標ﾊﾟﾙｽ>4byte ---
	MOV.L	#_LINK_RL_OBJ_ABSPLS+4,R4	;
	MOV.L	@R4,R0				;
	MOV.L	#H'3FFFFFFF,R3			;
	AND	R3,R0				;
	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L
	TREND_FORM_INTEL REG=R1,LG=B		;
	MOV.W	R1,@R5				;上位
	ADD	#2,R5				;
	TREND_FORM_INTEL REG=R0,LG=B		;
	MOV.W	R0,@R5				;下位
	ADD	#2,R5				;


;	---- <11:実位置>4byte ---
	MOV.L	#_LINK_PV_ABSPLS+4,R4	;//制御位置 OK
	MOV.L	@R4,R0				;
	MOV.L	#H'3FFFFFFF,R3			;
	AND	R3,R0				;
	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L
	TREND_FORM_INTEL REG=R1,LG=B	;
	MOV.W	R1,@R5				;上位
	ADD	#2,R5				;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;下位
	ADD	#2,R5				;


;	---- <12:SEQ>2byte ---
	MOV.L	#_TRD_SMP_PV_SEQ,R4		;
	MOV.W	@R4,R0				;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;
	ADD	#2,R5				;

;	---- <13:AD>2byte ---
	MOV.L	#_PV_ENC_SPD_PER,R4		;
	MOV.W	@R4+,R0				;
	TREND_FORM_INTEL REG=R0,LG=B		;
	MOV.W	R0,@R5				;
	ADD	#2,R5				;

	SUB_END
	M_RTS

;	*******************************************
;	***					***
;	***					***
;	***					***
;	*******************************************
	.MACRO	MUL10_REG CALREG,WKREG
	ADD	\CALREG,\CALREG		;*2
	MOV	\CALREG,\WKREG		;
	ADD	\CALREG,\CALREG		;*4
	ADD	\CALREG,\CALREG		;*8
	ADD	\WKREG,\CALREG		;*10
	.ENDM

	.IMPORT	_DBG4_MONI_A00		;
	.IMPORT	_DBG4_MONI_A01		;
	.IMPORT	_DBG4_MONI_A02		;
	.IMPORT	_DBG4_MONI_A03		;
	.IMPORT	_DBG4_MONI_A04		;
	.IMPORT	_DBG4_MONI_A05		;
	.IMPORT	_DBG4_MONI_A06		;
	.IMPORT	_DBG4_MONI_A07		;
	.IMPORT	_DBG2_MONI_A00		;
	.IMPORT	_DBG2_MONI_A01		;
	.IMPORT	_DBG2_MONI_A02		;
	.IMPORT	_DBG2_MONI_A03		;
	.IMPORT	_DBG2_MONI_A04		;
	.IMPORT	_DBG2_MONI_A05		;
	.IMPORT	_DBG2_MONI_A06		;
	.IMPORT	_DBG2_MONI_A07		;

	.IMPORT	_DBG4_MONI_B00		;
	.IMPORT	_DBG4_MONI_B01		;
	.IMPORT	_DBG4_MONI_B02		;
	.IMPORT	_DBG4_MONI_B03		;
	.IMPORT	_DBG4_MONI_B04		;
	.IMPORT	_DBG4_MONI_B05		;
	.IMPORT	_DBG4_MONI_B06		;
	.IMPORT	_DBG4_MONI_B07		;
	.IMPORT	_DBG2_MONI_B00		;
	.IMPORT	_DBG2_MONI_B01		;
	.IMPORT	_DBG2_MONI_B02		;
	.IMPORT	_DBG2_MONI_B03		;
	.IMPORT	_DBG2_MONI_B04		;
	.IMPORT	_DBG2_MONI_B05		;
	.IMPORT	_DBG2_MONI_B06		;
	.IMPORT	_DBG2_MONI_B07		;

	.ALIGN 4
_SMP_DATA_MOVE_SPECA:
	SUB_START

;	---- <02:DIG>2byte ---
	MOV.L	#_DBG2_MONI_A00,R4	;目標角度(PG)
	MOV.W	@R4+,R0			;
	MUL10_REG CALREG=R0,WKREG=R1	;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <03:DIG>2byte ---
	MOV.L	#_DBG2_MONI_A01,R4	;INC_ENC360
	MOV.W	@R4+,R0			;
	MUL10_REG CALREG=R0,WKREG=R1	;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <04:SPD>2byte ---
	MOV.L	#_DBG2_MONI_A02,R4	;
	MOV.W	@R4+,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <05:SPD>2byte ---
	MOV.L	#_DBG2_MONI_A03,R4	;符号付
	MOV.W	@R4,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;


;	---- <06:PRS 左>2byte ---
	MOV.L	#_DBG2_MONI_A04,R4	;
	MOV.W	@R4,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <07:PRS 右>2byte ---
	MOV.L	#_DBG2_MONI_A05,R4	;
	MOV.W	@R4,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <08:PRS 合計>2byte ---
	MOV.L	#_DBG2_MONI_A06,R4	;
	MOV.W	@R4,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <09:RENRA >4byte ---
	MOV.L	#_DBG4_MONI_A00,R4		;
	MOV.L	@R4,R0				;

	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L
	TREND_FORM_INTEL REG=R1,LG=B	;
	MOV.W	R1,@R5				;上位
	ADD	#2,R5				;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;下位
	ADD	#2,R5				;


;	---- <10:目標ﾊﾟﾙｽ>4byte ---
	MOV.L	#_DBG4_MONI_A01,R4		;
	MOV.L	@R4,R0				;
	MOV.L	#H'3FFFFFFF,R3			;
	AND	R3,R0				;
	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L
	TREND_FORM_INTEL REG=R1,LG=B		;
	MOV.W	R1,@R5				;上位
	ADD	#2,R5				;
	TREND_FORM_INTEL REG=R0,LG=B		;
	MOV.W	R0,@R5				;下位
	ADD	#2,R5				;


;	---- <11:実位置>4byte ---
	MOV.L	#_DBG4_MONI_A02,R4		;
	MOV.L	@R4,R0				;
	MOV.L	#H'3FFFFFFF,R3			;
	AND	R3,R0				;
	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L
	TREND_FORM_INTEL REG=R1,LG=B	;
	MOV.W	R1,@R5				;上位
	ADD	#2,R5				;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;下位
	ADD	#2,R5				;


;	---- <12:SEQ>2byte ---
	MOV.L	#_TRD_SMP_PV_SEQ,R4		;
	MOV.W	@R4,R0				;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;
	ADD	#2,R5				;

	MOV.L	#_DBG4_MONI_A03,R4		;
	MOV.L	@R4,R0				;

	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;
	ADD	#2,R5				;

	SUB_END
	M_RTS


	.ALIGN 4
_SMP_DATA_MOVE_SPECB:
	SUB_START

;	---- <02:DIG>2byte ---
	MOV.L	#_DBG2_MONI_B00,R4	;目標角度(PG)
	MOV.W	@R4+,R0			;
	MUL10_REG CALREG=R0,WKREG=R1	;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <03:DIG>2byte ---
	MOV.L	#_DBG2_MONI_B01,R4	;INC_ENC360
	MOV.W	@R4+,R0			;
	MUL10_REG CALREG=R0,WKREG=R1	;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <04:SPD>2byte ---
	MOV.L	#_DBG2_MONI_B02,R4	;
	MOV.W	@R4+,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <05:SPD>2byte ---
	MOV.L	#_DBG2_MONI_B03,R4	;符号付
	MOV.W	@R4,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;


;	---- <06:PRS 左>2byte ---
	MOV.L	#_DBG2_MONI_B04,R4	;
	MOV.W	@R4,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <07:PRS 右>2byte ---
	MOV.L	#_DBG2_MONI_B05,R4	;
	MOV.W	@R4,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <08:PRS 合計>2byte ---
	MOV.L	#_DBG2_MONI_B06,R4	;
	MOV.W	@R4,R0			;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5			;
	ADD	#2,R5			;

;	---- <09:RENRA >4byte ---
	MOV.L	#_DBG4_MONI_B00,R4		;
	MOV.L	@R4,R0				;

	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L
	TREND_FORM_INTEL REG=R1,LG=B	;
	MOV.W	R1,@R5				;上位
	ADD	#2,R5				;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;下位
	ADD	#2,R5				;


;	---- <10:目標ﾊﾟﾙｽ>4byte ---
	MOV.L	#_DBG4_MONI_B01,R4		;
	MOV.L	@R4,R0				;
	MOV.L	#H'3FFFFFFF,R3			;
	AND	R3,R0				;
	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L
	TREND_FORM_INTEL REG=R1,LG=B		;
	MOV.W	R1,@R5				;上位
	ADD	#2,R5				;
	TREND_FORM_INTEL REG=R0,LG=B		;
	MOV.W	R0,@R5				;下位
	ADD	#2,R5				;


;	---- <11:実位置>4byte ---
	MOV.L	#_DBG4_MONI_B02,R4		;
	MOV.L	@R4,R0				;
	MOV.L	#H'3FFFFFFF,R3			;
	AND	R3,R0				;
	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L
	TREND_FORM_INTEL REG=R1,LG=B	;
	MOV.W	R1,@R5				;上位
	ADD	#2,R5				;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;下位
	ADD	#2,R5				;


;	---- <12:SEQ>2byte ---
	MOV.L	#_TRD_SMP_PV_SEQ,R4		;
	MOV.W	@R4,R0				;
	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;
	ADD	#2,R5				;

	MOV.L	#_DBG4_MONI_B03,R4		;
	MOV.L	@R4,R0				;

	TREND_FORM_INTEL REG=R0,LG=B	;
	MOV.W	R0,@R5				;
	ADD	#2,R5				;

	SUB_END
	M_RTS


;	*******************************************
;	***					***
;	***					***
;	***		トリガ収集		***
;	***					***
;	***					***
;	*******************************************
;	ANS R0=FF TRIG END

	.ALIGN 4
_CPUA_SMP_TRIG_CHK:
	SUB_START

	FAR_JSR	#_TRD_TRIG_SEQ,R0			;
	MOV	R0,R9					;BIT0:KEEP

	MOV.L	#_SEQAB_DP_TOP+56*2,R1			;
	MOV.W	@R1,R0					;
	MOV	R0,R8					;

	XOR	R7,R7

	MOV.W	#(BIT7+BIT6+BIT5+BIT4),R4		;
	TST	R4,R0					;
	TST_BIT_OF CPUA_SMP_TRIGCHK_WAIT		;ﾄﾘｶﾞ不成立

	ROTCR	R9					;
	ROTCL	R7					;SEQ:ON:1( SV=< PV )

	MOV.L	#_TRD_SVP_SMPSTR_FUK,R1		; ｻﾝﾌﾟﾘﾝｸﾞ　ﾄﾘｶﾞ負荷率
	MOV.W	@R1,R2				;
;;2006-09-30	MOV.L	#_PVP_POWER_MONI,R1		;300.0%
	MOV.L	#_WPV_POWER_MONI,R1		;300.0%
	MOV.W	@R1,R3				;
	CMP/HS	R2,R3				;
	ROTCL	R7				;ON:1( SV=< PV )

	MOV.L	#_TRD_SVP_SMPSTR_AGL,R1		; ｻﾝﾌﾟﾘﾝｸﾞ　ﾄﾘｶﾞ角度
	MOV.W	@R1,R2				;
	MOV.L	#_TRD_SMP_PV_PGDG,R1		;
	MOV.W	@R1,R3				;
	CMP/HS	R2,R3				;
	ROTCL	R7				;ON:1( SV=< PV )

	MOV.L	#_TRD_SVP_SMPSTR_KAJ,R1		;SV
	MOV.W	@R1,R2				;
	MOV.L	#_PVPAB_KAJLIV_TTL,R1		;PV
	MOV.L	@R1,R3				;
	CMP/HS	R2,R3				;
	ROTCL	R7				;ON:1( SV=< PV )

	XOR	R0,R7				;0:立上 1:立下
	MOV.L	#_TRD_CH_LEVEL,R1		;
	MOV.W	@R1,R2				;
	MOV.W	R7,@R1				;LEVEL信号()
	SHLR2	R0				;SWITCH
	SHLR2	R0				;
	MOV.W	#BIT3+BIT2+BIT1+BIT0,R4		;
	AND	R4,R0				;SWITCH
	AND	R0,R2				;OLD
	AND	R0,R7				;NEW
	CMP/EQ	R0,R7				;今回AND条件が成立しているか？
	BF	CPUA_SMP_TRIGCHK_WAIT		;NO
	CMP/EQ	R0,R2				;
	BT	CPUA_SMP_TRIGCHK_WAIT		;前回AND条件が成立しているか? YES EXIT
	M_BRA	CPUA_SMP_TRIGCHK_TRG		;今回成立し、前回成立していない これがエッジだ

;;CPUA_SMP_TRIGCHK_050:
;;	------ ｴｯｼﾞの成立---
;;	XOR	R7,R2				;
;;	AND	R2,R7				;
;;	MOV.L	#_TRD_CH_CONF,R1		;
;;	MOV.W	@R1,R3				;
;;	OR	R7,R3				;
;;	MOV.W	R3,@R1				;CONF
;;CPUA_SMP_TRIGCHK_100:
;;	SHLR2	R0				;SWITCH
;;	SHLR2	R0				;
;;	MOV.W	#BIT3+BIT2+BIT1+BIT0,R4		;
;;	AND	R4,R0				;
;;	AND	R0,R3				;
;;	CMP/EQ	R0,R3				;全て成立
;;	BT	CPUA_SMP_TRIGCHK_TRG		;

CPUA_SMP_TRIGCHK_WAIT:
	XOR	R0,R0
	M_BRA	CPUA_SMP_TRIGCHK_EXT		;
CPUA_SMP_TRIGCHK_TRG:
	MOV	#-1,R0
CPUA_SMP_TRIGCHK_EXT:
	SUB_END
	M_RTS



;	***************************************************
;	***						***
;	***						***
;	***						***
;	***						***
;	***						***
;	***						***
;	***						***
;	***						***
;	***						***
;	***************************************************

;	***********************************
;	***				***
;	***		main		***
;	***				***
;	***********************************
;	*ﾄﾘｶﾞのｼｰｹﾝｽｱﾄﾞﾚｽ作成
;	*収集のｼｰｹﾝｽｱﾄﾞﾚｽ等作成
;
;
	.EXPORT	_CPUA_TREND_MAIN
_CPUA_TREND_MAIN
	SUB_START

	SUB_END
	M_RTS


;	*******************************************
;	***					***
;	***	コマンド設定			***
;	***					***
;	*******************************************
_CPUA_TREND_CMD_MAK
	SUB_START

;	---[2010-08-30 調査用に外部からサンプリング指令ON]-----
	XOR	R3,R3							;
	MOV.L	#_CB_SEQ_CB_COM345,R1		;
	MOV.W	@R1,R2						;.BIT15

;	---製品として採用 2018-11-11追加[2/4]	-----

	MOV.L	#_OLD_CB_COM345,R1			;
	MOV.W	@R1,R0						;
	MOV.W	R2,@R1						;NEW SAVE
	XOR		R2,R0						;
	AND		R2,R0						;R0:ON EDGE
	MOV.L	#_CB_COM345_ON,R1			;
	MOV.W	R0,@R1						;

;	--------INPUT R2(345.15),R3(0)-------

	MOV.W	#BIT15,R4					;
	TST	R4,R2							;
	TST_BIT_OF CPUA_TRENDCM_MAK005		;
	MOV.W	#_PC_START_SWBIT,R3			;
CPUA_TRENDCM_MAK005:					;

	MOV.L	#_SEQAB_DP_TOP+56*2,R1		;
	MOV.W	@R1,R0				;56.12→56.15に変更

	OR	R3,R0				;2010-08-30

	MOV.L	#_SHT_TRD_COMSQ,R1		;
	MOV.W	@R1,R2				;
	MOV.W	R0,@R1				;
	MOV	R0,R7				;KEEP

	XOR	R0,R2				;
	AND	R2,R0				;
;;;;2014-09-03	MOV.W	#BIT12,R4		;ｽﾀｰﾄ
	MOV.W	#_PC_START_SWBIT,R4		;ｽﾀｰﾄ
	TST	R4,R0				;
	TST_BIT_OF CPUA_TRENDCM_MAK030		;
	MOV.L	#_TRD_SIG_LATCH,R1		;
	MOV.W	@R1,R3				;
	XOR	R4,R3				;
	MOV.W	R3,@R1				;
CPUA_TRENDCM_MAK030:


;	---------- SMPLING-------------
	MOV.L	#_SHT_TRD_COMSQ,R1		;
	MOV.W	@R1,R3				;
	MOV.L	#_TRD_SIG_LATCH,R1		;
	MOV.W	@R1,R2				;
	MOV.L	#_TRD_SIG_LTOLD,R1		;
	MOV.W	@R1,R8				;
	MOV.W	R2,@R1				;
	XOR	R2,R8				;R8:EDGE
	AND	R2,R8				;R8:ON


;;;2014-09-03	MOV.W	#BIT12,R4			;ｽﾀｰﾄ
	MOV.W	#_PC_START_SWBIT,R4			;ｽﾀｰﾄ
	AND	R4,R8				;0/ELSE
	TST	R4,R2				;
	TST_BIT_OF CPUA_TRENDCM_MAK150		;

	MOV.W	#BIT8,R4			;
	TST	R4,R3				;
	TST_BIT_OF CPUA_TRENDCM_MAK140		;0:SINGLE:JUMP

;	----- 連続 ------
	MOV.L	#_TRD_CNTL_INT_FLG,R5		;
	MOV.W	@R5,R0				;
	TST	R0,R0				;
	TST_BIT_OF CPUA_TRENDCM_MAK050		;

	TST	#BIT6,R0			;
	TST_BIT_ON CPUA_TRENDCM_MAK150		;完了：ｽﾀｰﾄSWOFF
	M_BRA	CPUA_TRENDCM_MAK200		;

CPUA_TRENDCM_MAK050
	TST	R8,R8				;
	TST_BIT_ON CPUA_TRENDCM_MAK100		;//1回目はｶｳﾝﾀに関係なく行う

	MOV.L	#_TRD_SHOT_SIG,R1		;
	MOV.W	@R1,R0				;
	TST	#BIT0,R0			;
	TST_BIT_OF CPUA_TRENDCM_MAK200		;

	MOV.L	#_TRD_SVP_SMP_CNT,R1		;ｻﾝﾌﾟﾙ ｶｳﾝﾀ設定
	MOV.W	@R1,R5				;
	MOV.L	#_TRD_PV_SMP_CNT,R1		;
	MOV.W	@R1,R6				;100回目でON 最低１回はＯＦＦ期間が
	ADD	#1,R6				;
	CMP/HS	R5,R6				;
	BT	CPUA_TRENDCM_MAK100		;SV =< PV
	MOV.W	R6,@R1				;
	MOV.L	#_TRD_SHOT_SIG,R1		;
	MOV.W	@R1,R0				;
	AND	#LOW ~BIT0,R0			;
	MOV.W	R0,@R1				;
	M_BRA	CPUA_TRENDCM_MAK200		;

;	------- ｶｳﾝﾄｱｯﾌﾟ(CMD SET)-----------
CPUA_TRENDCM_MAK100

;;;;;2014-09-03	MOV.W	#BIT12,R2		;
	MOV.W	#_PC_START_SWBIT,R2		;
	M_BRA	CPUA_TRENDCM_MAK190		;START

;	-----SINGLE---------
CPUA_TRENDCM_MAK140				;
;;;;;2014-09-03	MOV.W	#BIT12,R2		;この処理あり
	MOV.W	#_PC_START_SWBIT,R2		;
	
	MOV.L	#_TRD_CNTL_INT_FLG,R5		;本来はこの処理はいらない
	MOV.W	@R5,R0				;本来はこの処理はいらない
	TST	#BIT6,R0			;本来はこの処理はいらない
	TST_BIT_OF CPUA_TRENDCM_MAK190		;本来はこの処理はいらない
	XOR	R0,R0				;本来はこの処理はいらない
	MOV.L	#_TRD_SIG_LATCH,R1		;本来はこの処理はいらない
	MOV.W	R0,@R1				;本来はこの処理はいらない
	M_BRA	CPUA_TRENDCM_MAK190		;この処理あり

CPUA_TRENDCM_MAK150				;
;	--- 完了 LOT-SIG=OFF,PV-CNT=0,CMD=OFF
	XOR	R2,R2				;ｺﾏﾝﾄﾞOFF
	MEM1_BIT0_TO_BIT7_ANDCLR MEM=_TRD_SHOT_SIG,LG=W,BIT=~BIT0,WKREG=R1 ;//

CPUA_TRENDCM_MAK160				;ｶｳﾝﾀのみｸﾘｱ
	XOR	R6,R6				;
	MOV.L	#_TRD_PV_SMP_CNT,R1		;
	MOV.W	R6,@R1				;
CPUA_TRENDCM_MAK190

;;;2014-09-03	MOV.W	#BIT12,R4		;ｽﾀｰﾄ
	MOV.W	#_PC_START_SWBIT,R4		;
	AND	R4,R2				;
	MOV.L	#_TRD_CNTL_MAIN_COM,R1		;56.12
	MOV.W	R2,@R1				;
CPUA_TRENDCM_MAK200		;

	MOV.L	#_TRD_SIG_LATCH,R1		;本来はこの処理はいらない
	MOV.W	@R1,R0				;本来はこの処理はいらない
	TST	R0,R0
	TST_BIT_ON CPUA_TRENDCM_MAK230		;
	MEM1_BIT0_F_ADCLR MEM=(_SQ_CBWK_TOP+_WKSQCB209),LG=W,BIT=~BIT12,WKRG1=R1,WKRG2=R4	;209.11
	M_BRA	CPUA_TRENDCM_MAK250		;
CPUA_TRENDCM_MAK230				;
	MEM1_BIT0_F_ORSET MEM=(_SQ_CBWK_TOP+_WKSQCB209),LG=W,BIT=(BIT12),WKRG1=R1,WKRG2=R4	;209.11
CPUA_TRENDCM_MAK250		;

;	-------------------------------------------
;	----	ショット			---
;	-------------------------------------------
	MOV.L	#_SHT_TRD_COMSQ,R1		;
	MOV.W	@R1,R7				;
	MOV	R7,R2				;56
	MOV.W	#BIT11,R4			;
	AND	R4,R2				;
	MOV.L	#_SHT_CNTL_MAIN_COM,R1		;
	MOV.W	R2,@R1				;56.11:START(入)
	SUB_END
	M_RTS


;	***************************************************
;	***						***
;	***						***
;	***						***
;	***		1SHOT ﾄﾚﾝﾄﾞ			***
;	***						***
;	***						***
;	***************************************************
_CPUA_SHOT_TREND
	SUB_START


	MOV.L	#_SHT_CNTL_MAIN_COM,R1		;
	MOV.W	@R1,R0				;
	TST	R0,R0				;
	TST_BIT_ON CPUA_SHT_TRD_100		;COMMAND ON?

	MOV.L	#_SHT_CNTL_INT_FLG,R1		;
	MOV.W	@R1,R0				;
	TST	#BIT0,R0			;
	TST_BIT_OF CPUA_SHT_TRD_050		;
	XOR	R0,R0				;
	MOV.L	#_SHT_CNTL_INT_FLG,R1		;
	MOV.W	R0,@R1				;
	MEM1_BIT0_F_ADCLR MEM=(_SQ_CBWK_TOP+_WKSQCB209),LG=W,BIT=(~(BIT11+BIT10)),WKRG1=R1,WKRG2=R4	;
CPUA_SHT_TRD_050				;
	M_BRA	CPUA_SHT_TRD_900		;


CPUA_SHT_TRD_100:
	MOV.L	#_SHT_CNTL_INT_FLG,R1		;
	MOV.W	@R1,R0				;
	TST	#BIT6,R0			;
	TST_BIT_OF CPUA_SHT_TRD_150		;
	M_BRA	CPUA_SHT_TRD_900		;

CPUA_SHT_TRD_150
	TST	#BIT0,R0			;
	TST_BIT_ON CPUA_SHT_TRD_300		;

	MOV.W	#BIT0,R0
	MOV.L	#_SHT_CNTL_INT_FLG,R1
	MOV.W	R0,@R1				;

	XOR	R0,R0				;
	MOV.L	#_SHT_CNTL_INT_PNT,R1		;POINTER
	MOV.W	R0,@R1				;
	MOV.L	#_SHT_INFO_SMPADR,R1
	MOV.W	R0,@R1				;

	MOV.L	#_SHT_PV_SHT_CNT,R1		;SHOT  ｶｳﾝﾀ設定
	MOV.W	R0,@R1				;
	MOV.L	#_SHT_SMP_PV_NUM,R1		;
	MOV.W	R0,@R1				;

;	---------2007-02-26 ----
	MOV.L	#_SHT_OVER_FLOWCT,R1		;[22,23]5000を超えたら1~65535以降0にはならない
	MOV.W	R0,@R1				;

	MOV.L	#_SHT_INFO_SMPMAX,R1	;
	MOV.W	@R1,R2			;
	TREND_FORM_INTEL REG=R2,LG=B	;
	MOV.L	#_SHT_PV_SMPMAX,R1	;
	MOV.W	R2,@R1			;
	MEM1_BIT0_F_ORSET MEM=(_SQ_CBWK_TOP+_WKSQCB209),LG=W,BIT=(BIT10),WKRG1=R1,WKRG2=R4	;

;	---------- 2006-12-01--------------------
	MOV.L	#_SHT_SVP_SHT_CNT,R1		;SV
	MOV.W	@R1,R2				;
	MOV.L	#_SHT_PV_SHT_CNT,R1		;PV
	MOV.W	R2,@R1				;(1回目の終了から取れるように)
;	-----------------------------------------

;	==== [20090925]===
	FAR_JSR	#_GSMP2_SEND_CLR,R0		;CLR SIG

CPUA_SHT_TRD_200
	NOP

CPUA_SHT_TRD_300
	MOV.L	#_TRD_SHOT_SIG,R1		;
	MOV.W	@R1,R0				;
	TST	#BIT1,R0			;
	TST_BIT_OF CPUA_SHT_TRD_900		;

	MEM1_BIT0_TO_BIT7_ANDCLR MEM=_TRD_SHOT_SIG,LG=W,BIT=~BIT1,WKREG=R1 ;//


	MOV.L	#_SHT_SVP_SHT_CNT,R1		;SV
	MOV.W	@R1,R3				;
	MOV.L	#_SHT_PV_SHT_CNT,R1		;SHOT  ｶｳﾝﾀPV
	MOV.W	@R1,R2				;
	ADD	#1,R2				;
	CMP/HS	R3,R2				;
	BF	CPUA_SHT_TRD_350		;
	XOR	R2,R2				;
CPUA_SHT_TRD_350				;
	MOV.W	R2,@R1				;
	TST	R2,R2				;
	TST_BIT_ON CPUA_SHT_TRD_900		;
;	----- COUNT UP--------
	FAR_JSR	#_CPUA_DATA_SHT_TO_BUF,R0	;

;	============================
	MOV.L	#_SHT_INFO_SMPADR,R5				;
	MOV.W	@R5,R2						;
	ADD	#1,R2						;
	MOV.W	R2,@R5						;

	MOV.L	#_SHT_INFO_SMPMAX,R1				;MAX.SET
	MOV.W	@R1,R4						;
	FAR_JSR	#_FPU_DIVS_32REG2_DIV_32REG4_R2_MOD_R1,R0	;R2...R1
	MOV.L	#_SHT_CNTL_INT_PNT,R6				;
	MOV.W	R1,@R6						;

	TST	R1,R1						;
	TST_BIT_ON CPUA_SHT_TRD_400				;

;	------- 2007-01-11 --------------------
	MOV.L	#_SHT_OVER_FLOWCT,R5				;
	MOV.W	@R5,R2						;
	ADD	#1,R2						;
	TST	R2,R2						;
	TST_BIT_ON CPUA_SHT_TRD_380				;
	MOV.W	#1,R2						;
CPUA_SHT_TRD_380						;
	MOV.W	R2,@R5						;
;	----------------------------------------

	MOV.L	#_SHT_INFO_SMPADR,R5				;
	MOV.W	@R5,R2						;
	MOV.W	#D'29999,R4					;
	CMP/HS	R4,R2						;10000を超えた
	BF	CPUA_SHT_TRD_400
	XOR	R2,R2						;
	MOV.W	R2,@R5						;余りがないからOK

CPUA_SHT_TRD_400

;	-----------------------------
	MOV.L	#_SHT_CNTL_INT_PNT,R6				;
	MOV.W	@R6,R2						;

	TST	R2,R2				;
	TST_BIT_ON CPUA_SHT_TRD_500		;

	MOV.L	#_SHT_TRD_COMSQ,R1		;
	MOV.W	@R1,R3				;
	MOV.W	#BIT10,R4			;
	TST	R4,R3				;
	TST_BIT_ON CPUA_SHT_TRD_500		;連続

	MEM1_BIT0_TO_BIT7_ORSET MEM=_SHT_CNTL_INT_FLG,LG=W,BIT=BIT6,WKREG=R5	;bit-set
	MEM1_BIT0_F_ORSET MEM=(_SQ_CBWK_TOP+_WKSQCB209),LG=W,BIT=(BIT11),WKRG1=R1,WKRG2=R4	;209.11
	MEM1_BIT0_F_ADCLR MEM=(_SQ_CBWK_TOP+_WKSQCB209),LG=W,BIT=(~BIT10),WKRG1=R1,WKRG2=R4	;

CPUA_SHT_TRD_500:
	NOP


CPUA_SHT_TRD_900
	MOV.L	#_SHT_CNTL_INT_FLG,R1		;
	MOV.W	@R1,R0
	TREND_FORM_INTEL REG=R0,LG=B		;
	MOV.L	#_SHT_PV_PNTUSE,R1		;
	MOV.W	R0,@R1				;

	SUB_END
	M_RTS


;	*******************************************
;	***					***
;	***					***
;	***		転送			***
;	***					***
;	***	1ｼｮｯﾄﾃﾞｰﾀ転送[ﾄﾚﾝﾄﾞ]		***
;	*******************************************
_CPUA_DATA_SHT_TO_BUF
	SUB_START


	FAR_JSR	#_KAJYUU_SHOT_ADR_SET,R0




	MOV.L	#_SHT_CNTL_INT_PNT,R1	;
	MOV.W	@R1,R0			;0~4999
	MOV.L	#_SHT_BUF_SMP_MAX-1,R4	;
	CMP/HS	R0,R4			;
	BT	CPUA_DATA_SHTTOBUF100	;
	MOV	R4,R0			;
CPUA_DATA_SHTTOBUF100			;
	SHLL2	R0			;*16byte(*4)
	SHLL2	R0			;*16byte(*4*4)
	MOV.L	#_SHOT_DATA_TOP,R5	;
	ADD	R0,R5			;

;	---- <01:NUM>2byte ---
	MOV.L	#_SHT_INFO_SMPADR,R1	;
	MOV.W	@R1,R0			;
	ADD	#1,R0
	MOV.L	#_SHT_SMP_PV_NUM,R1	;
	MOV.W	R0,@R1			;

;--- 2010-09-21
	MOV.L	#_MON_SV_IVW_USED,R1		;//0:過負荷モニタ 5A:
	MOV.W	@R1,R4				;
	TST	R4,R4				;
	TST_BIT_OF CPUA_DATA_SHTTOBUF150	;

;;;;	MOV.L	#_CYC_IVW_PV2,R1		;1ｻｲｸﾙ電力ﾓﾆﾀ=_PVP_POWER_KWH
;;;;	MOV.W	@R1,R0				;

	MOV.L	#_PVP_POWER_KWH,R1		;平均or電力量
	MOV.W	@R1,R0				;


CPUA_DATA_SHTTOBUF150				;
	MOV.W	R0,@R5			;[0,1]
	ADD	#2,R5			;


	MOV.L	#_SHOT_ADR_LFT,R0	;_BTOA_LFT_TRDMAX
	MOV.L	@R0,R1			;ADR
	MOV.L	@R1,R0			;DATA

	MOV.W	R0,@R5			;[2,3]
	ADD	#2,R5			;//2BYTE

	MOV.L	#_SHOT_ADR_RIH,R0	;_BTOA_RIH_TRDMAX
	MOV.L	@R0,R1			;ADR
	MOV.L	@R1,R0			;DATA
	MOV.W	R0,@R5			;[4,5]
	ADD	#2,R5			;

	MOV.L	#_SHOT_ADR_TTL,R0	;_BTOA_TTL_TRDMAX
	MOV.L	@R0,R1			;ADR
	MOV.L	@R1,R0			;DARA
	MOV.W	R0,@R5			;[6,7]
	ADD	#2,R5			;
	M_BRA	CPUA_DATA_SHTTOBUF200	;2007-12-12 あまり長くしない

CPUA_DATA_SHTTOBUF200			;

;;	MOV.L	#_PVX_DYHITO_POS,R1		;
;;	MOV.L	@R1,R0				;

;;	MOV.L	#_PRD_DAI_POS1,R1		;(平均値)
;;	MOV.L	@R1,R0				;

;	======= 2007-12-12 反転の下死亡表示(本当は区別しなくていい)==
	MOV.L	#_CPOS_CTL_MATH,R1		;
	MOV.W	@R1,R0				;
	TST	#_DMATH_CNTROT,R0		;
	TST_BIT_ON CPUA_DATA_SHTTOBUF300	;
	MOV.L	#_SHOT_MOST_DOWN_POS,R1
	MOV.L	@R1,R0				;生値
	M_BRA	CPUA_DATA_SHTTOBUF400		;

CPUA_DATA_SHTTOBUF300				;
	MOV.L	#_RNA_ABS_MINPOS,R1		;//最下死点
	MOV.L	@R1,R0				;生値
CPUA_DATA_SHTTOBUF400				;

	KOBAYASHI_TOOL SRCREG=R0,LG=W
	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L
	TREND_FORM_INTEL REG=R1,LG=B		;
	MOV.W	R1,@R5				;上位[8,9]
	ADD	#2,R5				;
	TREND_FORM_INTEL REG=R0,LG=B		;
	MOV.W	R0,@R5				;下位[10,11]
	ADD	#2,R5				;

;	------ 2006-12-01---------
	MOV.L	#_PVP_MENTE_CNT,R1			;
	MOV.L	@R1,R0					;
	KOBAYASHI_TOOL SRCREG=R0,LG=W			;
	TREND_FORM_INTEL4B SRCREG=R0,DSTREG=R1,LG=L	;
	TREND_FORM_INTEL REG=R1,LG=B			;
	MOV.W	R1,@R5					;上位[12,13]
	ADD	#2,R5					;
	TREND_FORM_INTEL REG=R0,LG=B			;
	MOV.W	R0,@R5					;下位[14,15]
	ADD	#2,R5					;

;	----  [20090925] -----
	FAR_JSR	#_GSMP2_SEND_CMD,R0			;

	SUB_END
	M_RTS




_KAJYUU_SHOT_ADR_SET:
	SUB_START
	MOV.L	#_SET1_KAJAREA_SEL,R1	;//ﾄﾚﾝﾄﾞ荷重表示選択0:(最大),1:(最小),2(幅)
	MOV.W	@R1,R0			;

	MOV.L	#_BTOA_LFT_TRDHAB,R1
	MOV.L	#_BTOA_RIH_TRDHAB,R2
	MOV.L	#_BTOA_TTL_TRDHAB,R4
	CMP/EQ	#2,R0			;
	BT KAJYUU_SHOTADRSET_100


	MOV.L	#_BTOA_LFT_TRDMIN,R1
	MOV.L	#_BTOA_RIH_TRDMIN,R2
	MOV.L	#_BTOA_TTL_TRDMIN,R4

	CMP/EQ	#1,R0			;
	BT KAJYUU_SHOTADRSET_100

	MOV.L	#_BTOA_LFT_TRDMAX,R1
	MOV.L	#_BTOA_RIH_TRDMAX,R2
	MOV.L	#_BTOA_TTL_TRDMAX,R4

KAJYUU_SHOTADRSET_100:

	MOV.L	#_SHOT_ADR_LFT,R0		;ADR
	MOV.L	R1,@R0
	MOV.L	#_SHOT_ADR_RIH,R0		;ADR
	MOV.L	R2,@R0
	MOV.L	#_SHOT_ADR_TTL,R0		;ADR
	MOV.L	R4,@R0

	SUB_END
	M_RTS





;	***************************************************
;	***						***
;	***						***
;	***		起動時設定関連			***
;	***		起動時以外でも可能にしておく	***
;	***						***
;	***************************************************
_SHT_DATA_SV_INI
	SUB_START


	MOV.W	#_SHT_BUF_SMP_MAX,R4		;
	MOV.L	#_SHT_SVP_SMPMAX_CNT,R1		;MAX
	MOV.W	@R1,R2				;
	CMP/HS	R2,R4				;
	BT	SHT_SVINI100			;
	MOV	R4,R2				;MAX
SHT_SVINI100
	CMP/PL	R2				;+?
	BT	SHT_SVINI120			;
	MOV	#1,R2				;1~5000
SHT_SVINI120
	MOV.L	#_SHT_INFO_SMPMAX,R1		;MAX.SET
	MOV.W	R2,@R1				;

	SUB_END
	M_RTS

;	*******************************************
;	***					***
;	***		DEBUG SOFT		***
;	***					***
;	*******************************************
;
;_SH4_HD_CTRL_REDY	.SRES	2	;準備完了にしたい
;_SH2_HD_CTRL_REDY	.SRES	2	;準備完了にしたい
;_SH4_HD_CTRL_BUSY	.SRES	2	;準備未完了にしたい
;_SH2_HD_CTRL_BUSY	.SRES	2	;準備未完了にしたい
;_SH4_HD_POS_START	.SRES	2	;起動したい
;_SH2_HD_POS_START	.SRES	2	;起動したい
;_SH4_HD_SFTY_AUTO	.SRES	2	;AUTOにしたい/安全一工程,連続ｶｳﾝﾀ
;_SH2_HD_SFTY_AUTO	.SRES	2	;AUTOにしたい/安全一工程,連続ｶｳﾝﾀ
;_SH4_HD_NEAR_ZERO	.SRES	2	;ﾆｱｾﾞﾛ処理を行いたい(使用済み)
;_SH2_HD_NEAR_ZERO	.SRES	2	;ﾆｱｾﾞﾛ処理を行いたい(使用済み)
;_SH4_HD_CNT_STOP	.SRES	2	;連続停止(使用済み)
;_SH2_HD_CNT_STOP	.SRES	2	;連続停止(使用済み)
;_SH4_HD_STEP_END	.SRES	2	;位置決め完了としたい(使用済み)
;_SH2_HD_STEP_END	.SRES	2	;位置決め完了としたい(使用済み)
;_SH4_HD_CNT_CNT		.SRES	2	;連続停止しないで次へいくぞ
;_SH2_HD_CNT_CNT		.SRES	2	;連続停止しないで次へいくぞ
;_SH4_HD_POS_START	.SRES	2	;起動したい
;_SH2_HD_POS_START	.SRES	2	;起動したい
;_SH4_HD_SFTY_AUTO	.SRES	2	;AUTOにしたい/安全一工程,連続ｶｳﾝﾀ
;_SH2_HD_SFTY_AUTO	.SRES	2	;AUTOにしたい/安全一工程,連続ｶｳﾝﾀ
;_SH4_HD_NEAR_ZERO	.SRES	2	;ﾆｱｾﾞﾛ処理を行いたい(使用済み)
;_SH2_HD_NEAR_ZERO	.SRES	2	;ﾆｱｾﾞﾛ処理を行いたい(使用済み)
;_SH4_HD_STEP_END	.SRES	2	;位置決め完了としたい(使用済み)
;_SH2_HD_STEP_END	.SRES	2	;位置決め完了としたい(使用済み)
;	MOV.L	#_SH4_STEP_NO,R6		;
;	MOV.L	#_SH4_POS_STS1,R7		;上記信号 SH4==> WRITE SH2 ==>BIT7 CLR
;	MOV.L	#_SH4_CMP_STS1,R8		;(二重化異常信号 203同様      生)
;	MOV.L	#_SH4_CMP_STS2,R9		;(二重化異常信号 BIT0位置決中 生)
;	MOV.L	#_SH2_STEP_NO,R6		;工程二重回路ﾁｪｯｸ用
;	MOV.L	#_SH2_POS_STS1,R7		;上記信号 SH2==> WRITE SH4 ==>BIT7 CLR
;	MOV.L	#_SH2_CMP_STS1,R8		;(二重化異常信号 273同様      生)
;	MOV.L	#_SH2_CMP_STS2,R9		;(二重化異常信号 BIT8位置決中 生)
;	BTTN_FLG
;
;_SH4_HD_CNT_STOP	.SRES	2	;連続停止(使用済み)
;_SH2_HD_CNT_STOP	.SRES	2	;連続停止(使用済み)
;_SH4_HD_STEP_END	.SRES	2	;位置決め完了としたい(使用済み)
;_SH2_HD_STEP_END	.SRES	2	;位置決め完了としたい(使用済み)
;_SH4_HD_CNT_CNT	.SRES	2	;連続停止しないで次へいくぞ
;_SH2_HD_CNT_CNT	.SRES	2	;連続停止しないで次へいくぞ
;_SH4_HD_POS_START	.SRES	2	;起動したい
;_SH2_HD_POS_START	.SRES	2	;起動したい

	.IMPORT	_SH4_HD_CNT_STOP







;	***************************************************
;	***						***
;	***						***
;	***						***
;	***						***
;	***						***
;	***						***
;	***		画面サンプリング		***
;	****		サンプリング２			***
;	***		＋トレンド送信			***
;	***						***
;	***		2009-09-25			***
;	***						***
;	***						***
;	***		(CPUA)				***
;	***						***
;	***						***
;	***************************************************
;;[2009-09-25]

__SMP2_BUF_MAX2		.EQU	500	;2009-09-25;;[2009-09-25]
__SMP2_SND_SDMAX	.EQU	4	;4BLOCK;;[2009-09-25]
__SMP2_1LINE_CNT	.EQU	24
__SHT2_1LINE_CNT	.EQU	20	;

	.IMPORT	_SVP_SMPTRG_CNT1	;


;	***** ﾎﾟｲﾝﾀを演算した時のﾘﾐｯﾄ ******
	.MACRO	POINT_CAL_LMT LATE,REG1,WKREG1
	MOV.W	#\LATE,\WKREG1
	CMP/PZ	\REG1
	BT	CAL10\@		;+
	ADD	\WKREG1,\REG1	;
CAL10\@:
	CMP/GT	\REG1,\WKREG1	;
	BT	CAL20\@		;REG < 500
	SUB	\WKREG1,\REG1	;0~499
CAL20\@:
	.ENDM

;	***** ﾎﾟｲﾝﾀをADD演算した時のﾘﾐｯﾄ ******
	.MACRO	POINT_ADD_LMT LATE,REG1,WKREG1
	MOV.W	#\LATE,\WKREG1
	CMP/GT	\REG1,\WKREG1	;
	BT	CAL20\@		;REG < 500
	SUB	\WKREG1,\REG1	;0~499
CAL20\@:
	.ENDM

;	***** ﾎﾟｲﾝﾀをADD演算した時のﾘﾐｯﾄ ******
	.MACRO	POINT_ADD_LMTREG REG1,LATEREG
	CMP/GT	\REG1,\LATEREG	;
	BT	CAL20\@		;REG < 500
	SUB	\LATEREG,\REG1	;0~499
CAL20\@:
	.ENDM



;	***** ﾎﾟｲﾝﾀをSUB演算した時のﾘﾐｯﾄ ******
	.MACRO	POINT_SUB_LMT LATE,REG1,WKREG1
	MOV.W	#\LATE,\WKREG1
	CMP/PZ	\REG1
	BT	CAL10\@		;+
	ADD	\WKREG1,\REG1	;
CAL10\@:
	.ENDM

;	***** ﾎﾟｲﾝﾀをSUB演算した時のﾘﾐｯﾄ ******
	.MACRO	POINT_SUB_LMTREG REG1,LATEREG
	CMP/PZ	\REG1
	BT	CAL10\@		;+
	ADD	\LATEREG,\REG1	;
CAL10\@:
	.ENDM





;	***************************************************
;	***		画面サンプリング		***
;	****		サンプリング２			***
;	***		＋トレンド送信	MAIN		***
;	***************************************************
	.ALIGN 4
_GAMEN_SMP2_TRD2
	SUB_START


	FAR_JSR	#_GSMP2_INT_MAIN,R0
	FAR_JSR	#_GSHT2_INT_SEND,R0




GAMEN_SMP2TRD2_END

	SUB_END
	M_RTS

;	***********************************
;	***				***
;	***	画面サンプリング処理	***
;	***				***
;	***********************************
_GSMP2_INT_MAIN:
	SUB_START


;	----------ﾀｲﾏｶｳﾝﾄﾀﾞｳﾝ,ﾌﾟﾘｾｯﾄ,ｻﾝﾌﾟﾘﾝｸﾞ-----------
	MOV.L	#_GSMP2_PV_SMPTIM,R5			;
	MOV.W	@R5,R0					;
	ADD	#-1,R0					;
	MOV.W	R0,@R5					;
	CMP/PL	R0					;
	BT	GSMP2INT_050

;;;2014-09-03	MOV.L	#_SVP_SMPCYC_TIM,R1			;ﾀｲﾏﾌﾟﾘｾｯﾄ
	MOV.L	#_SVP_SMPCYC_TIM2,R1			;ﾀｲﾏﾌﾟﾘｾｯﾄ　画面専用設定　ﾀｲﾏ周期
	MOV.W	@R1,R0					;
	MOV.W	R0,@R5					;

	FAR_JSR	#_SMP2_DATA_IN,R0			;

	MOV.L	#_GSMP2_SMP_PINT,R5				;ﾎﾟｲﾝﾀ+1
	MOV.W	@R5,R0						;(24)
	ADD	#1,R0						;
	POINT_ADD_LMT LATE=__SMP2_BUF_MAX2,REG1=R0,WKREG1=R4	;(500limit)
	MOV.W	R0,@R5

GSMP2INT_050

;	-----------------------------------
;	---	START指令ON/OFF 	---
;	-----------------------------------
;;;	MOV.L	#_SEQAB_DP_TOP+345*2,R1		;
	MOV.L	#_CB_SEQ_CB_COM345,R1
	MOV.W	@R1,R2				;
	MOV.W	#BIT5,R4			;345.5
;;;	MOV.W	#(BIT15+BIT5),R4		;ﾃﾞﾊﾞｯｸ用


	MOV.L	#_GSMP2_CTRL_FLG,R1		;
	MOV.W	@R1,R0				;
	TST	#BIT0,R0			;
	TST_BIT_ON GSMP2INT_200			;ON

	TST	R4,R2				;345.5=1?
	TST_BIT_ON GSMP2INT_100			;
	M_BRA	GSMP2INT_800			;EXIT
;	-------START ON ------------
GSMP2INT_100
	FAR_JSR	#_GSMP2_START_ON_INIT,R0	;
	FAR_JSR	#_GSMP2_TRGWAIT_INIT,R0		;
	M_BRA	GSMP2INT_250

;	-------START　ON中：終了ﾁｪｯｸ--------
GSMP2INT_200
	TST	R4,R2				;345.5=1?
	TST_BIT_ON GSMP2INT_250			;

	FAR_JSR	#_GSMP2_START_OF_INIT,R0	;
	M_BRA	GSMP2INT_800			;EXIT

;	-------START　ON中継続 完了待ち(ｼﾝｸﾞﾙのみ)--------
GSMP2INT_250
	MOV.L	#_GSMP2_CTRL_FLG,R1		;
	MOV.W	@R1,R0				;
	TST	#BIT6,R0			;(ｼﾝｸﾞﾙの時だけ完了ﾌﾗｸﾞがたつ)
	TST_BIT_OF GSMP2INT_300			;NO
	M_BRA	GSMP2INT_800			;

;	---------START　ON継続--------
GSMP2INT_300:
	FAR_JSR	#_GSMP2_LOT_CNT,R0		;2013-07-05 ﾄﾘｶﾞ数をｶｳﾝﾄしていいた→ｻｲｸﾙ数 

	FAR_JSR	#_GSMP2_TRG_CONF_CHK,R0		;R0=0 ﾄﾘｶﾞなし(ｴｯｼﾞを作るからどのｽﾀｰﾄ中は常に通すこと)
	TST	R0,R0				;
	TST_BIT_ON GSMP2INT_350			;ﾄﾘｶﾞありJUMP

;	---------- ﾄﾘｶﾞ無---------------
	MOV.L	#_GSMP2_CTRL_FLG,R1		;
	MOV.W	@R1,R0				;
	TST	#BIT1,R0			;
	TST_BIT_ON GSMP2INT_400			;既にﾄﾘｶﾞあり状態
	M_BRA	GSMP2INT_800			;ﾄﾘｶﾞ待ち状態KEEP

;	---------- ﾄﾘｶﾞ有---------------
GSMP2INT_350:						;
;;;;2013-07-05	FAR_JSR	#_TRG_SMP_CNTCHK,R0		;
;;;;2013-07-05		TST	R0,R0			;
;;;;2013-07-05		TST_BIT_ON GSMP2INT_370		;

;	--------------- ﾄﾘｶﾞ回数N回ではなくｻｲｸﾙ回数N回後のﾄﾘｶﾞ
	MOV.L	#_GSMP2_MAK_PVCNT,R1			;2013-07-05 設定ｻｲｸﾙ毎のﾄﾘｶﾞで描画する
	MOV.W	@R1,R0					;2013-07-05
	TST	R0,R0					;2013-07-05
	TST_BIT_OF GSMP2INT_370				;ｶｳﾝﾄｱｯﾌﾟ
	M_BRA	GSMP2INT_800				;ﾄﾘｶﾞ待ち状態(設定回数回)KEEP

GSMP2INT_370:					;
	MOV.L	#_GSMP2_CTRL_FLG,R1		;
	MOV.W	@R1,R0				;
	TST	#BIT1,R0			;
	TST_BIT_OF GSMP2INT_380			;ﾄﾘｶﾞ処理済みか？NO　JUMP

	MOV.L	#_SEQAB_DP_TOP+57*2,R1		;
	MOV.W	@R1,R0				;BIT8 0:ｼﾝｸﾞﾙ
	MOV.W	#BIT8,R4			;
	TST	R4,R0				;
	TST_BIT_OF GSMP2INT_400			;ｼﾝｸﾞﾙ(ﾄﾘｶﾞ有で既にﾄﾘｶﾞ処理有り)はJUMP

;	-----------ﾄﾘｶﾞ初物・再計測-------
GSMP2INT_380
	FAR_JSR	#_GSMP2_CHG_TRG_STR,R0		;開始演算＋終了点演算

	MOV.L	#_SVP_SMP_CNT,R1		;
	MOV.W	@R1,R0				;
	MOV.L	#_GSMP2_MAK_PVCNT,R1		;設定ｻｲｸﾙ毎に描画
	MOV.W	R0,@R1				;


;この時点で１個送る
;通常は入力元のポインタ
;	-------ﾄﾘｶﾞ後のｻﾝﾌﾟﾘﾝｸﾞ/-------------------
;	-------(ﾀｲﾑｱｯﾌﾟ待ち=終了点に達すればﾄﾘｶﾞ待ちまたは終了になる)--------------
GSMP2INT_400

	MOV.L	#_GSMP2_MAK_CNT,R1						;送信済み個数500個送れば終わり
	MOV.W	@R1,R0								;送信個数
	MOV.W	#__SMP2_BUF_MAX2,R3
	CMP/HI	R0,R3								;0~499<500
	BT	GSMP2INT_500							;

	MOV.L	#_SEQAB_DP_TOP+57*2,R1						;
	MOV.W	@R1,R0								;BIT8 0:ｼﾝｸﾞﾙ
	MOV.W	#BIT8,R4							;
	TST	R4,R0								;
	TST_BIT_ON GSMP2INT_450							;ｼﾝｸﾞﾙ(ﾄﾘｶﾞ有で既にﾄﾘｶﾞ処理有り)はJUMP

	MEM1_BIT0_TO_BIT7_ORSET MEM=_GSMP2_CTRL_FLG,LG=W,BIT=BIT6,WKREG=R1	;bit-set
	FAR_JSR	#_GSMP2_CHG_SMP_END,R0						;
	M_BRA	GSMP2INT_800							;

;	-------連続 ﾄﾘｶﾞ待ちへ遷移　この時は描画にかかわる終了状態を何も変えないこと----
GSMP2INT_450
	FAR_JSR	#_GSMP2_CHG_SMP_END,R0		;(ﾄﾘｶﾞ待ちへ)
	FAR_JSR	#_GSMP2_TRGWAIT_INIT,R0		;
	M_BRA	GSMP2INT_800			;


;	---------ｻﾝﾌﾟﾘﾝｸﾞﾎﾟｲﾝﾀをｲﾝｸﾘﾒﾝﾄ,個数をｲﾝｸﾘﾒﾝﾄ,ﾊﾞﾌｧの並び替えまで行う-----------------
GSMP2INT_500
;_GSMP2_SMP_PINT,R1						;
;_GSMP2_MAK_PINT		.SRES	2			;送信元ｻﾝﾌﾟﾘﾝｸﾞﾎﾟｲﾝﾀ
;_GSMP2_MAK_IN_P		.SRES	2			;_GSMP2_SMP_PINTの前回値
;_GSMP2_MAK_TG_P		.SRES	2			;ﾄﾘｶﾞが発生した時点のﾎﾟｲﾝﾀ()
;　前提：ｻﾝﾌﾟﾘﾝｸﾞが１個されれば送信も１個送る
;	 ｻﾝﾌﾟﾘﾝｸﾞされたことの検知は_GSMP2_SMP_PINT!=_GSMP2_MAK_IN_P(前回値)
;	 _GSMP2_MAK_PINT(ST_P)=_GSMP2_MAK_ED_Pまで続ける　_GSMP2_MAK_CNT=500
;	ｻﾝﾌﾟﾘﾝｸﾞ周期が2以上の時もこれでよいが、遅延データは
;	この周期によらず送信可能なので、送る
;
;(1)遅延ﾃﾞｰﾀ分は1ｽｷｬﾝで1個 _GSMP2_MAK_TG_P=_GSMP2_MAK_PINT=になるまで送る
;(2)_GSMP2_MAK_TG_P=_GSMP2_MAK_PINT以降は
;   _GSMP2_SMP_PINT=_GSMP2_MAK_PINTになるまでおくる。その間に_GSMP2_MAK_ED_Pになれば終了
;   この個数は500であること・・・・・
;　　GSMP2INT_400の　__SMP2_BUF_MAX2=<_GSMP2_MAK_CNTは
;　　_GSMP2_MAK_PINT=_GSMP2_MAK_ED_Pでも同じで本来そっちが正しい
;
	MOV.L	#_GSMP2_MAK_PINT,R5				;
	MOV.W	@R5,R0						;
	MOV.L	#_GSMP2_SMP_PINT,R4				;(常時ｻﾝﾌﾟﾘﾝｸﾞﾎﾟｲﾝﾀ)
	MOV.W	@R4,R1						;
	CMP/EQ	R1,R0						;ｻﾝﾌﾟﾙﾎﾟｲﾝﾀ==送信ﾎﾟｲﾝﾀ?
	BF	GSMP2INT_550					;NO.
	M_BRA	GSMP2INT_800					;

;	--------- 遅延0または遅延中に追いついたまたはPINTが変化したｹｰｽ---
GSMP2INT_550:
	MOV	R0,R1						;
	ADD	#1,R1						;
	POINT_ADD_LMT LATE=__SMP2_BUF_MAX2,REG1=R1,WKREG1=R4	;(500limit)
	MOV.W	R1,@R5						;NEXT SET

	MOV.L	#_GSMP2_MAK_CNT,R1		;
	MOV.W	@R1,R2				;
	MOV	R2,R4				;
	ADD	#1,R4				;
	MOV.W	R4,@R1				;CNT SAVE

	FAR_JSR	#_GSMP2_DAT_CHG_MOV,R1		;Input R0(PINT),R2(CNT)


GSMP2INT_800
	FAR_JSR	#_GSMP2_SEND_MAIN,R0

;	-----------------------

	MOV.L	#_GSMP2_SQOUTDT,R1	;
	MOV.W	@R1,R0			;
	MOV.W	#BIT2+BIT1+BIT0,R4	;
	AND	R4,R0			;
	MOV.L	#_SQ_CBWK_TOP+_WKSQCB227,R1	;
	MOV.W	@R1,R2				;
	NOT	R4,R4				;
	AND	R4,R2
	OR	R0,R2
	MOV.W	R2,@R1


	SUB_END
	M_RTS

	


;	***********************************************************
;	***							***
;	***	現在のサンプリングポインタの実測を入れる	***
;	***							***
;	***********************************************************
	.ALIGN 4
_SMP2_DATA_IN:
	SUB_START

	MOV.L	#_GSMP2_DATA_TOP2,R5			;
	MOV.L	#_GSMP2_SMP_PINT,R1			;
	MOV.W	@R1,R0					;0~500

	MOV.W	#__SMP2_1LINE_CNT,R4			;24
	MULU.W	R0,R4					;500*24
	STS	MACL,R0					;

	ADD	R0,R5					;DST

	FAR_JSR	#_SMP2_DAT_1LINE_MAKE,R0		;


	SUB_END
	M_RTS


	.ALIGN 4
_SMP2_DAT_1LINE_MAKE:
	SUB_START

	MOV.L	#_GSMP2_SMP_PINT,R1			;
	MOV.W	@R1,R7					;DEBUG
	MOV.W	#D'10,R1				;
	MULU.W	R1,R7					;
	STS	MACL,R7					;

;---[0] RNA1(4B)[0,1,2,3]
	MOV.L	#_RNA_ABS_POS,R4			;
	MOV.L	@R4,R0					;
	MOV.L	R0,@R5					;+0,2 RNA1
	ADD	#4,R5

;---[1] RNA2(4B)[4,5,6,7]
	XOR	R0,R0
	MOV.L	R0,@R5					;+4,6 RNA2
	ADD	#4,R5


;---[2] PG角度(2B)[8,9]
	MOV.L	#_TRD_SMP_PV_PGDG,R4			;_INC_ENC360を表示変換したもの
	MOV.W	@R4,R0					;
	MOV.W	R0,@R5					;+8 DIG
	ADD	#2,R5					;

;---[3] (合計荷重)(2B)[10,11]
	MOV.L	#_PVPAB_KAJLIV_TTL,R4			;(合計荷重)
	MOV.L	@R4,R0					;
	CMP/PZ	R0					;2014-02-05
	BT	SMP2_DAT_1LINEMK100			;
;;;;;;;	XOR	R0,R0					;
SMP2_DAT_1LINEMK100:					;

	MOV.W	R0,@R5					;+10 TOTAL-PRS
	ADD	#2,R5					;

;---[4] (左荷重)(2B)[12,13]
	MOV.L	#_PVPAB_KAJLIV_LFT,R4			;(左荷重)
	MOV.L	@R4,R0					;
	CMP/PZ	R0					;2014-02-05
	BT	SMP2_DAT_1LINEMK120			;
;;;;;;;	XOR	R0,R0					;
SMP2_DAT_1LINEMK120:					;
	MOV.W	R0,@R5					;+12 LIGHT-PRS
	ADD	#2,R5					;

;---[5] (右荷重)(2B)[14,15]
	MOV.L	#_PVPAB_KAJLIV_RIH,R4			;(右荷重)
	MOV.L	@R4,R0					;
	CMP/PZ	R0					;2014-02-05
	BT	SMP2_DAT_1LINEMK140			;
;;;;;;;	XOR	R0,R0					;
SMP2_DAT_1LINEMK140:					;
	MOV.W	R0,@R5					;+14 REFT-PRES
	ADD	#2,R5					;

;---[6] SEQ(2B)[16,17]
	MOV.L	#_TRD_SMP_PV_SEQ,R4			;ｼｰｹﾝｽﾋﾞｯﾄ
	MOV.W	@R4,R0					;
	MOV.W	R0,@R5					;+16 SEQ
	ADD	#2,R5					;

;---[7] 予備(2B)[18,19]
	XOR	R0,R0
	MOV.W	R0,@R5					;+18 REV
	ADD	#2,R5					;


;---[8] 電力(4B) 0.01kw[20,21,22,23]
	MOV.L	#_PV_IVW_DAT_INP,R4			;//10[w] data　+/-10wdata[画面]
	MOV.L	@R4,R0					;
	MOV.L	R0,@R5					;+20,21,22,23 REV
	ADD	#4,R5					;

	SUB_END
	M_RTS


;	***********************************************************
;	***							***
;	***	状態遷移時のイニシャル処理			***
;	***							***
;	***********************************************************

;	***********************************************************
;	***							***
;	***	スタート指令ＯＮのイニシャル処理		***
;	***							***
;	***********************************************************
	.ALIGN 4
_GSMP2_START_ON_INIT:
	SUB_START

	XOR	R0,R0
	MOV.L	#_GSMP2_MAK_PVCNT,R1			;設定ｻｲｸﾙ毎に描画
	MOV.W	R0,@R1					;0:1回目は書く

	SUB_END
	M_RTS

;	***********************************************************
;	***							***
;	***	スタート指令ＯＦＦのイニシャル処理		***
;	***							***
;	***********************************************************
	.ALIGN 4
_GSMP2_START_OF_INIT:
	SUB_START
	MOV.L	#_GSMP2_CTRL_FLG,R1		;
	XOR	R0,R0				;
	MOV.W	R0,@R1				;SAVE
	MOV.L	#_GSMP2_SQOUTDT,R1		;
	MOV.W	R0,@R1				;BIT2,1,0=001

	SUB_END
	M_RTS

;	***********************************************************
;	***							***
;	***	トリガ待ち開始のイニシャル処理			***
;	***							***
;	***********************************************************
	.ALIGN 4
_GSMP2_TRGWAIT_INIT:
	SUB_START

	FAR_JSR	#_GSMP2_TRG_CONF_CHK,R0		;前回値のﾘﾌﾚｯｼｭの為　ｲﾆｼｬﾙで行う

	MOV.L	#_GSMP2_CTRL_FLG,R1		;
	MOV.W	#BIT0,R0			;
	MOV.W	R0,@R1				;SAVE

	MOV.L	#_GSMP2_SQOUTDT,R1		;
	MOV.W	#BIT0,R0			;
	MOV.W	R0,@R1				;BIT2,1,0=001

	SUB_END
	M_RTS

;
;
;
;
;	*******************************************
;	***					***
;	***	2013-07-03			***
;	***	画面LITE			***
;	***					***
;	*******************************************
;	描画方法:連続,***ショット毎の場合 サイクル運転回数後＋トリガを参照する
;
;
_GSMP2_LOT_CNT
	SUB_START

	MOV.L	#_TRD_SHOT_SIG,R1		;
	MOV.W	@R1,R0				;
	TST	#BIT2,R0			;
	TST_BIT_OF GSMP2_LOTCNT_EXT		;
	AND	#LOW ~BIT2,R0			;
	MOV.W	R0,@R1				;

	MOV.L	#_GSMP2_MAK_PVCNT,R1		;設定ｻｲｸﾙ毎に描画
	MOV.W	@R1,R0				;
	TST	R0,R0
	TST_BIT_OF GSMP2_LOTCNT_EXT		;
	ADD	#-1,R0				;
	MOV.W	R0,@R1				;
GSMP2_LOTCNT_EXT

	SUB_END
	M_RTS


;;2013-07-02 _TRG_SMP_CNTCHK:
;;2013-07-02	SUB_START
;;2013-07-02
;;2013-07-02	MOV.L	#_GSMP2_MAK_PVCNT,R5			;設定ｻｲｸﾙ毎に描画
;;2013-07-02	MOV.W	@R5,R0					;
;;2013-07-02	ADD	#-1,R0					;
;;2013-07-02	CMP/PL	R0
;;2013-07-02	BT	TRG_SMPCNTCHK_50			;
;;2013-07-02	XOR	R0,R0					;
;;2013-07-02	MOV.W	R0,@R5					;
;;2013-07-02	M_BRA	TRG_SMPCNTCHK_UP			;
;;2013-07-02
;;2013-07-02TRG_SMPCNTCHK_50
;;2013-07-02	MOV.W	R0,@R5					;
;;2013-07-02	XOR	R0,R0					;ｶｳﾝﾄｱｯﾌﾟしない
;;2013-07-02	M_BRA	TRG_SMPCNTCHK_END			;
;;2013-07-02TRG_SMPCNTCHK_UP
;;2013-07-02	MOV.W	#1,R0				;ｶｳﾝﾄｱｯﾌﾟした
;;2013-07-02TRG_SMPCNTCHK_END
;;2013-07-02
;;2013-07-02	SUB_END
;;2013-07-02	M_RTS

;	*******************************************
;	***					***
;	***	連続のﾄﾘｶﾞによる終了処理	***
;	***					***
;	*******************************************
;	R0=1:終了 R0=0継続
;;;_GSMP2_CHG_TRG_END:		;(終了処理)
;;;	SUB_START
;;;
;;;	MOV.L	#_GSMP2_MAK_PVCNT	.SRES	2			;設定ｻｲｸﾙ毎に描画
;;;	
;;;	SUB_END
;;;	M_RTS
;;;

;	***************************************************
;	***						***
;	***	ｼﾝｸﾞﾙ・連続のﾄﾘｶﾞによる転送開始処理	***
;	***						***
;	***************************************************
_GSMP2_CHG_TRG_STR:
	SUB_START


;	--------- ﾎﾟｲﾝﾀ演算----------
	MOV.L	#_GSMP2_SMP_PINT,R1					;
	MOV.W	@R1,R0							;REFLASH

	FAR_JSR	#_GSMP2_CALC_CHG_POINT,R0				;

	MOV.L	#_GSMP2_MAK_ST_P,R1					;ｽﾀｰﾄﾎﾟｲﾝﾀ(本来これは不要)
	MOV.W	@R1,R0							;1個分
	MOV.L	#_GSMP2_MAK_PINT,R1					;送信元ｻﾝﾌﾟﾘﾝｸﾞﾎﾟｲﾝﾀ
	MOV.W	R0,@R1							;

	XOR	R0,R0
	MOV.L	#_GSMP2_MAK_CNT,R1					;500個送れば終わり
	MOV.W	R0,@R1							;送信個数

;	--------- 状態遷移ﾌﾗｸﾞ----------
	MEM1_BIT0_TO_BIT7_ORSET MEM=_GSMP2_CTRL_FLG,LG=W,BIT=BIT1,WKREG=R1	;bit-set


;	--------- SEQ 出力--------
	MOV.L	#_GSMP2_SQOUTDT,R1	;
	MOV.W	#BIT1,R0		;
	MOV.W	R0,@R1			;
;;	MEM1_BIT0_TO_BIT7_ANDCLR MEM=_GSMP2_SQOUTDT,LG=W,BIT=~BIT0,WKREG=R1 	;//
;;	MEM1_BIT0_TO_BIT7_ORSET MEM=_GSMP2_SQOUTDT,LG=W,BIT=BIT1,WKREG=R1	;



;	----------転送処理へ新しいデータ作成の通知--------------------------
	MEM1_BIT0_TO_BIT7_ORSET MEM=_GSMP2_MAK_MV_COM,LG=W,BIT=BIT0,WKREG=R1	;転送処理START

	SUB_END
	M_RTS


;	***********************************
;	***				***
;	***	入/切 57.5と57.7	***
;	***	ｴｯｼﾞ選択は56.0~56.3	***
;	***				***
;	***********************************
;	ｽﾀｰﾄONや待ちでクリアするのが正解でしょう
;
_GSMP2_TRG_CONF_CHK:
	SUB_START
	FAR_JSR	#_TRD_TRIG_SEQ,R0		;
	MOV	R0,R9				;BIT0:KEEP 指定されたｼｰｹﾝｽｱﾄﾞﾚｽﾋﾞｯﾄの結果=BIT0

	MOV.L	#_SEQAB_DP_TOP+56*2,R1			;
	MOV.W	@R1,R8					;BIT0~BIT3 ｴｯｼﾞ

	MOV.L	#_SEQAB_DP_TOP+57*2,R1			;
	MOV.W	@R1,R0					;BIT4~BIT7 ﾄﾘｶﾞ入/切

	XOR	R7,R7
	MOV.W	#(BIT7+BIT5),R4				;BIT7=ｼｰｹﾝｽ,BIT
	TST	R4,R0					;
	TST_BIT_OF GSMP2_TRIGCHK_WAIT			;ﾄﾘｶﾞ入なし：不成立

	ROTCR	R9					;
	ROTCL	R7					;SEQ:ON:1( SV=< PV )

	SHLL	R7					;0:CONST

	MOV.L	#_TRD_SVP_SMPSTR_AGL,R1			; ｻﾝﾌﾟﾘﾝｸﾞ　ﾄﾘｶﾞ角度
	MOV.W	@R1,R2					;
	MOV.L	#_TRD_SMP_PV_PGDG,R1			;
	MOV.W	@R1,R3					;
	CMP/HS	R2,R3					;
	ROTCL	R7					;ON:1( SV=< PV )

	SHLL	R7					;0:CONST
							;BIT3=SEQ BIT2=0 BIT1=DIG BIT0=0

	XOR	R8,R7					;R8 BIT3~BIT0:(0:立上 1:立下)


	MOV.L	#_GSMP2_CH_LEVEL,R1			;前回値
	MOV.W	@R1,R2					;
	MOV.W	R7,@R1					;LEVEL信号()

	SHLR2	R0					;SWITCH
	SHLR2	R0					;BIT7~BIT4→BIT3~BIT0
	MOV.W	#(BIT3+BIT1),R4				;入/切
	AND	R4,R0					;SWITCH
	AND	R0,R2					;OLD
	AND	R0,R7					;NEW
	CMP/EQ	R0,R7					;今回AND条件が成立しているか？
	BF	GSMP2_TRIGCHK_WAIT			;NO
	CMP/EQ	R0,R2					;;
	BT	GSMP2_TRIGCHK_WAIT			;前回AND条件が成立しているか? YES EXIT
	M_BRA	GSMP2_TRIGCHK_TRG			;今回成立し、前回成立していない これがエッジだ


GSMP2_TRIGCHK_WAIT:
	XOR	R0,R0
	M_BRA	GSMP2_TRIGCHK_EXT		;
GSMP2_TRIGCHK_TRG:
	MOV	#-1,R0
GSMP2_TRIGCHK_EXT:

	SUB_END
	M_RTS
	


;	***********************************
;	***				***
;	***	トリガ発生		***
;	***	(現在-1)-遅延ﾎﾟｲﾝﾀ	***
;	***	(現在-1)-遅延ﾎﾟｲﾝﾀ+500	***
;	***	0=<遅延ﾎﾟｲﾝﾀ<500	***
;	***				***
;	***********************************
;	現在ﾎﾟｲﾝﾀ(_GSMP2_SMP_PINT)はこのｿﾌﾄ処理時は+1されたものになる
;	POINTER=0 499番地*24
;	POINTER=1   0番地*24
;	.......=498
;	.......=499
;	.......=0:
;	500は存在しない
;
_GSMP2_CALC_CHG_POINT:
	SUB_START

	MOV.L	#_SVP_SMPTRG_CNT1,R1			;遅延
	MOV.W	@R1,R2					;
;;;;[20090101]	MOV.W	#__SMP2_BUF_MAX2-1,R4			;500-1=499
	MOV.W	#__SMP2_BUF_MAX2-2,R4			;500-2=498
	CMP/HS	R2,R4					;R2 =< R4(498) ﾏｲﾅｽも498
	BT	GSMP2_CALC_CHGP100			;
	MOV	R4,R2					;LIMIT
GSMP2_CALC_CHGP100

	MOV.L	#_GSMP2_SMP_PINT,R1					;
	MOV.W	@R1,R0							;
	ADD	#-1,R0							;
	MOV.W	#__SMP2_BUF_MAX2,R3
	POINT_SUB_LMTREG REG1=R0,LATEREG=R3			;

	MOV.L	#_GSMP2_MAK_TG_P,R1					;ﾄﾘｶﾞが発生した時点のﾎﾟｲﾝﾀ
	MOV.W	R0,@R1							;


	SUB	R2,R0							;PONTER-DLY
	POINT_SUB_LMTREG REG1=R0,LATEREG=R3			;


	MOV.L	#_GSMP2_MAK_ST_P,R1					;ｽﾀｰﾄﾎﾟｲﾝﾀ(本来これは不要)
	MOV.W	R0,@R1							;1個分

	MOV.W	#__SMP2_BUF_MAX2-1,R2					;499個分
	ADD	R0,R2
	POINT_ADD_LMTREG REG1=R2,LATEREG=R3				;

	MOV.L	#_GSMP2_MAK_ED_P,R1					;終了ﾎﾟｲﾝﾀ
	MOV.W	R2,@R1							;


	SUB_END
	M_RTS

;	*******************************************
;	***					***
;	***	データ更新終わりです。		***
;	***					***
;	*******************************************
_GSMP2_CHG_SMP_END:
	SUB_START

;	----------------------------------
	MOV.L	#_GSMP2_SQOUTDT,R1	;
	MOV.W	#BIT2,R0		;
	MOV.W	R0,@R1			;完了状態

;	----------転送処理へとりあえず終了を通知--------------------------
	MEM1_BIT0_TO_BIT7_ORSET MEM=_GSMP2_MAK_MV_COM,LG=W,BIT=BIT1,WKREG=R1	;転送処理ﾃﾞｰﾀ更新終わり

	SUB_END
	M_RTS

;	***************************************************
;	***						***
;	***	並び替える兼　送信遅れのためのバファ	***
;	***						***
;	***************************************************
;	Input R0(SRC),R2(DST)
_GSMP2_DAT_CHG_MOV:
	SUB_START

	MOV	R0,R3					;
	MOV.W	#__SMP2_1LINE_CNT,R4			;24
	MULU.W	R3,R4					;500*24
	STS	MACL,R3					;
	MOV.L	#_GSMP2_DATA_TOP2,R5			;
	ADD	R3,R5					;


	MOV.L	#_GSMP2_SEND_TOP2,R6
	MOV	R2,R3					;
	MULU.W	R3,R4					;500*24
	STS	MACL,R3					;
	ADD	R3,R6					;


	MOV.W	#__SMP2_1LINE_CNT/4,R4			;

GSMP2_DAT_CGMV_LOP100:
	MOV.L	@R5+,R1					;
	MOV.L	R1,@R6
	ADD	#4,R6
	ADD	#-1,R4					;
	TST	R4,R4					;
	TST_BIT_ON GSMP2_DAT_CGMV_LOP100	


	SUB_END
	M_RTS

;	***************************************************
;	***						***
;	***						***
;	***		転送側処理			***
;	***		START-ｺｰﾄﾞのみ参照		***
;	***						***
;	***						***
;	***************************************************
;	ﾊﾝﾄﾞｼｪｲｸは
	.IMPORT		_CPA_SMPDAT2		;24byte*4block=96
	.IMPORT		_CPA_SHTDAT2		;20byte*1block=20
	.IMPORT		_HND_SMPCNT_FLG2	;0,1,2,3,4 (BIT15=1:NEXT START)(CPUA:SET CPUB:CLR)
	.IMPORT		_HND_SHTCNT_FLG2	;0,1	   (BIT15=1:NEXT START)(CPUA:SET CPUB:CLR)
;
;	FLG2 BIT15=1(FIRSTﾃﾞｰﾀ)
;	-----------ｻﾝﾌﾟﾘﾝｸﾞ→転送側-------------
;_GSMP2_MAK_MV_COM	.SRES	2		;
;	-----------転送側-----------------------
;_GSMP2_SND_CNT		.SRES	2		;送信完了個数
;
_GSMP2_SEND_MAIN:
	SUB_START
;;	FAR_JSR	#_GSMP2_SEND_TRDMN,R0

;	---------初期化有ﾌﾗｸﾞｸﾘｱ-------------
	XOR	R9,R9					;R9:このソース内のフラグ

	MOV.L	#_HND_SMPCNT_FLG2,R1			;0,1,2,3,4 (BIT15=1:NEXT START)(CPUA:SET CPUB:CLR)
	MOV.W	@R1,R0					;
	TST	R0,R0					;
	TST_BIT_ON GSMP2_SEND_MN500			;送信不可

;	-------- 転送可能------------
	MOV.L	#_GSMP2_MAK_MV_COM,R5			;
	MOV.W	@R5,R0					;
	TST	#BIT0,R0				;
	TST_BIT_OF GSMP2_SEND_MN100			;開始ｺﾏﾝﾄﾞOFF

;	-------- 初期化ｺﾏﾝﾄﾞ有り=>初期ｺﾏﾝﾄﾞはｸﾘｱしておく------------
	XOR	R0,R0
	MOV.W	R0,@R5					;
	MOV.W	#BIT15,R9				;R9:初期化ｺﾏﾝﾄﾞ有りFLAG

;	-------- 送信カウンタ------------
	MOV.L	#_GSMP2_SND_CNT,R1			;送信完了個数=送信完了ポインタ
	XOR	R0,R0					;
	MOV.W	R0,@R1					;



GSMP2_SEND_MN100:

	MOV.L	#_GSMP2_MAK_CNT,R1			;MAKE側(ｿｰﾄﾊﾞﾌｧのﾎﾟｲﾝﾀになる)
	MOV.W	@R1,R2					;
	MOV.L	#_GSMP2_SND_CNT,R7			;送信完了個数
	MOV.W	@R7,R0					;
	MOV	R0,R3
	CMP/HS	R2,R3					;MAKE =< SEND
	BT	GSMP2_SEND_MN400			;追いついた(送り終わっている)

	SUB	R2,R3					;送りたい個数()
	NEG	R3,R3					;(R2-R3=個数 = (R3-R2)*-1
	MOV.W	#__SMP2_SND_SDMAX,R4			;4個
	CMP/HS	R3,R4					;R0=<4(1~4)
	BT	GSMP2_SEND_MN150			;
	MOV	R4,R3					;MAX(4)
GSMP2_SEND_MN150:
;	"R0:今まで送った個数=ﾎﾟｲﾝﾀ"
;	"R3:これから送る個数
	MOV	R0,R2					;
	ADD	R3,R0					;0個+4=4個 
	MOV.W	R0,@R7					;


	MOV.W	#__SMP2_1LINE_CNT,R1			;24
	MOV.L	#_GSMP2_SEND_TOP2,R5			;Data SORCE
	MULU.W	R1,R2					;500*24
	STS	MACL,R2					;0*24 1*24  499*24
	ADD	R2,R5					;
	MOV.L	#_CPA_SMPDAT2,R6		;24byte*4block=96

	PUSH_REG1 R3
GSMP2_SEND_MN200_LOP:

	MOV.W	#__SMP2_1LINE_CNT/4,R1			;24

GSMP2_SEND_MN220_LOP:
	MOV.L	@R5+,R4					;
	MOV.L	R4,@R6					;
	ADD	#4,R6
	ADD	#-1,R1					;
	TST	R1,R1
	TST_BIT_ON GSMP2_SEND_MN220_LOP			;24byte


	ADD	#-1,R3					;
	TST	R3,R3					;
	TST_BIT_ON GSMP2_SEND_MN200_LOP			;24byte*4block

;	--- data 転送完了 ---
	POP_REG1 R3					;

	EXTU.B	R3,R3					;1
	OR	R9,R3					;BIT15=1:初期化有り
	MOV.L	#_HND_SMPCNT_FLG2,R1			;
	MOV.W	R3,@R1					;

	TST	R9,R9					;
	TST_BIT_OF GSMP2_SEND_MN400			;DEBUG
	NOP						;
GSMP2_SEND_MN400:
	NOP
GSMP2_SEND_MN500:
		
	SUB_END
	M_RTS

;	*******************************************
;	***					***
;	***		ｼｮｯﾄｿﾌﾄ			***
;	***					***
;	*******************************************
_GSHT2_INT_SEND
	SUB_START

	MOV.L	#_HND_SHTCNT_FLG2,R1	;  (BIT15=1:NEXT START)(CPUA:SET CPUB:CLR)
	MOV.W	@R1,R0
	TST	R0,R0
	TST_BIT_ON GSHT2_INTMAIN_800	;(送信不可)

	MOV.L	#_GSHT2_MAK_MV_COM,R5	;
	MOV.W	@R5,R0			;
	TST	#BIT2,R0		;
	TST_BIT_OF GSHT2_INTMAIN_800	;data 有り? NO
	XOR	R4,R4
	MOV.W	R4,@R5


;	---- data 有り---
	XOR	R9,R9			;
	TST	#BIT0,R0		;
	TST_BIT_OF GSHT2_INTMAIN_100	;
	MOV.W	#BIT15,R9		;
GSHT2_INTMAIN_100

	MOV.W	#__SHT2_1LINE_CNT/4,R3

	MOV.L	#_GSHT2_1LINE_DAT,R5	;
	MOV.L	#_CPA_SHTDAT2,R6	;20byte*1block=20
GSHT2_INTMAIN_200LOP
	MOV.L	@R5+,R2			;
	MOV.L	R2,@R6			;
	ADD	#4,R6			;
	ADD	#-1,R3			;
	TST	R3,R3			;
	TST_BIT_ON GSHT2_INTMAIN_200LOP	;

	MOV.W	#1,R0			;1個
	OR	R9,R0			;CNT=1 BIT15=1START/BIT15=0:CONTINUE
	MOV.L	#_HND_SHTCNT_FLG2,R1	;
	MOV.W	R0,@R1			;

GSHT2_INTMAIN_800

	FAR_JSR	#_GSMP2_UPDN_KSCLR,R0	;

	SUB_END
	M_RTS

;	*******************************************
;	***					***
;	***		ｼｮｯﾄｿﾌﾄから呼ばれる	***
;	***					***
;	*******************************************
_GSMP2_SEND_CMD:
	SUB_START

	MOV.L	#_GSHT2_1LINE_DAT,R5	;

	MOV.L	#_SHOT_MOST_DOWN_POS,R1	;
	MOV.L	@R1,R2			;
	MOV.L	R2,@R5			;0,1,2,3
	ADD	#4,R5			;

	XOR	R2,R2			;
	MOV.L	R2,@R5			;4,5,6,7
	ADD	#4,R5			;


	MOV.L	#_SHOT_ADR_TTL,R0	;_BTOA_TTL_TRDMAX,R1	;_PVPAB_ARA1_KAJ_T
	MOV.L	@R0,R1			;ADR
	MOV.L	@R1,R2			;DATA
	MOV.W	R2,@R5			;8,9
	ADD	#2,R5


	MOV.L	#_SHOT_ADR_LFT,R0	;_BTOA_LFT_TRDMAX,R1	;_PVPAB_ARA1_KAJ_L
	MOV.L	@R0,R1			;ADR
	MOV.L	@R1,R2			;DATA
	MOV.W	R2,@R5			;10,11
	ADD	#2,R5


	MOV.L	#_SHOT_ADR_RIH,R0	;_BTOA_RIH_TRDMAX,R1	;_PVPAB_ARA1_KAJ_R
	MOV.L	@R0,R1			;ADR
	MOV.L	@R1,R2			;DATA
	MOV.W	R2,@R5			;12,13
	ADD	#2,R5

;;;2010-09-21	XOR	R2,R2		;
;;;	MOV.L	#_CYC_IVW_PV2,R1	;1ｻｲｸﾙ電力ﾓﾆﾀ=_PVP_POWER_KWH
	MOV.L	#_PVP_POWER_KWH,R1	;平均or電力量
	MOV.W	@R1,R2			;
	MOV.W	R2,@R5			;14,15


	MEM1_BIT0_TO_BIT7_ORSET MEM=_GSHT2_MAK_MV_COM,LG=W,BIT=BIT2,WKREG=R1	;BIT2=1(ﾃﾞｰﾀ有り)




	FAR_JSR	#_GSMP2_UPDN_KS,R0	;


	SUB_END
	M_RTS

;	***************************************************
;	***						***
;	***		ｼｮｯﾄｿﾌﾄINITALから呼ばれる	***
;	***						***
;	***************************************************
_GSMP2_SEND_CLR:
	SUB_START
	MEM1_BIT0_TO_BIT7_ORSET MEM=_GSHT2_MAK_MV_COM,LG=W,BIT=BIT0,WKREG=R1	;BIT0=1(INITAL//中断)
	SUB_END
	M_RTS
	


;	***************************************************
;	***						***
;	***		上下限警報			***
;	***						***
;	***						***
;	***************************************************
;56.13 UP 227.5    data < PV=1
;56.14 DN 227.6    data > PV=1
	.IMPORT	_SVP_TRDCSR_RNAU	;/* ｽﾗｲﾄﾞ上限検出位置	*/
	.IMPORT	_SVP_TRDCSR_RNAD	;/* ｽﾗｲﾄﾞ上限検出位置	*/ 
;
_GSMP2_UPDN_KS:
	SUB_START
	MOV.L	#_SHOT_MOST_DOWN_POS,R1		;
	MOV.L	@R1,R2				;

	MOV.L	#_SEQAB_DP_TOP+56*2,R1		;
	MOV.W	@R1,R0				;
	MOV.W	#BIT13,R4			;
	TST	R4,R0				;
	TST_BIT_OF GSMP2_UPDNKS_100		;上限警報切

	MOV.L	#_SVP_TRDCSR_RNAU,R1		;/* ｽﾗｲﾄﾞ上限検出位置	*/
	MOV.L	@R1,R3				;
	CMP/GE	R2,R3				;MOST =< SV :OK
	BT	GSMP2_UPDNKS_100		;
	MEM1_BIT0_F_ORSET MEM=(_SQ_CBWK_TOP+_WKSQCB227),LG=W,BIT=(BIT5),WKRG1=R1,WKRG2=R5	;

GSMP2_UPDNKS_100:

	MOV.W	#BIT14,R4			;
	TST	R4,R0				;
	TST_BIT_OF GSMP2_UPDNKS_200		;上限警報下限

	MOV.L	#_SVP_TRDCSR_RNAD,R1		;/* ｽﾗｲﾄﾞ上限検出位置	*/ 
	MOV.L	@R1,R3				;
	CMP/GE	R3,R2				;SV =< MOST :OK
	BT	GSMP2_UPDNKS_200		;
	MEM1_BIT0_F_ORSET MEM=(_SQ_CBWK_TOP+_WKSQCB227),LG=W,BIT=(BIT6),WKRG1=R1,WKRG2=R5	;

GSMP2_UPDNKS_200:
	
	SUB_END
	M_RTS



_GSMP2_UPDN_KSCLR:
	SUB_START
	
	MOV.L	#_SEQAB_DP_TOP+56*2,R1		;
	MOV.W	@R1,R0				;
	MOV.W	#BIT13,R4			;
	TST	R4,R0				;
	TST_BIT_ON GSMP2_UPDNKSCLR_150		;上限警報入
	MEM1_BIT0_F_ADCLR MEM=(_SQ_CBWK_TOP+_WKSQCB227),LG=W,BIT=(~BIT5),WKRG1=R1,WKRG2=R5	;
GSMP2_UPDNKSCLR_150:

	MOV.W	#BIT14,R4			;
	TST	R4,R0				;
	TST_BIT_ON GSMP2_UPDNKSCLR_250		;上限警報下限切
	MEM1_BIT0_F_ADCLR MEM=(_SQ_CBWK_TOP+_WKSQCB227),LG=W,BIT=(~BIT6),WKRG1=R1,WKRG2=R5	;

GSMP2_UPDNKSCLR_250:

	SUB_END
	M_RTS



	.INCLUDE	"ssa_ivw.inc"		;


;	***************************************************
;	***						***
;	***						***
;	***						***
;	***						***
;	***						***
;	***						***
;	***		ローダコマンドソフト		***
;	***						***
;	***						***
;	***						***
;	***						***
;	***						***
;	***						***
;	***						***
;	***						***
;	***						***
;	***************************************************
	.IMPORT	_HMI2CB_LDCMD_FLG	; HMI->C/B ﾛｰﾀﾞｺﾏﾝﾄﾞｾｯﾄﾌﾞﾗｸﾞ
	.IMPORT	_HMI2CB_LDCMD_DAT	; HMI->C/B ﾛｰﾀﾞｺﾏﾝﾄﾞ
	.IMPORT	_CB2HMI_LDCMD_FLG	; C/B->HMI ﾛｰﾀﾞｺﾏﾝﾄﾞｾｯﾄﾌﾞﾗｸﾞ
	.IMPORT	_CB2HMI_LDCMD_DAT	; C/B->HMI ﾛｰﾀﾞｺﾏﾝﾄﾞ


	.EXPORT	_CPUA_LODER_COMMAND_IF
	.ALIGN 4
_CPUA_LODER_COMMAND_IF:
	SUB_START

	FAR_JSR	#_LODER_CMD_IF,R0		;

	SUB_END
	M_RTS

	.INCLUDE	"ssa_lcmd.inc"		;

;	*******************************************
;	***					***
;	***					***
;	***					***
;	***		メモリ宣言		***
;	***		トレンド		***
;	***					***
;	***					***
;	*******************************************
;	0C18,0000~
;	ﾛｰﾀﾞｺﾏﾝﾄﾞから18000引き算する.(連絡ﾐｽ対策)
;
	.EXPORT	_TREND_INFO_TOP	
	.EXPORT	_TREND_DATA_TOP
	.EXPORT	_SHOT_DATA_TOP			;

	.EXPORT	_TREND_DATA_END

	.SECTION	Btrend,data		;0C180000　ET1:32768
	.org	h'0000				;
_TREND_INFO_TOP					;
_TRD_PV_INFO_SMPTYP	.SRES	2		;[0,1]1
_TRD_PV_INFO_SMPSTS	.SRES	2		;[2,3]0:SMPLING DURING 1:SMPLING中
_TRD_PV_INFO_SMPMAX	.SRES	2		;[4,5]_TRD_SVP_SMPMAX_CNT(ｻﾝﾌﾟﾘﾝｸﾞ個数=5000)
_TRD_PV_INFO_SMPADR	.SRES	2		;[6,7]0~29999
_TRD_PV_INFO_SMPNUM	.SRES	2		;[8,9]0~29999
_TRD_PV_INFO_TRGADR	.SRES	2		;[10,11]0~4999
_TRD_PV_INFO_TRGNUM	.SRES	2		;[12,13]0~29999
_TRD_PV_INFO_SMPDLY	.SRES	2		;[14,15]_TRD_SVP_SMPTRG_CNT(ﾌﾟﾘﾄﾘｶﾞ個数)
_TRD_PV_INFO_SMPCYC	.SRES	2		;[16,17]ｻﾝﾌﾟﾘﾝｸﾞ時間1msec固定

;	-------------SHOT-data 最大個数-------------
_SHT_INFO_SMPADR	.SRES	2		;[18,19]0~29999
_SHT_PV_SMPMAX		.SRES	2		;[20,21](ｻﾝﾌﾟﾘﾝｸﾞ個数)
_SHT_OVER_FLOWCT	.SRES	2		;[22,23]5000を超えたら1~65535以降0にはならない
_SHT_PV_PNTUSE		.SRES	2		;[24,25]
_SHT_SMP_PV_NUM		.SRES	2		;[26,27]1~30000
_SHT_SVP_SHT_CNT	.SRES	2		;[28,29]SHOT  ｶｳﾝﾀ設定
_SHT_PV_SHT_CNT		.SRES	2		;[30,31]SHOT  ｶｳﾝﾀPV
_TRD_SHT_SEQ_STS	.SRES	2		;[32,33]

;	--------------機種コード、機種番号、読出禁止---------
_TRD_DATA_LOCK		.SRES	2		;[34,35]BIT0,BIT1
_TRD_MCN_COD		.SRES	2		;[36,37]
_TRD_MCN_NUM		.SRES	2		;[38,39]

;	------- 2010-09-21 -------------
_TRD_IVW_USED		.SRES	2		;[40,41](0:負荷率    5A:電力量)以下のﾍｯﾀﾞ情報は5Aの場合有効それ以外は上位は参照しないこと
_TRD_IVW_RNGE		.SRES	2		;[42,43](0:小数点2桁 5A:小数点1桁)
_TRD_IVW_CSEL		.SRES	2		;[44,45](0:平均電力  5A:電力量)

;	-----  2012-09-25 ------------
_TRD_PASOCOM_CD		.SRES	2		;[46,47] ﾊﾟｿｺﾝ側のﾁｪｯｸｺｰﾄﾞ 005A
_TRD_SEQMONI_01		.SRES	2		;[48,49]
_TRD_SEQMONI_02		.SRES	2		;[50,51]
_TRD_SEQMONI_03		.SRES	2		;[52,53]
_TRD_SEQMONI_04		.SRES	2		;[54,55]
_TRD_SEQMONI_05		.SRES	2		;[56,57]
_TRD_SEQMONI_06		.SRES	2		;[58,59]
_TRD_SEQMONI_07		.SRES	2		;[60,61]
_TRD_SEQMONI_08		.SRES	2		;[62,63]
_TRD_SEQMONI_09		.SRES	2		;[64,65]
_TRD_SEQMONI_10		.SRES	2		;[66,67]
_TRD_SEQMONI_11		.SRES	2		;[68,69]
_TRD_SEQMONI_12		.SRES	2		;[70,71]
_TRD_SEQMONI_13		.SRES	2		;[72,73]
_TRD_SEQMONI_14		.SRES	2		;[74,75]
_TRD_SEQMONI_15		.SRES	2		;[76,77]
_TRD_SEQMONI_16		.SRES	2		;[78,79]

;	------- 2014-09-30------------
_TRD_REP_USE		.SRES	2		;[80,81] 1:繰返実行する/0:しない
_TRD_REP_CNT		.SRES	2		;[82,83] 1:繰返回数


;====｢上位は使用しない｣ 2010-09-21移動============
;_TRD_INFO_SMPTYP	.SRES	2		;[40,41]1
;_TRD_INFO_SMPSTS	.SRES	2		;[42,43]0:SMPLING DURING 1:SMPLING中
;_TRD_INFO_SMPMAX	.SRES	2		;[44,45]_TRD_SVP_SMPMAX_CNT=1388h
;_TRD_INFO_SMPADR	.SRES	2		;
;_TRD_INFO_SMPDLY	.SRES	2		;_TRD_SVP_SMPTRG_CNT
;_TRD_INFO_SMPPRE	.SRES	2		;

;_TRD_CNTL_INT_FLG	.SRES	2		;
;_TRD_CNTL_INT_PNT	.SRES	2		;REFLASH:WRITE 管理ﾎﾟｲﾝﾀ
;_TRD_CNTL_INT_DLY	.SRES	2		;+0,1,2,,,,,
;_TRD_CNTL_INT_WRK	.SRES	2		;
;_TRD_CNTL_INT_EDG	.SRES	2		;
;_TRD_CNTL_INT_TIM	.SRES	2		;SMP周期
;_TRD_CNTL_INT_PRE	.SRES	2		;ﾌﾟﾚﾄﾘｶﾞ時間
;_TRD_CNTL_MAIN_COM	.SRES	2		;
;
;_TRD_SVP_SMPSTR_KAJ	.SRES	2		; ｻﾝﾌﾟﾘﾝｸﾞ　ﾄﾘｶﾞ荷重
;_TRD_SVP_SMPSTR_AGL	.SRES	2		; ｻﾝﾌﾟﾘﾝｸﾞ　ﾄﾘｶﾞ角度
;_TRD_SVP_SMPSTR_FUK	.SRES	2		; ｻﾝﾌﾟﾘﾝｸﾞ　ﾄﾘｶﾞ負荷率
;_TRD_SVP_SMPSTR_SEH	.SRES	2		; ｻﾝﾌﾟﾘﾝｸﾞ　ﾄﾘｶﾞｼｰｹﾝｽ（上位ｱﾄﾞﾚｽ）
;_TRD_SVP_SMPSTR_SQL	.SRES	2		; ｻﾝﾌﾟﾘﾝｸﾞ　ﾄﾘｶﾞｼｰｹﾝｽ（下位ｱﾄﾞﾚｽ）
;_TRD_SVP_SMPMAX_CNT	.SRES	2		; ｻﾝﾌﾟﾘﾝｸﾞ　最大個数
;_TRD_SVP_SMPCYC_TIM	.SRES	2		; ｻﾝﾌﾟﾘﾝｸﾞ　周期
;_TRD_SVP_SMPTRG_CNT	.SRES	2		; ｻﾝﾌﾟﾘﾝｸﾞ　ﾌﾟﾘﾄﾘｶﾞ個数
;_TRD_SMP_PV_NUM		.SRES	2		;
;_TRD_SMP_PV_ECDG	.SRES	2		;
;_TRD_SMP_PV_PGDG	.SRES	2		;
;_TRD_SMP_PV_SEQ		.SRES	2		;
;_TRD_CH_LEVEL		.SRES	2		;論理
;_TRD_CH_CONF		.SRES	2		;LEVEL


	.org	h'0100					;
_TREND_DATA_TOP		.SRES	32*(5000+2)		;C180100~C1A723F(ET1 33024~193087[193024])
_SHOT_DATA_TOP		.SRES	16*(5000+2)		;C1A7240~C1BAAE0(ET1 193088~273088)



;	-------------------------------------------
;	---	2009-09-25(ｻﾝﾌﾟﾘﾝｸﾞ2) 		---
;	-------------------------------------------
;	-------- RAMCLRは256KBまで今回は255KBだからそのまま-------------
;;[2009-09-25]
	.ALIGN 4
_GSMP2_DATA_TOP2		.SRES	__SMP2_1LINE_CNT*(__SMP2_BUF_MAX2+1)	;24b*500=12000 12KB(ｻﾝﾌﾟﾘﾝｸﾞ　ﾘﾝｸﾞ)
_GSMP2_SEND_TOP2		.SRES	__SMP2_1LINE_CNT*(__SMP2_BUF_MAX2+1)	;24b*500=12000 12KB(SORT後/保留可能)


_TREND_DATA_END

;	*******************************************
;	***					***
;	***					***
;	***					***
;	***		メモリ宣言		***
;	***		ローダコマンド		***
;	***					***
;	***					***
;	*******************************************
	.ALIGN 4
	.SECTION	Bwkram1,DATA			;
_IN_LDCMD_DAT		.SRES	600	;=_MAIN_MSGWR_TOP
_MSG_OUT_BOX		.SRES	600	;

	.ALIGN 4
_MSG_DATA_ADR	.SRES	4			;読出/書込ｱﾄﾞﾚｽ
_MSG_DATA_CNT	.SRES	2			;
_MSG_BYTE_CNT	.SRES	2			;
_MSG_IN_COMMND	.SRES	1			;0:READ 1:WRITE
_MSG_ERR_IN	.SRES	1			;BIT0:奇数ｱｸｾｽ異常
						;BIT1:ｱｸｾｽが "2FFFF"を超えた
						;BIT2:WR:ﾒﾓﾘ要求ｵｰﾊﾞ
						;BIT4:RD:ﾒﾓﾘ要求ｵｰﾊﾞ
						;BIT7:ｼｽﾃﾑ異常[BIT0/BIT1/BIT2/BIT3]
_MSG_ERR_FLG		.SRES	1		;ERR IN LATCH 情報
_LODER_COM_FLG		.SRES	1+1		;

	.ALIGN	4				;
_DTCHG_LOD_CMD_ADR	.SRES	4		;
_DTCHG_LOD_CMD_DAT	.SRES	2		;ﾃﾞｰﾀ個数
_DTCHG_LOD_CMD_STS	.SRES	1		;READ//WRITE
_DTCHG_LOD_CMD_CNT	.SRES	1		;
_DTCHG_LOD_CMD_STS2	.SRES	1		;

	.ALIGN	4				;
_LOD_CHK_MONI_STS	.SRES	2		;ﾛｰﾀﾞｺﾏﾝﾄﾞR/W回数

;	*******************************************
;	***					***
;	***					***
;	***					***
;	***		トレンドデータ		***
;	***					***
;	***	WORK	2006-11-21		***
;	***					***
;	*******************************************
	.ALIGN 4
	.EXPORT	_TRD_SHOT_SIG
_SHT_TRD_COMSQ		.SRES	2			;指令
_TRD_SHOT_SIG		.SRES	2			;FLG BIT0~0F
_TRD_SIG_LATCH		.SRES	2			;
_TRD_SIG_LTOLD		.SRES	2			;

;-----------------2006-11-21--------------------------
_TRD_SVP_SMP_CNT	.SRES	2			;ｻﾝﾌﾟﾙ ｶｳﾝﾀ設定
_TRD_PV_SMP_CNT		.SRES	2			;ｻﾝﾌﾟﾙ ｶｳﾝﾀ実測

;-----------------2006-11-21(1ｼｮｯﾄ)--------------------------
_SHT_CNTL_MAIN_COM	.SRES	2		;
_SHT_CNTL_INT_FLG	.SRES	2		;
_SHT_CNTL_INT_PNT	.SRES	2		;REFLASH:WRITE 管理ﾎﾟｲﾝﾀ
_SHT_SVP_SMPMAX_CNT	.SRES	2		; ｻﾝﾌﾟﾘﾝｸﾞ　最大個数
_SHT_INFO_SMPMAX	.SRES	2		;MAX.SET

;	--------- 2007-01-11--------
_TRD_DATA_LKFLG		.SRES	2		;[34,35]


;	*******************************************
;	***					***
;	***					***
;	***					***
;	***	画面サンプリングデータ		***
;	***					***
;	***		2009-09-25		***
;	***					***
;	*******************************************
	.ALIGN 4
_GSHT2_1LINE_DAT	.SRES	__SHT2_1LINE_CNT	;

;	-----------ｻﾝﾌﾟﾘﾝｸﾞ側-------------------
_GSMP2_CTRL_FLG		.SRES	2		;BIT0:ﾄﾘｶﾞ待ち/BIT1:ﾄﾘｶﾞ中/BIT2:完了 (BIT6:完了)
_GSMP2_SQOUTDT		.SRES	2		;

_GSMP2_SMP_PINT		.SRES	2			;(常時ｻﾝﾌﾟﾘﾝｸﾞﾎﾟｲﾝﾀ)

_GSMP2_MAK_PINT		.SRES	2			;送信元ｻﾝﾌﾟﾘﾝｸﾞﾎﾟｲﾝﾀ
_GSMP2_MAK_CNT		.SRES	2			;500個データを作れば終わり,並び替え個数

_GSMP2_MAK_TG_P		.SRES	2			;ﾄﾘｶﾞが発生した時点のﾎﾟｲﾝﾀ()
_GSMP2_MAK_ST_P		.SRES	2			;ｽﾀｰﾄﾎﾟｲﾝﾀ(本来これは不要)
_GSMP2_MAK_ED_P		.SRES	2			;終了ﾎﾟｲﾝﾀ(本来これは不要)個数で行うから

_GSMP2_MAK_PVCNT	.SRES	2			;設定ｻｲｸﾙ毎に描画

;	-----------ｻﾝﾌﾟﾘﾝｸﾞ→転送側-------------
_GSMP2_MAK_MV_COM	.SRES	2			;

;	-----------SHT側-------------
_GSHT2_MAK_MV_COM	.SRES	2		;BIT2=1 CNT+1
;	-----------転送側-----------------------
_GSMP2_SND_CNT		.SRES	2		;送信完了個数=送信完了ポインタ(転送開始指令時に0)
_GSHT2_SND_CNT		.SRES	2		;送信完了個数=送信完了ポインタ(転送開始指令時に0)


;	--------- 設定の類---
_GSMP2_SV_DLY		.SRES	2			;遅延個数
_GSMP2_PV_SMPTIM	.SRES	2			;ｻﾝﾌﾟﾘﾝｸﾞ周期PV(1ms) (SV-->PV)
_GSMP2_CH_LEVEL		.SRES	2		;論理
_GSMP2_CH_CONF		.SRES	2		;LEVEL

;	***********************************
;	***	2010-09-21 ﾜｰｸを移動	***
;	***********************************
	.EXPORT	_TRD_SMP_PV_PGDG	

	.ALIGN 4
;=======================｢上位は使用しない｣======================================================
_TRD_INFO_SMPTYP	.SRES	2		;1
_TRD_INFO_SMPSTS	.SRES	2		;0:SMPLING DURING 1:SMPLING中
_TRD_INFO_SMPMAX	.SRES	2		;_TRD_SVP_SMPMAX_CNT
_TRD_INFO_SMPADR	.SRES	2		;
_TRD_INFO_SMPDLY	.SRES	2		;_TRD_SVP_SMPTRG_CNT
_TRD_INFO_SMPPRE	.SRES	2		;

_TRD_CNTL_INT_FLG	.SRES	2		;
_TRD_CNTL_INT_PNT	.SRES	2		;REFLASH:WRITE 管理ﾎﾟｲﾝﾀ
_TRD_CNTL_INT_DLY	.SRES	2		;+0,1,2,,,,,
_TRD_CNTL_INT_WRK	.SRES	2		;
_TRD_CNTL_INT_EDG	.SRES	2		;
_TRD_CNTL_INT_TIM	.SRES	2		;SMP周期
_TRD_CNTL_INT_PRE	.SRES	2		;ﾌﾟﾚﾄﾘｶﾞ時間
_TRD_CNTL_MAIN_COM	.SRES	2		;

_TRD_SVP_SMPSTR_KAJ	.SRES	2		; ｻﾝﾌﾟﾘﾝｸﾞ　ﾄﾘｶﾞ荷重
_TRD_SVP_SMPSTR_AGL	.SRES	2		; ｻﾝﾌﾟﾘﾝｸﾞ　ﾄﾘｶﾞ角度
_TRD_SVP_SMPSTR_FUK	.SRES	2		; ｻﾝﾌﾟﾘﾝｸﾞ　ﾄﾘｶﾞ負荷率
_TRD_SVP_SMPSTR_SEH	.SRES	2		; ｻﾝﾌﾟﾘﾝｸﾞ　ﾄﾘｶﾞｼｰｹﾝｽ（上位ｱﾄﾞﾚｽ）
_TRD_SVP_SMPSTR_SQL	.SRES	2		; ｻﾝﾌﾟﾘﾝｸﾞ　ﾄﾘｶﾞｼｰｹﾝｽ（下位ｱﾄﾞﾚｽ）
_TRD_SVP_SMPMAX_CNT	.SRES	2		; ｻﾝﾌﾟﾘﾝｸﾞ　最大個数
_TRD_SVP_SMPCYC_TIM	.SRES	2		; ｻﾝﾌﾟﾘﾝｸﾞ　周期
_TRD_SVP_SMPTRG_CNT	.SRES	2		; ｻﾝﾌﾟﾘﾝｸﾞ　ﾌﾟﾘﾄﾘｶﾞ個数
_TRD_SMP_PV_NUM		.SRES	2		;
_TRD_SMP_PV_ECDG	.SRES	2		;
_TRD_SMP_PV_PGDG	.SRES	2		;
_TRD_SMP_PV_SEQ		.SRES	2		;
_TRD_CH_LEVEL		.SRES	2		;論理
_TRD_CH_CONF		.SRES	2		;LEVEL




;//	***********************************
;//	***				***
;//	***		電力測定	***
;//	***				***
;//	***********************************
	.ALIGN 4

;//	----------電力測定に関わる内容-------
_WPAR_IVW_RANGE		.SRES	2	;//0:小数点2桁 1小数点1桁
_WPAR_ECOMET_SEL	.SRES	2	;2010-10-25
_WPAR_IVWSEK_SEL	.SRES	2	;2010-10-25１ｻｲｸﾙ平均値/1ｻｲｸﾙ電力量表示

_MON_SV_IVW_USED	.SRES	2	;//[40,41](0:負荷率    5A:電力量)
_MON_SV_IVW_RNGE	.SRES	2	;//[42,43](0:小数点2桁 5A:小数点1桁)
_MON_SV_IVW_CSEL	.SRES	2	;//[44,45](0:平均      5A:電力量)
;//	------- 瞬時電力----
	.ALIGN 4
_PV_IVW_DAT		.SRES	4	;// data
_PV_IVW_DAT_1W		.SRES	4	;//1[w] data
_PV_IVW_DAT_10W		.SRES	4	;//10[w] data
_PV_IVW_DAT_100W	.SRES	4	;//100[w] data
_PV_IVW_DAT_DSP		.SRES	4	;//10w/100w data
_PV_IVW_DAT_INP		.SRES	4	;//10w


;//	------- 1ｻｲｸﾙ電力量　------
	.ALIGN 4
_CYC_SEK_WORK		.SRES	8	;ｻｲｸﾙの消費[有効+回生]積算ﾃﾞｰﾀ
_CYC_SEK_TIME		.SRES	4	;1msec*2min=
_CYC_IVW_PV0		.SRES	4	;確定ﾃﾞｰﾀ 0.01kw 消費 +//
_CYC_IVW_PV1		.SRES	4	;確定ﾃﾞｰﾀ 0.01kw 消費 +
_CYC_IVW_PV2		.SRES	2	;確定ﾃﾞｰﾀ 0.01kw(リミッタ)
_CYC_INP_STS		.SRES	2	;0:ｱｲﾄﾞﾙ(ｻｲｸﾙ終了) 1:ｻｲｸﾙ中->2:NEXTｻｲｸﾙ.....FFFF->1
_CYC_LTH_STS		.SRES	2	;0:ｱｲﾄﾞﾙ 1:ｻｲｸﾙ中

_CYC_IVWHR_PV2		.SRES	2	;0.01wh
_CYC_DEBUG_CNT		.SRES	2	;

	.ALIGN 4
_CYC_SEK_KAIWORK	.SRES	8	;ｻｲｸﾙの回生積算ﾃﾞｰﾀ
_CYC_IVWKAI_PV1		.SRES	4	;確定ﾃﾞｰﾀ 0.01kw 回生
_CYC_IVWKAI_PV2		.SRES	2	;確定ﾃﾞｰﾀ 0.01kw 回生

	.ALIGN 4
_CYC_SEK_PULSWORK	.SRES	8	;PULAS分
_CYC_IVWPULS_PV1	.SRES	4	;確定ﾃﾞｰﾀ 0.01kw 回生
_CYC_IVWPULS_PV2	.SRES	2	;確定ﾃﾞｰﾀ 0.01kw 回生


;	------- 画面表示用消費電力-----
	.ALIGN 4
_IVW_WP_SEK_WORK		.SRES	8	;有効1sec
_IVW_WP_SEK_TIME		.SRES	4	;有効1sec
_IVW_WP_1S_PV			.SRES	4	;有効1sec

;	------- 画面表示用回生電力-----
	.ALIGN 4
_IVW_WN_SEK_WORK		.SRES	8	;無効1sec
_IVW_WN_SEK_TIME		.SRES	4	;無効1sec
_IVW_WN_1S_PV			.SRES	4	;有効1sec



;//	---------ﾄﾙｸ値作成-------------------
_SET1_EP_LTM		.SRES	2	;
_AD_DLY_BUF		.SRES	2*100	;[100]		;//遅延ﾃﾞｰﾀ作成
_AD_DLY_POINT		.SRES	2	;
_AD_IVW_DAT		.SRES	2	;
	.ALIGN 4
_PV_TRQ_NM_DAT		.SRES	4	;//1[N･m]~ 32767
_PV_ABS_TRQ_NM_DAT	.SRES	4	;

;//	--------角速度作成---------------------------
	.ALIGN 4
_SPD_DLY_BUF		.SRES	4*100	;[100]		;//遅延ﾃﾞｰﾀ作成
_SPD_ENC_DATX		.SRES	4	;
_SPD_ENC_DATX_ABS	.SRES	4	;

_OMEGA_RAD		.SRES	4	;//RAD/S 100HZ*3.14=314


;//	---ECO METER-----
	.ALIGN 4
_SET1_ECOM_BASE		.SRES	4	;
_ECO_CMP_DLT		.SRES	2	;kwh

;//	***************************************************
;//	***						***
;//	***	2011-03-22				***
;//	***	CPUB-TRQ				***
;//	***						***
;//	***************************************************
	.ALIGN 4
_SH2_AD_TOTAL		.SRES	4	;
_SH2_AD_FILTBUF		.SRES	2*8	;
_SH2_AD_POINT		.SRES	2	;
_PVXSH2_AD_DATA		.SRES	2	;//0~1000= 0V~10.00V


;//	***************************************************
;//	***						***
;//	***	2012-09-25				***
;//	***	オーバヒート電流			***
;//	***						***
;//	***************************************************
	.ALIGN 4
;//	---------2012-09-25-------
_PV_OVERH_AMP_AVL	.SRES	4	;平均値
_PV_ABS_OVERH_TRQ	.SRES	4	;
_PV_ABS_OVERH_TRQSEK	.SRES	12	;12byte長 4(I)*4(I)*4(時間)
_CYC2_SEK_TIME		.SRES	4	;1msec*1時間
_CYC2_INP_STS		.SRES	2	;
_CYC2_LTH_STS		.SRES	2	;0:ｱｲﾄﾞﾙ 1:ｻｲｸﾙ中
_CYC2_WAIT_CNTPV	.SRES	2	;2012-10-16 連続のみ待ちカウンタ


	.ALIGN 4
_SHOT_ADR_LFT		.SRES	4
_SHOT_ADR_TTL		.SRES	4
_SHOT_ADR_RIH		.SRES	4

;//	***************************************
;//	***									***
;//	***	2018-11-11						***
;//	***	見える化						***
;//	***									***
;//	***************************************
;	---製品として採用 2018-11-11追加[1/]	-----
_OLD_CB_COM345			.SRES	2
_CB_COM345_ON			.SRES	2

	.END
