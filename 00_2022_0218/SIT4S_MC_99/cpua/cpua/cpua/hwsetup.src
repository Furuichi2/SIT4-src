;------------------------------------------------------------------------
;                                                                       |
;   FILE        :hwsetup.src                                            |
;   DATE        :Fri, May 31, 2002                                      |
;   DESCRIPTION :Hardware Setup file                                    |
;   CPU TYPE    :SH7750                                                 |
;                                                                       |
;   This file is generated by Hitachi Project Generator (Ver.2.1).      |
;                                                                       |
;------------------------------------------------------------------------


	.LIST OFF
	.include	"sh7750rg.EXT"
	.include	"cm_equ1.equ"
	.INCLUDE	"ssa_ver1.equ"		; //
	.INCLUDE	"shn_cmd1.MAC"		; 
	.INCLUDE	"ssa_had1.equ"		; 
	.LIST ON

_SDMR1		.EQU		H'FF94004C;BYTE
_SDMR2		.EQU		H'FF94008C;BYTE
_SDMR3		.EQU		H'FF9400CC;BYTE

	.export		_HardwareSetup1
	.export		_HardwareSetup2
	.export		_TIME_LINT_EI
	.export		_TIME_HINT_EI
	.export		_INT_EI

	.export		_CASH_ENB

	.export	_P_TO_PRAM_COPY			; P -> PRAM
	.export	_PC_TO_PCRAM_COPY		; Pcall -> PcallRAM

;	====================================
;	-------------- WDT CLR -------------
;	====================================
	.MACRO	_WDT_CLR_CP1
	MOV.L	#_PDTRB,R10
	MOV.W	@R10,R11
;;;;2010-09-21ﾊﾞｸﾞ	MOV.W	#NBIT0,R12	; PORT18
	MOV.W	#NBIT2,R12	; PORT18
	AND	R12,R11
	MOV.W	R11,@R10
;;;;2010-09-21ﾊﾞｸﾞ	MOV.W	#BIT0,R12
	MOV.W	#BIT2,R12
	OR	R12,R11
	MOV.W	R11,@R10
	.ENDM


	.SECTION	Phwsetup1,CODE			;
;******************************************
;***					***
;***	ＳＨ−４初期設定	 	***
;***					***
;******************************************
_HardwareSetup1:
	SUB_START

	MOV.L	#_WTCSR,R1
;///////	MOV.W	#H'A502,R0			; 発振が安定するまでの時間として202.3usec設定
	MOV.W	#H'A504,R0				; 発振が安定するまでの時間として809.1usec設定
	MOV.W	R0,@R1
	MOV.L	#_FRQCR,R1
;//SDEB	MOV.W	#H'0E23,R0				; Iφ=162MHz／Bφ=27MHz／Pφ=27MHz
;;SAITO	MOV.W	#H'0E1A,R0				; Iφ=162MHz／Bφ=40.5MHz／Pφ=40.5MHz
	MOV.W	#H'0E0A,R0				; Iφ=162MHz／Bφ=81MHz／Pφ=40.5MHz
;;	MOV.W	#H'0E23,R0				; Iφ=162MHz／Bφ=27MHz／Pφ=27MHz
	MOV.W	R0,@R1

	MOV.L	#_BCR1,R1
	MOV.L	@R1,R0
	MOV.L	#H'00000008,R2				; ｴﾘｱ0~2,4~6:SRAMｲﾝﾀｰﾌｪｰｽ／ｴﾘｱ3:SDRAMｲﾝﾀｰﾌｪｰｽ
	OR	R2,R0
	MOV.L	R0,@R1

	MOV.L	#_BCR2,R1
	MOV.W	@R1,R0
	MOV.W	#H'C001,R2
	AND	R2,R0
	MOV.W	#H'9AE9,R2				; 各ｴﾘｱのﾊﾞｽ幅設定
	OR	R2,R0
	MOV.W	R0,@R1

	MOV.L	#_WCR1,R1
	MOV.L	#H'44444444,R0				; 各ｴﾘｱのｻｲｸﾙ間ｱｲﾄﾞﾙ設定	**とりあえず**
	MOV.L	R0,@R1

	MOV.L	#_WCR2,R1
;///////	MOV.L	#H'BE76649F,R0				; 各ｴﾘｱのｳｪｲﾄ設定	CASﾚｲﾃﾝｼ=3
;///////	MOV.L	#H'BE76449F,R0				; 各ｴﾘｱのｳｪｲﾄ設定	CASﾚｲﾃﾝｼ=2
;//////	MOV.L	#H'9E784B27,R0				; 各ｴﾘｱのｳｪｲﾄ設定	CASﾚｲﾃﾝｼ=2
;////	MOV.L	#H'9E784B24,R0				; 各ｴﾘｱのｳｪｲﾄ設定	CASﾚｲﾃﾝｼ=2
;////位置決めうごかない	MOV.L	#H'9E784B24,R0				; 各ｴﾘｱのｳｪｲﾄ設定	CASﾚｲﾃﾝｼ=2
;位置決めうごいた	MOV.L	#H'9F784B24,R0				; 各ｴﾘｱのｳｪｲﾄ設定	CASﾚｲﾃﾝｼ=2
	MOV.L	#H'9FF84B24,R0				; 各ｴﾘｱのｳｪｲﾄ設定	CASﾚｲﾃﾝｼ=2
;;;;;;;	MOV.L	#H'9FF84524,R0				; 各ｴﾘｱのｳｪｲﾄ設定	CASﾚｲﾃﾝｼ=2
;;;	MOV.L	#H'9F784B24,R0				; 各ｴﾘｱのｳｪｲﾄ設定	CASﾚｲﾃﾝｼ=2
;	MOV.L	#H'9FF84B27,R0				; 各ｴﾘｱのｳｪｲﾄ設定	CASﾚｲﾃﾝｼ=2
	MOV.L	R0,@R1

	MOV.L	#_WCR3,R1

	.AIF	_PLSI_WR_WT_CHG		EQ	_CMPILE_YES	;YES:WR WAIT 4CLK(NO 3CLK) 2004-02-19
	MOV.L	#H'06766666,R0				;BIT22=1 	 SET-UP1CLK
							;BIT21=1,BIT20=1 HOLD  3CLK
	.AELSE

;;;	MOV.L	#H'06666666,R0				; 各ｴﾘｱのR/Wｱｻｰﾄ時間設定	**とりあえず**
	MOV.L	#H'06266666,R0				; 各ｴﾘｱのR/Wｱｻｰﾄ時間設定	**とりあえず**
	.AENDI
	MOV.L	R0,@R1

;;SAITO	2006-08-05 sit4 対応	MOV.L	#_MCR,R1
;	;	MOV.L	#H'08122184,R0				; SDRAM個別ｺﾝﾄﾛｰﾙﾚｼﾞｽﾀ設定
;;		MOV.L	R0,@R1

;	---- SAITO 2006-08-05 sit4 対応 ---
	.AIF _SIT_TYPE_SEL EQ _TYPE_SIT3
	MOV.L	#_MCR,R1
	MOV.L	#H'08122184,R0				; SDRAM個別ｺﾝﾄﾛｰﾙﾚｼﾞｽﾀ設定
	MOV.L	R0,@R1
	.AELSE
	MOV.L	#_MCR,R1
	MOV.L	#H'081221A4,R0				; SDRAM個別ｺﾝﾄﾛｰﾙﾚｼﾞｽﾀ設定 AMX2は1にしなければいけない？斉藤
	MOV.L	R0,@R1
	.AENDI

        MOV.L   #_PCR, r0
        MOV.W   #0, r1
        MOV.W   r1, @r0					; Sets PCR (word size).

;;;;;;	MOV.L	#_SDMR3,R1
	MOV.L	#_SDMR2,R1
	MOV.B	#0,R0					; SDRAM全ﾌﾟﾘﾁｬｰｼﾞ
	MOV.B	R0,@R1

	MOV.L	#_RTCNT,R1
	MOV.W	#H'A500,R0				;
	MOV.W	R0,@R1
	MOV.L	#_RTCOR,R1
	MOV.W	#H'A510,R0				; SDRAMｵｰﾄﾘﾌﾚｯｼｭ周期設定
	MOV.W	R0,@R1
	MOV.L	#_RFCR,R1
	MOV.W	#H'A400,R0
	MOV.W	R0,@R1
	MOV.L	#_RTCSR,R1
	MOV.W	#H'A508,R0				; SDRAMｵｰﾄﾘﾌﾚｯｼｭ開始
	MOV.W	R0,@R1

;	*** ﾎﾟｰﾄﾃﾞｰﾀﾚｼﾞｽﾀA ***

;;	P0~P7 OUT / P8~P15 IN / P16~18 OUT / P19 IN
	MOV.L	#_PDTRA,R1
	MOV.W	#H'0000,R0				; P0~7 出力初期値
	MOV.W	R0,@R1					; 初期値 ALL OFF
	MOV.L	#_PCTRA,R1
	MOV.L	#H'00005555,R0				; P0~15 IN/OUT設定
	MOV.L	R0,@R1

;----------------- 一応確認用 2015-01-15 WDTA出力をLOWにしてしておく
	MOV.L	#_PDTRB,R1
	MOV.W	#H'0000,R0
	MOV.W	R0,@R1					; 初期値(BIT2=0:WDT_CLR="L")
;----------------------------------------
	MOV.L	#_PCTRB,R1
	MOV.L	#H'00000015,R0				; P16~19 IN/OUT設定
	MOV.L	R0,@R1

	MOV.L	#_CCR,R1
	MOV.L	@R1,R2
	MOV.L	#(BIT11+BIT3),R0
	OR	R2,R0
	MOV.L	R0,@R1

	NOP                     ; Waits for several clocks.
	NOP                     ; Other initialization may place here
	NOP                     ; if it is compact enough.
	NOP

	MOV.L	#_RFCR,R1
	MOV.W	#D'8,R2
_HWS_100:
	MOV.W	@R1,R0
	CMP/HS	R2,R0					; ｵｰﾄﾘﾌﾚｯｼｭ8回やるまで待機
	BF	_HWS_100

	MOV.L	#_MCR,R1
	MOV.L	#H'48122184,R0				; SDRAM個別ｺﾝﾄﾛｰﾙﾚｼﾞｽﾀ設定
	MOV.L	R0,@R1

;;;;;	MOV.L	#_SDMR3,R1
	MOV.L	#_SDMR2,R1
	MOV.B	#0,R0					; SDRAMﾓｰﾄﾞﾚｼﾞｽﾀｾｯﾄ
	MOV.B	R0,@R1

	MOV.L	#_RTCSR,R1
	MOV.W	#H'A510,R0				; SDRAMｵｰﾄﾘﾌﾚｯｼｭ開始
	MOV.W	R0,@R1




	SUB_END
	M_RTS


	.SECTION	Pstart1,CODE			;
;******************************************
;***					***
;***	ＳＨ−４初期設定	 	***
;***					***
;******************************************
_HardwareSetup2:
	SUB_START


;;;;;	MOV.L	#_CASH_ENB,R1			;
;;;;;	jsr     @r1
;;;;;	nop

;;;;;	mov.l	#_P_TO_PRAM_COPY,r1		; P -> PRAM
;;;;;	jsr     @r1
;;;;;	nop

;;;;;	mov.l	#_PC_TO_PCRAM_COPY,r1		; Pcall -> PcallRAM
;;;;;	jsr     @r1
;;;;;	nop

;	*** 割込み優先ﾚﾍﾞﾙ設定ﾚｼﾞｽﾀ *****************;
	MOV.L	#_ICR,R1
	MOV.W	#H'0080,R0				;
	MOV.W	R0,@R1
	MOV.L	#_IPRA,R1
;/////	MOV.W	#H'7650,R0				; TMU0/TMU1/TMU2/RTC
	MOV.W	#H'7350,R0				; TMU0/TMU1/TMU2/RTC
	MOV.W	R0,@R1
	MOV.L	#_IPRB,R1
;/////	MOV.W	#H'0000,R0				; WDT/REF/SCI/RESERVE
	MOV.W	#H'00C0,R0				; WDT/REF/SCI/RESERVE
	MOV.W	R0,@R1
	MOV.L	#_IPRC,R1
;/////	MOV.W	#H'00D0,R0				;GPIO/DMAC/SCIF/H-UDI
	MOV.W	#H'00D0,R0				;GPIO/DMAC/SCIF/H-UDI
	MOV.W	R0,@R1
	MOV.L	#_IPRD,R1
	MOV.W	#H'AB98,R0				;IRL0/IRL1/IRL2/IRL3
;;;;;	MOV.W	#H'0000,R0				;IRL0/IRL1/IRL2/IRL3
	MOV.W	R0,@R1

;	*** NMI/IRQn割込みｺﾝﾄﾛｰﾙﾚｼﾞｽﾀ *****************;
	MOV.L	#_ICR,R1
	MOV.W	#H'0080,R0
	MOV.W	R0,@R1


;	*** ﾀｲﾏ関係ｲﾆｼｬﾙ ******************************;
;	*** ﾀｲﾏｱｳﾄﾌﾟｯﾄｺﾝﾄﾛｰﾙﾚｼﾞｽﾀ ***
	MOV.L	#_TOCR,R1				;
	MOV.W	#H'0,R0					; TCLK=外部入力端子に設定
	MOV.W	R0,@R1					;

;	*** ﾀｲﾏｺﾝｽﾀﾝﾄﾚｼﾞｽﾀ,ﾀｲﾏｶｳﾝﾀ ***
	MOV.L	#_TCOR0,R1
;;;2004-03-03	MOV.L	#_BASE_100US*1*10,R0			; 1ms割込み用

;	=== 2004-03-03 1msecが短い===
	MOV.L	#_BASE_200US*5,R0			; 1ms割込み用

	MOV.L	R0,@R1
	MOV.L	#_TCNT0,R1
	MOV.L	R0,@R1

	MOV.L	#_TCOR1,R1
	MOV.L	#_BASE_100US*2,R0			; 200us割込み用
;;;(	MOV.L	#_BASE_200US,R0					; 200us割込み用 2003-03-03 これに変更する予定)
	MOV.L	R0,@R1
	MOV.L	#_TCNT1,R1
	MOV.L	R0,@R1

	MOV.L	#_TCOR2,R1
;;;;;	MOV.L	#_BASE_100US*1*20,R0			; 2ms割込み用

;	---2006-12-26ｼｰｹﾝｽ制御周期 2.5-->3.333msec 
	.AIF	_SIT_CPU_SEL EQ _SIT4_CPUA
;	2015-03-18 [3.33->5]
;;;;;;	MOV.L	#_TINT_3R3MS,R0			; 3.33333ms割込み用 27M*3/8=10.125M  SV *1/10.125=3.3333
						; 5.0000*10.125=50625
	MOV.L	#50625,R0			; 50625/10.125=5.000ms

	.AELSE
	MOV.L	#_BASE_100US*1*25,R0		; 5ms割込み用==>2.5msec
	.AENDI


;;;;(	MOV.L	#_BASE_200US*25/2,R0			; 2.5msec )これに変更する予定
	MOV.L	R0,@R1
	MOV.L	#_TCNT2,R1
	MOV.L	R0,@R1


	MOV.L	#_TIME_MINT_EI,R0			; 1msec timer 割込み許可
	JSR	@R0					;
	NOP						;

	MOV.L	#_TIME_HINT_EI,R0			; 500usec timer 割込み許可
	JSR	@R0					;
	NOP						;

	MOV.L	#_TIME_LINT_EI,R0			; 2msec timer 割込み許可
	JSR	@R0					;
	NOP						;


;	*** 通信関係ｲﾆｼｬﾙ ***
;	使うときに設定すること	

;//	MOV.L	#_SCSMR1,R1
;//	MOV.B	#H'60,R0				; 調歩／7BIT／P付加／偶数P／STOP=1／
;//	MOV.B	R0,@R1
;//	MOV.L	#_SCBRR1,R1
;//	MOV.B	#D'80,R0				; ﾎﾞｰﾚｰﾄ=9600	N=25MHz／64×0.5×9600−1
;//	MOV.B	R0,@R1

	SUB_END
	M_RTS


;******************************************
;***					***
;***	割込許可		 	***
;***					***
;******************************************
_INT_EI:
	SUB_START

	MOV.L	#_TCR0,R1
	MOV.L	#_TCR1,R2
	MOV.L	#_TCR2,R3
	MOV.W	#H'0020,R0			; ﾀｲﾏ1,2,3ｱﾝﾀﾞﾌﾛｰ割込み許可
	MOV.W	R0,@R1				;
	MOV.W	R0,@R2				;
	MOV.W	R0,@R3				;
	MOV.L	#_TSTR,R1
	MOV.B	@R1,R0
	OR	#H'07,R0			; ﾀｲﾏ1,2,3ｽﾀｰﾄ
	MOV.B	R0,@R1

	SUB_END
	M_RTS


;******************************************
;***					***
;***	割込(1ms)許可	 		***
;***					***
;******************************************
_TIME_MINT_EI:
	SUB_START

	MOV.L	#_TCR0,R1
	MOV.W	#H'0020,R0			; ﾀｲﾏ1ｱﾝﾀﾞﾌﾛｰ割込み許可
	MOV.W	R0,@R1				;
	MOV.L	#_TSTR,R1
	MOV.B	@R1,R0
	OR	#BIT0,R0			; ﾀｲﾏ1ｽﾀｰﾄ
	MOV.B	R0,@R1

	SUB_END
	M_RTS


;******************************************
;***					***
;***	割込(200us(100us))許可	 	***
;***					***
;******************************************
_TIME_HINT_EI:
	SUB_START

	MOV.L	#_TCR1,R2
	MOV.W	#H'0020,R0			; ﾀｲﾏ2ｱﾝﾀﾞﾌﾛｰ割込み許可
	MOV.W	R0,@R2				;
	MOV.L	#_TSTR,R1
	MOV.B	@R1,R0
	OR	#BIT1,R0			; ﾀｲﾏ2ｽﾀｰﾄ
	MOV.B	R0,@R1

	SUB_END
	M_RTS


;******************************************
;***					***
;***	割込(2ms)許可	 		***
;***					***
;******************************************
_TIME_LINT_EI:
	SUB_START

	MOV.L	#_TCR2,R1
	MOV.W	#H'0020,R0			; ﾀｲﾏ3ｱﾝﾀﾞﾌﾛｰ割込み許可
	MOV.W	R0,@R1				;
	MOV.L	#_TSTR,R1
	MOV.B	@R1,R0
	OR	#BIT2,R0			; ﾀｲﾏ3ｽﾀｰﾄ
	MOV.B	R0,@R1

	SUB_END
	M_RTS


	.SECTION	Pstart1,CODE			;
;******************************************
;***					***
;***	ＳＨ４キャッシュ有効	 	***
;***					***
;******************************************
_CASH_ENB:
	SUB_START

	MOV.L	#_CCR,R1
	MOV.L	@R1,R2
	MOV.L	#(BIT8+BIT5+BIT1+BIT0),R0		; BIT8:IC有効／BIT0:OC有効／BIT5:8kﾊﾞｲﾄRAM有効
	OR	R2,R0
	MOV.L	R0,@R1

	SUB_END
	M_RTS




	.SECTION	Pstart1,CODE			;
;******************************************
;***					***
;***	Ｐプログラム 			***
;***	Ｐ -> ＰＲＡＭ			***
;***					***
;******************************************
	.IMPORT		__P_BGN
	.IMPORT		__PRAM_BGN
	.IMPORT		__P_END
_P_TO_PRAM_COPY:
	SUB_START

	MOV.L	#__P_BGN,R0
	MOV.L	@R0,R5				;DATA SORCE
	MOV.L	#__PRAM_BGN,R0
	MOV.L	@R0,R6				;DATA DIST
	MOV.L	#__P_END,R0
	MOV.L	@R0,R4				;
	SUB	R5,R4				;
	SHLR	R4				;

_PTRC_LOOP:
	CMP/PL	R4
	BF	_PTRC_LOOP_END			;ZERO or MINS THEN EXIT

	MOV.W	@R5+,R0		;
	MOV.W	R0,@R6		;
	ADD	#2,R6		;
	ADD	#H'FF,R4	;
	_WDT_CLR_CP1
	M_BRA	_PTRC_LOOP	;

_PTRC_LOOP_END:
	SUB_END
	M_RTS



	.SECTION	Pstart1,CODE			;
;******************************************
;***					***
;***	Ｐcall -> ＰcallＲＡＭ		***
;***					***
;******************************************
	.IMPORT		__Pcall_BGN
	.IMPORT		__PcallRAM_BGN
	.IMPORT		__Pcall_END
_PC_TO_PCRAM_COPY:
	SUB_START

	MOV.L	#__Pcall_BGN,R0
	MOV.L	@R0,R5				;DATA SORCE
	MOV.L	#__PcallRAM_BGN,R0
	MOV.L	@R0,R6				;DATA DIST
	MOV.L	#__Pcall_END,R0
	MOV.L	@R0,R4				;
	SUB	R5,R4				;
	SHLR	R4				;

_PCTRC_LOOP:
	CMP/PL	R4
	BF	_PCTRC_LOOP_END			;ZERO or MINS THEN EXIT

	MOV.W	@R5+,R0		;
	MOV.W	R0,@R6		;
	ADD	#2,R6		;
	ADD	#H'FF,R4	;
	_WDT_CLR_CP1
	M_BRA	_PCTRC_LOOP	;

_PCTRC_LOOP_END:
	SUB_END
	M_RTS





	.end
