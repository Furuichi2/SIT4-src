*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE     1
PROGRAM NAME =

    1                               1     ;       ***************************************************
    2                               2     ;       ***                                             ***
    3                               3     ;       ***                                             ***
    4                               4     ;       ***     シーケンスコード変換ソフト              ***
    5                               5     ;       ***                                             ***
    6                               6     ;       ***                                             ***
    7                               7     ;       ***************************************************
 3877                              20     
 3878                              21     
 3879                              22     ;       ***************************************************
 3880                              23     ;       *****   AND,ANDN,OR,ORN CODE CHANGE MACRO       ***
 3881                              24     ;       ***************************************************
 3882                              25     
 3883                              26             .MACRO  _SEQ_LD_LDN_CMD TOP_ADR,END_ADR
 3884                              27     
 3885                              28             MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 3886                              29             CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 3887                              30             BT      _JMP_C80\@                              ; IF ADR >= 127 THEN JUMP
 3888                              31     ;
 3889                              32             MOV.L   #(\END_ADR-\TOP_ADR),R0         ; 転送 BYTE長
 3890                              33             MOV.L   #\TOP_ADR,R3                    ; Read CODE MOVE        (12 BYTE)
 3891                              34     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 3892                              35             MOV     R13,R4                          ; SEQ ADR. KEEP
 3893                              36     
 3894                              37             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 3895                              38                                                     ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 3896                              39     ;       *** BIT SET ***
 3897                              40             MOV.L   #D'6,R1                         ; ﾒﾓﾘのところ
 3898                              41             ADD     R1,R4                           ;
 3899                              42             MOV.L   #_SEQ_BBIT_CHG_TBL,R1           ;
 3900                              43             SHLL    R10                             ; *2
 3901                              44             ADD     R10,R1                          ;
 3902                              45             MOV.W   @R1,R1                          ;
 3903                              46             MOV.W   @R4,R2                          ; ﾒﾓﾘのところの命令LOAD
 3904                              47             MOV.L   #H'FFFFFF00,R0                  ;
 3905                              48             AND     R0,R2                           ; BITﾃﾞｰﾀのところをｸﾘｱ
 3906                              49             OR      R1,R2                           ;
 3907                              50             MOV.W   R2,@R4                          ; BIT SET
 3908                              51     
 3909                              52     ;       *** ADR SET ***
 3910                              53             MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 3911                              54             ADD     R1,R4                           ; 6+4=10
 3912                              55             MOV.W   @R4,R2                          ;
 3913                              56             AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 3914                              57             SHLL    R8                              ; ADR*2
 3915                              58             OR      R8,R2                           ;
 3916                              59             MOV.W   R2,@R4                          ; RAM ADR SET
 3917                              60     
 3918                              61     ;       *** OFFSET SET ***
 3919                              62             MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 3920                              63             ADD     R1,R4                           ; 10+4=14  MOV.B @(R0,R*),R0の命令 LOAD
 3921                              64             MOV.L   #_SEQ_MOVCMD_R0RD_TBL,R0        ;
 3922                              65             SHLL    R9                              ; OFFSET*2
 3923                              66             ADD     R9,R0                           ;
 3924                              67             MOV.W   @R0,R0                          ;
 3925                              68             MOV.W   R0,@R4                          ; 命令置換え
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE     2
PROGRAM NAME =

 3926                              69     
 3927                              70     ;       *** SWAP命令はBIT7以下ならNOPに置換える ***
 3928                              71             MOV.L   #_NOP_SWAP_TBL0,R0              ;
 3929                              72             ADD     R10,R0                          ;
 3930                              73             MOV.W   @R0,R0                          ; NOP or SWAP命令LOAD
 3931                              74     
 3932                              75             MOV.L   #D'2,R1                         ; ﾒﾓﾘのところ
 3933                              76             ADD     R1,R4                           ; 14+2=16  SWAP.Bの命令 LOAD
 3934                              77             MOV.W   R0,@R4                          ; NOP or SWAP命令 WRITE
 3935                              78     
 3936                              79             MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 3937                              80             M_BRA   _JMP_EX\@                       ;
 3938                              81     ;
 3939                              82     _JMP_C80\@:
 3940                              83             MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 3941                              84     
 3942                              85     _JMP_EX\@:
 3943                              86             .ENDM
 3944                              87     
 3945                              88     ;       ***************************************************
 3946                              89     ;       *****   AND,ANDN,OR,ORN CODE CHANGE MACRO       ***
 3947                              90     ;       ***************************************************
 3948                              91     
 3949                              92             .MACRO  _SEQ_A_AN_O_ON_CMD      TOP_ADR,END_ADR
 3950                              93     
 3951                              94     ;_AND_CHG:                                      ; 00000100B     4
 3952                              95     ;_ANDN_CHG:                                     ; 00000101B     5
 3953                              96     ;_OR_CHG:                                       ; 00000110B     6
 3954                              97     ;_ORN_CHG:                                      ; 00000111B     7
 3955                              98             MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 3956                              99             CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 3957                             100             BT      _JMP_C80\@                      ; IF ADR >= 127 THEN JUMP
 3958                             101     ;
 3959                             102             MOV.L   #(\END_ADR-\TOP_ADR),R0         ; 転送 BYTE長
 3960                             103             MOV.L   #\TOP_ADR,R3                    ; Read CODE MOVE        (12 BYTE)
 3961                             104     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 3962                             105             MOV     R13,R4                          ; SEQ ADR. KEEP
 3963                             106     
 3964                             107             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 3965                             108                                                     ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 3966                             109     ;       *** BIT SET ***
 3967                             110             MOV.L   #_SEQ_BBIT_CHG_TBL,R1           ; ﾒﾓﾘのところ +0
 3968                             111             SHLL    R10                             ; *2
 3969                             112             ADD     R10,R1                          ;
 3970                             113             MOV.W   @R1,R1                          ; BIT LOAD
 3971                             114             MOV.W   @R4,R2                          ; ﾒﾓﾘのところの命令LOAD
 3972                             115             MOV.L   #H'FFFFFF00,R0                  ;
 3973                             116             AND     R0,R2                           ; BITﾃﾞｰﾀのところをｸﾘｱ
 3974                             117             OR      R1,R2                           ;
 3975                             118             MOV.W   R2,@R4                          ; BIT SET
 3976                             119     
 3977                             120     ;       *** ADR SET ***
 3978                             121             MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 3979                             122             ADD     R1,R4                           ; 0+4=4
 3980                             123             MOV.W   @R4,R2                          ;
 3981                             124             AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE     3
PROGRAM NAME =

 3982                             125             SHLL    R8                              ; ADR*2
 3983                             126             OR      R8,R2                           ;
 3984                             127             MOV.W   R2,@R4                          ; RAM ADR SET
 3985                             128     
 3986                             129     ;       *** OFFSET SET ***
 3987                             130             MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 3988                             131             ADD     R1,R4                           ; 4+4=8  MOV.B @(R0,R*),R0の命令 LOAD
 3989                             132             MOV.L   #_SEQ_MOVCMD_R0RD_TBL,R0        ;
 3990                             133             SHLL    R9                              ; OFFSET*2
 3991                             134             ADD     R9,R0                           ;
 3992                             135             MOV.W   @R0,R0                          ;
 3993                             136             MOV.W   R0,@R4                          ; 命令置換え
 3994                             137     
 3995                             138     ;       *** SWAP命令はBIT7以下ならNOPに置換える ***
 3996                             139             MOV.L   #_NOP_SWAP_TBL0,R0              ;
 3997                             140             ADD     R10,R0                          ;
 3998                             141             MOV.W   @R0,R0                          ; NOP or SWAP命令LOAD
 3999                             142     
 4000                             143             MOV.L   #D'2,R1                         ; ﾒﾓﾘのところ
 4001                             144             ADD     R1,R4                           ; 8+2=10  SWAP.Bの命令 LOAD
 4002                             145             MOV.W   R0,@R4                          ; NOP or SWAP命令 WRITE
 4003                             146     
 4004                             147             MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 4005                             148             M_BRA   _JMP_EX\@                       ;
 4006                             149     ;
 4007                             150     _JMP_C80\@:
 4008                             151             MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 4009                             152     
 4010                             153     _JMP_EX\@:
 4011                             154             .ENDM
 4012                             155     
 4013                             156     
 4014                             157     
 4015                             158     ;       ***************************************************
 4016                             159     ;       *****   SET,RST CODE CHANGE MACRO               ***
 4017                             160     ;       ***************************************************
 4018                             161     
 4019                             162             .MACRO  _SEQ_SET_RST_CMD        TOP_ADR,END_ADR,BIT_AREA,ADR_AREA,COD_AREA1,COD_AR
                                          EA2,COD_AREA3
 4020                             163     
 4021                             164             MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 4022                             165             CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 4023                             166             BT      _JMP_C80\@                      ; IF ADR >= 127 THEN JUMP
 4024                             167     ;
 4025                             168             MOV.L   #(\END_ADR-\TOP_ADR),R0         ; 転送 BYTE長
 4026                             169             MOV.L   #\TOP_ADR,R3                    ; Read CODE MOVE        (12 BYTE)
 4027                             170     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 4028                             171             MOV     R13,R4                          ; SEQ ADR. KEEP
 4029                             172     
 4030                             173             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 4031                             174                                                     ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 4032                             175     
 4033                             176             MOV.L   #H'FFFFFF00,R0                  ;
 4034                             177     
 4035                             178     ;       *** BIT SET ***
 4036                             179             MOV.L   #\BIT_AREA,R1                   ; ﾒﾓﾘのところ
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE     4
PROGRAM NAME =

 4037                             180             ADD     R1,R4                           ; +2
 4038                             181             MOV.L   #_SEQ_BBIT_CHG_TBL,R1           ; ﾒﾓﾘのところ +0
 4039                             182             SHLL    R10                             ; *2
 4040                             183             ADD     R10,R1                          ;
 4041                             184             MOV.W   @R1,R1                          ; BIT LOAD
 4042                             185             MOV.W   @R4,R2                          ; ﾒﾓﾘのところの命令LOAD
 4043                             186             AND     R0,R2                           ; BITﾃﾞｰﾀのところをｸﾘｱ
 4044                             187             OR      R1,R2                           ;
 4045                             188             MOV.W   R2,@R4                          ; BIT SET
 4046                             189     
 4047                             190     ;       *** SHLL命令はBIT7以下ならNOPに置換える ***
 4048                             191             MOV.L   #_NOP_SHLL8_R3_TBL0,R2          ;
 4049                             192             ADD     R10,R2                          ;
 4050                             193             MOV.W   @R2,R2                          ; NOP or SHLL8命令LOAD
 4051                             194             MOV.L   #\COD_AREA1,R1                          ; ﾒﾓﾘのところ
 4052                             195             ADD     R1,R4                           ; 8+2=10  SWAP.Bの命令 LOAD
 4053                             196             MOV.W   R2,@R4                          ; NOP or SWAP命令 WRITE
 4054                             197     
 4055                             198     ;       *** ADR SET ***
 4056                             199             MOV.L   #\ADR_AREA,R1                   ; ﾒﾓﾘのところ
 4057                             200             ADD     R1,R4                           ; 2+6=8
 4058                             201             MOV.W   @R4,R2                          ;
 4059                             202             AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 4060                             203             SHLL    R8                              ; ADR*2
 4061                             204             OR      R8,R2                           ;
 4062                             205             MOV.W   R2,@R4                          ; RAM ADR SET
 4063                             206     
 4064                             207     ;       *** OFFSET SET ***
 4065                             208             MOV.L   #\COD_AREA2,R1                  ; ﾒﾓﾘのところ
 4066                             209             ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 4067                             210             MOV.L   #_SEQ_MOVCMD_R1RD_TBL,R0        ;
 4068                             211             SHLL    R9                              ; OFFSET*2
 4069                             212             ADD     R9,R0                           ;
 4070                             213             MOV.W   @R0,R0                          ;
 4071                             214             MOV.W   R0,@R4                          ; 命令置換え
 4072                             215     
 4073                             216     ;       *** OFFSET SET ***
 4074                             217             MOV.L   #\COD_AREA3,R1                  ; ﾒﾓﾘのところ
 4075                             218             ADD     R1,R4                           ; 12+4=16  MOV.B R1,@(R0,R*)の命令 LOAD
 4076                             219             MOV.L   #_SEQ_MOVCMD_R1WR_TBL,R0        ;
 4077                             220             ADD     R9,R0                           ;
 4078                             221             MOV.W   @R0,R0                          ;
 4079                             222             MOV.W   R0,@R4                          ; 命令置換え
 4080                             223     
 4081                             224             MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 4082                             225             M_BRA   _JMP_EX\@                       ;
 4083                             226     ;
 4084                             227     _JMP_C80\@:
 4085                             228             MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 4086                             229     
 4087                             230     _JMP_EX\@:
 4088                             231             .ENDM
 4089                             232     
 4090                             233     
 4091                             234     ;       ***************************************************
 4092                             235     ;       *****   PLS PLF DS CODE CHANGE MACRO            ***
 4093                             236     ;       ***************************************************
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE     5
PROGRAM NAME =

 4094                             237     
 4095                             238             .MACRO  _SEQ_PLS_PLF_CMD        TOP_ADR,END_ADR,BIT_AREA,ADR_AREA,COD_AREA1
 4096                             239     
 4097                             240             MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 4098                             241             CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 4099                             242             BT      _JMP_C80\@                      ; IF ADR >= 127 THEN JUMP
 4100                             243     ;
 4101                             244             MOV.L   #(\END_ADR-\TOP_ADR),R0         ; 転送 BYTE長
 4102                             245             MOV.L   #\TOP_ADR,R3                    ; Read CODE MOVE        (12 BYTE)
 4103                             246     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 4104                             247             MOV     R13,R4                          ; SEQ ADR. KEEP
 4105                             248     
 4106                             249             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 4107                             250                                                     ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 4108                             251     ;       *** BIT SET ***
 4109                             252             MOV.L   #\BIT_AREA,R1                   ; ﾒﾓﾘのところ
 4110                             253             ADD     R1,R4                           ;
 4111                             254             MOV.L   #_SEQ_BBIT_CHG_TBL,R1           ;
 4112                             255             SHLL    R10                             ; *2
 4113                             256             ADD     R10,R1                          ;
 4114                             257             MOV.W   @R1,R1                          ;
 4115                             258             MOV.W   @R4,R2                          ; ﾒﾓﾘのところの命令LOAD
 4116                             259             MOV.L   #H'FFFFFF00,R0                  ;
 4117                             260             AND     R0,R2                           ; BITﾃﾞｰﾀのところをｸﾘｱ
 4118                             261             OR      R1,R2                           ;
 4119                             262             MOV.W   R2,@R4                          ; BIT SET
 4120                             263     
 4121                             264     ;       *** SHLL命令はBIT7以下ならNOPに置換える ***
 4122                             265             MOV.L   #_NOP_SHLL8_R2_TBL0,R2          ;
 4123                             266             ADD     R10,R2                          ;
 4124                             267             MOV.W   @R2,R2                          ; NOP or SHLL8命令LOAD
 4125                             268     
 4126                             269             MOV.L   #\COD_AREA1,R1                          ; ﾒﾓﾘのところ
 4127                             270             ADD     R1,R4                           ; 8+2=10  SWAP.Bの命令 LOAD
 4128                             271             MOV.W   R2,@R4                          ; NOP or SWAP命令 WRITE
 4129                             272     
 4130                             273     ;       *** ADR SET ***
 4131                             274             MOV.L   #\ADR_AREA,R1                   ; ﾒﾓﾘのところ
 4132                             275             ADD     R1,R4                           ; 0+6=6
 4133                             276             MOV.W   @R4,R2                          ;
 4134                             277             AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 4135                             278             SHLL    R8                              ; ADR*2
 4136                             279             OR      R8,R2                           ;
 4137                             280             MOV.W   R2,@R4                          ; RAM ADR SET
 4138                             281     
 4139                             282             MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 4140                             283             M_BRA   _JMP_EX\@                       ;
 4141                             284     ;
 4142                             285     _JMP_C80\@:
 4143                             286             MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 4144                             287     
 4145                             288     _JMP_EX\@:
 4146                             289             .ENDM
 4147                             290     
 4148                             291     
 4149                             292     ;       *********************************************************************
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE     6
PROGRAM NAME =

 4150                             293     ;       *****   LDW,EQ,NE,GT,LE,ANDW,ORW,XORW,ADD,SUB命令変換 ﾏｸﾛ       *****
 4151                             294     ;       *********************************************************************
 4152                             295             .MACRO  _SEQ_LDW_CMP_OPE_CMD    TOP_ADR,END_ADR,ADR_AREA,COD_AREA1
 4153                             296     
 4154                             297             MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 4155                             298             CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 4156                             299             BT      _JMP_C80\@                      ; IF ADR >= 127 THEN JUMP
 4157                             300     ;
 4158                             301             MOV.L   #(\END_ADR-\TOP_ADR),R0         ; 転送 BYTE長
 4159                             302             MOV.L   #\TOP_ADR,R3                    ; Read CODE MOVE        (12 BYTE)
 4160                             303     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 4161                             304             MOV     R13,R4                          ; SEQ ADR. KEEP
 4162                             305     
 4163                             306             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 4164                             307                                                     ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 4165                             308     
 4166                             309             MOV.L   #H'FFFFFF00,R0                  ;
 4167                             310     ;       *** ADR SET ***
 4168                             311             MOV.L   #\ADR_AREA,R1                   ; ﾒﾓﾘのところ
 4169                             312             ADD     R1,R4                           ; +0
 4170                             313             MOV.W   @R4,R2                          ;
 4171                             314             AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 4172                             315             SHLL    R8                              ; ADR*2
 4173                             316             OR      R8,R2                           ;
 4174                             317             MOV.W   R2,@R4                          ; RAM ADR SET
 4175                             318     
 4176                             319     ;       *** OFFSET SET ***
 4177                             320             MOV.L   #\COD_AREA1,R1                  ; ﾒﾓﾘのところ
 4178                             321             ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 4179                             322             MOV.L   #_SEQ_MOVCMD_R3RD_TBL,R0        ;
 4180                             323             SHLL    R9                              ; OFFSET*2
 4181                             324             ADD     R9,R0                           ;
 4182                             325             MOV.W   @R0,R0                          ;
 4183                             326             MOV.W   R0,@R4                          ; 命令置換え
 4184                             327     
 4185                             328             MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 4186                             329             M_BRA   _JMP_EX\@                       ;
 4187                             330     ;
 4188                             331     _JMP_C80\@:
 4189                             332             MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 4190                             333     
 4191                             334     _JMP_EX\@:
 4192                             335             .ENDM
 4193                             336     
 4194                             337     
 4195                             338     ;       *****************************************************
 4196                             339     ;       *****   STW,CLR命令変換 ﾏｸﾛ                     *****
 4197                             340     ;       *****************************************************
 4198                             341             .MACRO  _SEQ_STW_CLR_CMD        TOP_ADR,END_ADR,ADR_AREA,COD_AREA1
 4199                             342     
 4200                             343             MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 4201                             344             CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 4202                             345             BT      _JMP_C80\@                      ; IF ADR >= 127 THEN JUMP
 4203                             346     ;
 4204                             347             MOV.L   #(\END_ADR-\TOP_ADR),R0         ; 転送 BYTE長
 4205                             348             MOV.L   #\TOP_ADR,R3                    ; Read CODE MOVE        (12 BYTE)
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE     7
PROGRAM NAME =

 4206                             349     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 4207                             350             MOV     R13,R4                          ; SEQ ADR. KEEP
 4208                             351     
 4209                             352             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 4210                             353                                                     ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 4211                             354             MOV.L   #H'FFFFFF00,R0                  ;
 4212                             355     ;       *** ADR SET ***
 4213                             356             MOV.L   #\ADR_AREA,R1                   ; ﾒﾓﾘのところ
 4214                             357             ADD     R1,R4                           ; +0
 4215                             358             MOV.W   @R4,R2                          ;
 4216                             359             AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 4217                             360             SHLL    R8                              ; ADR*2
 4218                             361             OR      R8,R2                           ;
 4219                             362             MOV.W   R2,@R4                          ; RAM ADR SET
 4220                             363     
 4221                             364     ;       *** OFFSET SET ***
 4222                             365             MOV.L   #\COD_AREA1,R1                  ; ﾒﾓﾘのところ
 4223                             366             ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 4224                             367             MOV.L   #_SEQ_ADDCMD_R0_TBL,R0  ;
 4225                             368             SHLL    R9                              ; OFFSET*2
 4226                             369             ADD     R9,R0                           ;
 4227                             370             MOV.W   @R0,R0                          ;
 4228                             371             MOV.W   R0,@R4                          ; 命令置換え
 4229                             372     
 4230                             373             MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 4231                             374             M_BRA   _JMP_EX\@                       ;
 4232                             375     ;
 4233                             376     _JMP_C80\@:
 4234                             377             MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 4235                             378     
 4236                             379     _JMP_EX\@:
 4237                             380             .ENDM
 4238                             381     
 4239                             382     
 4240                             383     
 4241                             384     
 4242                             385     ;       *****************************************************
 4243                             386     ;       *****   WTMR,WCTR命令変換 ﾏｸﾛ                   *****
 4244                             387     ;       *****************************************************
 4245                             388             .MACRO  _SEQ_WTMR_WCTR_CMD      TOP_ADR,END_ADR,ADR_AREA,COD_AREA1
 4246                             389     
 4247                             390             MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 4248                             391             CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 4249                             392             BT      _JMP_C80\@                      ; IF ADR >= 127 THEN JUMP
 4250                             393     ;
 4251                             394             MOV.L   #(\END_ADR-\TOP_ADR),R0         ; 転送 BYTE長
 4252                             395             MOV.L   #\TOP_ADR,R3                    ; Read CODE MOVE        (12 BYTE)
 4253                             396     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 4254                             397             MOV     R13,R4                          ; SEQ ADR. KEEP
 4255                             398     
 4256                             399             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 4257                             400                                                     ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 4258                             401     
 4259                             402             MOV.L   #H'FFFFFF00,R0                  ;
 4260                             403     ;       *** ADR SET ***
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE     8
PROGRAM NAME =

 4261                             404             MOV.L   #\ADR_AREA,R1                   ; ﾒﾓﾘのところ
 4262                             405             ADD     R1,R4                           ; +0
 4263                             406             MOV.W   @R4,R2                          ;
 4264                             407             AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 4265                             408     ;;;;;   SHLL    R8                              ; ADR*2
 4266                             409             OR      R8,R2                           ;
 4267                             410             MOV.W   R2,@R4                          ; RAM ADR SET
 4268                             411     
 4269                             412             MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 4270                             413             M_BRA   _JMP_EX\@                       ;
 4271                             414     ;
 4272                             415     _JMP_C80\@:
 4273                             416             MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 4274                             417     
 4275                             418     _JMP_EX\@:
 4276                             419             .ENDM
 4277                             420     
 4278                             421     
 4279                             422     ;       ***************************************************
 4280                             423     ;       ***                                             ***
 4281                             424     ;       ***                                             ***
 4282                             425     ;       ***     シーケンスコード変換ソフト              ***
 4283                             426     ;       ***                                             ***
 4284                             427     ;       ***                                             ***
 4285                             428     ;       ***************************************************
 4286 00000000                    429             .SECTION        P,CODE                  ;
 4287                             430             .import _SEQ_COM1_TOP                   ; SEQUENCE COMMAND AREA TOP ADR.
 4288                             431             .import _SEQ_COM1_END                   ; SEQUENCE COMMAND AREA END ADR.
 4289                             432     
 4290                             433             .EXPORT _SEQ_RUN_CHG_MAIN               ; ｼｰｹﾝｽFROM->SDRAM命令変換
 4291                             434     
 4292                             435     
 4293                             436     
 4294 00000000                    437     _SEQ_START_CODE:
 4295                             438             SUB_START
 4296 00000000 4F22                   M           STS.L   PR,@-R15                ;[必要]
 4297                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 4298 00000002 0009               439             NOP
 4299                             440     
 4300 00000004                    441     _SEQ_END_CODE:
 4301                             442             SUB_END
 4302                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 4303 00000004 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 4304                             443             M_RTS
 4305 00000006 000B                   M           RTS                             ;RTSの後ろの
 4306 00000008 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 4307                             444     
 4308                             445     
 4309                             446     
 4310                             447     ;
 4311                             448     ;       /********************************************************
 4312                             449     ;       /**********     SEQUENCE COMMAND CHANGE        **********
 4313                             450     ;       /********************************************************
 4314                             451             .IMPORT _PVP_COM_ADR            ;word
 4315                             452             .IMPORT _PVP_COM_ERR            ;ｺﾝﾊﾟｲﾙ異常有り／無し
 4316                             453     
 4317                             454     
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE     9
PROGRAM NAME =

 4318                             455     ;SEQ_COMPILE :FLAG IF data  ==0 THEN MAIN-SEQ 0~4000?[EQU=MAIN_SEQ_STP] STEP
 4319                             456     ;                  IF data  !=0 THEN INT -SEQ 0~100? [EQU=INT_SEQ_STP] STEP
 4320                             457     
 4321 0000000A                    458     _SEQ_RUN_CHG_MAIN:
 4322                             459             SUB_START
 4323 0000000A 4F22                   M           STS.L   PR,@-R15                ;[必要]
 4324                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 4325                             460     
 4326                             461     ;       *** ｼｰｹﾝｽの始まりはSUB_STARTを入れる ***
 4327 0000000C DD17               462             MOV.L   #_SEQ_RUN1_TOP,R13              ; RUN COMMAND STORE AREA TOP ADR.
 4328 0000000E DC18               463             MOV.L   #_SEQ_START_CODE,R12            ;
 4329 00000010 60C1               464             MOV.W   @R12,R0                         ; SUB_START CODE SET
 4330 00000012 2D01               465             MOV.W   R0,@R13                         ;
 4331 00000014 D017               466             MOV.L   #2,R0                           ;
 4332 00000016 3D0C               467             ADD     R0,R13                          ; ADDRESS INC
 4333 00000018 3C0C               468             ADD     R0,R12                          ; ADDRESS INC
 4334 0000001A 60C1               469             MOV.W   @R12,R0                         ;
 4335 0000001C 2D01               470             MOV.W   R0,@R13                         ; NOP CODE SET
 4336                             471     
 4337                             472             FAR_JSR #_SEQ_RUN_CHG1,R1               ;
 4338 0000001E D116                   M           MOV.L   #_SEQ_RUN_CHG1,R1               ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 4339 00000020 410B                   M           JSR     @R1                     ;
 4340 00000022 0009                   M           NOP                                     ;
 4341                             473     
 4342 00000024 D115               474             MOV.L   #_SEQ_CMP_ERR_ADR,R1            ;
 4343 00000026 2172               475             MOV.L   R7,@R1                          ; compile error adr set
 4344                             476     
 4345                             477     ;       ===========================
 4346 00000028 D115               478             MOV.L   #_PVP_COM_ADR,R1                ;word
 4347 0000002A 2171               479             MOV.W   R7,@R1                          ;
 4348 0000002C D115               480             MOV.L   #_PVP_COM_ERR,R1                ;ｺﾝﾊﾟｲﾙ異常有り／無し
 4349 0000002E 2101               481             MOV.W   R0,@R1                          ;
 4350                             482     ;       ============================
 4351                             483     
 4352 00000030 D115               484             MOV.L   #_SEQ_CMP_ERR,R1                ;
 4353 00000032 2101               485             MOV.W   R0,@R1                          ; CMP OK = R0:0000 , CMP NG = R0:FFFF
 4354                             486     
 4355 00000034 2008               487             TST     R0,R0                           ;
 4356 00000036 890C               488             BT      _SEQ_RUN_CHG_MAIN020            ;
 4357                             489     
 4358                             490     ;       *** 異常終了時はSUB_END,M_RTSをつける ***
 4359 00000038 DC14               491             MOV.L   #_SEQ_END_CODE,R12              ;
 4360 0000003A 60C1               492             MOV.W   @R12,R0                         ; SUB_END CODE SET
 4361 0000003C 2D01               493             MOV.W   R0,@R13                         ;
 4362 0000003E D00D               494             MOV.L   #2,R0                           ;
 4363 00000040 3D0C               495             ADD     R0,R13                          ; ADDRESS INC
 4364 00000042 3C0C               496             ADD     R0,R12                          ; ADDRESS INC
 4365 00000044 60C1               497             MOV.W   @R12,R0                         ;
 4366 00000046 2D01               498             MOV.W   R0,@R13                         ; M_RTS SET
 4367 00000048 D00A               499             MOV.L   #2,R0                           ;
 4368 0000004A 3D0C               500             ADD     R0,R13                          ; ADDRESS INC
 4369 0000004C 3C0C               501             ADD     R0,R12                          ; ADDRESS INC
 4370 0000004E 60C1               502             MOV.W   @R12,R0                         ;
 4371 00000050 2D01               503             MOV.W   R0,@R13                         ; M_RTS SET
 4372                             504     
 4373 00000052                    505     _SEQ_RUN_CHG_MAIN020:
 4374                             506     
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    10
PROGRAM NAME =

 4375 00000052 222A               507             XOR     R2,R2                           ;
 4376                             508     
 4377 00000054 D10E               509             MOV.L   #_SEQ_ARG1_DATA,R1              ; ARG clear
 4378 00000056 2121               510             MOV.W   R2,@R1                          ;
 4379 00000058 D10E               511             MOV.L   #_SEQ_MRG1_DATA,R1              ; MRG clear
 4380 0000005A 2121               512             MOV.W   R2,@R1                          ;
 4381 0000005C 9204               513             MOV.W   #H'01,R2                        ; NRG 1 set
 4382 0000005E D10E               514             MOV.L   #_SEQ_NRG1_DATA,R1              ;
 4383 00000060 2121               515             MOV.W   R2,@R1                          ;
 4384                             516     
 4385                             517             SUB_END
 4386                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 4387 00000062 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 4388                             518             M_RTS
 4389 00000064 000B                   M           RTS                             ;RTSの後ろの
 4390 00000066 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 4391                             519     
 4392                             520     ;       ***********************************
 4393                             521     ;       ***     ｺﾝﾊﾟｲﾙｻﾌﾞﾙｰﾁﾝ           ***
 4394                             522     ;       ***********************************
 4395                             523     ;
 4396                                     ***** BEGIN-POOL *****
 4397 00000068 0001                       DATA FOR SOURCE-LINE 513
 4398 0000006A 0000                       ALIGNMENT CODE
 4399 0000006C 00000000                   DATA FOR SOURCE-LINE 462
 4400 00000070 00000000                   DATA FOR SOURCE-LINE 463
 4401 00000074 00000002                   DATA FOR SOURCE-LINE 466,494,499
 4402 00000078 00000000                   DATA FOR SOURCE-LINE 472
 4403 0000007C 00000000                   DATA FOR SOURCE-LINE 474
 4404 00000080 00000000                   DATA FOR SOURCE-LINE 478
 4405 00000084 00000000                   DATA FOR SOURCE-LINE 480
 4406 00000088 00000000                   DATA FOR SOURCE-LINE 484
 4407 0000008C 00000000                   DATA FOR SOURCE-LINE 491
 4408 00000090 00000000                   DATA FOR SOURCE-LINE 509
 4409 00000094 00000000                   DATA FOR SOURCE-LINE 511
 4410 00000098 00000000                   DATA FOR SOURCE-LINE 514
 4411                                     ***** END-POOL *****
 4412 0000009C                    524     _SEQ_RUN_CHG1:
 4413                             525             SUB_START
 4414 0000009C 4F22                   M           STS.L   PR,@-R15                ;[必要]
 4415                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 4416                             526     
 4417 0000009E DC1A               527             MOV.L   #_SEQ_COM1_TOP,R12              ; SEQUENCE COMMAND AREA TOP ADR.
 4418 000000A0 DD1A               528             MOV.L   #_SEQ_RUN1,R13                  ; RUN COMMAND STORE AREA TOP ADR.
 4419 000000A2 DE1B               529             MOV.L   #_SEQ_RUN1_END,R14              ; RUN COMMAND STORE AREA TOP ADR.
 4420                             530     
 4421 000000A4 D01B               531             MOV.L   #_SEQ_MAX_BYTE,R0               ; 最大命令数28BYTE
 4422 000000A6 3E08               532             SUB     R0,R14                          ; 最大命令数28BYTE
 4423 000000A8 277A               533             XOR     R7,R7                           ; 異常ｽﾃｯﾌﾟ検出ｶｳﾝﾀ
 4424                             534     
 4425 000000AA D61B               535             MOV.L   #_SEQ_COM1_END,R6               ; SEQUENCE COMMAND AREA END ADR.
 4426                             536     
 4427 000000AC                    537     _SEQ_RUN_CHG1_100:
 4428                             538             _WDT_CLR R0,R1,R2                       ;
 4429                                 M           DI_PUSH_SR_SH3  R0, R1
 4430 000000AC 0002                   M           STC     SR,R0                   ;
 4431 000000AE 9127                   M           MOV.W   #H'000000F0,R1          ;
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    11
PROGRAM NAME =

 4432 000000B0 201B                   M           OR      R1,R0           ;INT15
 4433 000000B2 4F03                   M           STC.L   SR,@-R15                        ;PUSH SR
 4434 000000B4 400E                   M           LDC     R0,SR                   ;割込禁止（15）
 4435                                 M   
 4436 000000B6 D119                   M           MOV.L   #_PDTRB,R1
 4437 000000B8 6011                   M           MOV.W   @R1,R0  ;R0:
 4438 000000BA 9222                   M           MOV.W   #BIT2,R2                ;
 4439 000000BC 202A                   M           XOR     R2,R0   ;
 4440 000000BE 2101                   M           MOV.W   R0,@R1  ;output
 4441                                 M   
 4442 000000C0 202A                   M           XOR     R2,R0   ;
 4443 000000C2 2101                   M           MOV.W   R0,@R1  ;output
 4444                                 M   
 4445 000000C4 202A                   M           XOR     R2,R0   ;
 4446 000000C6 2101                   M           MOV.W   R0,@R1  ;output
 4447                                 M   
 4448                                 M           EI_POP_SR_SH3                   ;
 4449 000000C8 4F07                   M           LDC.L   @R15+,SR                        ;POP SR
 4450                             539                                                     ; R12:ﾕ-ｻﾞ命令ｺｰﾄﾞ
 4451                             540                                                     ; R12:ｲﾝｸﾘﾒﾝﾄ
 4452                             541                                                     ; R13:SEQ-展開命令-WORK
 4453                             542                                                     ; R13:ｲﾝｸﾘﾒﾝﾄ
 4454 000000CA 3DE3               543             CMP/GE  R14,R13                         ; ﾜｰｸﾒﾓﾘｵｰﾊﾞﾁｪｯｸ IF OVER THEN ERR R13 >= R
                                          14
 4455 000000CC 8937               544             BT      _SEQ_RUN_CHG1_ERR_END           ; R13>=R14 JUMP
 4456                             545     
 4457 000000CE 3C63               546             CMP/GE  R6,R12                          ; ｼｰｹﾝｽｺｰﾄﾞ領域ﾁｪｯｸ IF OVER THEN ERR R12 >
                                          = R6
 4458 000000D0 8935               547             BT      _SEQ_RUN_CHG1_ERR_END           ; R13>=R14 JUMP
 4459                             548     
 4460 000000D2 6AC5               549             MOV.W   @R12+,R10                       ; OP CODE , BIT CODE LOAD
 4461 000000D4 68C5               550             MOV.W   @R12+,R8                        ; DATA CODE LOAD
 4462                             551     
 4463 000000D6 69A8               552             SWAP.B  R10,R9                          ;
 4464 000000D8 699C               553             EXTU.B  R9,R9                           ; OP CODE
 4465 000000DA 9013               554             MOV.W   #H'007F,R0                      ;
 4466 000000DC 2909               555             AND     R0,R9                           ;
 4467 000000DE 6AAC               556             EXTU.B  R10,R10                         ; BIT CODE
 4468                             557     
 4469 000000E0                    558     _SEQ_RUN_CHG1_300:
 4470                             559     ;                                               ; SEQUENCE COMMAND
 4471 000000E0 4908               560             SHLL2   R9                              ; OP CODE * 4
 4472 000000E2 D10F               561             MOV.L   #_SEQ_CHG_TBL0,R1               ;
 4473 000000E4 319C               562             ADD     R9,R1                           ;
 4474                             563     
 4475 000000E6 6983               564             MOV     R8,R9                           ;
 4476 000000E8 6998               565             SWAP.B  R9,R9                           ;
 4477 000000EA 688C               566             EXTU.B  R8,R8                           ; R8=ADR
 4478 000000EC 699C               567             EXTU.B  R9,R9                           ; R9=OFFSET
 4479                             568     
 4480 000000EE 6112               569             MOV.L   @R1,R1                          ; ADDRESS LOAD
 4481 000000F0 410B               570             JSR     @R1                             ; ｺﾏﾝﾄﾞから展開する
 4482 000000F2 0009               571             NOP                                     ; ER0,ER1,ER2,ER3,ER4 BREAK OK!
 4483                             572                                                     ; IF ERR THEN R0=FFFFH ELSE "0"
 4484                             573                                                     ; IF END THEN R0=0000H ELSE "0"
 4485                             574     
 4486 000000F4 8800               575             CMP/EQ  #_SQ_NML_COD,R0                 ;
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    12
PROGRAM NAME =

 4487 000000F6 8915               576             BT      _SEQ_RUN_CHG1_800               ; NO ERR THEN JUMP
 4488                             577     
 4489 000000F8 8855               578             CMP/EQ  #_SQ_NML_END,R0                 ;
 4490 000000FA 891D               579             BT      _SEQ_RUN_CHG1_END               ; NORMAL END
 4491                             580             M_BRA   _SEQ_RUN_CHG1_ERR_END           ; ERR[ｵﾍﾟｺｰﾄﾞ異常または
 4492 000000FC A01F                   M           BRA     _SEQ_RUN_CHG1_ERR_END
 4493 000000FE 0009                   M           NOP
 4494                             581                                                     ;    [ENDなし異常=内部RAMに収まらない]
 4495                             582     
 4496                                     ***** BEGIN-POOL *****
 4497 00000100 00F0                       DATA FOR SOURCE-LINE 538
 4498 00000102 0004                       DATA FOR SOURCE-LINE 538
 4499 00000104 007F                       DATA FOR SOURCE-LINE 554
 4500 00000106 0000                       ALIGNMENT CODE
 4501 00000108 00000000                   DATA FOR SOURCE-LINE 527
 4502 0000010C 00000000                   DATA FOR SOURCE-LINE 528
 4503 00000110 00000000                   DATA FOR SOURCE-LINE 529
 4504 00000114 0000001C                   DATA FOR SOURCE-LINE 531
 4505 00000118 00000000                   DATA FOR SOURCE-LINE 535
 4506 0000011C 00000000                   DATA FOR SOURCE-LINE 538
 4507 00000120 00000000                   DATA FOR SOURCE-LINE 561
 4508                                     ***** END-POOL *****
 4509 00000124                    583     _SEQ_RUN_CHG1_800:                              ; CODE SET END
 4510                             584     
 4511                             585     ;--- 2013-06-17 DEBUG機能追加
 4512 00000124 9106               586             MOV.W   #D'3460,R1                      ;
 4513 00000126 3710               587             CMP/EQ  R1,R7                           ;
 4514 00000128 8B00               588             BF      SEQ_RUN_CHG1_DBE                ;
 4515 0000012A 0009               589             NOP
 4516 0000012C                    590     SEQ_RUN_CHG1_DBE
 4517                             591     
 4518                             592     
 4519                             593     
 4520                             594     
 4521                             595     
 4522                             596     
 4523                             597     
 4524                             598     
 4525 0000012C 9103               599             MOV.W   #1,R1                           ;
 4526 0000012E 371C               600             ADD     R1,R7                           ; STEP COUNTER + 1
 4527                             601             M_BRA   _SEQ_RUN_CHG1_100               ; LOOP
 4528 00000130 AFBC                   M           BRA     _SEQ_RUN_CHG1_100
 4529 00000132 0009                   M           NOP
 4530                             602     
 4531                                     ***** BEGIN-POOL *****
 4532 00000134 0D84                       DATA FOR SOURCE-LINE 586
 4533 00000136 0001                       DATA FOR SOURCE-LINE 599
 4534                                     ***** END-POOL *****
 4535 00000138                    603     _SEQ_RUN_CHG1_END:
 4536 00000138 200A               604             XOR     R0,R0                           ; 0 --> R0 = NOMAL
 4537                             605                                                     ; ANS.R7 ROMｽﾃｯﾌﾟ数
 4538                             606             M_BRA   _SEQ_RUN_CHG1_EXIT              ;
 4539 0000013A A001                   M           BRA     _SEQ_RUN_CHG1_EXIT
 4540 0000013C 0009                   M           NOP
 4541                             607     
 4542 0000013E                    608     _SEQ_RUN_CHG1_ERR_END:
 4543 0000013E 9002               609             MOV.W   #_SQ_ERR_END,R0                 ; FFFF-->R0 = ERR
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    13
PROGRAM NAME =

 4544                             610                                                     ; ANS.R7 ROMｽﾃｯﾌﾟ数
 4545 00000140                    611     _SEQ_RUN_CHG1_EXIT:
 4546                             612             SUB_END
 4547                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 4548 00000140 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 4549                             613             M_RTS
 4550 00000142 000B                   M           RTS                             ;RTSの後ろの
 4551 00000144 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 4552                             614     ;
 4553                             615     
 4554                             616     ;       /****************************************************
 4555                             617     ;       /*****    R11 ＝　ＯＰ　ＣＯＤＥ                *****
 4556                             618     ;       /*****    R10 ＝　ＢＩＴ　ＣＯＤＥ              *****
 4557                             619     ;       /*****    R9  ＝　ＯＦＦＳＥＴ　ＣＯＤＥ        *****
 4558                             620     ;       /*****    R8  ＝　ＡＤＲ　ＣＯＤＥ              *****
 4559                             621     ;       /****************************************************
 4560                             622     ;
 4561                             623     ;       *******************************************
 4562                             624     ;       ***     NOP CODE CHANGE ROUTINE         ***
 4563                             625     ;       *******************************************
 4564                                     ***** BEGIN-POOL *****
 4565 00000146 FF00                       DATA FOR SOURCE-LINE 609
 4566                                     ***** END-POOL *****
 4567 00000148                    626             .ALIGN  4
 4568 00000148                    627     _NOP_CHG:                               ; 00000000B
 4569                             628             SUB_START
 4570 00000148 4F22                   M           STS.L   PR,@-R15                ;[必要]
 4571                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 4572                             629     
 4573 0000014A D105               630             MOV.L   #_NOP_CODE,R1           ; NOP CODE MOVE
 4574 0000014C 6011               631             MOV.W   @R1,R0                  ; *** NOP *** LOAD
 4575 0000014E 2D01               632             MOV.W   R0,@R13                 ;
 4576 00000150 D104               633             MOV.L   #2,R1                   ;
 4577 00000152 3D1C               634             ADD     R1,R13                  ; SDRAM ADRESS +2
 4578 00000154 9002               635             MOV.W   #_SQ_NML_COD,R0         ;
 4579                             636     
 4580                             637             SUB_END
 4581                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 4582 00000156 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 4583                             638             M_RTS                           ; NORMAL END
 4584 00000158 000B                   M           RTS                             ;RTSの後ろの
 4585 0000015A 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 4586                             639     ;
 4587                             640     
 4588                             641     ;       /****************************************************
 4589                             642     ;       /*****    R11 ＝　ＯＰ　ＣＯＤＥ                *****
 4590                             643     ;       /*****    R10 ＝　ＢＩＴ　ＣＯＤＥ              *****
 4591                             644     ;       /*****    R9  ＝　ＯＦＦＳＥＴ　ＣＯＤＥ        *****
 4592                             645     ;       /*****    R8  ＝　ＡＤＲ　ＣＯＤＥ              *****
 4593                             646     ;       /****************************************************
 4594                             647     ;       *******************************************
 4595                             648     ;       ***     Read CODE CHANGE ROUTINE        ***
 4596                             649     ;       *******************************************
 4597                             650     ;
 4598                                     ***** BEGIN-POOL *****
 4599 0000015C 0000                       DATA FOR SOURCE-LINE 635
 4600 0000015E 0000                       ALIGNMENT CODE
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    14
PROGRAM NAME =

 4601 00000160 00000000                   DATA FOR SOURCE-LINE 630
 4602 00000164 00000002                   DATA FOR SOURCE-LINE 633
 4603                                     ***** END-POOL *****
 4604 00000168                    651             .ALIGN  4
 4605 00000168                    652     _LD_CHG:                                        ; 00000010B
 4606                             653             SUB_START
 4607 00000168 4F22                   M           STS.L   PR,@-R15                ;[必要]
 4608                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 4609                             654     
 4610                             655     ;;;;;   _SEQ_LD_LDN_CMD _LD_CODE,_LD_CODE_END
 4611                             656     ;;;;;
 4612                             657     ;;;;;   SUB_END
 4613                             658     ;;;;;   M_RTS
 4614                             659     
 4615                             660     ;;;;;   消すのもったいないので動いたら削除する
 4616                             661     ;;;;;_LD_CHG:                                   ; 00000010B
 4617 0000016A D116               662             MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 4618 0000016C 3813               663             CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 4619 0000016E 893F               664             BT      _LD_C80                         ; IF ADR >= 127 THEN JUMP
 4620                             665     ;
 4621 00000170 D015               666             MOV.L   #(_LD_CODE_END-_LD_CODE),R0     ; 転送 BYTE長
 4622 00000172 D316               667             MOV.L   #_LD_CODE,R3                    ; Read CODE MOVE        (12 BYTE)
 4623                             668     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 4624 00000174 64D3               669             MOV     R13,R4                          ; SEQ ADR. KEEP
 4625                             670     
 4626                             671             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 4627 00000176 D116                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 4628 00000178 410B                   M           JSR     @R1                     ;
 4629 0000017A 0009                   M           NOP                                     ;
 4630                             672                                                     ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 4631                             673     ;       *** BIT SET ***
 4632 0000017C D115               674             MOV.L   #D'6,R1                         ; ﾒﾓﾘのところ
 4633 0000017E 341C               675             ADD     R1,R4                           ;
 4634 00000180 D115               676             MOV.L   #_SEQ_BBIT_CHG_TBL,R1           ;
 4635 00000182 4A00               677             SHLL    R10                             ; *2
 4636 00000184 31AC               678             ADD     R10,R1                          ;
 4637 00000186 6111               679             MOV.W   @R1,R1                          ;
 4638 00000188 6241               680             MOV.W   @R4,R2                          ; ﾒﾓﾘのところの命令LOAD
 4639 0000018A D014               681             MOV.L   #H'FFFFFF00,R0                  ;
 4640 0000018C 2209               682             AND     R0,R2                           ; BITﾃﾞｰﾀのところをｸﾘｱ
 4641 0000018E 221B               683             OR      R1,R2                           ;
 4642 00000190 2421               684             MOV.W   R2,@R4                          ; BIT SET
 4643                             685     
 4644                             686     ;       *** ADR SET ***
 4645 00000192 D113               687             MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 4646 00000194 341C               688             ADD     R1,R4                           ; 6+4=10
 4647 00000196 6241               689             MOV.W   @R4,R2                          ;
 4648 00000198 2209               690             AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 4649 0000019A 4800               691             SHLL    R8                              ; ADR*2
 4650 0000019C 228B               692             OR      R8,R2                           ;
 4651 0000019E 2421               693             MOV.W   R2,@R4                          ; RAM ADR SET
 4652                             694     
 4653                             695     ;       *** OFFSET SET ***
 4654 000001A0 D10F               696             MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 4655 000001A2 341C               697             ADD     R1,R4                           ; 10+4=14  MOV.B @(R0,R*),R0の命令 LOAD
 4656 000001A4 D00F               698             MOV.L   #_SEQ_MOVCMD_R0RD_TBL,R0        ;
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    15
PROGRAM NAME =

 4657 000001A6 4900               699             SHLL    R9                              ; OFFSET*2
 4658 000001A8 309C               700             ADD     R9,R0                           ;
 4659 000001AA 6001               701             MOV.W   @R0,R0                          ;
 4660 000001AC 2401               702             MOV.W   R0,@R4                          ; 命令置換え
 4661                             703     
 4662                             704     ;       *** SWAP命令はBIT7以下ならNOPに置換える ***
 4663 000001AE D00E               705             MOV.L   #_NOP_SWAP_TBL0,R0              ;
 4664 000001B0 30AC               706             ADD     R10,R0                          ;
 4665 000001B2 6001               707             MOV.W   @R0,R0                          ; NOP or SWAP命令LOAD
 4666                             708     
 4667 000001B4 D10D               709             MOV.L   #D'2,R1                         ; ﾒﾓﾘのところ
 4668 000001B6 341C               710             ADD     R1,R4                           ; 14+2=16  SWAP.Bの命令 LOAD
 4669 000001B8 2401               711             MOV.W   R0,@R4                          ; NOP or SWAP命令 WRITE
 4670                             712     
 4671 000001BA 9001               713             MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 4672                             714             M_BRA   _LD_CHG_EX                      ;
 4673 000001BC A019                   M           BRA     _LD_CHG_EX
 4674 000001BE 0009                   M           NOP
 4675                             715     ;
 4676                                     ***** BEGIN-POOL *****
 4677 000001C0 0000                       DATA FOR SOURCE-LINE 713
 4678 000001C2 0000                       ALIGNMENT CODE
 4679 000001C4 0000007F                   DATA FOR SOURCE-LINE 662
 4680 000001C8 00000000                   DATA FOR SOURCE-LINE 666
 4681 000001CC 00000000                   DATA FOR SOURCE-LINE 667
 4682 000001D0 00000000                   DATA FOR SOURCE-LINE 671
 4683 000001D4 00000006                   DATA FOR SOURCE-LINE 674
 4684 000001D8 00000000                   DATA FOR SOURCE-LINE 676
 4685 000001DC FFFFFF00                   DATA FOR SOURCE-LINE 681
 4686 000001E0 00000004                   DATA FOR SOURCE-LINE 687,696
 4687 000001E4 00000000                   DATA FOR SOURCE-LINE 698
 4688 000001E8 00000000                   DATA FOR SOURCE-LINE 705
 4689 000001EC 00000002                   DATA FOR SOURCE-LINE 709
 4690                                     ***** END-POOL *****
 4691 000001F0                    716     _LD_C80:
 4692 000001F0 9002               717             MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 4693                             718     
 4694 000001F2                    719     _LD_CHG_EX:
 4695                             720             SUB_END
 4696                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 4697 000001F2 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 4698                             721             M_RTS
 4699 000001F4 000B                   M           RTS                             ;RTSの後ろの
 4700 000001F6 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 4701                             722     
 4702                             723     ;       *******************************************
 4703                             724     ;       ***     Read Not CODE CHANGE ROUTINE    ***
 4704                             725     ;       *******************************************
 4705                                     ***** BEGIN-POOL *****
 4706 000001F8 FF00                       DATA FOR SOURCE-LINE 717
 4707                                     ***** END-POOL *****
 4708 000001FA                    726     _LDN_CHG:                                       ; 00000011B
 4709                             727             SUB_START
 4710 000001FA 4F22                   M           STS.L   PR,@-R15                ;[必要]
 4711                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 4712                             728     
 4713                             729             _SEQ_LD_LDN_CMD _LDN_CODE,_LDN_CODE_END
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    16
PROGRAM NAME =

 4714                                 M   
 4715 000001FC D115                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 4716 000001FE 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 4717 00000200 893E                   M           BT      _JMP_C8000000                           ; IF ADR >= 127 THEN JUMP
 4718                                 M   ;
 4719 00000202 D015                   M           MOV.L   #(_LDN_CODE_END-_LDN_CODE),R0           ; 転送 BYTE長
 4720 00000204 D315                   M           MOV.L   #_LDN_CODE,R3                   ; Read CODE MOVE        (12 BYTE)
 4721                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 4722 00000206 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 4723                                 M   
 4724                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 4725 00000208 D115                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 4726 0000020A 410B                   M           JSR     @R1                     ;
 4727 0000020C 0009                   M           NOP                                     ;
 4728                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 4729                                 M   ;       *** BIT SET ***
 4730 0000020E D115                   M           MOV.L   #D'6,R1                         ; ﾒﾓﾘのところ
 4731 00000210 341C                   M           ADD     R1,R4                           ;
 4732 00000212 D115                   M           MOV.L   #_SEQ_BBIT_CHG_TBL,R1           ;
 4733 00000214 4A00                   M           SHLL    R10                             ; *2
 4734 00000216 31AC                   M           ADD     R10,R1                          ;
 4735 00000218 6111                   M           MOV.W   @R1,R1                          ;
 4736 0000021A 6241                   M           MOV.W   @R4,R2                          ; ﾒﾓﾘのところの命令LOAD
 4737 0000021C D013                   M           MOV.L   #H'FFFFFF00,R0                  ;
 4738 0000021E 2209                   M           AND     R0,R2                           ; BITﾃﾞｰﾀのところをｸﾘｱ
 4739 00000220 221B                   M           OR      R1,R2                           ;
 4740 00000222 2421                   M           MOV.W   R2,@R4                          ; BIT SET
 4741                                 M   
 4742                                 M   ;       *** ADR SET ***
 4743 00000224 D112                   M           MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 4744 00000226 341C                   M           ADD     R1,R4                           ; 6+4=10
 4745 00000228 6241                   M           MOV.W   @R4,R2                          ;
 4746 0000022A 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 4747 0000022C 4800                   M           SHLL    R8                              ; ADR*2
 4748 0000022E 228B                   M           OR      R8,R2                           ;
 4749 00000230 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 4750                                 M   
 4751                                 M   ;       *** OFFSET SET ***
 4752 00000232 D10F                   M           MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 4753 00000234 341C                   M           ADD     R1,R4                           ; 10+4=14  MOV.B @(R0,R*),R0の命令 LOAD
 4754 00000236 D00F                   M           MOV.L   #_SEQ_MOVCMD_R0RD_TBL,R0        ;
 4755 00000238 4900                   M           SHLL    R9                              ; OFFSET*2
 4756 0000023A 309C                   M           ADD     R9,R0                           ;
 4757 0000023C 6001                   M           MOV.W   @R0,R0                          ;
 4758 0000023E 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 4759                                 M   
 4760                                 M   ;       *** SWAP命令はBIT7以下ならNOPに置換える ***
 4761 00000240 D00D                   M           MOV.L   #_NOP_SWAP_TBL0,R0              ;
 4762 00000242 30AC                   M           ADD     R10,R0                          ;
 4763 00000244 6001                   M           MOV.W   @R0,R0                          ; NOP or SWAP命令LOAD
 4764                                 M   
 4765 00000246 D10D                   M           MOV.L   #D'2,R1                         ; ﾒﾓﾘのところ
 4766 00000248 341C                   M           ADD     R1,R4                           ; 14+2=16  SWAP.Bの命令 LOAD
 4767 0000024A 2401                   M           MOV.W   R0,@R4                          ; NOP or SWAP命令 WRITE
 4768                                 M   
 4769 0000024C 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    17
PROGRAM NAME =

 4770                                 M           M_BRA   _JMP_EX00000                    ;
 4771 0000024E A018                   M           BRA     _JMP_EX00000
 4772 00000250 0009                   M           NOP
 4773                                 M   ;
 4774                                 M   ***** BEGIN-POOL *****
 4775 00000252 0000                   M   DATA FOR SOURCE-LINE 729
 4776 00000254 0000007F               M   DATA FOR SOURCE-LINE 729
 4777 00000258 00000000               M   DATA FOR SOURCE-LINE 729
 4778 0000025C 00000000               M   DATA FOR SOURCE-LINE 729
 4779 00000260 00000000               M   DATA FOR SOURCE-LINE 729
 4780 00000264 00000006               M   DATA FOR SOURCE-LINE 729
 4781 00000268 00000000               M   DATA FOR SOURCE-LINE 729
 4782 0000026C FFFFFF00               M   DATA FOR SOURCE-LINE 729
 4783 00000270 00000004               M   DATA FOR SOURCE-LINE 729,729
 4784 00000274 00000000               M   DATA FOR SOURCE-LINE 729
 4785 00000278 00000000               M   DATA FOR SOURCE-LINE 729
 4786 0000027C 00000002               M   DATA FOR SOURCE-LINE 729
 4787                                 M   ***** END-POOL *****
 4788 00000280                        M   _JMP_C8000000:
 4789 00000280 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 4790                                 M   
 4791 00000282                        M   _JMP_EX00000:
 4792                             730     
 4793                             731             SUB_END
 4794                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 4795 00000282 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 4796                             732             M_RTS
 4797 00000284 000B                   M           RTS                             ;RTSの後ろの
 4798 00000286 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 4799                             733     
 4800                             734     ;       *******************************************
 4801                             735     ;       *****   And CODE CHANGE ROUTINE         ***
 4802                             736     ;       *******************************************
 4803                                     ***** BEGIN-POOL *****
 4804 00000288 FF00                       DATA FOR SOURCE-LINE 729
 4805                                     ***** END-POOL *****
 4806 0000028A                    737     _AND_CHG:                                       ; 00000100B     4
 4807                             738             SUB_START
 4808 0000028A 4F22                   M           STS.L   PR,@-R15                ;[必要]
 4809                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 4810                             739     
 4811                             740             _SEQ_A_AN_O_ON_CMD      _AND_CODE,_AND_CODE_END
 4812                                 M   
 4813                                 M   ;_AND_CHG:                                      ; 00000100B     4
 4814                                 M   ;_ANDN_CHG:                                     ; 00000101B     5
 4815                                 M   ;_OR_CHG:                                       ; 00000110B     6
 4816                                 M   ;_ORN_CHG:                                      ; 00000111B     7
 4817 0000028C D114                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 4818 0000028E 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 4819 00000290 893A                   M           BT      _JMP_C8000001                   ; IF ADR >= 127 THEN JUMP
 4820                                 M   ;
 4821 00000292 D014                   M           MOV.L   #(_AND_CODE_END-_AND_CODE),R0           ; 転送 BYTE長
 4822 00000294 D314                   M           MOV.L   #_AND_CODE,R3                   ; Read CODE MOVE        (12 BYTE)
 4823                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 4824 00000296 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 4825                                 M   
 4826                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    18
PROGRAM NAME =

 4827 00000298 D114                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 4828 0000029A 410B                   M           JSR     @R1                     ;
 4829 0000029C 0009                   M           NOP                                     ;
 4830                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 4831                                 M   ;       *** BIT SET ***
 4832 0000029E D114                   M           MOV.L   #_SEQ_BBIT_CHG_TBL,R1           ; ﾒﾓﾘのところ +0
 4833 000002A0 4A00                   M           SHLL    R10                             ; *2
 4834 000002A2 31AC                   M           ADD     R10,R1                          ;
 4835 000002A4 6111                   M           MOV.W   @R1,R1                          ; BIT LOAD
 4836 000002A6 6241                   M           MOV.W   @R4,R2                          ; ﾒﾓﾘのところの命令LOAD
 4837 000002A8 D012                   M           MOV.L   #H'FFFFFF00,R0                  ;
 4838 000002AA 2209                   M           AND     R0,R2                           ; BITﾃﾞｰﾀのところをｸﾘｱ
 4839 000002AC 221B                   M           OR      R1,R2                           ;
 4840 000002AE 2421                   M           MOV.W   R2,@R4                          ; BIT SET
 4841                                 M   
 4842                                 M   ;       *** ADR SET ***
 4843 000002B0 D111                   M           MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 4844 000002B2 341C                   M           ADD     R1,R4                           ; 0+4=4
 4845 000002B4 6241                   M           MOV.W   @R4,R2                          ;
 4846 000002B6 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 4847 000002B8 4800                   M           SHLL    R8                              ; ADR*2
 4848 000002BA 228B                   M           OR      R8,R2                           ;
 4849 000002BC 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 4850                                 M   
 4851                                 M   ;       *** OFFSET SET ***
 4852 000002BE D10E                   M           MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 4853 000002C0 341C                   M           ADD     R1,R4                           ; 4+4=8  MOV.B @(R0,R*),R0の命令 LOAD
 4854 000002C2 D00E                   M           MOV.L   #_SEQ_MOVCMD_R0RD_TBL,R0        ;
 4855 000002C4 4900                   M           SHLL    R9                              ; OFFSET*2
 4856 000002C6 309C                   M           ADD     R9,R0                           ;
 4857 000002C8 6001                   M           MOV.W   @R0,R0                          ;
 4858 000002CA 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 4859                                 M   
 4860                                 M   ;       *** SWAP命令はBIT7以下ならNOPに置換える ***
 4861 000002CC D00C                   M           MOV.L   #_NOP_SWAP_TBL0,R0              ;
 4862 000002CE 30AC                   M           ADD     R10,R0                          ;
 4863 000002D0 6001                   M           MOV.W   @R0,R0                          ; NOP or SWAP命令LOAD
 4864                                 M   
 4865 000002D2 D10C                   M           MOV.L   #D'2,R1                         ; ﾒﾓﾘのところ
 4866 000002D4 341C                   M           ADD     R1,R4                           ; 8+2=10  SWAP.Bの命令 LOAD
 4867 000002D6 2401                   M           MOV.W   R0,@R4                          ; NOP or SWAP命令 WRITE
 4868                                 M   
 4869 000002D8 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 4870                                 M           M_BRA   _JMP_EX00001                    ;
 4871 000002DA A016                   M           BRA     _JMP_EX00001
 4872 000002DC 0009                   M           NOP
 4873                                 M   ;
 4874                                 M   ***** BEGIN-POOL *****
 4875 000002DE 0000                   M   DATA FOR SOURCE-LINE 740
 4876 000002E0 0000007F               M   DATA FOR SOURCE-LINE 740
 4877 000002E4 00000000               M   DATA FOR SOURCE-LINE 740
 4878 000002E8 00000000               M   DATA FOR SOURCE-LINE 740
 4879 000002EC 00000000               M   DATA FOR SOURCE-LINE 740
 4880 000002F0 00000000               M   DATA FOR SOURCE-LINE 740
 4881 000002F4 FFFFFF00               M   DATA FOR SOURCE-LINE 740
 4882 000002F8 00000004               M   DATA FOR SOURCE-LINE 740,740
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    19
PROGRAM NAME =

 4883 000002FC 00000000               M   DATA FOR SOURCE-LINE 740
 4884 00000300 00000000               M   DATA FOR SOURCE-LINE 740
 4885 00000304 00000002               M   DATA FOR SOURCE-LINE 740
 4886                                 M   ***** END-POOL *****
 4887 00000308                        M   _JMP_C8000001:
 4888 00000308 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 4889                                 M   
 4890 0000030A                        M   _JMP_EX00001:
 4891                             741     
 4892                             742             SUB_END
 4893                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 4894 0000030A 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 4895                             743             M_RTS
 4896 0000030C 000B                   M           RTS                             ;RTSの後ろの
 4897 0000030E 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 4898                             744     
 4899                             745     
 4900                             746     ;       *******************************************
 4901                             747     ;       *****   And Not CODE CHANGE ROUTINE     ***
 4902                             748     ;       *******************************************
 4903                                     ***** BEGIN-POOL *****
 4904 00000310 FF00                       DATA FOR SOURCE-LINE 740
 4905                                     ***** END-POOL *****
 4906 00000312                    749     _ANDN_CHG:                                      ; 00000101B     5
 4907                             750             SUB_START
 4908 00000312 4F22                   M           STS.L   PR,@-R15                ;[必要]
 4909                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 4910                             751     
 4911                             752             _SEQ_A_AN_O_ON_CMD      _ANDN_CODE,_ANDN_CODE_END
 4912                                 M   
 4913                                 M   ;_AND_CHG:                                      ; 00000100B     4
 4914                                 M   ;_ANDN_CHG:                                     ; 00000101B     5
 4915                                 M   ;_OR_CHG:                                       ; 00000110B     6
 4916                                 M   ;_ORN_CHG:                                      ; 00000111B     7
 4917 00000314 D114                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 4918 00000316 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 4919 00000318 893A                   M           BT      _JMP_C8000002                   ; IF ADR >= 127 THEN JUMP
 4920                                 M   ;
 4921 0000031A D014                   M           MOV.L   #(_ANDN_CODE_END-_ANDN_CODE),R0         ; 転送 BYTE長
 4922 0000031C D314                   M           MOV.L   #_ANDN_CODE,R3                  ; Read CODE MOVE        (12 BYTE)
 4923                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 4924 0000031E 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 4925                                 M   
 4926                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 4927 00000320 D114                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 4928 00000322 410B                   M           JSR     @R1                     ;
 4929 00000324 0009                   M           NOP                                     ;
 4930                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 4931                                 M   ;       *** BIT SET ***
 4932 00000326 D114                   M           MOV.L   #_SEQ_BBIT_CHG_TBL,R1           ; ﾒﾓﾘのところ +0
 4933 00000328 4A00                   M           SHLL    R10                             ; *2
 4934 0000032A 31AC                   M           ADD     R10,R1                          ;
 4935 0000032C 6111                   M           MOV.W   @R1,R1                          ; BIT LOAD
 4936 0000032E 6241                   M           MOV.W   @R4,R2                          ; ﾒﾓﾘのところの命令LOAD
 4937 00000330 D012                   M           MOV.L   #H'FFFFFF00,R0                  ;
 4938 00000332 2209                   M           AND     R0,R2                           ; BITﾃﾞｰﾀのところをｸﾘｱ
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    20
PROGRAM NAME =

 4939 00000334 221B                   M           OR      R1,R2                           ;
 4940 00000336 2421                   M           MOV.W   R2,@R4                          ; BIT SET
 4941                                 M   
 4942                                 M   ;       *** ADR SET ***
 4943 00000338 D111                   M           MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 4944 0000033A 341C                   M           ADD     R1,R4                           ; 0+4=4
 4945 0000033C 6241                   M           MOV.W   @R4,R2                          ;
 4946 0000033E 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 4947 00000340 4800                   M           SHLL    R8                              ; ADR*2
 4948 00000342 228B                   M           OR      R8,R2                           ;
 4949 00000344 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 4950                                 M   
 4951                                 M   ;       *** OFFSET SET ***
 4952 00000346 D10E                   M           MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 4953 00000348 341C                   M           ADD     R1,R4                           ; 4+4=8  MOV.B @(R0,R*),R0の命令 LOAD
 4954 0000034A D00E                   M           MOV.L   #_SEQ_MOVCMD_R0RD_TBL,R0        ;
 4955 0000034C 4900                   M           SHLL    R9                              ; OFFSET*2
 4956 0000034E 309C                   M           ADD     R9,R0                           ;
 4957 00000350 6001                   M           MOV.W   @R0,R0                          ;
 4958 00000352 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 4959                                 M   
 4960                                 M   ;       *** SWAP命令はBIT7以下ならNOPに置換える ***
 4961 00000354 D00C                   M           MOV.L   #_NOP_SWAP_TBL0,R0              ;
 4962 00000356 30AC                   M           ADD     R10,R0                          ;
 4963 00000358 6001                   M           MOV.W   @R0,R0                          ; NOP or SWAP命令LOAD
 4964                                 M   
 4965 0000035A D10C                   M           MOV.L   #D'2,R1                         ; ﾒﾓﾘのところ
 4966 0000035C 341C                   M           ADD     R1,R4                           ; 8+2=10  SWAP.Bの命令 LOAD
 4967 0000035E 2401                   M           MOV.W   R0,@R4                          ; NOP or SWAP命令 WRITE
 4968                                 M   
 4969 00000360 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 4970                                 M           M_BRA   _JMP_EX00002                    ;
 4971 00000362 A016                   M           BRA     _JMP_EX00002
 4972 00000364 0009                   M           NOP
 4973                                 M   ;
 4974                                 M   ***** BEGIN-POOL *****
 4975 00000366 0000                   M   DATA FOR SOURCE-LINE 752
 4976 00000368 0000007F               M   DATA FOR SOURCE-LINE 752
 4977 0000036C 00000000               M   DATA FOR SOURCE-LINE 752
 4978 00000370 00000000               M   DATA FOR SOURCE-LINE 752
 4979 00000374 00000000               M   DATA FOR SOURCE-LINE 752
 4980 00000378 00000000               M   DATA FOR SOURCE-LINE 752
 4981 0000037C FFFFFF00               M   DATA FOR SOURCE-LINE 752
 4982 00000380 00000004               M   DATA FOR SOURCE-LINE 752,752
 4983 00000384 00000000               M   DATA FOR SOURCE-LINE 752
 4984 00000388 00000000               M   DATA FOR SOURCE-LINE 752
 4985 0000038C 00000002               M   DATA FOR SOURCE-LINE 752
 4986                                 M   ***** END-POOL *****
 4987 00000390                        M   _JMP_C8000002:
 4988 00000390 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 4989                                 M   
 4990 00000392                        M   _JMP_EX00002:
 4991                             753     
 4992                             754             SUB_END
 4993                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 4994 00000392 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 4995                             755             M_RTS
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    21
PROGRAM NAME =

 4996 00000394 000B                   M           RTS                             ;RTSの後ろの
 4997 00000396 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 4998                             756     
 4999                             757     ;       *******************************************
 5000                             758     ;       *****   Or CODE CHANGE ROUTINE          ***
 5001                             759     ;       *******************************************
 5002                                     ***** BEGIN-POOL *****
 5003 00000398 FF00                       DATA FOR SOURCE-LINE 752
 5004                                     ***** END-POOL *****
 5005 0000039A                    760     _OR_CHG:                                        ; 00000110B     6
 5006                             761             SUB_START
 5007 0000039A 4F22                   M           STS.L   PR,@-R15                ;[必要]
 5008                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 5009                             762     
 5010                             763             _SEQ_A_AN_O_ON_CMD      _OR_CODE,_OR_CODE_END
 5011                                 M   
 5012                                 M   ;_AND_CHG:                                      ; 00000100B     4
 5013                                 M   ;_ANDN_CHG:                                     ; 00000101B     5
 5014                                 M   ;_OR_CHG:                                       ; 00000110B     6
 5015                                 M   ;_ORN_CHG:                                      ; 00000111B     7
 5016 0000039C D114                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 5017 0000039E 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 5018 000003A0 893A                   M           BT      _JMP_C8000003                   ; IF ADR >= 127 THEN JUMP
 5019                                 M   ;
 5020 000003A2 D014                   M           MOV.L   #(_OR_CODE_END-_OR_CODE),R0             ; 転送 BYTE長
 5021 000003A4 D314                   M           MOV.L   #_OR_CODE,R3                    ; Read CODE MOVE        (12 BYTE)
 5022                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 5023 000003A6 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 5024                                 M   
 5025                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 5026 000003A8 D114                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 5027 000003AA 410B                   M           JSR     @R1                     ;
 5028 000003AC 0009                   M           NOP                                     ;
 5029                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 5030                                 M   ;       *** BIT SET ***
 5031 000003AE D114                   M           MOV.L   #_SEQ_BBIT_CHG_TBL,R1           ; ﾒﾓﾘのところ +0
 5032 000003B0 4A00                   M           SHLL    R10                             ; *2
 5033 000003B2 31AC                   M           ADD     R10,R1                          ;
 5034 000003B4 6111                   M           MOV.W   @R1,R1                          ; BIT LOAD
 5035 000003B6 6241                   M           MOV.W   @R4,R2                          ; ﾒﾓﾘのところの命令LOAD
 5036 000003B8 D012                   M           MOV.L   #H'FFFFFF00,R0                  ;
 5037 000003BA 2209                   M           AND     R0,R2                           ; BITﾃﾞｰﾀのところをｸﾘｱ
 5038 000003BC 221B                   M           OR      R1,R2                           ;
 5039 000003BE 2421                   M           MOV.W   R2,@R4                          ; BIT SET
 5040                                 M   
 5041                                 M   ;       *** ADR SET ***
 5042 000003C0 D111                   M           MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 5043 000003C2 341C                   M           ADD     R1,R4                           ; 0+4=4
 5044 000003C4 6241                   M           MOV.W   @R4,R2                          ;
 5045 000003C6 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 5046 000003C8 4800                   M           SHLL    R8                              ; ADR*2
 5047 000003CA 228B                   M           OR      R8,R2                           ;
 5048 000003CC 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 5049                                 M   
 5050                                 M   ;       *** OFFSET SET ***
 5051 000003CE D10E                   M           MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    22
PROGRAM NAME =

 5052 000003D0 341C                   M           ADD     R1,R4                           ; 4+4=8  MOV.B @(R0,R*),R0の命令 LOAD
 5053 000003D2 D00E                   M           MOV.L   #_SEQ_MOVCMD_R0RD_TBL,R0        ;
 5054 000003D4 4900                   M           SHLL    R9                              ; OFFSET*2
 5055 000003D6 309C                   M           ADD     R9,R0                           ;
 5056 000003D8 6001                   M           MOV.W   @R0,R0                          ;
 5057 000003DA 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 5058                                 M   
 5059                                 M   ;       *** SWAP命令はBIT7以下ならNOPに置換える ***
 5060 000003DC D00C                   M           MOV.L   #_NOP_SWAP_TBL0,R0              ;
 5061 000003DE 30AC                   M           ADD     R10,R0                          ;
 5062 000003E0 6001                   M           MOV.W   @R0,R0                          ; NOP or SWAP命令LOAD
 5063                                 M   
 5064 000003E2 D10C                   M           MOV.L   #D'2,R1                         ; ﾒﾓﾘのところ
 5065 000003E4 341C                   M           ADD     R1,R4                           ; 8+2=10  SWAP.Bの命令 LOAD
 5066 000003E6 2401                   M           MOV.W   R0,@R4                          ; NOP or SWAP命令 WRITE
 5067                                 M   
 5068 000003E8 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 5069                                 M           M_BRA   _JMP_EX00003                    ;
 5070 000003EA A016                   M           BRA     _JMP_EX00003
 5071 000003EC 0009                   M           NOP
 5072                                 M   ;
 5073                                 M   ***** BEGIN-POOL *****
 5074 000003EE 0000                   M   DATA FOR SOURCE-LINE 763
 5075 000003F0 0000007F               M   DATA FOR SOURCE-LINE 763
 5076 000003F4 00000000               M   DATA FOR SOURCE-LINE 763
 5077 000003F8 00000000               M   DATA FOR SOURCE-LINE 763
 5078 000003FC 00000000               M   DATA FOR SOURCE-LINE 763
 5079 00000400 00000000               M   DATA FOR SOURCE-LINE 763
 5080 00000404 FFFFFF00               M   DATA FOR SOURCE-LINE 763
 5081 00000408 00000004               M   DATA FOR SOURCE-LINE 763,763
 5082 0000040C 00000000               M   DATA FOR SOURCE-LINE 763
 5083 00000410 00000000               M   DATA FOR SOURCE-LINE 763
 5084 00000414 00000002               M   DATA FOR SOURCE-LINE 763
 5085                                 M   ***** END-POOL *****
 5086 00000418                        M   _JMP_C8000003:
 5087 00000418 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 5088                                 M   
 5089 0000041A                        M   _JMP_EX00003:
 5090                             764     
 5091                             765             SUB_END
 5092                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 5093 0000041A 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 5094                             766             M_RTS
 5095 0000041C 000B                   M           RTS                             ;RTSの後ろの
 5096 0000041E 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 5097                             767     
 5098                             768     ;       *******************************************
 5099                             769     ;       *****   Or Not CODE CHANGE ROUTINE      ***
 5100                             770     ;       *******************************************
 5101                                     ***** BEGIN-POOL *****
 5102 00000420 FF00                       DATA FOR SOURCE-LINE 763
 5103                                     ***** END-POOL *****
 5104 00000422                    771     _ORN_CHG:                                       ; 00000111B     7
 5105                             772             SUB_START
 5106 00000422 4F22                   M           STS.L   PR,@-R15                ;[必要]
 5107                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 5108                             773     
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    23
PROGRAM NAME =

 5109                             774             _SEQ_A_AN_O_ON_CMD      _ORN_CODE,_ORN_CODE_END
 5110                                 M   
 5111                                 M   ;_AND_CHG:                                      ; 00000100B     4
 5112                                 M   ;_ANDN_CHG:                                     ; 00000101B     5
 5113                                 M   ;_OR_CHG:                                       ; 00000110B     6
 5114                                 M   ;_ORN_CHG:                                      ; 00000111B     7
 5115 00000424 D114                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 5116 00000426 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 5117 00000428 893A                   M           BT      _JMP_C8000004                   ; IF ADR >= 127 THEN JUMP
 5118                                 M   ;
 5119 0000042A D014                   M           MOV.L   #(_ORN_CODE_END-_ORN_CODE),R0           ; 転送 BYTE長
 5120 0000042C D314                   M           MOV.L   #_ORN_CODE,R3                   ; Read CODE MOVE        (12 BYTE)
 5121                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 5122 0000042E 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 5123                                 M   
 5124                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 5125 00000430 D114                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 5126 00000432 410B                   M           JSR     @R1                     ;
 5127 00000434 0009                   M           NOP                                     ;
 5128                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 5129                                 M   ;       *** BIT SET ***
 5130 00000436 D114                   M           MOV.L   #_SEQ_BBIT_CHG_TBL,R1           ; ﾒﾓﾘのところ +0
 5131 00000438 4A00                   M           SHLL    R10                             ; *2
 5132 0000043A 31AC                   M           ADD     R10,R1                          ;
 5133 0000043C 6111                   M           MOV.W   @R1,R1                          ; BIT LOAD
 5134 0000043E 6241                   M           MOV.W   @R4,R2                          ; ﾒﾓﾘのところの命令LOAD
 5135 00000440 D012                   M           MOV.L   #H'FFFFFF00,R0                  ;
 5136 00000442 2209                   M           AND     R0,R2                           ; BITﾃﾞｰﾀのところをｸﾘｱ
 5137 00000444 221B                   M           OR      R1,R2                           ;
 5138 00000446 2421                   M           MOV.W   R2,@R4                          ; BIT SET
 5139                                 M   
 5140                                 M   ;       *** ADR SET ***
 5141 00000448 D111                   M           MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 5142 0000044A 341C                   M           ADD     R1,R4                           ; 0+4=4
 5143 0000044C 6241                   M           MOV.W   @R4,R2                          ;
 5144 0000044E 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 5145 00000450 4800                   M           SHLL    R8                              ; ADR*2
 5146 00000452 228B                   M           OR      R8,R2                           ;
 5147 00000454 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 5148                                 M   
 5149                                 M   ;       *** OFFSET SET ***
 5150 00000456 D10E                   M           MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 5151 00000458 341C                   M           ADD     R1,R4                           ; 4+4=8  MOV.B @(R0,R*),R0の命令 LOAD
 5152 0000045A D00E                   M           MOV.L   #_SEQ_MOVCMD_R0RD_TBL,R0        ;
 5153 0000045C 4900                   M           SHLL    R9                              ; OFFSET*2
 5154 0000045E 309C                   M           ADD     R9,R0                           ;
 5155 00000460 6001                   M           MOV.W   @R0,R0                          ;
 5156 00000462 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 5157                                 M   
 5158                                 M   ;       *** SWAP命令はBIT7以下ならNOPに置換える ***
 5159 00000464 D00C                   M           MOV.L   #_NOP_SWAP_TBL0,R0              ;
 5160 00000466 30AC                   M           ADD     R10,R0                          ;
 5161 00000468 6001                   M           MOV.W   @R0,R0                          ; NOP or SWAP命令LOAD
 5162                                 M   
 5163 0000046A D10C                   M           MOV.L   #D'2,R1                         ; ﾒﾓﾘのところ
 5164 0000046C 341C                   M           ADD     R1,R4                           ; 8+2=10  SWAP.Bの命令 LOAD
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    24
PROGRAM NAME =

 5165 0000046E 2401                   M           MOV.W   R0,@R4                          ; NOP or SWAP命令 WRITE
 5166                                 M   
 5167 00000470 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 5168                                 M           M_BRA   _JMP_EX00004                    ;
 5169 00000472 A016                   M           BRA     _JMP_EX00004
 5170 00000474 0009                   M           NOP
 5171                                 M   ;
 5172                                 M   ***** BEGIN-POOL *****
 5173 00000476 0000                   M   DATA FOR SOURCE-LINE 774
 5174 00000478 0000007F               M   DATA FOR SOURCE-LINE 774
 5175 0000047C 00000000               M   DATA FOR SOURCE-LINE 774
 5176 00000480 00000000               M   DATA FOR SOURCE-LINE 774
 5177 00000484 00000000               M   DATA FOR SOURCE-LINE 774
 5178 00000488 00000000               M   DATA FOR SOURCE-LINE 774
 5179 0000048C FFFFFF00               M   DATA FOR SOURCE-LINE 774
 5180 00000490 00000004               M   DATA FOR SOURCE-LINE 774,774
 5181 00000494 00000000               M   DATA FOR SOURCE-LINE 774
 5182 00000498 00000000               M   DATA FOR SOURCE-LINE 774
 5183 0000049C 00000002               M   DATA FOR SOURCE-LINE 774
 5184                                 M   ***** END-POOL *****
 5185 000004A0                        M   _JMP_C8000004:
 5186 000004A0 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 5187                                 M   
 5188 000004A2                        M   _JMP_EX00004:
 5189                             775     
 5190                             776             SUB_END
 5191                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 5192 000004A2 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 5193                             777             M_RTS
 5194 000004A4 000B                   M           RTS                             ;RTSの後ろの
 5195 000004A6 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 5196                             778     
 5197                             779     ;;;;;   消すのもったいないので動いたら削除する
 5198                             780     ;;;;;_ORN_CHG:                                  ; 00000111B     7
 5199                             781             SUB_START
 5200                                 M   ***** BEGIN-POOL *****
 5201 000004A8 FF00                   M   DATA FOR SOURCE-LINE 774
 5202                                 M   ***** END-POOL *****
 5203 000004AA 4F22                   M           STS.L   PR,@-R15                ;[必要]
 5204                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 5205                             782     
 5206 000004AC D114               783             MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 5207 000004AE 3813               784             CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 5208 000004B0 893A               785             BT      _ORN_C80                        ; IF ADR >= 127 THEN JUMP
 5209                             786     ;
 5210 000004B2 D014               787             MOV.L   #(_ORN_CODE_END-_ORN_CODE),R0   ; 転送 BYTE長
 5211 000004B4 D314               788             MOV.L   #_ORN_CODE,R3                   ; Read CODE MOVE        (12 BYTE)
 5212                             789     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 5213 000004B6 64D3               790             MOV     R13,R4                          ; SEQ ADR. KEEP
 5214                             791     
 5215                             792             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 5216 000004B8 D114                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 5217 000004BA 410B                   M           JSR     @R1                     ;
 5218 000004BC 0009                   M           NOP                                     ;
 5219                             793                                                     ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 5220                             794     ;       *** BIT SET ***
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    25
PROGRAM NAME =

 5221 000004BE D114               795             MOV.L   #_SEQ_BBIT_CHG_TBL,R1           ; ﾒﾓﾘのところ +0
 5222 000004C0 4A00               796             SHLL    R10                             ; *2
 5223 000004C2 31AC               797             ADD     R10,R1                          ;
 5224 000004C4 6111               798             MOV.W   @R1,R1                          ; BIT LOAD
 5225 000004C6 6241               799             MOV.W   @R4,R2                          ; ﾒﾓﾘのところの命令LOAD
 5226 000004C8 D012               800             MOV.L   #H'FFFFFF00,R0                  ;
 5227 000004CA 2209               801             AND     R0,R2                           ; BITﾃﾞｰﾀのところをｸﾘｱ
 5228 000004CC 221B               802             OR      R1,R2                           ;
 5229 000004CE 2421               803             MOV.W   R2,@R4                          ; BIT SET
 5230                             804     
 5231                             805     ;       *** ADR SET ***
 5232 000004D0 D111               806             MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 5233 000004D2 341C               807             ADD     R1,R4                           ; 0+4=4
 5234 000004D4 6241               808             MOV.W   @R4,R2                          ;
 5235 000004D6 2209               809             AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 5236 000004D8 4800               810             SHLL    R8                              ; ADR*2
 5237 000004DA 228B               811             OR      R8,R2                           ;
 5238 000004DC 2421               812             MOV.W   R2,@R4                          ; RAM ADR SET
 5239                             813     
 5240                             814     ;       *** OFFSET SET ***
 5241 000004DE D10E               815             MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 5242 000004E0 341C               816             ADD     R1,R4                           ; 4+4=8  MOV.B @(R0,R*),R0の命令 LOAD
 5243 000004E2 D00E               817             MOV.L   #_SEQ_MOVCMD_R0RD_TBL,R0        ;
 5244 000004E4 4900               818             SHLL    R9                              ; OFFSET*2
 5245 000004E6 309C               819             ADD     R9,R0                           ;
 5246 000004E8 6001               820             MOV.W   @R0,R0                          ;
 5247 000004EA 2401               821             MOV.W   R0,@R4                          ; 命令置換え
 5248                             822     
 5249                             823     ;       *** SWAP命令はBIT7以下ならNOPに置換える ***
 5250 000004EC D00C               824             MOV.L   #_NOP_SWAP_TBL0,R0              ;
 5251 000004EE 30AC               825             ADD     R10,R0                          ;
 5252 000004F0 6001               826             MOV.W   @R0,R0                          ; NOP or SWAP命令LOAD
 5253                             827     
 5254 000004F2 D10C               828             MOV.L   #D'2,R1                         ; ﾒﾓﾘのところ
 5255 000004F4 341C               829             ADD     R1,R4                           ; 8+2=10  SWAP.Bの命令 LOAD
 5256 000004F6 2401               830             MOV.W   R0,@R4                          ; NOP or SWAP命令 WRITE
 5257                             831     
 5258 000004F8 9001               832             MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 5259                             833             M_BRA   _ORN_CHG_EX                     ;
 5260 000004FA A016                   M           BRA     _ORN_CHG_EX
 5261 000004FC 0009                   M           NOP
 5262                             834     ;
 5263                                     ***** BEGIN-POOL *****
 5264 000004FE 0000                       DATA FOR SOURCE-LINE 832
 5265 00000500 0000007F                   DATA FOR SOURCE-LINE 783
 5266 00000504 00000000                   DATA FOR SOURCE-LINE 787
 5267 00000508 00000000                   DATA FOR SOURCE-LINE 788
 5268 0000050C 00000000                   DATA FOR SOURCE-LINE 792
 5269 00000510 00000000                   DATA FOR SOURCE-LINE 795
 5270 00000514 FFFFFF00                   DATA FOR SOURCE-LINE 800
 5271 00000518 00000004                   DATA FOR SOURCE-LINE 806,815
 5272 0000051C 00000000                   DATA FOR SOURCE-LINE 817
 5273 00000520 00000000                   DATA FOR SOURCE-LINE 824
 5274 00000524 00000002                   DATA FOR SOURCE-LINE 828
 5275                                     ***** END-POOL *****
 5276 00000528                    835     _ORN_C80:
 5277 00000528 9002               836             MOV.W   #_SQ_ERR_END,R0                 ; ERR END
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    26
PROGRAM NAME =

 5278                             837     
 5279 0000052A                    838     _ORN_CHG_EX:
 5280                             839             SUB_END
 5281                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 5282 0000052A 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 5283                             840             M_RTS
 5284 0000052C 000B                   M           RTS                             ;RTSの後ろの
 5285 0000052E 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 5286                             841     
 5287                             842     
 5288                             843     
 5289                             844     
 5290                             845     ;       *******************************************
 5291                             846     ;       *****   PLS CODE CHANGE ROUTINE         ***
 5292                             847     ;       *******************************************
 5293                                     ***** BEGIN-POOL *****
 5294 00000530 FF00                       DATA FOR SOURCE-LINE 836
 5295                                     ***** END-POOL *****
 5296 00000532                    848     _PLS_CHG:                       ; 00001000B     8
 5297                             849             SUB_START
 5298 00000532 4F22                   M           STS.L   PR,@-R15                ;[必要]
 5299                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 5300                             850     
 5301                             851             _SEQ_PLS_PLF_CMD        _PLS_CODE,_PLS_CODE_END,BIT_AREA=0,ADR_AREA=2,COD_AREA1=4
 5302                                 M   
 5303 00000534 D112                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 5304 00000536 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 5305 00000538 8936                   M           BT      _JMP_C8000005                   ; IF ADR >= 127 THEN JUMP
 5306                                 M   ;
 5307 0000053A D012                   M           MOV.L   #(_PLS_CODE_END-_PLS_CODE),R0           ; 転送 BYTE長
 5308 0000053C D312                   M           MOV.L   #_PLS_CODE,R3                   ; Read CODE MOVE        (12 BYTE)
 5309                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 5310 0000053E 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 5311                                 M   
 5312                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 5313 00000540 D112                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 5314 00000542 410B                   M           JSR     @R1                     ;
 5315 00000544 0009                   M           NOP                                     ;
 5316                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 5317                                 M   ;       *** BIT SET ***
 5318 00000546 D112                   M           MOV.L   #0,R1                   ; ﾒﾓﾘのところ
 5319 00000548 341C                   M           ADD     R1,R4                           ;
 5320 0000054A D112                   M           MOV.L   #_SEQ_BBIT_CHG_TBL,R1           ;
 5321 0000054C 4A00                   M           SHLL    R10                             ; *2
 5322 0000054E 31AC                   M           ADD     R10,R1                          ;
 5323 00000550 6111                   M           MOV.W   @R1,R1                          ;
 5324 00000552 6241                   M           MOV.W   @R4,R2                          ; ﾒﾓﾘのところの命令LOAD
 5325 00000554 D010                   M           MOV.L   #H'FFFFFF00,R0                  ;
 5326 00000556 2209                   M           AND     R0,R2                           ; BITﾃﾞｰﾀのところをｸﾘｱ
 5327 00000558 221B                   M           OR      R1,R2                           ;
 5328 0000055A 2421                   M           MOV.W   R2,@R4                          ; BIT SET
 5329                                 M   
 5330                                 M   ;       *** SHLL命令はBIT7以下ならNOPに置換える ***
 5331 0000055C D20F                   M           MOV.L   #_NOP_SHLL8_R2_TBL0,R2          ;
 5332 0000055E 32AC                   M           ADD     R10,R2                          ;
 5333 00000560 6221                   M           MOV.W   @R2,R2                          ; NOP or SHLL8命令LOAD
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    27
PROGRAM NAME =

 5334                                 M   
 5335 00000562 D10F                   M           MOV.L   #4,R1                           ; ﾒﾓﾘのところ
 5336 00000564 341C                   M           ADD     R1,R4                           ; 8+2=10  SWAP.Bの命令 LOAD
 5337 00000566 2421                   M           MOV.W   R2,@R4                          ; NOP or SWAP命令 WRITE
 5338                                 M   
 5339                                 M   ;       *** ADR SET ***
 5340 00000568 D10E                   M           MOV.L   #2,R1                   ; ﾒﾓﾘのところ
 5341 0000056A 341C                   M           ADD     R1,R4                           ; 0+6=6
 5342 0000056C 6241                   M           MOV.W   @R4,R2                          ;
 5343 0000056E 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 5344 00000570 4800                   M           SHLL    R8                              ; ADR*2
 5345 00000572 228B                   M           OR      R8,R2                           ;
 5346 00000574 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 5347                                 M   
 5348 00000576 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 5349                                 M           M_BRA   _JMP_EX00005                    ;
 5350 00000578 A017                   M           BRA     _JMP_EX00005
 5351 0000057A 0009                   M           NOP
 5352                                 M   ;
 5353                                 M   ***** BEGIN-POOL *****
 5354 0000057C 0000                   M   DATA FOR SOURCE-LINE 851
 5355 0000057E 0000                   M   ALIGNMENT CODE
 5356 00000580 0000007F               M   DATA FOR SOURCE-LINE 851
 5357 00000584 00000000               M   DATA FOR SOURCE-LINE 851
 5358 00000588 00000000               M   DATA FOR SOURCE-LINE 851
 5359 0000058C 00000000               M   DATA FOR SOURCE-LINE 851
 5360 00000590 00000000               M   DATA FOR SOURCE-LINE 851
 5361 00000594 00000000               M   DATA FOR SOURCE-LINE 851
 5362 00000598 FFFFFF00               M   DATA FOR SOURCE-LINE 851
 5363 0000059C 00000000               M   DATA FOR SOURCE-LINE 851
 5364 000005A0 00000004               M   DATA FOR SOURCE-LINE 851
 5365 000005A4 00000002               M   DATA FOR SOURCE-LINE 851
 5366                                 M   ***** END-POOL *****
 5367 000005A8                        M   _JMP_C8000005:
 5368 000005A8 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 5369                                 M   
 5370 000005AA                        M   _JMP_EX00005:
 5371                             852     
 5372                             853             SUB_END
 5373                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 5374 000005AA 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 5375                             854             M_RTS
 5376 000005AC 000B                   M           RTS                             ;RTSの後ろの
 5377 000005AE 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 5378                             855     
 5379                             856     ;;;;;   消すのもったいないので動いたら削除する
 5380                             857     ;;;;;_PLS_CHG:                  ; 00001000B     8
 5381                                     ***** BEGIN-POOL *****
 5382 000005B0 FF00                       DATA FOR SOURCE-LINE 851
 5383                                     ***** END-POOL *****
 5384 000005B2 D112               858             MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 5385 000005B4 3813               859             CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 5386 000005B6 8935               860             BT      _PLS_C80                                ; IF ADR >= 127 THEN JUMP
 5387                             861     ;
 5388 000005B8 D011               862             MOV.L   #(_PLS_CODE_END-_PLS_CODE),R0   ; 転送 BYTE長
 5389 000005BA D312               863             MOV.L   #_PLS_CODE,R3                   ; Read CODE MOVE        (12 BYTE)
 5390                             864     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    28
PROGRAM NAME =

 5391 000005BC 64D3               865             MOV     R13,R4                          ; SEQ ADR. KEEP
 5392                             866     
 5393                             867             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 5394 000005BE D112                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 5395 000005C0 410B                   M           JSR     @R1                     ;
 5396 000005C2 0009                   M           NOP                                     ;
 5397                             868                                                     ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 5398                             869     ;       *** BIT SET ***
 5399 000005C4 D111               870             MOV.L   #D'0,R1                         ; ﾒﾓﾘのところ
 5400 000005C6 341C               871             ADD     R1,R4                           ; +0
 5401 000005C8 D111               872             MOV.L   #_SEQ_BBIT_CHG_TBL,R1           ;
 5402 000005CA 4A00               873             SHLL    R10                             ; *2
 5403 000005CC 31AC               874             ADD     R10,R1                          ;
 5404 000005CE 6111               875             MOV.W   @R1,R1                          ;
 5405 000005D0 6241               876             MOV.W   @R4,R2                          ; ﾒﾓﾘのところの命令LOAD
 5406 000005D2 D010               877             MOV.L   #H'FFFFFF00,R0                  ;
 5407 000005D4 2209               878             AND     R0,R2                           ; BITﾃﾞｰﾀのところをｸﾘｱ
 5408 000005D6 221B               879             OR      R1,R2                           ;
 5409 000005D8 2421               880             MOV.W   R2,@R4                          ; BIT SET
 5410                             881     
 5411                             882     ;       *** SWAP命令はBIT7以下ならNOPに置換える ***
 5412 000005DA D00F               883             MOV.L   #_NOP_SHLL8_R2_TBL0,R0          ;
 5413 000005DC 30AC               884             ADD     R10,R0                          ;
 5414 000005DE 6001               885             MOV.W   @R0,R0                          ; NOP or SHLL8命令LOAD
 5415                             886     
 5416 000005E0 D10E               887             MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 5417 000005E2 341C               888             ADD     R1,R4                           ; 0+4=4  SWAP.Bの命令 LOAD
 5418 000005E4 2401               889             MOV.W   R0,@R4                          ; NOP or SWAP命令 WRITE
 5419                             890     
 5420                             891     ;       *** ADR SET ***
 5421 000005E6 D10E               892             MOV.L   #D'2,R1                         ; ﾒﾓﾘのところ
 5422 000005E8 341C               893             ADD     R1,R4                           ; 4+2=6
 5423 000005EA 6241               894             MOV.W   @R4,R2                          ;
 5424 000005EC 2209               895             AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 5425 000005EE 4800               896             SHLL    R8                              ; ADR*2
 5426 000005F0 228B               897             OR      R8,R2                           ;
 5427 000005F2 2421               898             MOV.W   R2,@R4                          ; RAM ADR SET
 5428                             899     
 5429 000005F4 9001               900             MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 5430                             901             M_BRA   _PLS_CHG_EX                     ;
 5431 000005F6 A016                   M           BRA     _PLS_CHG_EX
 5432 000005F8 0009                   M           NOP
 5433                             902     ;
 5434                                     ***** BEGIN-POOL *****
 5435 000005FA 0000                       DATA FOR SOURCE-LINE 900
 5436 000005FC 0000007F                   DATA FOR SOURCE-LINE 858
 5437 00000600 00000000                   DATA FOR SOURCE-LINE 862
 5438 00000604 00000000                   DATA FOR SOURCE-LINE 863
 5439 00000608 00000000                   DATA FOR SOURCE-LINE 867
 5440 0000060C 00000000                   DATA FOR SOURCE-LINE 870
 5441 00000610 00000000                   DATA FOR SOURCE-LINE 872
 5442 00000614 FFFFFF00                   DATA FOR SOURCE-LINE 877
 5443 00000618 00000000                   DATA FOR SOURCE-LINE 883
 5444 0000061C 00000004                   DATA FOR SOURCE-LINE 887
 5445 00000620 00000002                   DATA FOR SOURCE-LINE 892
 5446                                     ***** END-POOL *****
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    29
PROGRAM NAME =

 5447 00000624                    903     _PLS_C80:
 5448 00000624 9002               904             MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 5449                             905     
 5450 00000626                    906     _PLS_CHG_EX:
 5451                             907     
 5452                             908             SUB_END
 5453                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 5454 00000626 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 5455                             909             M_RTS
 5456 00000628 000B                   M           RTS                             ;RTSの後ろの
 5457 0000062A 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 5458                             910     
 5459                             911     
 5460                             912     ;       *******************************************
 5461                             913     ;       *****   PLF CODE CHANGE ROUTINE         ***
 5462                             914     ;       *******************************************
 5463                                     ***** BEGIN-POOL *****
 5464 0000062C FF00                       DATA FOR SOURCE-LINE 904
 5465                                     ***** END-POOL *****
 5466 0000062E                    915     _PLF_CHG:                                       ; 00001001B     9
 5467                             916             SUB_START
 5468 0000062E 4F22                   M           STS.L   PR,@-R15                ;[必要]
 5469                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 5470                             917     
 5471                             918             _SEQ_PLS_PLF_CMD        _PLF_CODE,_PLF_CODE_END,BIT_AREA=0,ADR_AREA=2,COD_AREA1=4
 5472                                 M   
 5473 00000630 D112                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 5474 00000632 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 5475 00000634 8936                   M           BT      _JMP_C8000006                   ; IF ADR >= 127 THEN JUMP
 5476                                 M   ;
 5477 00000636 D012                   M           MOV.L   #(_PLF_CODE_END-_PLF_CODE),R0           ; 転送 BYTE長
 5478 00000638 D312                   M           MOV.L   #_PLF_CODE,R3                   ; Read CODE MOVE        (12 BYTE)
 5479                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 5480 0000063A 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 5481                                 M   
 5482                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 5483 0000063C D112                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 5484 0000063E 410B                   M           JSR     @R1                     ;
 5485 00000640 0009                   M           NOP                                     ;
 5486                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 5487                                 M   ;       *** BIT SET ***
 5488 00000642 D112                   M           MOV.L   #0,R1                   ; ﾒﾓﾘのところ
 5489 00000644 341C                   M           ADD     R1,R4                           ;
 5490 00000646 D112                   M           MOV.L   #_SEQ_BBIT_CHG_TBL,R1           ;
 5491 00000648 4A00                   M           SHLL    R10                             ; *2
 5492 0000064A 31AC                   M           ADD     R10,R1                          ;
 5493 0000064C 6111                   M           MOV.W   @R1,R1                          ;
 5494 0000064E 6241                   M           MOV.W   @R4,R2                          ; ﾒﾓﾘのところの命令LOAD
 5495 00000650 D010                   M           MOV.L   #H'FFFFFF00,R0                  ;
 5496 00000652 2209                   M           AND     R0,R2                           ; BITﾃﾞｰﾀのところをｸﾘｱ
 5497 00000654 221B                   M           OR      R1,R2                           ;
 5498 00000656 2421                   M           MOV.W   R2,@R4                          ; BIT SET
 5499                                 M   
 5500                                 M   ;       *** SHLL命令はBIT7以下ならNOPに置換える ***
 5501 00000658 D20F                   M           MOV.L   #_NOP_SHLL8_R2_TBL0,R2          ;
 5502 0000065A 32AC                   M           ADD     R10,R2                          ;
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    30
PROGRAM NAME =

 5503 0000065C 6221                   M           MOV.W   @R2,R2                          ; NOP or SHLL8命令LOAD
 5504                                 M   
 5505 0000065E D10F                   M           MOV.L   #4,R1                           ; ﾒﾓﾘのところ
 5506 00000660 341C                   M           ADD     R1,R4                           ; 8+2=10  SWAP.Bの命令 LOAD
 5507 00000662 2421                   M           MOV.W   R2,@R4                          ; NOP or SWAP命令 WRITE
 5508                                 M   
 5509                                 M   ;       *** ADR SET ***
 5510 00000664 D10E                   M           MOV.L   #2,R1                   ; ﾒﾓﾘのところ
 5511 00000666 341C                   M           ADD     R1,R4                           ; 0+6=6
 5512 00000668 6241                   M           MOV.W   @R4,R2                          ;
 5513 0000066A 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 5514 0000066C 4800                   M           SHLL    R8                              ; ADR*2
 5515 0000066E 228B                   M           OR      R8,R2                           ;
 5516 00000670 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 5517                                 M   
 5518 00000672 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 5519                                 M           M_BRA   _JMP_EX00006                    ;
 5520 00000674 A017                   M           BRA     _JMP_EX00006
 5521 00000676 0009                   M           NOP
 5522                                 M   ;
 5523                                 M   ***** BEGIN-POOL *****
 5524 00000678 0000                   M   DATA FOR SOURCE-LINE 918
 5525 0000067A 0000                   M   ALIGNMENT CODE
 5526 0000067C 0000007F               M   DATA FOR SOURCE-LINE 918
 5527 00000680 00000000               M   DATA FOR SOURCE-LINE 918
 5528 00000684 00000000               M   DATA FOR SOURCE-LINE 918
 5529 00000688 00000000               M   DATA FOR SOURCE-LINE 918
 5530 0000068C 00000000               M   DATA FOR SOURCE-LINE 918
 5531 00000690 00000000               M   DATA FOR SOURCE-LINE 918
 5532 00000694 FFFFFF00               M   DATA FOR SOURCE-LINE 918
 5533 00000698 00000000               M   DATA FOR SOURCE-LINE 918
 5534 0000069C 00000004               M   DATA FOR SOURCE-LINE 918
 5535 000006A0 00000002               M   DATA FOR SOURCE-LINE 918
 5536                                 M   ***** END-POOL *****
 5537 000006A4                        M   _JMP_C8000006:
 5538 000006A4 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 5539                                 M   
 5540 000006A6                        M   _JMP_EX00006:
 5541                             919     
 5542                             920             SUB_END
 5543                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 5544 000006A6 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 5545                             921             M_RTS
 5546 000006A8 000B                   M           RTS                             ;RTSの後ろの
 5547 000006AA 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 5548                             922     
 5549                             923     ;       *******************************************
 5550                             924     ;       *****   BIT STORE CODE CHANGE ROUTINE   ***
 5551                             925     ;       *******************************************
 5552                                     ***** BEGIN-POOL *****
 5553 000006AC FF00                       DATA FOR SOURCE-LINE 918
 5554                                     ***** END-POOL *****
 5555 000006AE                    926     _ST_CHG:                                        ; 00001010B     A
 5556                             927             SUB_START
 5557 000006AE 4F22                   M           STS.L   PR,@-R15                ;[必要]
 5558                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 5559                             928     
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    31
PROGRAM NAME =

 5560 000006B0 D118               929             MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 5561 000006B2 3813               930             CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 5562 000006B4 8946               931             BT      _ST_C80                         ; IF ADR >= 127 THEN JUMP
 5563                             932     ;
 5564 000006B6 D018               933             MOV.L   #(_ST_CODE_END-_ST_CODE),R0     ; 転送 BYTE長
 5565 000006B8 D318               934             MOV.L   #_ST_CODE,R3                    ; Read CODE MOVE        (12 BYTE)
 5566                             935     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 5567 000006BA 64D3               936             MOV     R13,R4                          ; SEQ ADR. KEEP
 5568                             937     
 5569                             938             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 5570 000006BC D118                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 5571 000006BE 410B                   M           JSR     @R1                     ;
 5572 000006C0 0009                   M           NOP                                     ;
 5573                             939                                                     ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 5574                             940     ;       *** BIT SET ***
 5575 000006C2 D118               941             MOV.L   #D'2,R1                         ; ﾒﾓﾘのところ
 5576 000006C4 341C               942             ADD     R1,R4                           ;
 5577 000006C6 D118               943             MOV.L   #_SEQ_BBIT_CHG_TBL,R1           ;
 5578 000006C8 4A00               944             SHLL    R10                             ; *2
 5579 000006CA 31AC               945             ADD     R10,R1                          ;
 5580 000006CC 6111               946             MOV.W   @R1,R1                          ;
 5581 000006CE 6241               947             MOV.W   @R4,R2                          ; ﾒﾓﾘのところの命令LOAD
 5582 000006D0 D016               948             MOV.L   #H'FFFFFF00,R0                  ;
 5583 000006D2 2209               949             AND     R0,R2                           ; BITﾃﾞｰﾀのところをｸﾘｱ
 5584 000006D4 221B               950             OR      R1,R2                           ;
 5585 000006D6 2421               951             MOV.W   R2,@R4                          ; BIT SET
 5586                             952     
 5587                             953     ;       *** SWAP命令はBIT7以下ならNOPに置換える ***
 5588 000006D8 D215               954             MOV.L   #_NOP_SHLL8_R3_TBL0,R2          ;
 5589 000006DA 32AC               955             ADD     R10,R2                          ;
 5590 000006DC 6221               956             MOV.W   @R2,R2                          ; NOP or SHLL8命令LOAD
 5591                             957     
 5592 000006DE D115               958             MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 5593 000006E0 341C               959             ADD     R1,R4                           ; 0+4=4  SWAP.Bの命令 LOAD
 5594 000006E2 2421               960             MOV.W   R2,@R4                          ; NOP or SWAP命令 WRITE
 5595                             961     
 5596                             962     ;       *** ADR SET ***
 5597 000006E4 D113               963             MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 5598 000006E6 341C               964             ADD     R1,R4                           ; 2+8=10
 5599 000006E8 6241               965             MOV.W   @R4,R2                          ;
 5600 000006EA 2209               966             AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 5601 000006EC 4800               967             SHLL    R8                              ; ADR*2
 5602 000006EE 228B               968             OR      R8,R2                           ;
 5603 000006F0 2421               969             MOV.W   R2,@R4                          ; RAM ADR SET
 5604                             970     
 5605                             971     ;       *** OFFSET SET ***
 5606 000006F2 D110               972             MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 5607 000006F4 341C               973             ADD     R1,R4                           ; 10+4=14  MOV.B @(R0,R*),R1の命令 LOAD
 5608 000006F6 D010               974             MOV.L   #_SEQ_MOVCMD_R1RD_TBL,R0        ;
 5609 000006F8 4900               975             SHLL    R9                              ; OFFSET*2
 5610 000006FA 309C               976             ADD     R9,R0                           ;
 5611 000006FC 6001               977             MOV.W   @R0,R0                          ;
 5612 000006FE 2401               978             MOV.W   R0,@R4                          ; 命令置換え
 5613                             979     
 5614                             980     ;       *** OFFSET SET ***
 5615 00000700 D10E               981             MOV.L   #D'10,R1                        ; ﾒﾓﾘのところ
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    32
PROGRAM NAME =

 5616 00000702 341C               982             ADD     R1,R4                           ; 14+10=24  MOV.B R1,@(R0,R*)の命令 LOAD
 5617 00000704 D00E               983             MOV.L   #_SEQ_MOVCMD_R1WR_TBL,R0        ;
 5618 00000706 309C               984             ADD     R9,R0                           ;
 5619 00000708 6001               985             MOV.W   @R0,R0                          ;
 5620 0000070A 2401               986             MOV.W   R0,@R4                          ; 命令置換え
 5621                             987     
 5622 0000070C 9001               988             MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 5623                             989             M_BRA   _ST_CHG_EX                      ;
 5624 0000070E A01A                   M           BRA     _ST_CHG_EX
 5625 00000710 0009                   M           NOP
 5626                             990     ;
 5627                                     ***** BEGIN-POOL *****
 5628 00000712 0000                       DATA FOR SOURCE-LINE 988
 5629 00000714 0000007F                   DATA FOR SOURCE-LINE 929
 5630 00000718 00000000                   DATA FOR SOURCE-LINE 933
 5631 0000071C 00000000                   DATA FOR SOURCE-LINE 934
 5632 00000720 00000000                   DATA FOR SOURCE-LINE 938
 5633 00000724 00000002                   DATA FOR SOURCE-LINE 941
 5634 00000728 00000000                   DATA FOR SOURCE-LINE 943
 5635 0000072C FFFFFF00                   DATA FOR SOURCE-LINE 948
 5636 00000730 00000000                   DATA FOR SOURCE-LINE 954
 5637 00000734 00000004                   DATA FOR SOURCE-LINE 958,963,972
 5638 00000738 00000000                   DATA FOR SOURCE-LINE 974
 5639 0000073C 0000000A                   DATA FOR SOURCE-LINE 981
 5640 00000740 00000000                   DATA FOR SOURCE-LINE 983
 5641                                     ***** END-POOL *****
 5642 00000744                    991     _ST_C80:
 5643 00000744 9002               992             MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 5644                             993     
 5645 00000746                    994     _ST_CHG_EX:
 5646                             995             SUB_END
 5647                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 5648 00000746 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 5649                             996             M_RTS
 5650 00000748 000B                   M           RTS                             ;RTSの後ろの
 5651 0000074A 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 5652                             997     
 5653                             998     
 5654                             999     
 5655                            1000     ;       *******************************************
 5656                            1001     ;       *****   WSC CODE CHANGE ROUTINE         ***
 5657                            1002     ;       *******************************************
 5658                                     ***** BEGIN-POOL *****
 5659 0000074C FF00                       DATA FOR SOURCE-LINE 992
 5660                                     ***** END-POOL *****
 5661 0000074E                   1003     _WSC_CHG:                       ; 00001100B     C
 5662                            1004             SUB_START
 5663 0000074E 4F22                   M           STS.L   PR,@-R15                ;[必要]
 5664                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 5665                            1005     
 5666 00000750 D114              1006             MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 5667 00000752 3813              1007             CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 5668 00000754 893A              1008             BT      _WSC_C80                        ; IF ADR >= 127 THEN JUMP
 5669                            1009     ;
 5670 00000756 D014              1010             MOV.L   #(_WSC_CODE_END-_WSC_CODE),R0   ; 転送 BYTE長
 5671 00000758 D314              1011             MOV.L   #_WSC_CODE,R3                   ; Read CODE MOVE        (12 BYTE)
 5672                            1012     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    33
PROGRAM NAME =

 5673 0000075A 64D3              1013             MOV     R13,R4                          ; SEQ ADR. KEEP
 5674                            1014     
 5675                            1015             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 5676 0000075C D114                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 5677 0000075E 410B                   M           JSR     @R1                     ;
 5678 00000760 0009                   M           NOP                                     ;
 5679                            1016                                                     ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 5680                            1017     ;       *** BIT SET ***
 5681 00000762 D114              1018             MOV.L   #_SEQ_BBIT_CHG_TBL,R1           ; ﾒﾓﾘのところ +0
 5682 00000764 4A00              1019             SHLL    R10                             ; *2
 5683 00000766 31AC              1020             ADD     R10,R1                          ;
 5684 00000768 6111              1021             MOV.W   @R1,R1                          ; BIT LOAD
 5685 0000076A 6241              1022             MOV.W   @R4,R2                          ; ﾒﾓﾘのところの命令LOAD
 5686 0000076C D012              1023             MOV.L   #H'FFFFFF00,R0                  ;
 5687 0000076E 2209              1024             AND     R0,R2                           ; BITﾃﾞｰﾀのところをｸﾘｱ
 5688 00000770 221B              1025             OR      R1,R2                           ;
 5689 00000772 2421              1026             MOV.W   R2,@R4                          ; BIT SET
 5690                            1027     
 5691                            1028     ;       *** SWAP命令はBIT7以下ならNOPに置換える ***
 5692 00000774 D111              1029             MOV.L   #_NOP_SWAP_TBL0,R1              ;
 5693 00000776 31AC              1030             ADD     R10,R1                          ;
 5694 00000778 6111              1031             MOV.W   @R1,R1                          ; NOP or SWAP命令LOAD
 5695                            1032     
 5696 0000077A D211              1033             MOV.L   #D'4,R2                         ; ﾒﾓﾘのところ
 5697 0000077C 342C              1034             ADD     R2,R4                           ; 0+4=4  SWAP.Bの命令 LOAD
 5698 0000077E 2411              1035             MOV.W   R1,@R4                          ; NOP or SWAP命令 WRITE
 5699                            1036     
 5700                            1037     ;       *** ADR SET ***
 5701 00000780 D110              1038             MOV.L   #D'8,R1                         ; ﾒﾓﾘのところ
 5702 00000782 341C              1039             ADD     R1,R4                           ; 2+8=10
 5703 00000784 6241              1040             MOV.W   @R4,R2                          ;
 5704 00000786 2209              1041             AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 5705 00000788 4800              1042             SHLL    R8                              ; ADR*2
 5706 0000078A 228B              1043             OR      R8,R2                           ;
 5707 0000078C 2421              1044             MOV.W   R2,@R4                          ; RAM ADR SET
 5708                            1045     
 5709                            1046     ;       *** OFFSET SET ***
 5710 0000078E D10C              1047             MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 5711 00000790 341C              1048             ADD     R1,R4                           ; 10+4=14  MOV.B @(R0,R*),R1の命令 LOAD
 5712 00000792 D00D              1049             MOV.L   #_SEQ_MOVCMD_R1WR_TBL,R0        ;
 5713 00000794 4900              1050             SHLL    R9                              ; OFFSET*2
 5714 00000796 309C              1051             ADD     R9,R0                           ;
 5715 00000798 6001              1052             MOV.W   @R0,R0                          ;
 5716 0000079A 2401              1053             MOV.W   R0,@R4                          ; 命令置換え
 5717                            1054     
 5718 0000079C 9001              1055             MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 5719                            1056             M_BRA   _WSC_CHG_EX                     ;
 5720 0000079E A016                   M           BRA     _WSC_CHG_EX
 5721 000007A0 0009                   M           NOP
 5722                            1057     ;
 5723                                     ***** BEGIN-POOL *****
 5724 000007A2 0000                       DATA FOR SOURCE-LINE 1055
 5725 000007A4 0000007F                   DATA FOR SOURCE-LINE 1006
 5726 000007A8 00000000                   DATA FOR SOURCE-LINE 1010
 5727 000007AC 00000000                   DATA FOR SOURCE-LINE 1011
 5728 000007B0 00000000                   DATA FOR SOURCE-LINE 1015
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    34
PROGRAM NAME =

 5729 000007B4 00000000                   DATA FOR SOURCE-LINE 1018
 5730 000007B8 FFFFFF00                   DATA FOR SOURCE-LINE 1023
 5731 000007BC 00000000                   DATA FOR SOURCE-LINE 1029
 5732 000007C0 00000004                   DATA FOR SOURCE-LINE 1033,1047
 5733 000007C4 00000008                   DATA FOR SOURCE-LINE 1038
 5734 000007C8 00000000                   DATA FOR SOURCE-LINE 1049
 5735                                     ***** END-POOL *****
 5736 000007CC                   1058     _WSC_C80:
 5737 000007CC 9002              1059             MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 5738                            1060     
 5739 000007CE                   1061     _WSC_CHG_EX:
 5740                            1062     
 5741                            1063             SUB_END
 5742                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 5743 000007CE 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 5744                            1064             M_RTS
 5745 000007D0 000B                   M           RTS                             ;RTSの後ろの
 5746 000007D2 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 5747                            1065     
 5748                            1066     ;       *******************************************
 5749                            1067     ;       *****   BIT SET CODE CHANGE ROUTINE     ***
 5750                            1068     ;       *******************************************
 5751                                     ***** BEGIN-POOL *****
 5752 000007D4 FF00                       DATA FOR SOURCE-LINE 1059
 5753                                     ***** END-POOL *****
 5754 000007D6                   1069     _SET_CHG:                                       ; 00001110B     E
 5755                            1070             SUB_START
 5756 000007D6 4F22                   M           STS.L   PR,@-R15                ;[必要]
 5757                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 5758                            1071     
 5759                            1072             _SEQ_SET_RST_CMD        _SET_CODE,_SET_CODE_END,BIT_AREA=2,ADR_AREA=2,COD_AREA1=4,
                                          COD_AREA2=4,COD_AREA3=8
 5760                                 M   
 5761 000007D8 D118                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 5762 000007DA 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 5763 000007DC 8946                   M           BT      _JMP_C8000007                   ; IF ADR >= 127 THEN JUMP
 5764                                 M   ;
 5765 000007DE D018                   M           MOV.L   #(_SET_CODE_END-_SET_CODE),R0           ; 転送 BYTE長
 5766 000007E0 D318                   M           MOV.L   #_SET_CODE,R3                   ; Read CODE MOVE        (12 BYTE)
 5767                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 5768 000007E2 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 5769                                 M   
 5770                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 5771 000007E4 D118                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 5772 000007E6 410B                   M           JSR     @R1                     ;
 5773 000007E8 0009                   M           NOP                                     ;
 5774                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 5775                                 M   
 5776 000007EA D018                   M           MOV.L   #H'FFFFFF00,R0                  ;
 5777                                 M   
 5778                                 M   ;       *** BIT SET ***
 5779 000007EC D118                   M           MOV.L   #2,R1                   ; ﾒﾓﾘのところ
 5780 000007EE 341C                   M           ADD     R1,R4                           ; +2
 5781 000007F0 D118                   M           MOV.L   #_SEQ_BBIT_CHG_TBL,R1           ; ﾒﾓﾘのところ +0
 5782 000007F2 4A00                   M           SHLL    R10                             ; *2
 5783 000007F4 31AC                   M           ADD     R10,R1                          ;
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    35
PROGRAM NAME =

 5784 000007F6 6111                   M           MOV.W   @R1,R1                          ; BIT LOAD
 5785 000007F8 6241                   M           MOV.W   @R4,R2                          ; ﾒﾓﾘのところの命令LOAD
 5786 000007FA 2209                   M           AND     R0,R2                           ; BITﾃﾞｰﾀのところをｸﾘｱ
 5787 000007FC 221B                   M           OR      R1,R2                           ;
 5788 000007FE 2421                   M           MOV.W   R2,@R4                          ; BIT SET
 5789                                 M   
 5790                                 M   ;       *** SHLL命令はBIT7以下ならNOPに置換える ***
 5791 00000800 D215                   M           MOV.L   #_NOP_SHLL8_R3_TBL0,R2          ;
 5792 00000802 32AC                   M           ADD     R10,R2                          ;
 5793 00000804 6221                   M           MOV.W   @R2,R2                          ; NOP or SHLL8命令LOAD
 5794 00000806 D115                   M           MOV.L   #4,R1                           ; ﾒﾓﾘのところ
 5795 00000808 341C                   M           ADD     R1,R4                           ; 8+2=10  SWAP.Bの命令 LOAD
 5796 0000080A 2421                   M           MOV.W   R2,@R4                          ; NOP or SWAP命令 WRITE
 5797                                 M   
 5798                                 M   ;       *** ADR SET ***
 5799 0000080C D110                   M           MOV.L   #2,R1                   ; ﾒﾓﾘのところ
 5800 0000080E 341C                   M           ADD     R1,R4                           ; 2+6=8
 5801 00000810 6241                   M           MOV.W   @R4,R2                          ;
 5802 00000812 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 5803 00000814 4800                   M           SHLL    R8                              ; ADR*2
 5804 00000816 228B                   M           OR      R8,R2                           ;
 5805 00000818 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 5806                                 M   
 5807                                 M   ;       *** OFFSET SET ***
 5808 0000081A D110                   M           MOV.L   #4,R1                   ; ﾒﾓﾘのところ
 5809 0000081C 341C                   M           ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 5810 0000081E D010                   M           MOV.L   #_SEQ_MOVCMD_R1RD_TBL,R0        ;
 5811 00000820 4900                   M           SHLL    R9                              ; OFFSET*2
 5812 00000822 309C                   M           ADD     R9,R0                           ;
 5813 00000824 6001                   M           MOV.W   @R0,R0                          ;
 5814 00000826 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 5815                                 M   
 5816                                 M   ;       *** OFFSET SET ***
 5817 00000828 D10E                   M           MOV.L   #8,R1                   ; ﾒﾓﾘのところ
 5818 0000082A 341C                   M           ADD     R1,R4                           ; 12+4=16  MOV.B R1,@(R0,R*)の命令 LOAD
 5819 0000082C D00E                   M           MOV.L   #_SEQ_MOVCMD_R1WR_TBL,R0        ;
 5820 0000082E 309C                   M           ADD     R9,R0                           ;
 5821 00000830 6001                   M           MOV.W   @R0,R0                          ;
 5822 00000832 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 5823                                 M   
 5824 00000834 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 5825                                 M           M_BRA   _JMP_EX00007                    ;
 5826 00000836 A01A                   M           BRA     _JMP_EX00007
 5827 00000838 0009                   M           NOP
 5828                                 M   ;
 5829                                 M   ***** BEGIN-POOL *****
 5830 0000083A 0000                   M   DATA FOR SOURCE-LINE 1072
 5831 0000083C 0000007F               M   DATA FOR SOURCE-LINE 1072
 5832 00000840 00000000               M   DATA FOR SOURCE-LINE 1072
 5833 00000844 00000000               M   DATA FOR SOURCE-LINE 1072
 5834 00000848 00000000               M   DATA FOR SOURCE-LINE 1072
 5835 0000084C FFFFFF00               M   DATA FOR SOURCE-LINE 1072
 5836 00000850 00000002               M   DATA FOR SOURCE-LINE 1072,1072
 5837 00000854 00000000               M   DATA FOR SOURCE-LINE 1072
 5838 00000858 00000000               M   DATA FOR SOURCE-LINE 1072
 5839 0000085C 00000004               M   DATA FOR SOURCE-LINE 1072,1072
 5840 00000860 00000000               M   DATA FOR SOURCE-LINE 1072
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    36
PROGRAM NAME =

 5841 00000864 00000008               M   DATA FOR SOURCE-LINE 1072
 5842 00000868 00000000               M   DATA FOR SOURCE-LINE 1072
 5843                                 M   ***** END-POOL *****
 5844 0000086C                        M   _JMP_C8000007:
 5845 0000086C 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 5846                                 M   
 5847 0000086E                        M   _JMP_EX00007:
 5848                            1073     
 5849                            1074             SUB_END
 5850                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 5851 0000086E 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 5852                            1075             M_RTS
 5853 00000870 000B                   M           RTS                             ;RTSの後ろの
 5854 00000872 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 5855                            1076     
 5856                            1077     
 5857                            1078     ;;;;;   消すのもったいないので動いたら削除する
 5858                            1079     ;;;;;_SET_CHG:                                  ; 00001110B     E
 5859                                     ***** BEGIN-POOL *****
 5860 00000874 FF00                       DATA FOR SOURCE-LINE 1072
 5861                                     ***** END-POOL *****
 5862 00000876 D116              1080             MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 5863 00000878 3813              1081             CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 5864 0000087A 893F              1082             BT      _SET_C80                        ; IF ADR >= 127 THEN JUMP
 5865                            1083     ;
 5866 0000087C D015              1084             MOV.L   #(_SET_CODE_END-_SET_CODE),R0   ; 転送 BYTE長
 5867 0000087E D316              1085             MOV.L   #_SET_CODE,R3                   ; Read CODE MOVE        (12 BYTE)
 5868                            1086     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 5869 00000880 64D3              1087             MOV     R13,R4                          ; SEQ ADR. KEEP
 5870                            1088     
 5871                            1089             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 5872 00000882 D116                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 5873 00000884 410B                   M           JSR     @R1                     ;
 5874 00000886 0009                   M           NOP                                     ;
 5875                            1090                                                     ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 5876                            1091     ;       *** BIT SET ***
 5877 00000888 D115              1092             MOV.L   #D'2,R1                         ; ﾒﾓﾘのところ
 5878 0000088A 341C              1093             ADD     R1,R4                           ; +2
 5879 0000088C D115              1094             MOV.L   #_SEQ_BBIT_CHG_TBL,R1           ; ﾒﾓﾘのところ +0
 5880 0000088E 4A00              1095             SHLL    R10                             ; *2
 5881 00000890 31AC              1096             ADD     R10,R1                          ;
 5882 00000892 6111              1097             MOV.W   @R1,R1                          ; BIT LOAD
 5883 00000894 6241              1098             MOV.W   @R4,R2                          ; ﾒﾓﾘのところの命令LOAD
 5884 00000896 D014              1099             MOV.L   #H'FFFFFF00,R0                  ;
 5885 00000898 2209              1100             AND     R0,R2                           ; BITﾃﾞｰﾀのところをｸﾘｱ
 5886 0000089A 221B              1101             OR      R1,R2                           ;
 5887 0000089C 2421              1102             MOV.W   R2,@R4                          ; BIT SET
 5888                            1103     
 5889                            1104     ;       *** ADR SET ***
 5890 0000089E D113              1105             MOV.L   #D'6,R1                         ; ﾒﾓﾘのところ
 5891 000008A0 341C              1106             ADD     R1,R4                           ; 2+6=8
 5892 000008A2 6241              1107             MOV.W   @R4,R2                          ;
 5893 000008A4 2209              1108             AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 5894 000008A6 4800              1109             SHLL    R8                              ; ADR*2
 5895 000008A8 228B              1110             OR      R8,R2                           ;
 5896 000008AA 2421              1111             MOV.W   R2,@R4                          ; RAM ADR SET
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    37
PROGRAM NAME =

 5897                            1112     
 5898                            1113     ;       *** OFFSET SET ***
 5899 000008AC D110              1114             MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 5900 000008AE 341C              1115             ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 5901 000008B0 D010              1116             MOV.L   #_SEQ_MOVCMD_R1RD_TBL,R0        ;
 5902 000008B2 4900              1117             SHLL    R9                              ; OFFSET*2
 5903 000008B4 309C              1118             ADD     R9,R0                           ;
 5904 000008B6 6001              1119             MOV.W   @R0,R0                          ;
 5905 000008B8 2401              1120             MOV.W   R0,@R4                          ; 命令置換え
 5906                            1121     
 5907                            1122     ;       *** OFFSET SET ***
 5908 000008BA D10D              1123             MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 5909 000008BC 341C              1124             ADD     R1,R4                           ; 12+4=16  MOV.B R1,@(R0,R*)の命令 LOAD
 5910 000008BE D00E              1125             MOV.L   #_SEQ_MOVCMD_R1WR_TBL,R0        ;
 5911 000008C0 309C              1126             ADD     R9,R0                           ;
 5912 000008C2 6001              1127             MOV.W   @R0,R0                          ;
 5913 000008C4 2401              1128             MOV.W   R0,@R4                          ; 命令置換え
 5914                            1129     
 5915 000008C6 9001              1130             MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 5916                            1131             M_BRA   _SET_CHG_EX                     ;
 5917 000008C8 A019                   M           BRA     _SET_CHG_EX
 5918 000008CA 0009                   M           NOP
 5919                            1132     ;
 5920                                     ***** BEGIN-POOL *****
 5921 000008CC 0000                       DATA FOR SOURCE-LINE 1130
 5922 000008CE 0000                       ALIGNMENT CODE
 5923 000008D0 0000007F                   DATA FOR SOURCE-LINE 1080
 5924 000008D4 00000000                   DATA FOR SOURCE-LINE 1084
 5925 000008D8 00000000                   DATA FOR SOURCE-LINE 1085
 5926 000008DC 00000000                   DATA FOR SOURCE-LINE 1089
 5927 000008E0 00000002                   DATA FOR SOURCE-LINE 1092
 5928 000008E4 00000000                   DATA FOR SOURCE-LINE 1094
 5929 000008E8 FFFFFF00                   DATA FOR SOURCE-LINE 1099
 5930 000008EC 00000006                   DATA FOR SOURCE-LINE 1105
 5931 000008F0 00000004                   DATA FOR SOURCE-LINE 1114,1123
 5932 000008F4 00000000                   DATA FOR SOURCE-LINE 1116
 5933 000008F8 00000000                   DATA FOR SOURCE-LINE 1125
 5934                                     ***** END-POOL *****
 5935 000008FC                   1133     _SET_C80:
 5936 000008FC 9002              1134             MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 5937                            1135     
 5938 000008FE                   1136     _SET_CHG_EX:
 5939                            1137     
 5940                            1138             SUB_END
 5941                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 5942 000008FE 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 5943                            1139             M_RTS
 5944 00000900 000B                   M           RTS                             ;RTSの後ろの
 5945 00000902 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 5946                            1140     
 5947                            1141     
 5948                            1142     ;       *******************************************
 5949                            1143     ;       *****   BIT RESET CODE CHANGE ROUTINE   ***
 5950                            1144     ;       *******************************************
 5951                                     ***** BEGIN-POOL *****
 5952 00000904 FF00                       DATA FOR SOURCE-LINE 1134
 5953                                     ***** END-POOL *****
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    38
PROGRAM NAME =

 5954 00000906                   1145     _RST_CHG:                                       ; 00001111B     F
 5955                            1146             SUB_START
 5956 00000906 4F22                   M           STS.L   PR,@-R15                ;[必要]
 5957                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 5958                            1147     
 5959                            1148             _SEQ_SET_RST_CMD        _RST_CODE,_RST_CODE_END,BIT_AREA=2,ADR_AREA=8,COD_AREA1=4,
                                          COD_AREA2=4,COD_AREA3=4
 5960                                 M   
 5961 00000908 D118                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 5962 0000090A 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 5963 0000090C 8946                   M           BT      _JMP_C8000008                   ; IF ADR >= 127 THEN JUMP
 5964                                 M   ;
 5965 0000090E D018                   M           MOV.L   #(_RST_CODE_END-_RST_CODE),R0           ; 転送 BYTE長
 5966 00000910 D318                   M           MOV.L   #_RST_CODE,R3                   ; Read CODE MOVE        (12 BYTE)
 5967                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 5968 00000912 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 5969                                 M   
 5970                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 5971 00000914 D118                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 5972 00000916 410B                   M           JSR     @R1                     ;
 5973 00000918 0009                   M           NOP                                     ;
 5974                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 5975                                 M   
 5976 0000091A D018                   M           MOV.L   #H'FFFFFF00,R0                  ;
 5977                                 M   
 5978                                 M   ;       *** BIT SET ***
 5979 0000091C D118                   M           MOV.L   #2,R1                   ; ﾒﾓﾘのところ
 5980 0000091E 341C                   M           ADD     R1,R4                           ; +2
 5981 00000920 D118                   M           MOV.L   #_SEQ_BBIT_CHG_TBL,R1           ; ﾒﾓﾘのところ +0
 5982 00000922 4A00                   M           SHLL    R10                             ; *2
 5983 00000924 31AC                   M           ADD     R10,R1                          ;
 5984 00000926 6111                   M           MOV.W   @R1,R1                          ; BIT LOAD
 5985 00000928 6241                   M           MOV.W   @R4,R2                          ; ﾒﾓﾘのところの命令LOAD
 5986 0000092A 2209                   M           AND     R0,R2                           ; BITﾃﾞｰﾀのところをｸﾘｱ
 5987 0000092C 221B                   M           OR      R1,R2                           ;
 5988 0000092E 2421                   M           MOV.W   R2,@R4                          ; BIT SET
 5989                                 M   
 5990                                 M   ;       *** SHLL命令はBIT7以下ならNOPに置換える ***
 5991 00000930 D215                   M           MOV.L   #_NOP_SHLL8_R3_TBL0,R2          ;
 5992 00000932 32AC                   M           ADD     R10,R2                          ;
 5993 00000934 6221                   M           MOV.W   @R2,R2                          ; NOP or SHLL8命令LOAD
 5994 00000936 D115                   M           MOV.L   #4,R1                           ; ﾒﾓﾘのところ
 5995 00000938 341C                   M           ADD     R1,R4                           ; 8+2=10  SWAP.Bの命令 LOAD
 5996 0000093A 2421                   M           MOV.W   R2,@R4                          ; NOP or SWAP命令 WRITE
 5997                                 M   
 5998                                 M   ;       *** ADR SET ***
 5999 0000093C D114                   M           MOV.L   #8,R1                   ; ﾒﾓﾘのところ
 6000 0000093E 341C                   M           ADD     R1,R4                           ; 2+6=8
 6001 00000940 6241                   M           MOV.W   @R4,R2                          ;
 6002 00000942 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 6003 00000944 4800                   M           SHLL    R8                              ; ADR*2
 6004 00000946 228B                   M           OR      R8,R2                           ;
 6005 00000948 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 6006                                 M   
 6007                                 M   ;       *** OFFSET SET ***
 6008 0000094A D110                   M           MOV.L   #4,R1                   ; ﾒﾓﾘのところ
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    39
PROGRAM NAME =

 6009 0000094C 341C                   M           ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 6010 0000094E D011                   M           MOV.L   #_SEQ_MOVCMD_R1RD_TBL,R0        ;
 6011 00000950 4900                   M           SHLL    R9                              ; OFFSET*2
 6012 00000952 309C                   M           ADD     R9,R0                           ;
 6013 00000954 6001                   M           MOV.W   @R0,R0                          ;
 6014 00000956 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 6015                                 M   
 6016                                 M   ;       *** OFFSET SET ***
 6017 00000958 D10C                   M           MOV.L   #4,R1                   ; ﾒﾓﾘのところ
 6018 0000095A 341C                   M           ADD     R1,R4                           ; 12+4=16  MOV.B R1,@(R0,R*)の命令 LOAD
 6019 0000095C D00E                   M           MOV.L   #_SEQ_MOVCMD_R1WR_TBL,R0        ;
 6020 0000095E 309C                   M           ADD     R9,R0                           ;
 6021 00000960 6001                   M           MOV.W   @R0,R0                          ;
 6022 00000962 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 6023                                 M   
 6024 00000964 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 6025                                 M           M_BRA   _JMP_EX00008                    ;
 6026 00000966 A01A                   M           BRA     _JMP_EX00008
 6027 00000968 0009                   M           NOP
 6028                                 M   ;
 6029                                 M   ***** BEGIN-POOL *****
 6030 0000096A 0000                   M   DATA FOR SOURCE-LINE 1148
 6031 0000096C 0000007F               M   DATA FOR SOURCE-LINE 1148
 6032 00000970 00000000               M   DATA FOR SOURCE-LINE 1148
 6033 00000974 00000000               M   DATA FOR SOURCE-LINE 1148
 6034 00000978 00000000               M   DATA FOR SOURCE-LINE 1148
 6035 0000097C FFFFFF00               M   DATA FOR SOURCE-LINE 1148
 6036 00000980 00000002               M   DATA FOR SOURCE-LINE 1148
 6037 00000984 00000000               M   DATA FOR SOURCE-LINE 1148
 6038 00000988 00000000               M   DATA FOR SOURCE-LINE 1148
 6039 0000098C 00000004               M   DATA FOR SOURCE-LINE 1148,1148,1148
 6040 00000990 00000008               M   DATA FOR SOURCE-LINE 1148
 6041 00000994 00000000               M   DATA FOR SOURCE-LINE 1148
 6042 00000998 00000000               M   DATA FOR SOURCE-LINE 1148
 6043                                 M   ***** END-POOL *****
 6044 0000099C                        M   _JMP_C8000008:
 6045 0000099C 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 6046                                 M   
 6047 0000099E                        M   _JMP_EX00008:
 6048                            1149     
 6049                            1150             SUB_END
 6050                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 6051 0000099E 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 6052                            1151             M_RTS
 6053 000009A0 000B                   M           RTS                             ;RTSの後ろの
 6054 000009A2 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 6055                            1152     
 6056                            1153     ;       *******************************************
 6057                            1154     ;       *****   WTMR CODE CHANGE ROUTINE        ***
 6058                            1155     ;       *******************************************
 6059                                     ***** BEGIN-POOL *****
 6060 000009A4 FF00                       DATA FOR SOURCE-LINE 1148
 6061                                     ***** END-POOL *****
 6062 000009A6                   1156     _WTMR_CHG:                      ; 00010000B     10
 6063                            1157             SUB_START
 6064 000009A6 4F22                   M           STS.L   PR,@-R15                ;[必要]
 6065                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    40
PROGRAM NAME =

 6066                            1158     
 6067                            1159             _SEQ_WTMR_WCTR_CMD      _WTMR_CODE,_WTMR_CODE_END,ADR_AREA=0
 6068                                 M   
 6069 000009A8 D109                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 6070 000009AA 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 6071 000009AC 891C                   M           BT      _JMP_C8000009                   ; IF ADR >= 127 THEN JUMP
 6072                                 M   ;
 6073 000009AE D009                   M           MOV.L   #(_WTMR_CODE_END-_WTMR_CODE),R0         ; 転送 BYTE長
 6074 000009B0 D309                   M           MOV.L   #_WTMR_CODE,R3                  ; Read CODE MOVE        (12 BYTE)
 6075                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 6076 000009B2 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 6077                                 M   
 6078                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 6079 000009B4 D109                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 6080 000009B6 410B                   M           JSR     @R1                     ;
 6081 000009B8 0009                   M           NOP                                     ;
 6082                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 6083                                 M   
 6084 000009BA D009                   M           MOV.L   #H'FFFFFF00,R0                  ;
 6085                                 M   ;       *** ADR SET ***
 6086 000009BC D109                   M           MOV.L   #0,R1                   ; ﾒﾓﾘのところ
 6087 000009BE 341C                   M           ADD     R1,R4                           ; +0
 6088 000009C0 6241                   M           MOV.W   @R4,R2                          ;
 6089 000009C2 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 6090                                 M   ;;;;;   SHLL    R8                              ; ADR*2
 6091 000009C4 228B                   M           OR      R8,R2                           ;
 6092 000009C6 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 6093                                 M   
 6094 000009C8 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 6095                                 M           M_BRA   _JMP_EX00009                    ;
 6096 000009CA A00E                   M           BRA     _JMP_EX00009
 6097 000009CC 0009                   M           NOP
 6098                                 M   ;
 6099                                 M   ***** BEGIN-POOL *****
 6100 000009CE 0000                   M   DATA FOR SOURCE-LINE 1159
 6101 000009D0 0000007F               M   DATA FOR SOURCE-LINE 1159
 6102 000009D4 00000000               M   DATA FOR SOURCE-LINE 1159
 6103 000009D8 00000000               M   DATA FOR SOURCE-LINE 1159
 6104 000009DC 00000000               M   DATA FOR SOURCE-LINE 1159
 6105 000009E0 FFFFFF00               M   DATA FOR SOURCE-LINE 1159
 6106 000009E4 00000000               M   DATA FOR SOURCE-LINE 1159
 6107                                 M   ***** END-POOL *****
 6108 000009E8                        M   _JMP_C8000009:
 6109 000009E8 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 6110                                 M   
 6111 000009EA                        M   _JMP_EX00009:
 6112                            1160     
 6113                            1161             SUB_END
 6114                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 6115 000009EA 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 6116                            1162             M_RTS
 6117 000009EC 000B                   M           RTS                             ;RTSの後ろの
 6118 000009EE 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 6119                            1163     
 6120                            1164     
 6121                            1165     
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    41
PROGRAM NAME =

 6122                            1166     ;       *******************************************
 6123                            1167     ;       *****   WCTR CODE CHANGE ROUTINE        ***
 6124                            1168     ;       *******************************************
 6125                                     ***** BEGIN-POOL *****
 6126 000009F0 FF00                       DATA FOR SOURCE-LINE 1159
 6127                                     ***** END-POOL *****
 6128 000009F2                   1169     _WCTR_CHG:                      ; 00010010B     12
 6129                            1170             SUB_START
 6130 000009F2 4F22                   M           STS.L   PR,@-R15                ;[必要]
 6131                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 6132                            1171     
 6133                            1172             _SEQ_WTMR_WCTR_CMD      _WCTR_CODE,_WCTR_CODE_END,ADR_AREA=0
 6134                                 M   
 6135 000009F4 D109                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 6136 000009F6 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 6137 000009F8 891C                   M           BT      _JMP_C8000010                   ; IF ADR >= 127 THEN JUMP
 6138                                 M   ;
 6139 000009FA D009                   M           MOV.L   #(_WCTR_CODE_END-_WCTR_CODE),R0         ; 転送 BYTE長
 6140 000009FC D309                   M           MOV.L   #_WCTR_CODE,R3                  ; Read CODE MOVE        (12 BYTE)
 6141                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 6142 000009FE 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 6143                                 M   
 6144                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 6145 00000A00 D109                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 6146 00000A02 410B                   M           JSR     @R1                     ;
 6147 00000A04 0009                   M           NOP                                     ;
 6148                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 6149                                 M   
 6150 00000A06 D009                   M           MOV.L   #H'FFFFFF00,R0                  ;
 6151                                 M   ;       *** ADR SET ***
 6152 00000A08 D109                   M           MOV.L   #0,R1                   ; ﾒﾓﾘのところ
 6153 00000A0A 341C                   M           ADD     R1,R4                           ; +0
 6154 00000A0C 6241                   M           MOV.W   @R4,R2                          ;
 6155 00000A0E 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 6156                                 M   ;;;;;   SHLL    R8                              ; ADR*2
 6157 00000A10 228B                   M           OR      R8,R2                           ;
 6158 00000A12 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 6159                                 M   
 6160 00000A14 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 6161                                 M           M_BRA   _JMP_EX00010                    ;
 6162 00000A16 A00E                   M           BRA     _JMP_EX00010
 6163 00000A18 0009                   M           NOP
 6164                                 M   ;
 6165                                 M   ***** BEGIN-POOL *****
 6166 00000A1A 0000                   M   DATA FOR SOURCE-LINE 1172
 6167 00000A1C 0000007F               M   DATA FOR SOURCE-LINE 1172
 6168 00000A20 00000000               M   DATA FOR SOURCE-LINE 1172
 6169 00000A24 00000000               M   DATA FOR SOURCE-LINE 1172
 6170 00000A28 00000000               M   DATA FOR SOURCE-LINE 1172
 6171 00000A2C FFFFFF00               M   DATA FOR SOURCE-LINE 1172
 6172 00000A30 00000000               M   DATA FOR SOURCE-LINE 1172
 6173                                 M   ***** END-POOL *****
 6174 00000A34                        M   _JMP_C8000010:
 6175 00000A34 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 6176                                 M   
 6177 00000A36                        M   _JMP_EX00010:
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    42
PROGRAM NAME =

 6178                            1173     
 6179                            1174             SUB_END
 6180                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 6181 00000A36 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 6182                            1175             M_RTS
 6183 00000A38 000B                   M           RTS                             ;RTSの後ろの
 6184 00000A3A 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 6185                            1176     
 6186                            1177     ;       *******************************************
 6187                            1178     ;       *****   WSR CODE CHANGE ROUTINE         ***
 6188                            1179     ;       *******************************************
 6189                                     ***** BEGIN-POOL *****
 6190 00000A3C FF00                       DATA FOR SOURCE-LINE 1172
 6191                                     ***** END-POOL *****
 6192 00000A3E                   1180     _WSR_CHG:                       ; 00010100B     14
 6193                            1181             SUB_START
 6194 00000A3E 4F22                   M           STS.L   PR,@-R15                ;[必要]
 6195                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 6196                            1182     
 6197 00000A40 D00B              1183             MOV.L   #(_WSR_CODE_END-_WSR_CODE),R0   ; 転送 BYTE長
 6198 00000A42 D30C              1184             MOV.L   #_WSR_CODE,R3                   ; Read CODE MOVE        (12 BYTE)
 6199                            1185     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 6200 00000A44 64D3              1186             MOV     R13,R4                          ; SEQ ADR. KEEP
 6201                            1187     
 6202                            1188             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 6203 00000A46 D10C                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 6204 00000A48 410B                   M           JSR     @R1                     ;
 6205 00000A4A 0009                   M           NOP                                     ;
 6206                            1189                                                     ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 6207                            1190     
 6208 00000A4C D00B              1191             MOV.L   #H'FFFFFF00,R0                  ;
 6209                            1192     ;       *** DATA_LO SET ***
 6210 00000A4E D10C              1193             MOV.L   #0,R1                           ; ﾒﾓﾘのところ
 6211 00000A50 341C              1194             ADD     R1,R4                           ; +0
 6212 00000A52 6241              1195             MOV.W   @R4,R2                          ;
 6213 00000A54 2209              1196             AND     R0,R2                           ; ﾃﾞｰﾀのところをｸﾘｱ
 6214 00000A56 228B              1197             OR      R8,R2                           ; 下位ﾃﾞｰﾀ
 6215 00000A58 2421              1198             MOV.W   R2,@R4                          ; RAM ADR SET
 6216                            1199     
 6217                            1200     ;       *** DATA_HI SET ***
 6218 00000A5A D10A              1201             MOV.L   #4,R1                           ; ﾒﾓﾘのところ
 6219 00000A5C 341C              1202             ADD     R1,R4                           ; 0+4=4
 6220 00000A5E 6241              1203             MOV.W   @R4,R2                          ;
 6221 00000A60 2209              1204             AND     R0,R2                           ; ﾃﾞｰﾀのところをｸﾘｱ
 6222 00000A62 229B              1205             OR      R9,R2                           ; 上位ﾃﾞｰﾀ
 6223 00000A64 2421              1206             MOV.W   R2,@R4                          ; RAM ADR SET
 6224                            1207     
 6225 00000A66 9002              1208             MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 6226                            1209     
 6227                            1210             SUB_END
 6228                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 6229 00000A68 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 6230                            1211             M_RTS
 6231 00000A6A 000B                   M           RTS                             ;RTSの後ろの
 6232 00000A6C 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 6233                            1212     
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    43
PROGRAM NAME =

 6234                            1213     
 6235                            1214     
 6236                            1215     ;       *******************************************
 6237                            1216     ;       *****   Clear CODE CHANGE ROUTINE       ***
 6238                            1217     ;       *******************************************
 6239                                     ***** BEGIN-POOL *****
 6240 00000A6E 0000                       DATA FOR SOURCE-LINE 1208
 6241 00000A70 00000000                   DATA FOR SOURCE-LINE 1183
 6242 00000A74 00000000                   DATA FOR SOURCE-LINE 1184
 6243 00000A78 00000000                   DATA FOR SOURCE-LINE 1188
 6244 00000A7C FFFFFF00                   DATA FOR SOURCE-LINE 1191
 6245 00000A80 00000000                   DATA FOR SOURCE-LINE 1193
 6246 00000A84 00000004                   DATA FOR SOURCE-LINE 1201
 6247                                     ***** END-POOL *****
 6248 00000A88                   1218     _CLR_CHG:                                       ; 00010110B     16
 6249                            1219             SUB_START
 6250 00000A88 4F22                   M           STS.L   PR,@-R15                ;[必要]
 6251                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 6252                            1220     
 6253                            1221             _SEQ_STW_CLR_CMD        _CLR_CODE,_CLR_CODE_END,ADR_AREA=0,COD_AREA1=4
 6254                                 M   
 6255 00000A8A D10E                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 6256 00000A8C 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 6257 00000A8E 8929                   M           BT      _JMP_C8000011                   ; IF ADR >= 127 THEN JUMP
 6258                                 M   ;
 6259 00000A90 D00D                   M           MOV.L   #(_CLR_CODE_END-_CLR_CODE),R0           ; 転送 BYTE長
 6260 00000A92 D30E                   M           MOV.L   #_CLR_CODE,R3                   ; Read CODE MOVE        (12 BYTE)
 6261                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 6262 00000A94 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 6263                                 M   
 6264                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 6265 00000A96 D10E                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 6266 00000A98 410B                   M           JSR     @R1                     ;
 6267 00000A9A 0009                   M           NOP                                     ;
 6268                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 6269 00000A9C D00D                   M           MOV.L   #H'FFFFFF00,R0                  ;
 6270                                 M   ;       *** ADR SET ***
 6271 00000A9E D10E                   M           MOV.L   #0,R1                   ; ﾒﾓﾘのところ
 6272 00000AA0 341C                   M           ADD     R1,R4                           ; +0
 6273 00000AA2 6241                   M           MOV.W   @R4,R2                          ;
 6274 00000AA4 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 6275 00000AA6 4800                   M           SHLL    R8                              ; ADR*2
 6276 00000AA8 228B                   M           OR      R8,R2                           ;
 6277 00000AAA 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 6278                                 M   
 6279                                 M   ;       *** OFFSET SET ***
 6280 00000AAC D10B                   M           MOV.L   #4,R1                   ; ﾒﾓﾘのところ
 6281 00000AAE 341C                   M           ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 6282 00000AB0 D00B                   M           MOV.L   #_SEQ_ADDCMD_R0_TBL,R0  ;
 6283 00000AB2 4900                   M           SHLL    R9                              ; OFFSET*2
 6284 00000AB4 309C                   M           ADD     R9,R0                           ;
 6285 00000AB6 6001                   M           MOV.W   @R0,R0                          ;
 6286 00000AB8 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 6287                                 M   
 6288 00000ABA 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 6289                                 M           M_BRA   _JMP_EX00011                    ;
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    44
PROGRAM NAME =

 6290 00000ABC A013                   M           BRA     _JMP_EX00011
 6291 00000ABE 0009                   M           NOP
 6292                                 M   ;
 6293                                 M   ***** BEGIN-POOL *****
 6294 00000AC0 0000                   M   DATA FOR SOURCE-LINE 1221
 6295 00000AC2 0000                   M   ALIGNMENT CODE
 6296 00000AC4 0000007F               M   DATA FOR SOURCE-LINE 1221
 6297 00000AC8 00000000               M   DATA FOR SOURCE-LINE 1221
 6298 00000ACC 00000000               M   DATA FOR SOURCE-LINE 1221
 6299 00000AD0 00000000               M   DATA FOR SOURCE-LINE 1221
 6300 00000AD4 FFFFFF00               M   DATA FOR SOURCE-LINE 1221
 6301 00000AD8 00000000               M   DATA FOR SOURCE-LINE 1221
 6302 00000ADC 00000004               M   DATA FOR SOURCE-LINE 1221
 6303 00000AE0 00000000               M   DATA FOR SOURCE-LINE 1221
 6304                                 M   ***** END-POOL *****
 6305 00000AE4                        M   _JMP_C8000011:
 6306 00000AE4 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 6307                                 M   
 6308 00000AE6                        M   _JMP_EX00011:
 6309                            1222     
 6310                            1223             SUB_END
 6311                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 6312 00000AE6 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 6313                            1224             M_RTS
 6314 00000AE8 000B                   M           RTS                             ;RTSの後ろの
 6315 00000AEA 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 6316                            1225     
 6317                                     ***** BEGIN-POOL *****
 6318 00000AEC FF00                       DATA FOR SOURCE-LINE 1221
 6319                                     ***** END-POOL *****
 6320 00000AEE                   1226     _DSET_CHG:                      ; 00011010B     1A
 6321                            1227             SUB_START
 6322 00000AEE 4F22                   M           STS.L   PR,@-R15                ;[必要]
 6323                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 6324                            1228     
 6325 00000AF0 D00B              1229             MOV.L   #(_DS_CODE_END-_DS_CODE),R0     ; 転送 BYTE長
 6326 00000AF2 D30C              1230             MOV.L   #_DS_CODE,R3                    ; Read CODE MOVE        (12 BYTE)
 6327                            1231     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 6328 00000AF4 64D3              1232             MOV     R13,R4                          ; SEQ ADR. KEEP
 6329                            1233     
 6330                            1234             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 6331 00000AF6 D10C                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 6332 00000AF8 410B                   M           JSR     @R1                     ;
 6333 00000AFA 0009                   M           NOP                                     ;
 6334                            1235                                                     ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 6335                            1236     
 6336 00000AFC D00B              1237             MOV.L   #H'FFFFFF00,R0                  ;
 6337                            1238     ;       *** DATA_LO SET ***
 6338 00000AFE D10C              1239             MOV.L   #0,R1                           ; ﾒﾓﾘのところ
 6339 00000B00 341C              1240             ADD     R1,R4                           ; +0
 6340 00000B02 6241              1241             MOV.W   @R4,R2                          ;
 6341 00000B04 2209              1242             AND     R0,R2                           ; ﾃﾞｰﾀのところをｸﾘｱ
 6342 00000B06 228B              1243             OR      R8,R2                           ; 下位ﾃﾞｰﾀ
 6343 00000B08 2421              1244             MOV.W   R2,@R4                          ; RAM ADR SET
 6344                            1245     
 6345                            1246     ;       *** DATA_HI SET ***
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    45
PROGRAM NAME =

 6346 00000B0A D10A              1247             MOV.L   #4,R1                           ; ﾒﾓﾘのところ
 6347 00000B0C 341C              1248             ADD     R1,R4                           ; 0+4=4
 6348 00000B0E 6241              1249             MOV.W   @R4,R2                          ;
 6349 00000B10 2209              1250             AND     R0,R2                           ; ﾃﾞｰﾀのところをｸﾘｱ
 6350 00000B12 229B              1251             OR      R9,R2                           ; 上位ﾃﾞｰﾀ
 6351 00000B14 2421              1252             MOV.W   R2,@R4                          ; RAM ADR SET
 6352                            1253     
 6353 00000B16 9002              1254             MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 6354                            1255     ;
 6355                            1256             SUB_END
 6356                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 6357 00000B18 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 6358                            1257             M_RTS
 6359 00000B1A 000B                   M           RTS                             ;RTSの後ろの
 6360 00000B1C 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 6361                            1258     
 6362                            1259     
 6363                            1260     ;       *******************************************
 6364                            1261     ;       *****   ARG And MRG CODE CHANGE ROUTINE ***
 6365                            1262     ;       *******************************************
 6366                                     ***** BEGIN-POOL *****
 6367 00000B1E 0000                       DATA FOR SOURCE-LINE 1254
 6368 00000B20 00000000                   DATA FOR SOURCE-LINE 1229
 6369 00000B24 00000000                   DATA FOR SOURCE-LINE 1230
 6370 00000B28 00000000                   DATA FOR SOURCE-LINE 1234
 6371 00000B2C FFFFFF00                   DATA FOR SOURCE-LINE 1237
 6372 00000B30 00000000                   DATA FOR SOURCE-LINE 1239
 6373 00000B34 00000004                   DATA FOR SOURCE-LINE 1247
 6374                                     ***** END-POOL *****
 6375 00000B38                   1263     _AMRG_CHG:                      ; 00100000B     20
 6376                            1264             SUB_START
 6377 00000B38 4F22                   M           STS.L   PR,@-R15                ;[必要]
 6378                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 6379                            1265     
 6380 00000B3A D004              1266             MOV.L   #(_AMRG_CODE_END-_AMRG_CODE),R0 ; 転送 BYTE長
 6381 00000B3C D304              1267             MOV.L   #_AMRG_CODE,R3                  ; Read CODE MOVE        (12 BYTE)
 6382                            1268     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 6383 00000B3E 64D3              1269             MOV     R13,R4                          ; SEQ ADR. KEEP
 6384                            1270     
 6385                            1271             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 6386 00000B40 D104                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 6387 00000B42 410B                   M           JSR     @R1                     ;
 6388 00000B44 0009                   M           NOP                                     ;
 6389                            1272     
 6390                            1273             SUB_END
 6391                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 6392 00000B46 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 6393                            1274             M_RTS
 6394 00000B48 000B                   M           RTS                             ;RTSの後ろの
 6395 00000B4A 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 6396                            1275     
 6397                            1276     ;       *******************************************
 6398                            1277     ;       *****   ARG Or MRG CODE CHANGE ROUTINE  ***
 6399                            1278     ;       *******************************************
 6400                                     ***** BEGIN-POOL *****
 6401 00000B4C 00000000                   DATA FOR SOURCE-LINE 1266
 6402 00000B50 00000000                   DATA FOR SOURCE-LINE 1267
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    46
PROGRAM NAME =

 6403 00000B54 00000000                   DATA FOR SOURCE-LINE 1271
 6404                                     ***** END-POOL *****
 6405 00000B58                   1279     _OMRG_CHG:                      ; 00100010B     22
 6406                            1280             SUB_START
 6407 00000B58 4F22                   M           STS.L   PR,@-R15                ;[必要]
 6408                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 6409                            1281     
 6410 00000B5A D004              1282             MOV.L   #(_OMRG_CODE_END-_OMRG_CODE),R0 ; 転送 BYTE長
 6411 00000B5C D304              1283             MOV.L   #_OMRG_CODE,R3                  ; Read CODE MOVE        (12 BYTE)
 6412                            1284     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 6413 00000B5E 64D3              1285             MOV     R13,R4                          ; SEQ ADR. KEEP
 6414                            1286     
 6415                            1287             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 6416 00000B60 D104                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 6417 00000B62 410B                   M           JSR     @R1                     ;
 6418 00000B64 0009                   M           NOP                                     ;
 6419                            1288     
 6420                            1289             SUB_END
 6421                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 6422 00000B66 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 6423                            1290             M_RTS
 6424 00000B68 000B                   M           RTS                             ;RTSの後ろの
 6425 00000B6A 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 6426                            1291     
 6427                            1292     
 6428                            1293     ;       *******************************************
 6429                            1294     ;       *****   Write NRG CODE CHANGE ROUTINE   ***
 6430                            1295     ;       *******************************************
 6431                                     ***** BEGIN-POOL *****
 6432 00000B6C 00000000                   DATA FOR SOURCE-LINE 1282
 6433 00000B70 00000000                   DATA FOR SOURCE-LINE 1283
 6434 00000B74 00000000                   DATA FOR SOURCE-LINE 1287
 6435                                     ***** END-POOL *****
 6436 00000B78                   1296     _WNRG_CHG:                      ; 00100100B     24
 6437                            1297             SUB_START
 6438 00000B78 4F22                   M           STS.L   PR,@-R15                ;[必要]
 6439                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 6440                            1298     
 6441 00000B7A D004              1299             MOV.L   #(_WNRG_CODE_END-_WNRG_CODE),R0 ; 転送 BYTE長
 6442 00000B7C D304              1300             MOV.L   #_WNRG_CODE,R3                  ; Read CODE MOVE        (12 BYTE)
 6443                            1301     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 6444 00000B7E 64D3              1302             MOV     R13,R4                          ; SEQ ADR. KEEP
 6445                            1303     
 6446                            1304             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 6447 00000B80 D104                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 6448 00000B82 410B                   M           JSR     @R1                     ;
 6449 00000B84 0009                   M           NOP                                     ;
 6450                            1305     
 6451                            1306             SUB_END
 6452                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 6453 00000B86 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 6454                            1307             M_RTS
 6455 00000B88 000B                   M           RTS                             ;RTSの後ろの
 6456 00000B8A 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 6457                            1308     
 6458                            1309     ;       ***************************************************
 6459                            1310     ;       *****   Write Not NRG CODE CHANGE ROUTINE       ***
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    47
PROGRAM NAME =

 6460                            1311     ;       ***************************************************
 6461                                     ***** BEGIN-POOL *****
 6462 00000B8C 00000000                   DATA FOR SOURCE-LINE 1299
 6463 00000B90 00000000                   DATA FOR SOURCE-LINE 1300
 6464 00000B94 00000000                   DATA FOR SOURCE-LINE 1304
 6465                                     ***** END-POOL *****
 6466 00000B98                   1312     _WNNRG_CHG:                     ; 00100101B     25
 6467                            1313             SUB_START
 6468 00000B98 4F22                   M           STS.L   PR,@-R15                ;[必要]
 6469                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 6470                            1314     
 6471 00000B9A D004              1315             MOV.L   #(_WNNRG_CODE_END-_WNNRG_CODE),R0       ; 転送 BYTE長
 6472 00000B9C D304              1316             MOV.L   #_WNNRG_CODE,R3                         ; Read CODE MOVE        (12 BYTE)
 6473                            1317     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 6474 00000B9E 64D3              1318             MOV     R13,R4                          ; SEQ ADR. KEEP
 6475                            1319     
 6476                            1320             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1                  ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 6477 00000BA0 D104                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 6478 00000BA2 410B                   M           JSR     @R1                     ;
 6479 00000BA4 0009                   M           NOP                                     ;
 6480                            1321     
 6481                            1322             SUB_END
 6482                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 6483 00000BA6 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 6484                            1323             M_RTS
 6485 00000BA8 000B                   M           RTS                             ;RTSの後ろの
 6486 00000BAA 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 6487                            1324     
 6488                            1325     ;       ***************************************************
 6489                            1326     ;       *****   Program End CODE CHANGE ROUTINE         ***
 6490                            1327     ;       ***************************************************
 6491                                     ***** BEGIN-POOL *****
 6492 00000BAC 00000000                   DATA FOR SOURCE-LINE 1315
 6493 00000BB0 00000000                   DATA FOR SOURCE-LINE 1316
 6494 00000BB4 00000000                   DATA FOR SOURCE-LINE 1320
 6495                                     ***** END-POOL *****
 6496 00000BB8                   1328     _END_CHG:                       ; 00101010B     2A
 6497                            1329             SUB_START
 6498 00000BB8 4F22                   M           STS.L   PR,@-R15                ;[必要]
 6499                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 6500                            1330     
 6501 00000BBA D005              1331             MOV.L   #(_END_CODE_END-_END_CODE),R0   ; 転送 BYTE長
 6502 00000BBC D305              1332             MOV.L   #_END_CODE,R3                   ; Read CODE MOVE        (12 BYTE)
 6503                            1333     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 6504 00000BBE 64D3              1334             MOV     R13,R4                          ; SEQ ADR. KEEP
 6505                            1335     
 6506                            1336             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 6507 00000BC0 D105                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 6508 00000BC2 410B                   M           JSR     @R1                     ;
 6509 00000BC4 0009                   M           NOP                                     ;
 6510                            1337     
 6511 00000BC6 9002              1338             MOV.W   #_SQ_NML_END,R0                 ; END CODE SET
 6512                            1339     
 6513                            1340             SUB_END
 6514                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 6515 00000BC8 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 6516                            1341             M_RTS
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    48
PROGRAM NAME =

 6517 00000BCA 000B                   M           RTS                             ;RTSの後ろの
 6518 00000BCC 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 6519                            1342     
 6520                            1343     
 6521                            1344     ;       ***************************************************
 6522                            1345     ;       *****   CARD DATA LOAD CODE CHANGE ROUTINE      ***
 6523                            1346     ;       ***************************************************
 6524                                     ***** BEGIN-POOL *****
 6525 00000BCE 0055                       DATA FOR SOURCE-LINE 1338
 6526 00000BD0 00000000                   DATA FOR SOURCE-LINE 1331
 6527 00000BD4 00000000                   DATA FOR SOURCE-LINE 1332
 6528 00000BD8 00000000                   DATA FOR SOURCE-LINE 1336
 6529                                     ***** END-POOL *****
 6530 00000BDC                   1347     _LDW_CHG:                       ; 00110000B     30
 6531                            1348             SUB_START
 6532 00000BDC 4F22                   M           STS.L   PR,@-R15                ;[必要]
 6533                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 6534                            1349     
 6535                            1350             _SEQ_LDW_CMP_OPE_CMD    _LDW_CODE,_LDW_CODE_END,ADR_AREA=0,COD_AREA1=4
 6536                                 M   
 6537 00000BDE D10E                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 6538 00000BE0 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 6539 00000BE2 8929                   M           BT      _JMP_C8000012                   ; IF ADR >= 127 THEN JUMP
 6540                                 M   ;
 6541 00000BE4 D00D                   M           MOV.L   #(_LDW_CODE_END-_LDW_CODE),R0           ; 転送 BYTE長
 6542 00000BE6 D30E                   M           MOV.L   #_LDW_CODE,R3                   ; Read CODE MOVE        (12 BYTE)
 6543                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 6544 00000BE8 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 6545                                 M   
 6546                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 6547 00000BEA D10E                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 6548 00000BEC 410B                   M           JSR     @R1                     ;
 6549 00000BEE 0009                   M           NOP                                     ;
 6550                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 6551                                 M   
 6552 00000BF0 D00D                   M           MOV.L   #H'FFFFFF00,R0                  ;
 6553                                 M   ;       *** ADR SET ***
 6554 00000BF2 D10E                   M           MOV.L   #0,R1                   ; ﾒﾓﾘのところ
 6555 00000BF4 341C                   M           ADD     R1,R4                           ; +0
 6556 00000BF6 6241                   M           MOV.W   @R4,R2                          ;
 6557 00000BF8 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 6558 00000BFA 4800                   M           SHLL    R8                              ; ADR*2
 6559 00000BFC 228B                   M           OR      R8,R2                           ;
 6560 00000BFE 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 6561                                 M   
 6562                                 M   ;       *** OFFSET SET ***
 6563 00000C00 D10B                   M           MOV.L   #4,R1                   ; ﾒﾓﾘのところ
 6564 00000C02 341C                   M           ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 6565 00000C04 D00B                   M           MOV.L   #_SEQ_MOVCMD_R3RD_TBL,R0        ;
 6566 00000C06 4900                   M           SHLL    R9                              ; OFFSET*2
 6567 00000C08 309C                   M           ADD     R9,R0                           ;
 6568 00000C0A 6001                   M           MOV.W   @R0,R0                          ;
 6569 00000C0C 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 6570                                 M   
 6571 00000C0E 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 6572                                 M           M_BRA   _JMP_EX00012                    ;
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    49
PROGRAM NAME =

 6573 00000C10 A013                   M           BRA     _JMP_EX00012
 6574 00000C12 0009                   M           NOP
 6575                                 M   ;
 6576                                 M   ***** BEGIN-POOL *****
 6577 00000C14 0000                   M   DATA FOR SOURCE-LINE 1350
 6578 00000C16 0000                   M   ALIGNMENT CODE
 6579 00000C18 0000007F               M   DATA FOR SOURCE-LINE 1350
 6580 00000C1C 00000000               M   DATA FOR SOURCE-LINE 1350
 6581 00000C20 00000000               M   DATA FOR SOURCE-LINE 1350
 6582 00000C24 00000000               M   DATA FOR SOURCE-LINE 1350
 6583 00000C28 FFFFFF00               M   DATA FOR SOURCE-LINE 1350
 6584 00000C2C 00000000               M   DATA FOR SOURCE-LINE 1350
 6585 00000C30 00000004               M   DATA FOR SOURCE-LINE 1350
 6586 00000C34 00000000               M   DATA FOR SOURCE-LINE 1350
 6587                                 M   ***** END-POOL *****
 6588 00000C38                        M   _JMP_C8000012:
 6589 00000C38 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 6590                                 M   
 6591 00000C3A                        M   _JMP_EX00012:
 6592                            1351     
 6593                            1352             SUB_END
 6594                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 6595 00000C3A 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 6596                            1353             M_RTS
 6597 00000C3C 000B                   M           RTS                             ;RTSの後ろの
 6598 00000C3E 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 6599                            1354     
 6600                            1355     
 6601                            1356     
 6602                            1357     ;       ***********************************************************
 6603                            1358     ;       *****   条件なしCARD DATA LOAD CODE CHANGE ROUTINE      ***
 6604                            1359     ;       ***********************************************************
 6605                                     ***** BEGIN-POOL *****
 6606 00000C40 FF00                       DATA FOR SOURCE-LINE 1350
 6607                                     ***** END-POOL *****
 6608 00000C42                   1360     _LDWU_CHG:                      ; 00110010B     32
 6609                            1361             SUB_START
 6610 00000C42 4F22                   M           STS.L   PR,@-R15                ;[必要]
 6611                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 6612                            1362     
 6613                            1363             _SEQ_LDW_CMP_OPE_CMD    _LDWU_CODE,_LDWU_CODE_END,ADR_AREA=0,COD_AREA1=4
 6614                                 M   
 6615 00000C44 D10D                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 6616 00000C46 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 6617 00000C48 8928                   M           BT      _JMP_C8000013                   ; IF ADR >= 127 THEN JUMP
 6618                                 M   ;
 6619 00000C4A D00D                   M           MOV.L   #(_LDWU_CODE_END-_LDWU_CODE),R0         ; 転送 BYTE長
 6620 00000C4C D30D                   M           MOV.L   #_LDWU_CODE,R3                  ; Read CODE MOVE        (12 BYTE)
 6621                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 6622 00000C4E 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 6623                                 M   
 6624                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 6625 00000C50 D10D                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 6626 00000C52 410B                   M           JSR     @R1                     ;
 6627 00000C54 0009                   M           NOP                                     ;
 6628                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    50
PROGRAM NAME =

 6629                                 M   
 6630 00000C56 D00D                   M           MOV.L   #H'FFFFFF00,R0                  ;
 6631                                 M   ;       *** ADR SET ***
 6632 00000C58 D10D                   M           MOV.L   #0,R1                   ; ﾒﾓﾘのところ
 6633 00000C5A 341C                   M           ADD     R1,R4                           ; +0
 6634 00000C5C 6241                   M           MOV.W   @R4,R2                          ;
 6635 00000C5E 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 6636 00000C60 4800                   M           SHLL    R8                              ; ADR*2
 6637 00000C62 228B                   M           OR      R8,R2                           ;
 6638 00000C64 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 6639                                 M   
 6640                                 M   ;       *** OFFSET SET ***
 6641 00000C66 D10B                   M           MOV.L   #4,R1                   ; ﾒﾓﾘのところ
 6642 00000C68 341C                   M           ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 6643 00000C6A D00B                   M           MOV.L   #_SEQ_MOVCMD_R3RD_TBL,R0        ;
 6644 00000C6C 4900                   M           SHLL    R9                              ; OFFSET*2
 6645 00000C6E 309C                   M           ADD     R9,R0                           ;
 6646 00000C70 6001                   M           MOV.W   @R0,R0                          ;
 6647 00000C72 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 6648                                 M   
 6649 00000C74 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 6650                                 M           M_BRA   _JMP_EX00013                    ;
 6651 00000C76 A012                   M           BRA     _JMP_EX00013
 6652 00000C78 0009                   M           NOP
 6653                                 M   ;
 6654                                 M   ***** BEGIN-POOL *****
 6655 00000C7A 0000                   M   DATA FOR SOURCE-LINE 1363
 6656 00000C7C 0000007F               M   DATA FOR SOURCE-LINE 1363
 6657 00000C80 00000000               M   DATA FOR SOURCE-LINE 1363
 6658 00000C84 00000000               M   DATA FOR SOURCE-LINE 1363
 6659 00000C88 00000000               M   DATA FOR SOURCE-LINE 1363
 6660 00000C8C FFFFFF00               M   DATA FOR SOURCE-LINE 1363
 6661 00000C90 00000000               M   DATA FOR SOURCE-LINE 1363
 6662 00000C94 00000004               M   DATA FOR SOURCE-LINE 1363
 6663 00000C98 00000000               M   DATA FOR SOURCE-LINE 1363
 6664                                 M   ***** END-POOL *****
 6665 00000C9C                        M   _JMP_C8000013:
 6666 00000C9C 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 6667                                 M   
 6668 00000C9E                        M   _JMP_EX00013:
 6669                            1364     
 6670                            1365             SUB_END
 6671                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 6672 00000C9E 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 6673                            1366             M_RTS
 6674 00000CA0 000B                   M           RTS                             ;RTSの後ろの
 6675 00000CA2 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 6676                            1367     
 6677                            1368     
 6678                            1369     ;       ***************************************************
 6679                            1370     ;       *****   CARD DATA STORE CODE CHANGE ROUTINE     ***
 6680                            1371     ;       ***************************************************
 6681                                     ***** BEGIN-POOL *****
 6682 00000CA4 FF00                       DATA FOR SOURCE-LINE 1363
 6683                                     ***** END-POOL *****
 6684 00000CA6                   1372     _STW_CHG:                       ; 00111110B     3E
 6685                            1373             SUB_START
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    51
PROGRAM NAME =

 6686 00000CA6 4F22                   M           STS.L   PR,@-R15                ;[必要]
 6687                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 6688                            1374     
 6689                            1375             _SEQ_STW_CLR_CMD        _STW_CODE,_STW_CODE_END,ADR_AREA=0,COD_AREA1=4
 6690                                 M   
 6691 00000CA8 D10D                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 6692 00000CAA 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 6693 00000CAC 8928                   M           BT      _JMP_C8000014                   ; IF ADR >= 127 THEN JUMP
 6694                                 M   ;
 6695 00000CAE D00D                   M           MOV.L   #(_STW_CODE_END-_STW_CODE),R0           ; 転送 BYTE長
 6696 00000CB0 D30D                   M           MOV.L   #_STW_CODE,R3                   ; Read CODE MOVE        (12 BYTE)
 6697                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 6698 00000CB2 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 6699                                 M   
 6700                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 6701 00000CB4 D10D                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 6702 00000CB6 410B                   M           JSR     @R1                     ;
 6703 00000CB8 0009                   M           NOP                                     ;
 6704                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 6705 00000CBA D00D                   M           MOV.L   #H'FFFFFF00,R0                  ;
 6706                                 M   ;       *** ADR SET ***
 6707 00000CBC D10D                   M           MOV.L   #0,R1                   ; ﾒﾓﾘのところ
 6708 00000CBE 341C                   M           ADD     R1,R4                           ; +0
 6709 00000CC0 6241                   M           MOV.W   @R4,R2                          ;
 6710 00000CC2 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 6711 00000CC4 4800                   M           SHLL    R8                              ; ADR*2
 6712 00000CC6 228B                   M           OR      R8,R2                           ;
 6713 00000CC8 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 6714                                 M   
 6715                                 M   ;       *** OFFSET SET ***
 6716 00000CCA D10B                   M           MOV.L   #4,R1                   ; ﾒﾓﾘのところ
 6717 00000CCC 341C                   M           ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 6718 00000CCE D00B                   M           MOV.L   #_SEQ_ADDCMD_R0_TBL,R0  ;
 6719 00000CD0 4900                   M           SHLL    R9                              ; OFFSET*2
 6720 00000CD2 309C                   M           ADD     R9,R0                           ;
 6721 00000CD4 6001                   M           MOV.W   @R0,R0                          ;
 6722 00000CD6 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 6723                                 M   
 6724 00000CD8 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 6725                                 M           M_BRA   _JMP_EX00014                    ;
 6726 00000CDA A012                   M           BRA     _JMP_EX00014
 6727 00000CDC 0009                   M           NOP
 6728                                 M   ;
 6729                                 M   ***** BEGIN-POOL *****
 6730 00000CDE 0000                   M   DATA FOR SOURCE-LINE 1375
 6731 00000CE0 0000007F               M   DATA FOR SOURCE-LINE 1375
 6732 00000CE4 00000000               M   DATA FOR SOURCE-LINE 1375
 6733 00000CE8 00000000               M   DATA FOR SOURCE-LINE 1375
 6734 00000CEC 00000000               M   DATA FOR SOURCE-LINE 1375
 6735 00000CF0 FFFFFF00               M   DATA FOR SOURCE-LINE 1375
 6736 00000CF4 00000000               M   DATA FOR SOURCE-LINE 1375
 6737 00000CF8 00000004               M   DATA FOR SOURCE-LINE 1375
 6738 00000CFC 00000000               M   DATA FOR SOURCE-LINE 1375
 6739                                 M   ***** END-POOL *****
 6740 00000D00                        M   _JMP_C8000014:
 6741 00000D00 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    52
PROGRAM NAME =

 6742                                 M   
 6743 00000D02                        M   _JMP_EX00014:
 6744                            1376     
 6745                            1377             SUB_END
 6746                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 6747 00000D02 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 6748                            1378             M_RTS
 6749 00000D04 000B                   M           RTS                             ;RTSの後ろの
 6750 00000D06 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 6751                            1379     
 6752                            1380     ;       ***********************************************************
 6753                            1381     ;       *****   条件なしCARD DATA STORE CODE CHANGE ROUTINE     ***
 6754                            1382     ;       ***********************************************************
 6755                                     ***** BEGIN-POOL *****
 6756 00000D08 FF00                       DATA FOR SOURCE-LINE 1375
 6757                                     ***** END-POOL *****
 6758 00000D0A                   1383     _STWU_CHG:                      ; 00111100B     3E
 6759                            1384             SUB_START
 6760 00000D0A 4F22                   M           STS.L   PR,@-R15                ;[必要]
 6761                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 6762                            1385     
 6763                            1386             _SEQ_STW_CLR_CMD        _STWU_CODE,_STWU_CODE_END,ADR_AREA=0,COD_AREA1=4
 6764                                 M   
 6765 00000D0C D10D                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 6766 00000D0E 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 6767 00000D10 8928                   M           BT      _JMP_C8000015                   ; IF ADR >= 127 THEN JUMP
 6768                                 M   ;
 6769 00000D12 D00D                   M           MOV.L   #(_STWU_CODE_END-_STWU_CODE),R0         ; 転送 BYTE長
 6770 00000D14 D30D                   M           MOV.L   #_STWU_CODE,R3                  ; Read CODE MOVE        (12 BYTE)
 6771                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 6772 00000D16 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 6773                                 M   
 6774                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 6775 00000D18 D10D                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 6776 00000D1A 410B                   M           JSR     @R1                     ;
 6777 00000D1C 0009                   M           NOP                                     ;
 6778                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 6779 00000D1E D00D                   M           MOV.L   #H'FFFFFF00,R0                  ;
 6780                                 M   ;       *** ADR SET ***
 6781 00000D20 D10D                   M           MOV.L   #0,R1                   ; ﾒﾓﾘのところ
 6782 00000D22 341C                   M           ADD     R1,R4                           ; +0
 6783 00000D24 6241                   M           MOV.W   @R4,R2                          ;
 6784 00000D26 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 6785 00000D28 4800                   M           SHLL    R8                              ; ADR*2
 6786 00000D2A 228B                   M           OR      R8,R2                           ;
 6787 00000D2C 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 6788                                 M   
 6789                                 M   ;       *** OFFSET SET ***
 6790 00000D2E D10B                   M           MOV.L   #4,R1                   ; ﾒﾓﾘのところ
 6791 00000D30 341C                   M           ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 6792 00000D32 D00B                   M           MOV.L   #_SEQ_ADDCMD_R0_TBL,R0  ;
 6793 00000D34 4900                   M           SHLL    R9                              ; OFFSET*2
 6794 00000D36 309C                   M           ADD     R9,R0                           ;
 6795 00000D38 6001                   M           MOV.W   @R0,R0                          ;
 6796 00000D3A 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 6797                                 M   
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    53
PROGRAM NAME =

 6798 00000D3C 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 6799                                 M           M_BRA   _JMP_EX00015                    ;
 6800 00000D3E A012                   M           BRA     _JMP_EX00015
 6801 00000D40 0009                   M           NOP
 6802                                 M   ;
 6803                                 M   ***** BEGIN-POOL *****
 6804 00000D42 0000                   M   DATA FOR SOURCE-LINE 1386
 6805 00000D44 0000007F               M   DATA FOR SOURCE-LINE 1386
 6806 00000D48 00000000               M   DATA FOR SOURCE-LINE 1386
 6807 00000D4C 00000000               M   DATA FOR SOURCE-LINE 1386
 6808 00000D50 00000000               M   DATA FOR SOURCE-LINE 1386
 6809 00000D54 FFFFFF00               M   DATA FOR SOURCE-LINE 1386
 6810 00000D58 00000000               M   DATA FOR SOURCE-LINE 1386
 6811 00000D5C 00000004               M   DATA FOR SOURCE-LINE 1386
 6812 00000D60 00000000               M   DATA FOR SOURCE-LINE 1386
 6813                                 M   ***** END-POOL *****
 6814 00000D64                        M   _JMP_C8000015:
 6815 00000D64 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 6816                                 M   
 6817 00000D66                        M   _JMP_EX00015:
 6818                            1387     
 6819                            1388             SUB_END
 6820                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 6821 00000D66 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 6822                            1389             M_RTS
 6823 00000D68 000B                   M           RTS                             ;RTSの後ろの
 6824 00000D6A 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 6825                            1390     
 6826                            1391     ;       ***************************************************
 6827                            1392     ;       *****   CMP EQ CODE CHANGE ROUTINE              ***
 6828                            1393     ;       ***************************************************
 6829                                     ***** BEGIN-POOL *****
 6830 00000D6C FF00                       DATA FOR SOURCE-LINE 1386
 6831                                     ***** END-POOL *****
 6832 00000D6E                   1394     _EQ_CHG:                        ; 01000000B     40
 6833                            1395             SUB_START
 6834 00000D6E 4F22                   M           STS.L   PR,@-R15                ;[必要]
 6835                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 6836                            1396     
 6837                            1397             _SEQ_LDW_CMP_OPE_CMD    _EQ_CODE,_EQ_CODE_END,ADR_AREA=0,COD_AREA1=4
 6838                                 M   
 6839 00000D70 D10D                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 6840 00000D72 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 6841 00000D74 8928                   M           BT      _JMP_C8000016                   ; IF ADR >= 127 THEN JUMP
 6842                                 M   ;
 6843 00000D76 D00D                   M           MOV.L   #(_EQ_CODE_END-_EQ_CODE),R0             ; 転送 BYTE長
 6844 00000D78 D30D                   M           MOV.L   #_EQ_CODE,R3                    ; Read CODE MOVE        (12 BYTE)
 6845                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 6846 00000D7A 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 6847                                 M   
 6848                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 6849 00000D7C D10D                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 6850 00000D7E 410B                   M           JSR     @R1                     ;
 6851 00000D80 0009                   M           NOP                                     ;
 6852                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 6853                                 M   
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    54
PROGRAM NAME =

 6854 00000D82 D00D                   M           MOV.L   #H'FFFFFF00,R0                  ;
 6855                                 M   ;       *** ADR SET ***
 6856 00000D84 D10D                   M           MOV.L   #0,R1                   ; ﾒﾓﾘのところ
 6857 00000D86 341C                   M           ADD     R1,R4                           ; +0
 6858 00000D88 6241                   M           MOV.W   @R4,R2                          ;
 6859 00000D8A 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 6860 00000D8C 4800                   M           SHLL    R8                              ; ADR*2
 6861 00000D8E 228B                   M           OR      R8,R2                           ;
 6862 00000D90 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 6863                                 M   
 6864                                 M   ;       *** OFFSET SET ***
 6865 00000D92 D10B                   M           MOV.L   #4,R1                   ; ﾒﾓﾘのところ
 6866 00000D94 341C                   M           ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 6867 00000D96 D00B                   M           MOV.L   #_SEQ_MOVCMD_R3RD_TBL,R0        ;
 6868 00000D98 4900                   M           SHLL    R9                              ; OFFSET*2
 6869 00000D9A 309C                   M           ADD     R9,R0                           ;
 6870 00000D9C 6001                   M           MOV.W   @R0,R0                          ;
 6871 00000D9E 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 6872                                 M   
 6873 00000DA0 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 6874                                 M           M_BRA   _JMP_EX00016                    ;
 6875 00000DA2 A012                   M           BRA     _JMP_EX00016
 6876 00000DA4 0009                   M           NOP
 6877                                 M   ;
 6878                                 M   ***** BEGIN-POOL *****
 6879 00000DA6 0000                   M   DATA FOR SOURCE-LINE 1397
 6880 00000DA8 0000007F               M   DATA FOR SOURCE-LINE 1397
 6881 00000DAC 00000000               M   DATA FOR SOURCE-LINE 1397
 6882 00000DB0 00000000               M   DATA FOR SOURCE-LINE 1397
 6883 00000DB4 00000000               M   DATA FOR SOURCE-LINE 1397
 6884 00000DB8 FFFFFF00               M   DATA FOR SOURCE-LINE 1397
 6885 00000DBC 00000000               M   DATA FOR SOURCE-LINE 1397
 6886 00000DC0 00000004               M   DATA FOR SOURCE-LINE 1397
 6887 00000DC4 00000000               M   DATA FOR SOURCE-LINE 1397
 6888                                 M   ***** END-POOL *****
 6889 00000DC8                        M   _JMP_C8000016:
 6890 00000DC8 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 6891                                 M   
 6892 00000DCA                        M   _JMP_EX00016:
 6893                            1398     
 6894                            1399             SUB_END
 6895                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 6896 00000DCA 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 6897                            1400             M_RTS
 6898 00000DCC 000B                   M           RTS                             ;RTSの後ろの
 6899 00000DCE 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 6900                            1401     
 6901                            1402     
 6902                            1403     ;       ***************************************************
 6903                            1404     ;       *****   CMP NE CODE CHANGE ROUTINE              ***
 6904                            1405     ;       ***************************************************
 6905                                     ***** BEGIN-POOL *****
 6906 00000DD0 FF00                       DATA FOR SOURCE-LINE 1397
 6907                                     ***** END-POOL *****
 6908 00000DD2                   1406     _NE_CHG:                        ; 01000010B     42
 6909                            1407             SUB_START
 6910 00000DD2 4F22                   M           STS.L   PR,@-R15                ;[必要]
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    55
PROGRAM NAME =

 6911                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 6912                            1408     
 6913                            1409             _SEQ_LDW_CMP_OPE_CMD    _NE_CODE,_NE_CODE_END,ADR_AREA=0,COD_AREA1=4
 6914                                 M   
 6915 00000DD4 D10D                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 6916 00000DD6 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 6917 00000DD8 8928                   M           BT      _JMP_C8000017                   ; IF ADR >= 127 THEN JUMP
 6918                                 M   ;
 6919 00000DDA D00D                   M           MOV.L   #(_NE_CODE_END-_NE_CODE),R0             ; 転送 BYTE長
 6920 00000DDC D30D                   M           MOV.L   #_NE_CODE,R3                    ; Read CODE MOVE        (12 BYTE)
 6921                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 6922 00000DDE 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 6923                                 M   
 6924                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 6925 00000DE0 D10D                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 6926 00000DE2 410B                   M           JSR     @R1                     ;
 6927 00000DE4 0009                   M           NOP                                     ;
 6928                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 6929                                 M   
 6930 00000DE6 D00D                   M           MOV.L   #H'FFFFFF00,R0                  ;
 6931                                 M   ;       *** ADR SET ***
 6932 00000DE8 D10D                   M           MOV.L   #0,R1                   ; ﾒﾓﾘのところ
 6933 00000DEA 341C                   M           ADD     R1,R4                           ; +0
 6934 00000DEC 6241                   M           MOV.W   @R4,R2                          ;
 6935 00000DEE 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 6936 00000DF0 4800                   M           SHLL    R8                              ; ADR*2
 6937 00000DF2 228B                   M           OR      R8,R2                           ;
 6938 00000DF4 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 6939                                 M   
 6940                                 M   ;       *** OFFSET SET ***
 6941 00000DF6 D10B                   M           MOV.L   #4,R1                   ; ﾒﾓﾘのところ
 6942 00000DF8 341C                   M           ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 6943 00000DFA D00B                   M           MOV.L   #_SEQ_MOVCMD_R3RD_TBL,R0        ;
 6944 00000DFC 4900                   M           SHLL    R9                              ; OFFSET*2
 6945 00000DFE 309C                   M           ADD     R9,R0                           ;
 6946 00000E00 6001                   M           MOV.W   @R0,R0                          ;
 6947 00000E02 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 6948                                 M   
 6949 00000E04 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 6950                                 M           M_BRA   _JMP_EX00017                    ;
 6951 00000E06 A012                   M           BRA     _JMP_EX00017
 6952 00000E08 0009                   M           NOP
 6953                                 M   ;
 6954                                 M   ***** BEGIN-POOL *****
 6955 00000E0A 0000                   M   DATA FOR SOURCE-LINE 1409
 6956 00000E0C 0000007F               M   DATA FOR SOURCE-LINE 1409
 6957 00000E10 00000000               M   DATA FOR SOURCE-LINE 1409
 6958 00000E14 00000000               M   DATA FOR SOURCE-LINE 1409
 6959 00000E18 00000000               M   DATA FOR SOURCE-LINE 1409
 6960 00000E1C FFFFFF00               M   DATA FOR SOURCE-LINE 1409
 6961 00000E20 00000000               M   DATA FOR SOURCE-LINE 1409
 6962 00000E24 00000004               M   DATA FOR SOURCE-LINE 1409
 6963 00000E28 00000000               M   DATA FOR SOURCE-LINE 1409
 6964                                 M   ***** END-POOL *****
 6965 00000E2C                        M   _JMP_C8000017:
 6966 00000E2C 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    56
PROGRAM NAME =

 6967                                 M   
 6968 00000E2E                        M   _JMP_EX00017:
 6969                            1410     
 6970                            1411             SUB_END
 6971                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 6972 00000E2E 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 6973                            1412             M_RTS
 6974 00000E30 000B                   M           RTS                             ;RTSの後ろの
 6975 00000E32 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 6976                            1413     
 6977                            1414     
 6978                            1415     ;       ***************************************************
 6979                            1416     ;       *****   CMP GT CODE CHANGE ROUTINE              ***
 6980                            1417     ;       ***************************************************
 6981                                     ***** BEGIN-POOL *****
 6982 00000E34 FF00                       DATA FOR SOURCE-LINE 1409
 6983                                     ***** END-POOL *****
 6984 00000E36                   1418     _GT_CHG:                        ; 01000100B     44
 6985                            1419             SUB_START
 6986 00000E36 4F22                   M           STS.L   PR,@-R15                ;[必要]
 6987                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 6988                            1420     
 6989                            1421             _SEQ_LDW_CMP_OPE_CMD    _GT_CODE,_GT_CODE_END,ADR_AREA=0,COD_AREA1=4
 6990                                 M   
 6991 00000E38 D10D                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 6992 00000E3A 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 6993 00000E3C 8928                   M           BT      _JMP_C8000018                   ; IF ADR >= 127 THEN JUMP
 6994                                 M   ;
 6995 00000E3E D00D                   M           MOV.L   #(_GT_CODE_END-_GT_CODE),R0             ; 転送 BYTE長
 6996 00000E40 D30D                   M           MOV.L   #_GT_CODE,R3                    ; Read CODE MOVE        (12 BYTE)
 6997                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 6998 00000E42 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 6999                                 M   
 7000                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 7001 00000E44 D10D                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 7002 00000E46 410B                   M           JSR     @R1                     ;
 7003 00000E48 0009                   M           NOP                                     ;
 7004                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 7005                                 M   
 7006 00000E4A D00D                   M           MOV.L   #H'FFFFFF00,R0                  ;
 7007                                 M   ;       *** ADR SET ***
 7008 00000E4C D10D                   M           MOV.L   #0,R1                   ; ﾒﾓﾘのところ
 7009 00000E4E 341C                   M           ADD     R1,R4                           ; +0
 7010 00000E50 6241                   M           MOV.W   @R4,R2                          ;
 7011 00000E52 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 7012 00000E54 4800                   M           SHLL    R8                              ; ADR*2
 7013 00000E56 228B                   M           OR      R8,R2                           ;
 7014 00000E58 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 7015                                 M   
 7016                                 M   ;       *** OFFSET SET ***
 7017 00000E5A D10B                   M           MOV.L   #4,R1                   ; ﾒﾓﾘのところ
 7018 00000E5C 341C                   M           ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 7019 00000E5E D00B                   M           MOV.L   #_SEQ_MOVCMD_R3RD_TBL,R0        ;
 7020 00000E60 4900                   M           SHLL    R9                              ; OFFSET*2
 7021 00000E62 309C                   M           ADD     R9,R0                           ;
 7022 00000E64 6001                   M           MOV.W   @R0,R0                          ;
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    57
PROGRAM NAME =

 7023 00000E66 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 7024                                 M   
 7025 00000E68 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 7026                                 M           M_BRA   _JMP_EX00018                    ;
 7027 00000E6A A012                   M           BRA     _JMP_EX00018
 7028 00000E6C 0009                   M           NOP
 7029                                 M   ;
 7030                                 M   ***** BEGIN-POOL *****
 7031 00000E6E 0000                   M   DATA FOR SOURCE-LINE 1421
 7032 00000E70 0000007F               M   DATA FOR SOURCE-LINE 1421
 7033 00000E74 00000000               M   DATA FOR SOURCE-LINE 1421
 7034 00000E78 00000000               M   DATA FOR SOURCE-LINE 1421
 7035 00000E7C 00000000               M   DATA FOR SOURCE-LINE 1421
 7036 00000E80 FFFFFF00               M   DATA FOR SOURCE-LINE 1421
 7037 00000E84 00000000               M   DATA FOR SOURCE-LINE 1421
 7038 00000E88 00000004               M   DATA FOR SOURCE-LINE 1421
 7039 00000E8C 00000000               M   DATA FOR SOURCE-LINE 1421
 7040                                 M   ***** END-POOL *****
 7041 00000E90                        M   _JMP_C8000018:
 7042 00000E90 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 7043                                 M   
 7044 00000E92                        M   _JMP_EX00018:
 7045                            1422     
 7046                            1423             SUB_END
 7047                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 7048 00000E92 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 7049                            1424             M_RTS
 7050 00000E94 000B                   M           RTS                             ;RTSの後ろの
 7051 00000E96 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 7052                            1425     
 7053                            1426     
 7054                            1427     ;       ***************************************************
 7055                            1428     ;       *****   CMP LE CODE CHANGE ROUTINE              ***
 7056                            1429     ;       ***************************************************
 7057                                     ***** BEGIN-POOL *****
 7058 00000E98 FF00                       DATA FOR SOURCE-LINE 1421
 7059                                     ***** END-POOL *****
 7060 00000E9A                   1430     _LE_CHG:                        ; 01001000B     48
 7061                            1431             SUB_START
 7062 00000E9A 4F22                   M           STS.L   PR,@-R15                ;[必要]
 7063                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 7064                            1432     
 7065                            1433             _SEQ_LDW_CMP_OPE_CMD    _LE_CODE,_LE_CODE_END,ADR_AREA=0,COD_AREA1=4
 7066                                 M   
 7067 00000E9C D10D                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 7068 00000E9E 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 7069 00000EA0 8928                   M           BT      _JMP_C8000019                   ; IF ADR >= 127 THEN JUMP
 7070                                 M   ;
 7071 00000EA2 D00D                   M           MOV.L   #(_LE_CODE_END-_LE_CODE),R0             ; 転送 BYTE長
 7072 00000EA4 D30D                   M           MOV.L   #_LE_CODE,R3                    ; Read CODE MOVE        (12 BYTE)
 7073                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 7074 00000EA6 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 7075                                 M   
 7076                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 7077 00000EA8 D10D                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 7078 00000EAA 410B                   M           JSR     @R1                     ;
 7079 00000EAC 0009                   M           NOP                                     ;
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    58
PROGRAM NAME =

 7080                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 7081                                 M   
 7082 00000EAE D00D                   M           MOV.L   #H'FFFFFF00,R0                  ;
 7083                                 M   ;       *** ADR SET ***
 7084 00000EB0 D10D                   M           MOV.L   #0,R1                   ; ﾒﾓﾘのところ
 7085 00000EB2 341C                   M           ADD     R1,R4                           ; +0
 7086 00000EB4 6241                   M           MOV.W   @R4,R2                          ;
 7087 00000EB6 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 7088 00000EB8 4800                   M           SHLL    R8                              ; ADR*2
 7089 00000EBA 228B                   M           OR      R8,R2                           ;
 7090 00000EBC 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 7091                                 M   
 7092                                 M   ;       *** OFFSET SET ***
 7093 00000EBE D10B                   M           MOV.L   #4,R1                   ; ﾒﾓﾘのところ
 7094 00000EC0 341C                   M           ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 7095 00000EC2 D00B                   M           MOV.L   #_SEQ_MOVCMD_R3RD_TBL,R0        ;
 7096 00000EC4 4900                   M           SHLL    R9                              ; OFFSET*2
 7097 00000EC6 309C                   M           ADD     R9,R0                           ;
 7098 00000EC8 6001                   M           MOV.W   @R0,R0                          ;
 7099 00000ECA 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 7100                                 M   
 7101 00000ECC 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 7102                                 M           M_BRA   _JMP_EX00019                    ;
 7103 00000ECE A012                   M           BRA     _JMP_EX00019
 7104 00000ED0 0009                   M           NOP
 7105                                 M   ;
 7106                                 M   ***** BEGIN-POOL *****
 7107 00000ED2 0000                   M   DATA FOR SOURCE-LINE 1433
 7108 00000ED4 0000007F               M   DATA FOR SOURCE-LINE 1433
 7109 00000ED8 00000000               M   DATA FOR SOURCE-LINE 1433
 7110 00000EDC 00000000               M   DATA FOR SOURCE-LINE 1433
 7111 00000EE0 00000000               M   DATA FOR SOURCE-LINE 1433
 7112 00000EE4 FFFFFF00               M   DATA FOR SOURCE-LINE 1433
 7113 00000EE8 00000000               M   DATA FOR SOURCE-LINE 1433
 7114 00000EEC 00000004               M   DATA FOR SOURCE-LINE 1433
 7115 00000EF0 00000000               M   DATA FOR SOURCE-LINE 1433
 7116                                 M   ***** END-POOL *****
 7117 00000EF4                        M   _JMP_C8000019:
 7118 00000EF4 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 7119                                 M   
 7120 00000EF6                        M   _JMP_EX00019:
 7121                            1434     
 7122                            1435             SUB_END
 7123                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 7124 00000EF6 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 7125                            1436             M_RTS
 7126 00000EF8 000B                   M           RTS                             ;RTSの後ろの
 7127 00000EFA 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 7128                            1437     
 7129                            1438     
 7130                            1439     ;       ***************************************************
 7131                            1440     ;       *****   ADD CODE CHANGE ROUTINE                 ***
 7132                            1441     ;       ***************************************************
 7133                                     ***** BEGIN-POOL *****
 7134 00000EFC FF00                       DATA FOR SOURCE-LINE 1433
 7135                                     ***** END-POOL *****
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    59
PROGRAM NAME =

 7136 00000EFE                   1442     _ADD_CHG:                       ; 01010000B     50
 7137                            1443             SUB_START
 7138 00000EFE 4F22                   M           STS.L   PR,@-R15                ;[必要]
 7139                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 7140                            1444     
 7141                            1445             _SEQ_LDW_CMP_OPE_CMD    _ADD_CODE,_ADD_CODE_END,ADR_AREA=0,COD_AREA1=4
 7142                                 M   
 7143 00000F00 D10D                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 7144 00000F02 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 7145 00000F04 8928                   M           BT      _JMP_C8000020                   ; IF ADR >= 127 THEN JUMP
 7146                                 M   ;
 7147 00000F06 D00D                   M           MOV.L   #(_ADD_CODE_END-_ADD_CODE),R0           ; 転送 BYTE長
 7148 00000F08 D30D                   M           MOV.L   #_ADD_CODE,R3                   ; Read CODE MOVE        (12 BYTE)
 7149                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 7150 00000F0A 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 7151                                 M   
 7152                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 7153 00000F0C D10D                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 7154 00000F0E 410B                   M           JSR     @R1                     ;
 7155 00000F10 0009                   M           NOP                                     ;
 7156                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 7157                                 M   
 7158 00000F12 D00D                   M           MOV.L   #H'FFFFFF00,R0                  ;
 7159                                 M   ;       *** ADR SET ***
 7160 00000F14 D10D                   M           MOV.L   #0,R1                   ; ﾒﾓﾘのところ
 7161 00000F16 341C                   M           ADD     R1,R4                           ; +0
 7162 00000F18 6241                   M           MOV.W   @R4,R2                          ;
 7163 00000F1A 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 7164 00000F1C 4800                   M           SHLL    R8                              ; ADR*2
 7165 00000F1E 228B                   M           OR      R8,R2                           ;
 7166 00000F20 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 7167                                 M   
 7168                                 M   ;       *** OFFSET SET ***
 7169 00000F22 D10B                   M           MOV.L   #4,R1                   ; ﾒﾓﾘのところ
 7170 00000F24 341C                   M           ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 7171 00000F26 D00B                   M           MOV.L   #_SEQ_MOVCMD_R3RD_TBL,R0        ;
 7172 00000F28 4900                   M           SHLL    R9                              ; OFFSET*2
 7173 00000F2A 309C                   M           ADD     R9,R0                           ;
 7174 00000F2C 6001                   M           MOV.W   @R0,R0                          ;
 7175 00000F2E 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 7176                                 M   
 7177 00000F30 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 7178                                 M           M_BRA   _JMP_EX00020                    ;
 7179 00000F32 A012                   M           BRA     _JMP_EX00020
 7180 00000F34 0009                   M           NOP
 7181                                 M   ;
 7182                                 M   ***** BEGIN-POOL *****
 7183 00000F36 0000                   M   DATA FOR SOURCE-LINE 1445
 7184 00000F38 0000007F               M   DATA FOR SOURCE-LINE 1445
 7185 00000F3C 00000000               M   DATA FOR SOURCE-LINE 1445
 7186 00000F40 00000000               M   DATA FOR SOURCE-LINE 1445
 7187 00000F44 00000000               M   DATA FOR SOURCE-LINE 1445
 7188 00000F48 FFFFFF00               M   DATA FOR SOURCE-LINE 1445
 7189 00000F4C 00000000               M   DATA FOR SOURCE-LINE 1445
 7190 00000F50 00000004               M   DATA FOR SOURCE-LINE 1445
 7191 00000F54 00000000               M   DATA FOR SOURCE-LINE 1445
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    60
PROGRAM NAME =

 7192                                 M   ***** END-POOL *****
 7193 00000F58                        M   _JMP_C8000020:
 7194 00000F58 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 7195                                 M   
 7196 00000F5A                        M   _JMP_EX00020:
 7197                            1446     
 7198                            1447             SUB_END
 7199                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 7200 00000F5A 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 7201                            1448             M_RTS
 7202 00000F5C 000B                   M           RTS                             ;RTSの後ろの
 7203 00000F5E 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 7204                            1449     
 7205                            1450     
 7206                            1451     ;       ***************************************************
 7207                            1452     ;       *****   SUB CODE CHANGE ROUTINE                 ***
 7208                            1453     ;       ***************************************************
 7209                                     ***** BEGIN-POOL *****
 7210 00000F60 FF00                       DATA FOR SOURCE-LINE 1445
 7211                                     ***** END-POOL *****
 7212 00000F62                   1454     _SUB_CHG:                       ; 01010010B     52
 7213                            1455             SUB_START
 7214 00000F62 4F22                   M           STS.L   PR,@-R15                ;[必要]
 7215                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 7216                            1456     
 7217                            1457             _SEQ_LDW_CMP_OPE_CMD    _SUB_CODE,_SUB_CODE_END,ADR_AREA=0,COD_AREA1=4
 7218                                 M   
 7219 00000F64 D10D                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 7220 00000F66 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 7221 00000F68 8928                   M           BT      _JMP_C8000021                   ; IF ADR >= 127 THEN JUMP
 7222                                 M   ;
 7223 00000F6A D00D                   M           MOV.L   #(_SUB_CODE_END-_SUB_CODE),R0           ; 転送 BYTE長
 7224 00000F6C D30D                   M           MOV.L   #_SUB_CODE,R3                   ; Read CODE MOVE        (12 BYTE)
 7225                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 7226 00000F6E 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 7227                                 M   
 7228                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 7229 00000F70 D10D                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 7230 00000F72 410B                   M           JSR     @R1                     ;
 7231 00000F74 0009                   M           NOP                                     ;
 7232                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 7233                                 M   
 7234 00000F76 D00D                   M           MOV.L   #H'FFFFFF00,R0                  ;
 7235                                 M   ;       *** ADR SET ***
 7236 00000F78 D10D                   M           MOV.L   #0,R1                   ; ﾒﾓﾘのところ
 7237 00000F7A 341C                   M           ADD     R1,R4                           ; +0
 7238 00000F7C 6241                   M           MOV.W   @R4,R2                          ;
 7239 00000F7E 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 7240 00000F80 4800                   M           SHLL    R8                              ; ADR*2
 7241 00000F82 228B                   M           OR      R8,R2                           ;
 7242 00000F84 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 7243                                 M   
 7244                                 M   ;       *** OFFSET SET ***
 7245 00000F86 D10B                   M           MOV.L   #4,R1                   ; ﾒﾓﾘのところ
 7246 00000F88 341C                   M           ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 7247 00000F8A D00B                   M           MOV.L   #_SEQ_MOVCMD_R3RD_TBL,R0        ;
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    61
PROGRAM NAME =

 7248 00000F8C 4900                   M           SHLL    R9                              ; OFFSET*2
 7249 00000F8E 309C                   M           ADD     R9,R0                           ;
 7250 00000F90 6001                   M           MOV.W   @R0,R0                          ;
 7251 00000F92 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 7252                                 M   
 7253 00000F94 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 7254                                 M           M_BRA   _JMP_EX00021                    ;
 7255 00000F96 A012                   M           BRA     _JMP_EX00021
 7256 00000F98 0009                   M           NOP
 7257                                 M   ;
 7258                                 M   ***** BEGIN-POOL *****
 7259 00000F9A 0000                   M   DATA FOR SOURCE-LINE 1457
 7260 00000F9C 0000007F               M   DATA FOR SOURCE-LINE 1457
 7261 00000FA0 00000000               M   DATA FOR SOURCE-LINE 1457
 7262 00000FA4 00000000               M   DATA FOR SOURCE-LINE 1457
 7263 00000FA8 00000000               M   DATA FOR SOURCE-LINE 1457
 7264 00000FAC FFFFFF00               M   DATA FOR SOURCE-LINE 1457
 7265 00000FB0 00000000               M   DATA FOR SOURCE-LINE 1457
 7266 00000FB4 00000004               M   DATA FOR SOURCE-LINE 1457
 7267 00000FB8 00000000               M   DATA FOR SOURCE-LINE 1457
 7268                                 M   ***** END-POOL *****
 7269 00000FBC                        M   _JMP_C8000021:
 7270 00000FBC 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 7271                                 M   
 7272 00000FBE                        M   _JMP_EX00021:
 7273                            1458     
 7274                            1459             SUB_END
 7275                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 7276 00000FBE 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 7277                            1460             M_RTS
 7278 00000FC0 000B                   M           RTS                             ;RTSの後ろの
 7279 00000FC2 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 7280                            1461     
 7281                            1462     ;       ***************************************************
 7282                            1463     ;       *****   ANDW CODE CHANGE ROUTINE                ***
 7283                            1464     ;       ***************************************************
 7284                                     ***** BEGIN-POOL *****
 7285 00000FC4 FF00                       DATA FOR SOURCE-LINE 1457
 7286                                     ***** END-POOL *****
 7287 00000FC6                   1465     _ANDW_CHG:                      ; 01011010B     5A
 7288                            1466             SUB_START
 7289 00000FC6 4F22                   M           STS.L   PR,@-R15                ;[必要]
 7290                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 7291                            1467     
 7292                            1468             _SEQ_LDW_CMP_OPE_CMD    _ANDW_CODE,_ANDW_CODE_END,ADR_AREA=0,COD_AREA1=4
 7293                                 M   
 7294 00000FC8 D10D                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 7295 00000FCA 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 7296 00000FCC 8928                   M           BT      _JMP_C8000022                   ; IF ADR >= 127 THEN JUMP
 7297                                 M   ;
 7298 00000FCE D00D                   M           MOV.L   #(_ANDW_CODE_END-_ANDW_CODE),R0         ; 転送 BYTE長
 7299 00000FD0 D30D                   M           MOV.L   #_ANDW_CODE,R3                  ; Read CODE MOVE        (12 BYTE)
 7300                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 7301 00000FD2 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 7302                                 M   
 7303                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 7304 00000FD4 D10D                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    62
PROGRAM NAME =

 7305 00000FD6 410B                   M           JSR     @R1                     ;
 7306 00000FD8 0009                   M           NOP                                     ;
 7307                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 7308                                 M   
 7309 00000FDA D00D                   M           MOV.L   #H'FFFFFF00,R0                  ;
 7310                                 M   ;       *** ADR SET ***
 7311 00000FDC D10D                   M           MOV.L   #0,R1                   ; ﾒﾓﾘのところ
 7312 00000FDE 341C                   M           ADD     R1,R4                           ; +0
 7313 00000FE0 6241                   M           MOV.W   @R4,R2                          ;
 7314 00000FE2 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 7315 00000FE4 4800                   M           SHLL    R8                              ; ADR*2
 7316 00000FE6 228B                   M           OR      R8,R2                           ;
 7317 00000FE8 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 7318                                 M   
 7319                                 M   ;       *** OFFSET SET ***
 7320 00000FEA D10B                   M           MOV.L   #4,R1                   ; ﾒﾓﾘのところ
 7321 00000FEC 341C                   M           ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 7322 00000FEE D00B                   M           MOV.L   #_SEQ_MOVCMD_R3RD_TBL,R0        ;
 7323 00000FF0 4900                   M           SHLL    R9                              ; OFFSET*2
 7324 00000FF2 309C                   M           ADD     R9,R0                           ;
 7325 00000FF4 6001                   M           MOV.W   @R0,R0                          ;
 7326 00000FF6 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 7327                                 M   
 7328 00000FF8 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 7329                                 M           M_BRA   _JMP_EX00022                    ;
 7330 00000FFA A012                   M           BRA     _JMP_EX00022
 7331 00000FFC 0009                   M           NOP
 7332                                 M   ;
 7333                                 M   ***** BEGIN-POOL *****
 7334 00000FFE 0000                   M   DATA FOR SOURCE-LINE 1468
 7335 00001000 0000007F               M   DATA FOR SOURCE-LINE 1468
 7336 00001004 00000000               M   DATA FOR SOURCE-LINE 1468
 7337 00001008 00000000               M   DATA FOR SOURCE-LINE 1468
 7338 0000100C 00000000               M   DATA FOR SOURCE-LINE 1468
 7339 00001010 FFFFFF00               M   DATA FOR SOURCE-LINE 1468
 7340 00001014 00000000               M   DATA FOR SOURCE-LINE 1468
 7341 00001018 00000004               M   DATA FOR SOURCE-LINE 1468
 7342 0000101C 00000000               M   DATA FOR SOURCE-LINE 1468
 7343                                 M   ***** END-POOL *****
 7344 00001020                        M   _JMP_C8000022:
 7345 00001020 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 7346                                 M   
 7347 00001022                        M   _JMP_EX00022:
 7348                            1469     
 7349                            1470             SUB_END
 7350                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 7351 00001022 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 7352                            1471             M_RTS
 7353 00001024 000B                   M           RTS                             ;RTSの後ろの
 7354 00001026 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 7355                            1472     
 7356                            1473     
 7357                            1474     ;       ***************************************************
 7358                            1475     ;       *****   ORW CODE CHANGE ROUTINE                 ***
 7359                            1476     ;       ***************************************************
 7360                                     ***** BEGIN-POOL *****
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    63
PROGRAM NAME =

 7361 00001028 FF00                       DATA FOR SOURCE-LINE 1468
 7362                                     ***** END-POOL *****
 7363 0000102A                   1477     _ORW_CHG:                       ; 01011100B     5C
 7364                            1478             SUB_START
 7365 0000102A 4F22                   M           STS.L   PR,@-R15                ;[必要]
 7366                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 7367                            1479     
 7368                            1480             _SEQ_LDW_CMP_OPE_CMD    _ORW_CODE,_ORW_CODE_END,ADR_AREA=0,COD_AREA1=4
 7369                                 M   
 7370 0000102C D10D                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 7371 0000102E 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 7372 00001030 8928                   M           BT      _JMP_C8000023                   ; IF ADR >= 127 THEN JUMP
 7373                                 M   ;
 7374 00001032 D00D                   M           MOV.L   #(_ORW_CODE_END-_ORW_CODE),R0           ; 転送 BYTE長
 7375 00001034 D30D                   M           MOV.L   #_ORW_CODE,R3                   ; Read CODE MOVE        (12 BYTE)
 7376                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 7377 00001036 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 7378                                 M   
 7379                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 7380 00001038 D10D                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 7381 0000103A 410B                   M           JSR     @R1                     ;
 7382 0000103C 0009                   M           NOP                                     ;
 7383                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 7384                                 M   
 7385 0000103E D00D                   M           MOV.L   #H'FFFFFF00,R0                  ;
 7386                                 M   ;       *** ADR SET ***
 7387 00001040 D10D                   M           MOV.L   #0,R1                   ; ﾒﾓﾘのところ
 7388 00001042 341C                   M           ADD     R1,R4                           ; +0
 7389 00001044 6241                   M           MOV.W   @R4,R2                          ;
 7390 00001046 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 7391 00001048 4800                   M           SHLL    R8                              ; ADR*2
 7392 0000104A 228B                   M           OR      R8,R2                           ;
 7393 0000104C 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 7394                                 M   
 7395                                 M   ;       *** OFFSET SET ***
 7396 0000104E D10B                   M           MOV.L   #4,R1                   ; ﾒﾓﾘのところ
 7397 00001050 341C                   M           ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 7398 00001052 D00B                   M           MOV.L   #_SEQ_MOVCMD_R3RD_TBL,R0        ;
 7399 00001054 4900                   M           SHLL    R9                              ; OFFSET*2
 7400 00001056 309C                   M           ADD     R9,R0                           ;
 7401 00001058 6001                   M           MOV.W   @R0,R0                          ;
 7402 0000105A 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 7403                                 M   
 7404 0000105C 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 7405                                 M           M_BRA   _JMP_EX00023                    ;
 7406 0000105E A012                   M           BRA     _JMP_EX00023
 7407 00001060 0009                   M           NOP
 7408                                 M   ;
 7409                                 M   ***** BEGIN-POOL *****
 7410 00001062 0000                   M   DATA FOR SOURCE-LINE 1480
 7411 00001064 0000007F               M   DATA FOR SOURCE-LINE 1480
 7412 00001068 00000000               M   DATA FOR SOURCE-LINE 1480
 7413 0000106C 00000000               M   DATA FOR SOURCE-LINE 1480
 7414 00001070 00000000               M   DATA FOR SOURCE-LINE 1480
 7415 00001074 FFFFFF00               M   DATA FOR SOURCE-LINE 1480
 7416 00001078 00000000               M   DATA FOR SOURCE-LINE 1480
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    64
PROGRAM NAME =

 7417 0000107C 00000004               M   DATA FOR SOURCE-LINE 1480
 7418 00001080 00000000               M   DATA FOR SOURCE-LINE 1480
 7419                                 M   ***** END-POOL *****
 7420 00001084                        M   _JMP_C8000023:
 7421 00001084 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 7422                                 M   
 7423 00001086                        M   _JMP_EX00023:
 7424                            1481     
 7425                            1482             SUB_END
 7426                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 7427 00001086 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 7428                            1483             M_RTS
 7429 00001088 000B                   M           RTS                             ;RTSの後ろの
 7430 0000108A 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 7431                            1484     
 7432                            1485     
 7433                            1486     ;       ***************************************************
 7434                            1487     ;       *****   XORW CODE CHANGE ROUTINE                ***
 7435                            1488     ;       ***************************************************
 7436                                     ***** BEGIN-POOL *****
 7437 0000108C FF00                       DATA FOR SOURCE-LINE 1480
 7438                                     ***** END-POOL *****
 7439 0000108E                   1489     _XORW_CHG:                      ; 01011110B     5E
 7440                            1490             SUB_START
 7441 0000108E 4F22                   M           STS.L   PR,@-R15                ;[必要]
 7442                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 7443                            1491     
 7444                            1492             _SEQ_LDW_CMP_OPE_CMD    _XORW_CODE,_XORW_CODE_END,ADR_AREA=0,COD_AREA1=4
 7445                                 M   
 7446 00001090 D10D                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 7447 00001092 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 7448 00001094 8928                   M           BT      _JMP_C8000024                   ; IF ADR >= 127 THEN JUMP
 7449                                 M   ;
 7450 00001096 D00D                   M           MOV.L   #(_XORW_CODE_END-_XORW_CODE),R0         ; 転送 BYTE長
 7451 00001098 D30D                   M           MOV.L   #_XORW_CODE,R3                  ; Read CODE MOVE        (12 BYTE)
 7452                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 7453 0000109A 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 7454                                 M   
 7455                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 7456 0000109C D10D                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 7457 0000109E 410B                   M           JSR     @R1                     ;
 7458 000010A0 0009                   M           NOP                                     ;
 7459                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 7460                                 M   
 7461 000010A2 D00D                   M           MOV.L   #H'FFFFFF00,R0                  ;
 7462                                 M   ;       *** ADR SET ***
 7463 000010A4 D10D                   M           MOV.L   #0,R1                   ; ﾒﾓﾘのところ
 7464 000010A6 341C                   M           ADD     R1,R4                           ; +0
 7465 000010A8 6241                   M           MOV.W   @R4,R2                          ;
 7466 000010AA 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 7467 000010AC 4800                   M           SHLL    R8                              ; ADR*2
 7468 000010AE 228B                   M           OR      R8,R2                           ;
 7469 000010B0 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 7470                                 M   
 7471                                 M   ;       *** OFFSET SET ***
 7472 000010B2 D10B                   M           MOV.L   #4,R1                   ; ﾒﾓﾘのところ
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    65
PROGRAM NAME =

 7473 000010B4 341C                   M           ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 7474 000010B6 D00B                   M           MOV.L   #_SEQ_MOVCMD_R3RD_TBL,R0        ;
 7475 000010B8 4900                   M           SHLL    R9                              ; OFFSET*2
 7476 000010BA 309C                   M           ADD     R9,R0                           ;
 7477 000010BC 6001                   M           MOV.W   @R0,R0                          ;
 7478 000010BE 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 7479                                 M   
 7480 000010C0 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 7481                                 M           M_BRA   _JMP_EX00024                    ;
 7482 000010C2 A012                   M           BRA     _JMP_EX00024
 7483 000010C4 0009                   M           NOP
 7484                                 M   ;
 7485                                 M   ***** BEGIN-POOL *****
 7486 000010C6 0000                   M   DATA FOR SOURCE-LINE 1492
 7487 000010C8 0000007F               M   DATA FOR SOURCE-LINE 1492
 7488 000010CC 00000000               M   DATA FOR SOURCE-LINE 1492
 7489 000010D0 00000000               M   DATA FOR SOURCE-LINE 1492
 7490 000010D4 00000000               M   DATA FOR SOURCE-LINE 1492
 7491 000010D8 FFFFFF00               M   DATA FOR SOURCE-LINE 1492
 7492 000010DC 00000000               M   DATA FOR SOURCE-LINE 1492
 7493 000010E0 00000004               M   DATA FOR SOURCE-LINE 1492
 7494 000010E4 00000000               M   DATA FOR SOURCE-LINE 1492
 7495                                 M   ***** END-POOL *****
 7496 000010E8                        M   _JMP_C8000024:
 7497 000010E8 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 7498                                 M   
 7499 000010EA                        M   _JMP_EX00024:
 7500                            1493     
 7501                            1494             SUB_END
 7502                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 7503 000010EA 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 7504                            1495             M_RTS
 7505 000010EC 000B                   M           RTS                             ;RTSの後ろの
 7506 000010EE 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 7507                            1496     
 7508                            1497     ;       ***********************************
 7509                            1498     ;       ***     ｺｰﾄﾞのﾌﾞﾛｯｸ転送         ***
 7510                            1499     ;       ***********************************
 7511                            1500     ;       INPUT   R0,R3,R13
 7512                            1501     ;       USE     R1
 7513                            1502     
 7514                                     ***** BEGIN-POOL *****
 7515 000010F0 FF00                       DATA FOR SOURCE-LINE 1492
 7516                                     ***** END-POOL *****
 7517 000010F2                   1503     _SEQ_CODE_BLOCK_MV:
 7518                            1504             SUB_START
 7519 000010F2 4F22                   M           STS.L   PR,@-R15                ;[必要]
 7520                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 7521                            1505     
 7522 000010F4                   1506     _SEQ_CODE_BLOCK_LOOP:
 7523 000010F4 2008              1507             TST     R0,R0                           ; COUNTER CHECK
 7524 000010F6 8909              1508             BT      _SEQ_CD_BLOCK_MV_EXIT           ; 0 THEN EXIT
 7525                            1509     
 7526 000010F8 6131              1510             MOV.W   @R3,R1                          ; SEQ_ROM
 7527 000010FA 2D11              1511             MOV.W   R1,@R13                         ; SEQ_RAM
 7528 000010FC D102              1512             MOV.L   #2,R1                           ;
 7529 000010FE 3018              1513             SUB     R1,R0                           ; COUNTER -2
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    66
PROGRAM NAME =

 7530 00001100 331C              1514             ADD     R1,R3                           ; ROM ADR. +2
 7531 00001102 3D1C              1515             ADD     R1,R13                          ; RAM ADR. +2
 7532                            1516             M_BRA   _SEQ_CODE_BLOCK_LOOP            ;
 7533 00001104 AFF6                   M           BRA     _SEQ_CODE_BLOCK_LOOP
 7534 00001106 0009                   M           NOP
 7535                            1517     
 7536                                     ***** BEGIN-POOL *****
 7537 00001108 00000002                   DATA FOR SOURCE-LINE 1512
 7538                                     ***** END-POOL *****
 7539 0000110C                   1518     _SEQ_CD_BLOCK_MV_EXIT:
 7540                            1519     
 7541                            1520             SUB_END
 7542                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 7543 0000110C 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 7544                            1521             M_RTS
 7545 0000110E 000B                   M           RTS                             ;RTSの後ろの
 7546 00001110 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 7547                            1522     
 7548                            1523     
 7549                            1524             .END
  *****TOTAL ERRORS       0
  *****TOTAL WARNINGS     0
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    67

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

BIT0                                      EQU  00000001     15*
BIT1                                      EQU  00000002     16*
BIT10                                     EQU  00000400     25*
BIT11                                     EQU  00000800     26*
BIT12                                     EQU  00001000     27*
BIT13                                     EQU  00002000     28*
BIT14                                     EQU  00004000     29*
BIT15                                     EQU  00008000     30*
BIT16                                     EQU  00010000     31*
BIT17                                     EQU  00020000     32*
BIT18                                     EQU  00040000     33*
BIT19                                     EQU  00080000     34*
BIT2                                      EQU  00000004     17* 4438 
BIT20                                     EQU  00100000     35*
BIT21                                     EQU  00200000     36*
BIT22                                     EQU  00400000     37*
BIT23                                     EQU  00800000     38*
BIT24                                     EQU  01000000     39*
BIT25                                     EQU  02000000     40*
BIT26                                     EQU  04000000     41*
BIT27                                     EQU  08000000     42*
BIT28                                     EQU  10000000     43*
BIT29                                     EQU  20000000     44*
BIT3                                      EQU  00000008     18*
BIT30                                     EQU  40000000     45*
BIT31                                     EQU  80000000     46*
BIT4                                      EQU  00000010     19*
BIT5                                      EQU  00000020     20*
BIT6                                      EQU  00000040     21*
BIT7                                      EQU  00000080     22*
BIT8                                      EQU  00000100     23*
BIT9                                      EQU  00000200     24*
DREG                                      EQU  00000000   3064*
GA1_PFEX                                  EQU  00000084   2180*
GA1_PGEX                                  EQU  00000000   2207*
GA1_PHEX                                  EQU  00000000   2219*
GA2_PFEX                                  EQU  000000D0   2667*
GA2_PGEX                                  EQU  00000061   2704*
GA2_PHEX                                  EQU  00000000   2728*
H_BYTE                                    EQU  00000000     82*
L_BYTE                                    EQU  00000001     81*
NBIT0                                     EQU  000000FE     49*
NBIT1                                     EQU  000000FD     50*
NBIT10                                    EQU  0000FBFF     60*
NBIT11                                    EQU  0000F7FF     61*
NBIT12                                    EQU  0000EFFF     62*
NBIT13                                    EQU  0000DFFF     63*
NBIT14                                    EQU  0000BFFF     64*
NBIT15                                    EQU  00007FFF     65*
NBIT2                                     EQU  000000FB     51*
NBIT3                                     EQU  000000F7     52*
NBIT4                                     EQU  000000EF     53*
NBIT5                                     EQU  000000DF     54*
NBIT6                                     EQU  000000BF     55*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    68

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

NBIT7                                     EQU  0000007F     56*
NBIT8                                     EQU  0000FEFF     58*
NBIT9                                     EQU  0000FDFF     59*
P                                P        SCT  00000000   4286*
SEQ_RUN_CHG1_DBE                 P             0000012C   4514  4516*
XBIT0                                     EQU  00000000     68*
XBIT1                                     EQU  00000001     69*
XBIT2                                     EQU  00000002     70*
XBIT3                                     EQU  00000003     71*
XBIT4                                     EQU  00000004     72*
XBIT5                                     EQU  00000005     73*
XBIT6                                     EQU  00000006     74*
XBIT7                                     EQU  00000007     75*
_ADD_CHG                         P        EXPT 00000EFE   2993  7136*
_ADD_CMD                                  EQU  00000044   3083*
_ADD_CODE                                 IMPT 00000000   2948  7147  7148 
_ADD_CODE_END                             IMPT 00000000   2949  7147 
_ADD_SUB                                  IMPT 00000000   2873 
_AMRG_CHG                        P        EXPT 00000B38   2980  6375*
_AMRG_CODE                                IMPT 00000000   2906  6380  6381 
_AMRG_CODE_END                            IMPT 00000000   2907  6380 
_ANDN_CHG                        P        EXPT 00000312   2966  4906*
_ANDN_CODE                                IMPT 00000000   2890  4921  4922 
_ANDN_CODE_END                            IMPT 00000000   2891  4921 
_ANDW_CHG                        P        EXPT 00000FC6   2995  7287*
_ANDW_CMD                                 EQU  00000038   3080*
_ANDW_CODE                                IMPT 00000000   2942  7298  7299 
_ANDW_CODE_END                            IMPT 00000000   2943  7298 
_ANDW_SUB                                 IMPT 00000000   2870 
_AND_CHG                         P        EXPT 0000028A   2965  4806*
_AND_CODE                                 IMPT 00000000   2888  4821  4822 
_AND_CODE_END                             IMPT 00000000   2889  4821 
_BAMRA                                    IMPT 00000000    302 
_BAMRB                                    IMPT 00000000    305 
_BARA                                     IMPT 00000000    301 
_BARB                                     IMPT 00000000    304 
_BASRA                                    IMPT 00000000    290 
_BASRB                                    IMPT 00000000    291 
_BBIT_CHG_TBL                             IMPT 00000000   3010 
_BBRA                                     IMPT 00000000    303 
_BBRB                                     IMPT 00000000    306 
_BCR1                                     IMPT 00000000    312 
_BCR2                                     IMPT 00000000    313 
_BDMRB                                    IMPT 00000000    308 
_BDRB                                     IMPT 00000000    307 
_BRCR                                     IMPT 00000000    309 
_CB_BAKUP_CMD1                            EQU  00005678    114*
_CB_BAKUP_CMD2                            EQU  00001234    115*
_CB_BAK_SUM_COD1                          EQU  5AA51234    112*
_CB_BAK_SUM_COD2                          EQU  A55A4321    113*
_CB_ERR_INFO_MEM                          EQU  00000080    138*
_CB_ERR_INFO_PSIZE                        EQU  00000008    139*
_CB_STS_BUF_1BLK                          EQU  00000040    117*  119 
_CB_STS_BUF_BLKMAX                        EQU  00000008    118*  119 
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    69

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_CB_STS_BUF_MAX                           EQU  00000200    119*
_CB_TRD_BEFORE                            EQU  00000060    127*
_CB_TRD_BUF_DP_MAX                        EQU  00000080    131*
_CB_TRD_BUF_MAX                           EQU  00000800    128*
_CB_TRD_DP_1CNT                           EQU  00000008    130*
_CB_TRD_DP_CH                             EQU  00000004    123*
_CB_TRD_SMP_CNT                           EQU  00000080    126*
_CCR                                      IMPT 00000000    292 
_CHCR0                                    IMPT 00000000    333 
_CHCR1                                    IMPT 00000000    337 
_CHCR2                                    IMPT 00000000    341 
_CHCR3                                    IMPT 00000000    345 
_CLR_CHG                         P        EXPT 00000A88   2978  6248*
_CLR_CMD                                  EQU  0000000C   3069*
_CLR_CODE                                 IMPT 00000000   2916  6259  6260 
_CLR_CODE_END                             IMPT 00000000   2917  6259 
_CLR_SUB                                  IMPT 00000000   2859 
_CTR_CMD                                  EQU  00000014   3071*
_DAR0                                     IMPT 00000000    331 
_DAR1                                     IMPT 00000000    335 
_DAR2                                     IMPT 00000000    339 
_DAR3                                     IMPT 00000000    343 
_DA_CNV_DT0                               IMPT 00000000   2842 
_DMAOR                                    IMPT 00000000    346 
_DMATCR0                                  IMPT 00000000    332 
_DMATCR1                                  IMPT 00000000    336 
_DMATCR2                                  IMPT 00000000    340 
_DMATCR3                                  IMPT 00000000    344 
_DSET_CHG                        P        EXPT 00000AEE   2979  6320*
_DS_CODE                                  IMPT 00000000   2914  6325  6326 
_DS_CODE_END                              IMPT 00000000   2915  6325 
_DUMMY_SUM_CODE                           EQU  5AA53CC3    105*
_END_CHG                         P        EXPT 00000BB8   2984  6496*
_END_CMD                                  EQU  0000004C   3085*
_END_CODE                                 IMPT 00000000   2952  6501  6502 
_END_CODE_END                             IMPT 00000000   2953  6501 
_END_SUB                                  IMPT 00000000   2875 
_EQ_CHG                          P        EXPT 00000D6E   2989  6832*
_EQ_CMD                                   EQU  00000028   3076*
_EQ_CODE                                  IMPT 00000000   2934  6843  6844 
_EQ_CODE_END                              IMPT 00000000   2935  6843 
_EQ_SUB                                   IMPT 00000000   2866 
_EXPEVT                                   IMPT 00000000    294 
_FRQCR                                    IMPT 00000000    349 
_GPIOIC                                   IMPT 00000000    327 
_GT_CHG                          P        EXPT 00000E36   2991  6984*
_GT_CMD                                   EQU  00000030   3078*
_GT_CODE                                  IMPT 00000000   2938  6995  6996 
_GT_CODE_END                              IMPT 00000000   2939  6995 
_GT_SUB                                   IMPT 00000000   2868 
_ICR                                      IMPT 00000000    356 
_INTEVT                                   IMPT 00000000    295 
_INT_2MS_SEL                              IMPT 00000000   2810 
_IPRA                                     IMPT 00000000    357 
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    70

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_IPRB                                     IMPT 00000000    358 
_IPRC                                     IMPT 00000000    359 
_IPRD                                     IMPT 00000000    360 
_JMP_C8000000                    P             00000280   4717  4788*
_JMP_C8000001                    P             00000308   4819  4887*
_JMP_C8000002                    P             00000390   4919  4987*
_JMP_C8000003                    P             00000418   5018  5086*
_JMP_C8000004                    P             000004A0   5117  5185*
_JMP_C8000005                    P             000005A8   5305  5367*
_JMP_C8000006                    P             000006A4   5475  5537*
_JMP_C8000007                    P             0000086C   5763  5844*
_JMP_C8000008                    P             0000099C   5963  6044*
_JMP_C8000009                    P             000009E8   6071  6108*
_JMP_C8000010                    P             00000A34   6137  6174*
_JMP_C8000011                    P             00000AE4   6257  6305*
_JMP_C8000012                    P             00000C38   6539  6588*
_JMP_C8000013                    P             00000C9C   6617  6665*
_JMP_C8000014                    P             00000D00   6693  6740*
_JMP_C8000015                    P             00000D64   6767  6814*
_JMP_C8000016                    P             00000DC8   6841  6889*
_JMP_C8000017                    P             00000E2C   6917  6965*
_JMP_C8000018                    P             00000E90   6993  7041*
_JMP_C8000019                    P             00000EF4   7069  7117*
_JMP_C8000020                    P             00000F58   7145  7193*
_JMP_C8000021                    P             00000FBC   7221  7269*
_JMP_C8000022                    P             00001020   7296  7344*
_JMP_C8000023                    P             00001084   7372  7420*
_JMP_C8000024                    P             000010E8   7448  7496*
_JMP_EX00000                     P             00000282   4771  4791*
_JMP_EX00001                     P             0000030A   4871  4890*
_JMP_EX00002                     P             00000392   4971  4990*
_JMP_EX00003                     P             0000041A   5070  5089*
_JMP_EX00004                     P             000004A2   5169  5188*
_JMP_EX00005                     P             000005AA   5350  5370*
_JMP_EX00006                     P             000006A6   5520  5540*
_JMP_EX00007                     P             0000086E   5826  5847*
_JMP_EX00008                     P             0000099E   6026  6047*
_JMP_EX00009                     P             000009EA   6096  6111*
_JMP_EX00010                     P             00000A36   6162  6177*
_JMP_EX00011                     P             00000AE6   6290  6308*
_JMP_EX00012                     P             00000C3A   6573  6591*
_JMP_EX00013                     P             00000C9E   6651  6668*
_JMP_EX00014                     P             00000D02   6726  6743*
_JMP_EX00015                     P             00000D66   6800  6817*
_JMP_EX00016                     P             00000DCA   6875  6892*
_JMP_EX00017                     P             00000E2E   6951  6968*
_JMP_EX00018                     P             00000E92   7027  7044*
_JMP_EX00019                     P             00000EF6   7103  7120*
_JMP_EX00020                     P             00000F5A   7179  7196*
_JMP_EX00021                     P             00000FBE   7255  7272*
_JMP_EX00022                     P             00001022   7330  7347*
_JMP_EX00023                     P             00001086   7406  7423*
_JMP_EX00024                     P             000010EA   7482  7499*
_LDN_CHG                         P        EXPT 000001FA   2964  4708*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    71

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_LDN_CODE                                 IMPT 00000000   2886  4719  4720 
_LDN_CODE_END                             IMPT 00000000   2887  4719 
_LDWU_CHG                        P        EXPT 00000C42   2986  6608*
_LDWU_CODE                                IMPT 00000000   2928  6619  6620 
_LDWU_CODE_END                            IMPT 00000000   2929  6619 
_LDW_CHG                         P        EXPT 00000BDC   2985  6530*
_LDW_CMD                                  EQU  00000020   3074*
_LDW_CODE                                 IMPT 00000000   2926  6541  6542 
_LDW_CODE_END                             IMPT 00000000   2927  6541 
_LDW_SUB                                  IMPT 00000000   2864 
_LD_C80                          P             000001F0   4619  4691*
_LD_CHG                          P        EXPT 00000168   2963  4605*
_LD_CHG_EX                       P             000001F2   4673  4694*
_LD_CODE                                  IMPT 00000000   2884  4621  4622 
_LD_CODE_END                              IMPT 00000000   2885  4621 
_LE_CHG                          P        EXPT 00000E9A   2992  7060*
_LE_CMD                                   EQU  00000034   3079*
_LE_CODE                                  IMPT 00000000   2940  7071  7072 
_LE_CODE_END                              IMPT 00000000   2941  7071 
_LE_SUB                                   IMPT 00000000   2869 
_MCR                                      IMPT 00000000    317 
_MMUCR                                    IMPT 00000000    289 
_NE_CHG                          P        EXPT 00000DD2   2990  6908*
_NE_CMD                                   EQU  0000002C   3077*
_NE_CODE                                  IMPT 00000000   2936  6919  6920 
_NE_CODE_END                              IMPT 00000000   2937  6919 
_NE_SUB                                   IMPT 00000000   2867 
_NOP_CHG                         P        EXPT 00000148   2962  4568*
_NOP_CODE                                 IMPT 00000000   2882  4573 
_NOP_CODE_END                             IMPT 00000000   2883 
_NOP_SHLL8_R0_TBL0                        IMPT 00000000   3022 
_NOP_SHLL8_R1_TBL0                        IMPT 00000000   3023 
_NOP_SHLL8_R2_TBL0                        IMPT 00000000   3024  5331  5412  5501 
_NOP_SHLL8_R3_TBL0                        IMPT 00000000   3025  5588  5791  5991 
_NOP_SHLL8_R4_TBL0                        IMPT 00000000   3026 
_NOP_SWAP_TBL0                            IMPT 00000000   3021  4663  4761  4861  4961  5060  5159  5250  5692 
_OMRG_CHG                        P        EXPT 00000B58   2981  6405*
_OMRG_CODE                                IMPT 00000000   2908  6410  6411 
_OMRG_CODE_END                            IMPT 00000000   2909  6410 
_ORN_C80                         P             00000528   5208  5276*
_ORN_CHG                         P        EXPT 00000422   2968  5104*
_ORN_CHG_EX                      P             0000052A   5260  5279*
_ORN_CODE                                 IMPT 00000000   2894  5119  5120  5210  5211 
_ORN_CODE_END                             IMPT 00000000   2895  5119  5210 
_ORW_CHG                         P        EXPT 0000102A   2996  7363*
_ORW_CMD                                  EQU  0000003C   3081*
_ORW_CODE                                 IMPT 00000000   2944  7374  7375 
_ORW_CODE_END                             IMPT 00000000   2945  7374 
_ORW_SUB                                  IMPT 00000000   2871 
_OR_CHG                          P        EXPT 0000039A   2967  5005*
_OR_CODE                                  IMPT 00000000   2892  5020  5021 
_OR_CODE_END                              IMPT 00000000   2893  5020 
_PCR                                      IMPT 00000000    318 
_PCTRA                                    IMPT 00000000    323 
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    72

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_PCTRB                                    IMPT 00000000    325 
_PDTRA                                    IMPT 00000000    324 
_PDTRB                                    IMPT 00000000    326  4436 
_PLF_CHG                         P        EXPT 0000062E   2970  5466*
_PLF_CMD                                  EQU  00000008   3068*
_PLF_CODE                                 IMPT 00000000   2904  5477  5478 
_PLF_CODE_END                             IMPT 00000000   2905  5477 
_PLF_SUB                                  IMPT 00000000   2858 
_PLS_C80                         P             00000624   5386  5447*
_PLS_CHG                         P        EXPT 00000532   2969  5296*
_PLS_CHG_EX                      P             00000626   5431  5450*
_PLS_CMD                                  EQU  00000004   3067*
_PLS_CODE                                 IMPT 00000000   2902  5307  5308  5388  5389 
_PLS_CODE_END                             IMPT 00000000   2903  5307  5388 
_PLS_SUB                                  IMPT 00000000   2857 
_PTEA                                     IMPT 00000000    296 
_PTEH                                     IMPT 00000000    285 
_PTEL                                     IMPT 00000000    286 
_PVP_COM_ADR                              IMPT 00000000   4314  4346 
_PVP_COM_ERR                              IMPT 00000000   4315  4348 
_QACR0                                    IMPT 00000000    297 
_QACR1                                    IMPT 00000000    298 
_RFCR                                     IMPT 00000000    322 
_RMIO2_IN_DATA                            IMPT 00000000   2840 
_RMIO_IN_DATA                             IMPT 00000000   2839 
_RST_CHG                         P        EXPT 00000906   2974  5954*
_RST_CODE                                 IMPT 00000000   2900  5965  5966 
_RST_CODE_END                             IMPT 00000000   2901  5965 
_RTCNT                                    IMPT 00000000    320 
_RTCOR                                    IMPT 00000000    321 
_RTCSR                                    IMPT 00000000    319 
_SAR0                                     IMPT 00000000    330 
_SAR1                                     IMPT 00000000    334 
_SAR2                                     IMPT 00000000    338 
_SAR3                                     IMPT 00000000    342 
_SCBRR1                                   IMPT 00000000    378 
_SCBRR2                                   IMPT 00000000    388 
_SCFCR2                                   IMPT 00000000    393 
_SCFDR2                                   IMPT 00000000    394 
_SCFRDR2                                  IMPT 00000000    392 
_SCFSR2                                   IMPT 00000000    391 
_SCFTDR2                                  IMPT 00000000    390 
_SCLSR2                                   IMPT 00000000    396 
_SCRDR1                                   IMPT 00000000    382 
_SCSCMR1                                  IMPT 00000000    383 
_SCSCR1                                   IMPT 00000000    379 
_SCSCR2                                   IMPT 00000000    389 
_SCSMR1                                   IMPT 00000000    377 
_SCSMR2                                   IMPT 00000000    387 
_SCSPTR1                                  IMPT 00000000    384 
_SCSPTR2                                  IMPT 00000000    395 
_SCSSR1                                   IMPT 00000000    381 
_SCTDR1                                   IMPT 00000000    380 
_SEQ_ADDCMD_R0_TBL                        IMPT 00000000   3019  6282  6718  6792 
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    73

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_SEQ_ADR                                  EQU  00000000   3045*
_SEQ_ADR_HI                               EQU  00000000   3050*
_SEQ_ADR_LO                               EQU  00000000   3051*
_SEQ_ARG1_DATA                            IMPT 00000000    440  4377 
_SEQ_ASM_RAM_TOP                          IMPT 00000000    409 
_SEQ_BBIT_CHG_TBL                         IMPT 00000000   3011  4634  4732  4832  4932  5031  5130  5221  5320  5401  5490  5577 
                                                          5681  5781  5879  5981 
_SEQ_BIT                                  EQU  00000000   3044*
_SEQ_CARD_MAX                             EQU  0000007F   3041* 4617  4715  4817  4917  5016  5115  5206  5303  5384  5473  5560 
                                                          5666  5761  5862  5961  6069  6135  6255  6537  6615  6691  6765  6839 
                                                          6915  6991  7067  7143  7219  7294  7370  7446 
_SEQ_CARD_RAM                             IMPT 00000000    424 
_SEQ_CD_BLOCK_MV_EXIT            P             0000110C   7524  7539*
_SEQ_CHG_TBL0                             IMPT 00000000   3007  4472 
_SEQ_CMP_ERR                              IMPT 00000000    439  4352 
_SEQ_CMP_ERR_ADR                          IMPT 00000000    445  4342 
_SEQ_CODE_BLOCK_LOOP             P             000010F4   7522* 7533 
_SEQ_CODE_BLOCK_MV               P             000010F2   4627  4725  4827  4927  5026  5125  5216  5313  5394  5483  5570  5676 
                                                          5771  5872  5971  6079  6145  6203  6265  6331  6386  6416  6447  6477 
                                                          6507  6547  6625  6701  6775  6849  6925  7001  7077  7153  7229  7304 
                                                          7380  7456  7517*
_SEQ_COM1_END                             IMPT 00000000   4288  4425 
_SEQ_COM1_TOP                             IMPT 00000000   4287  4417 
_SEQ_CTR_CARD_TOP                         EQU  00000430   3089*
_SEQ_CTR_DATA                             IMPT 00000000    433 
_SEQ_CTR_DT                               EQU  00000000   3048*
_SEQ_DRG1_DATA                            IMPT 00000000    443 
_SEQ_DT_HI                                EQU  00000000   3054*
_SEQ_DT_LO                                EQU  00000000   3053*
_SEQ_END_CODE                    P             00000004   4300* 4359 
_SEQ_GBR_TBL                              IMPT 00000000   3009 
_SEQ_MAX_BYTE                             EQU  0000001C   3036* 4421 
_SEQ_MOVCMD_R0RD_TBL                      IMPT 00000000   3012  4656  4754  4854  4954  5053  5152  5243 
_SEQ_MOVCMD_R1RD_TBL                      IMPT 00000000   3013  5608  5810  5901  6010 
_SEQ_MOVCMD_R1WR_TBL                      IMPT 00000000   3014  5617  5712  5819  5910  6019 
_SEQ_MOVCMD_R3RD_TBL                      IMPT 00000000   3016  6565  6643  6867  6943  7019  7095  7171  7247  7322  7398  7474 
_SEQ_MOVCMD_R3WR_TBL                      IMPT 00000000   3017 
_SEQ_MRG1_DATA                            IMPT 00000000    441  4379 
_SEQ_NRG1_DATA                            IMPT 00000000    442  4382 
_SEQ_OFFSET_ADR1                          EQU  00000000   3056*
_SEQ_OFFSET_ADR2                          EQU  000000C8   3057*
_SEQ_OFFSET_ADR3                          EQU  00000190   3058*
_SEQ_OFFSET_ADR4                          EQU  0000021C   3059*
_SEQ_OFFSET_ADR5                          EQU  000002F8   3060*
_SEQ_OFFSET_ADR6                          EQU  00000384   3061*
_SEQ_OFFSET_ADR7                          EQU  00000424   3062*
_SEQ_RUN1                                 IMPT 00000000    416  4418 
_SEQ_RUN1_END                             IMPT 00000000    417  4419 
_SEQ_RUN1_TOP                             IMPT 00000000    415  4327 
_SEQ_RUN_CHG1                    P             0000009C   4338  4412*
_SEQ_RUN_CHG1_100                P             000000AC   4427* 4528 
_SEQ_RUN_CHG1_300                P             000000E0   4469*
_SEQ_RUN_CHG1_800                P             00000124   4487  4509*
_SEQ_RUN_CHG1_END                P             00000138   4490  4535*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    74

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_SEQ_RUN_CHG1_ERR_END            P        EXPT 0000013E   2998  4455  4458  4492  4542*
_SEQ_RUN_CHG1_EXIT               P             00000140   4539  4545*
_SEQ_RUN_CHG_MAIN                P        EXPT 0000000A   4290  4321*
_SEQ_RUN_CHG_MAIN020             P             00000052   4356  4373*
_SEQ_SEEK_CARD_TBL                        IMPT 00000000   3029 
_SEQ_SEEK_WBIT_TBL                        IMPT 00000000   3028 
_SEQ_SR_FLG                               IMPT 00000000    436 
_SEQ_START_CODE                  P             00000000   4294* 4328 
_SEQ_TMR_CARD_TOP                         EQU  00000424   3088*
_SEQ_TMR_DATA                             IMPT 00000000    429 
_SEQ_TMR_DT                               EQU  00000000   3047*
_SET_C80                         P             000008FC   5864  5935*
_SET_CHG                         P        EXPT 000007D6   2973  5754*
_SET_CHG_EX                      P             000008FE   5917  5938*
_SET_CODE                                 IMPT 00000000   2898  5765  5766  5866  5867 
_SET_CODE_END                             IMPT 00000000   2899  5765  5866 
_SQ000                                    EQU  00000000   3168*
_SQ001                                    EQU  00000002   3169*
_SQ002                                    EQU  00000004   3170*
_SQ003                                    EQU  00000006   3171*
_SQ004                                    EQU  00000008   3172*
_SQ005                                    EQU  0000000A   3173*
_SQ006                                    EQU  0000000C   3174*
_SQ007                                    EQU  0000000E   3175*
_SQ008                                    EQU  00000010   3176*
_SQ009                                    EQU  00000012   3177*
_SQ010                                    EQU  00000014   3178*
_SQ011                                    EQU  00000016   3179*
_SQ012                                    EQU  00000018   3180*
_SQ013                                    EQU  0000001A   3181*
_SQ014                                    EQU  0000001C   3182*
_SQ015                                    EQU  0000001E   3183*
_SQ016                                    EQU  00000020   3184*
_SQ017                                    EQU  00000022   3185*
_SQ018                                    EQU  00000024   3186*
_SQ019                                    EQU  00000026   3187*
_SQ020                                    EQU  00000028   3188*
_SQ021                                    EQU  0000002A   3189*
_SQ022                                    EQU  0000002C   3190*
_SQ023                                    EQU  0000002E   3191*
_SQ024                                    EQU  00000030   3192*
_SQ025                                    EQU  00000032   3193*
_SQ026                                    EQU  00000034   3194*
_SQ027                                    EQU  00000036   3195*
_SQ028                                    EQU  00000038   3196*
_SQ029                                    EQU  0000003A   3197*
_SQ030                                    EQU  0000003C   3198*
_SQ031                                    EQU  0000003E   3199*
_SQ032                                    EQU  00000040   3200*
_SQ033                                    EQU  00000042   3201*
_SQ034                                    EQU  00000044   3202*
_SQ035                                    EQU  00000046   3203*
_SQ036                                    EQU  00000048   3204*
_SQ037                                    EQU  0000004A   3205*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    75

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_SQ038                                    EQU  0000004C   3206*
_SQ039                                    EQU  0000004E   3207*
_SQ040                                    EQU  00000050   3208*
_SQ041                                    EQU  00000052   3209*
_SQ042                                    EQU  00000054   3210*
_SQ043                                    EQU  00000056   3211*
_SQ044                                    EQU  00000058   3212*
_SQ045                                    EQU  0000005A   3213*
_SQ046                                    EQU  0000005C   3214*
_SQ047                                    EQU  0000005E   3215*
_SQ048                                    EQU  00000060   3216*
_SQ049                                    EQU  00000062   3217*
_SQ050                                    EQU  00000064   3218*
_SQ051                                    EQU  00000066   3219*
_SQ052                                    EQU  00000068   3220*
_SQ053                                    EQU  0000006A   3221*
_SQ054                                    EQU  0000006C   3222*
_SQ055                                    EQU  0000006E   3223*
_SQ056                                    EQU  00000070   3224*
_SQ057                                    EQU  00000072   3225*
_SQ058                                    EQU  00000074   3226*
_SQ059                                    EQU  00000076   3227*
_SQ060                                    EQU  00000078   3228*
_SQ061                                    EQU  0000007A   3229*
_SQ062                                    EQU  0000007C   3230*
_SQ063                                    EQU  0000007E   3231*
_SQ064                                    EQU  00000080   3232*
_SQ065                                    EQU  00000082   3233*
_SQ066                                    EQU  00000084   3234*
_SQ067                                    EQU  00000086   3235*
_SQ068                                    EQU  00000088   3236*
_SQ069                                    EQU  0000008A   3237*
_SQ070                                    EQU  0000008C   3238*
_SQ071                                    EQU  0000008E   3239*
_SQ072                                    EQU  00000090   3240*
_SQ073                                    EQU  00000092   3241*
_SQ074                                    EQU  00000094   3242*
_SQ075                                    EQU  00000096   3243*
_SQ076                                    EQU  00000098   3244*
_SQ077                                    EQU  0000009A   3245*
_SQ078                                    EQU  0000009C   3246*
_SQ079                                    EQU  0000009E   3247*
_SQ080                                    EQU  000000A0   3248*
_SQ081                                    EQU  000000A2   3249*
_SQ082                                    EQU  000000A4   3250*
_SQ083                                    EQU  000000A6   3251*
_SQ084                                    EQU  000000A8   3252*
_SQ085                                    EQU  000000AA   3253*
_SQ086                                    EQU  000000AC   3254*
_SQ087                                    EQU  000000AE   3255*
_SQ088                                    EQU  000000B0   3256*
_SQ089                                    EQU  000000B2   3257*
_SQ090                                    EQU  000000B4   3258*
_SQ091                                    EQU  000000B6   3259*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    76

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_SQ092                                    EQU  000000B8   3260*
_SQ093                                    EQU  000000BA   3261*
_SQ094                                    EQU  000000BC   3262*
_SQ095                                    EQU  000000BE   3263*
_SQ096                                    EQU  000000C0   3264*
_SQ097                                    EQU  000000C2   3265*
_SQ098                                    EQU  000000C4   3266*
_SQ099                                    EQU  000000C6   3267*
_SQ100                                    EQU  000000C8   3269*
_SQ101                                    EQU  000000CA   3270*
_SQ102                                    EQU  000000CC   3271*
_SQ103                                    EQU  000000CE   3272*
_SQ104                                    EQU  000000D0   3273*
_SQ105                                    EQU  000000D2   3274*
_SQ106                                    EQU  000000D4   3275*
_SQ107                                    EQU  000000D6   3276*
_SQ108                                    EQU  000000D8   3277*
_SQ109                                    EQU  000000DA   3278*
_SQ110                                    EQU  000000DC   3279*
_SQ111                                    EQU  000000DE   3280*
_SQ112                                    EQU  000000E0   3281*
_SQ113                                    EQU  000000E2   3282*
_SQ114                                    EQU  000000E4   3283*
_SQ115                                    EQU  000000E6   3284*
_SQ116                                    EQU  000000E8   3285*
_SQ117                                    EQU  000000EA   3286*
_SQ118                                    EQU  000000EC   3287*
_SQ119                                    EQU  000000EE   3288*
_SQ120                                    EQU  000000F0   3289*
_SQ121                                    EQU  000000F2   3290*
_SQ122                                    EQU  000000F4   3291*
_SQ123                                    EQU  000000F6   3292*
_SQ124                                    EQU  000000F8   3293*
_SQ125                                    EQU  000000FA   3294*
_SQ126                                    EQU  000000FC   3295*
_SQ127                                    EQU  000000FE   3296*
_SQ128                                    EQU  00000100   3297*
_SQ129                                    EQU  00000102   3298*
_SQ130                                    EQU  00000104   3299*
_SQ131                                    EQU  00000106   3300*
_SQ132                                    EQU  00000108   3301*
_SQ133                                    EQU  0000010A   3302*
_SQ134                                    EQU  0000010C   3303*
_SQ135                                    EQU  0000010E   3304*
_SQ136                                    EQU  00000110   3305*
_SQ137                                    EQU  00000112   3306*
_SQ138                                    EQU  00000114   3307*
_SQ139                                    EQU  00000116   3308*
_SQ140                                    EQU  00000118   3309*
_SQ141                                    EQU  0000011A   3310*
_SQ142                                    EQU  0000011C   3311*
_SQ143                                    EQU  0000011E   3312*
_SQ144                                    EQU  00000120   3313*
_SQ145                                    EQU  00000122   3314*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    77

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_SQ146                                    EQU  00000124   3315*
_SQ147                                    EQU  00000126   3316*
_SQ148                                    EQU  00000128   3317*
_SQ149                                    EQU  0000012A   3318*
_SQ150                                    EQU  0000012C   3319*
_SQ151                                    EQU  0000012E   3320*
_SQ152                                    EQU  00000130   3321*
_SQ153                                    EQU  00000132   3322*
_SQ154                                    EQU  00000134   3323*
_SQ155                                    EQU  00000136   3324*
_SQ156                                    EQU  00000138   3325*
_SQ157                                    EQU  0000013A   3326*
_SQ158                                    EQU  0000013C   3327*
_SQ159                                    EQU  0000013E   3328*
_SQ160                                    EQU  00000140   3329*
_SQ161                                    EQU  00000142   3330*
_SQ162                                    EQU  00000144   3331*
_SQ163                                    EQU  00000146   3332*
_SQ164                                    EQU  00000148   3333*
_SQ165                                    EQU  0000014A   3334*
_SQ166                                    EQU  0000014C   3335*
_SQ167                                    EQU  0000014E   3336*
_SQ168                                    EQU  00000150   3337*
_SQ169                                    EQU  00000152   3338*
_SQ170                                    EQU  00000154   3339*
_SQ171                                    EQU  00000156   3340*
_SQ172                                    EQU  00000158   3341*
_SQ173                                    EQU  0000015A   3342*
_SQ174                                    EQU  0000015C   3343*
_SQ175                                    EQU  0000015E   3344*
_SQ176                                    EQU  00000160   3345*
_SQ177                                    EQU  00000162   3346*
_SQ178                                    EQU  00000164   3347*
_SQ179                                    EQU  00000166   3348*
_SQ180                                    EQU  00000168   3349*
_SQ181                                    EQU  0000016A   3350*
_SQ182                                    EQU  0000016C   3351*
_SQ183                                    EQU  0000016E   3352*
_SQ184                                    EQU  00000170   3353*
_SQ185                                    EQU  00000172   3354*
_SQ186                                    EQU  00000174   3355*
_SQ187                                    EQU  00000176   3356*
_SQ188                                    EQU  00000178   3357*
_SQ189                                    EQU  0000017A   3358*
_SQ190                                    EQU  0000017C   3359*
_SQ191                                    EQU  0000017E   3360*
_SQ192                                    EQU  00000180   3361*
_SQ193                                    EQU  00000182   3362*
_SQ194                                    EQU  00000184   3363*
_SQ195                                    EQU  00000186   3364*
_SQ196                                    EQU  00000188   3365*
_SQ197                                    EQU  0000018A   3366*
_SQ198                                    EQU  0000018C   3367*
_SQ199                                    EQU  0000018E   3368*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    78

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_SQ200                                    EQU  00000190   3370*
_SQ201                                    EQU  00000192   3371*
_SQ202                                    EQU  00000194   3372*
_SQ203                                    EQU  00000196   3373*
_SQ204                                    EQU  00000198   3374*
_SQ205                                    EQU  0000019A   3375*
_SQ206                                    EQU  0000019C   3376*
_SQ207                                    EQU  0000019E   3377*
_SQ208                                    EQU  000001A0   3378*
_SQ209                                    EQU  000001A2   3379*
_SQ210                                    EQU  000001A4   3380*
_SQ211                                    EQU  000001A6   3381*
_SQ212                                    EQU  000001A8   3382*
_SQ213                                    EQU  000001AA   3383*
_SQ214                                    EQU  000001AC   3384*
_SQ215                                    EQU  000001AE   3385*
_SQ216                                    EQU  000001B0   3386*
_SQ217                                    EQU  000001B2   3387*
_SQ218                                    EQU  000001B4   3388*
_SQ219                                    EQU  000001B6   3389*
_SQ220                                    EQU  000001B8   3390*
_SQ221                                    EQU  000001BA   3391*
_SQ222                                    EQU  000001BC   3392*
_SQ223                                    EQU  000001BE   3393*
_SQ224                                    EQU  000001C0   3394*
_SQ225                                    EQU  000001C2   3395*
_SQ226                                    EQU  000001C4   3396*
_SQ227                                    EQU  000001C6   3397*
_SQ228                                    EQU  000001C8   3398*
_SQ229                                    EQU  000001CA   3399*
_SQ230                                    EQU  000001CC   3400*
_SQ231                                    EQU  000001CE   3401*
_SQ232                                    EQU  000001D0   3402*
_SQ233                                    EQU  000001D2   3403*
_SQ234                                    EQU  000001D4   3404*
_SQ235                                    EQU  000001D6   3405*
_SQ236                                    EQU  000001D8   3406*
_SQ237                                    EQU  000001DA   3407*
_SQ238                                    EQU  000001DC   3408*
_SQ239                                    EQU  000001DE   3409*
_SQ240                                    EQU  000001E0   3410*
_SQ241                                    EQU  000001E2   3411*
_SQ242                                    EQU  000001E4   3412*
_SQ243                                    EQU  000001E6   3413*
_SQ244                                    EQU  000001E8   3414*
_SQ245                                    EQU  000001EA   3415*
_SQ246                                    EQU  000001EC   3416*
_SQ247                                    EQU  000001EE   3417*
_SQ248                                    EQU  000001F0   3418*
_SQ249                                    EQU  000001F2   3419*
_SQ250                                    EQU  000001F4   3420*
_SQ251                                    EQU  000001F6   3421*
_SQ252                                    EQU  000001F8   3422*
_SQ253                                    EQU  000001FA   3423*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    79

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_SQ254                                    EQU  000001FC   3424*
_SQ255                                    EQU  000001FE   3425*
_SQ256                                    EQU  00000200   3426*
_SQ257                                    EQU  00000202   3427*
_SQ258                                    EQU  00000204   3428*
_SQ259                                    EQU  00000206   3429*
_SQ260                                    EQU  00000208   3430*
_SQ261                                    EQU  0000020A   3431*
_SQ262                                    EQU  0000020C   3432*
_SQ263                                    EQU  0000020E   3433*
_SQ264                                    EQU  00000210   3434*
_SQ265                                    EQU  00000212   3435*
_SQ266                                    EQU  00000214   3436*
_SQ267                                    EQU  00000216   3437*
_SQ268                                    EQU  00000218   3438*
_SQ269                                    EQU  0000021A   3439*
_SQ270                                    EQU  0000021C   3440*
_SQ271                                    EQU  0000021E   3441*
_SQ272                                    EQU  00000220   3442*
_SQ273                                    EQU  00000222   3443*
_SQ274                                    EQU  00000224   3444*
_SQ275                                    EQU  00000226   3445*
_SQ276                                    EQU  00000228   3446*
_SQ277                                    EQU  0000022A   3447*
_SQ278                                    EQU  0000022C   3448*
_SQ279                                    EQU  0000022E   3449*
_SQ280                                    EQU  00000230   3450*
_SQ281                                    EQU  00000232   3451*
_SQ282                                    EQU  00000234   3452*
_SQ283                                    EQU  00000236   3453*
_SQ284                                    EQU  00000238   3454*
_SQ285                                    EQU  0000023A   3455*
_SQ286                                    EQU  0000023C   3456*
_SQ287                                    EQU  0000023E   3457*
_SQ288                                    EQU  00000240   3458*
_SQ289                                    EQU  00000242   3459*
_SQ290                                    EQU  00000244   3460*
_SQ291                                    EQU  00000246   3461*
_SQ292                                    EQU  00000248   3462*
_SQ293                                    EQU  0000024A   3463*
_SQ294                                    EQU  0000024C   3464*
_SQ295                                    EQU  0000024E   3465*
_SQ296                                    EQU  00000250   3466*
_SQ297                                    EQU  00000252   3467*
_SQ298                                    EQU  00000254   3468*
_SQ299                                    EQU  00000256   3469*
_SQ300                                    EQU  00000258   3471*
_SQ301                                    EQU  0000025A   3472*
_SQ302                                    EQU  0000025C   3473*
_SQ303                                    EQU  0000025E   3474*
_SQ304                                    EQU  00000260   3475*
_SQ305                                    EQU  00000262   3476*
_SQ306                                    EQU  00000264   3477*
_SQ307                                    EQU  00000266   3478*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    80

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_SQ308                                    EQU  00000268   3479*
_SQ309                                    EQU  0000026A   3480*
_SQ310                                    EQU  0000026C   3481*
_SQ311                                    EQU  0000026E   3482*
_SQ312                                    EQU  00000270   3483*
_SQ313                                    EQU  00000272   3484*
_SQ314                                    EQU  00000274   3485*
_SQ315                                    EQU  00000276   3486*
_SQ316                                    EQU  00000278   3487*
_SQ317                                    EQU  0000027A   3488*
_SQ318                                    EQU  0000027C   3489*
_SQ319                                    EQU  0000027E   3490*
_SQ320                                    EQU  00000280   3491*
_SQ321                                    EQU  00000282   3492*
_SQ322                                    EQU  00000284   3493*
_SQ323                                    EQU  00000286   3494*
_SQ324                                    EQU  00000288   3495*
_SQ325                                    EQU  0000028A   3496*
_SQ326                                    EQU  0000028C   3497*
_SQ327                                    EQU  0000028E   3498*
_SQ328                                    EQU  00000290   3499*
_SQ329                                    EQU  00000292   3500*
_SQ330                                    EQU  00000294   3501*
_SQ331                                    EQU  00000296   3502*
_SQ332                                    EQU  00000298   3503*
_SQ333                                    EQU  0000029A   3504*
_SQ334                                    EQU  0000029C   3505*
_SQ335                                    EQU  0000029E   3506*
_SQ336                                    EQU  000002A0   3507*
_SQ337                                    EQU  000002A2   3508*
_SQ338                                    EQU  000002A4   3509*
_SQ339                                    EQU  000002A6   3510*
_SQ340                                    EQU  000002A8   3511*
_SQ341                                    EQU  000002AA   3512*
_SQ342                                    EQU  000002AC   3513*
_SQ343                                    EQU  000002AE   3514*
_SQ344                                    EQU  000002B0   3515*
_SQ345                                    EQU  000002B2   3516*
_SQ346                                    EQU  000002B4   3517*
_SQ347                                    EQU  000002B6   3518*
_SQ348                                    EQU  000002B8   3519*
_SQ349                                    EQU  000002BA   3520*
_SQ350                                    EQU  000002BC   3521*
_SQ351                                    EQU  000002BE   3522*
_SQ352                                    EQU  000002C0   3523*
_SQ353                                    EQU  000002C2   3524*
_SQ354                                    EQU  000002C4   3525*
_SQ355                                    EQU  000002C6   3526*
_SQ356                                    EQU  000002C8   3527*
_SQ357                                    EQU  000002CA   3528*
_SQ358                                    EQU  000002CC   3529*
_SQ359                                    EQU  000002CE   3530*
_SQ360                                    EQU  000002D0   3531*
_SQ361                                    EQU  000002D2   3532*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    81

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_SQ362                                    EQU  000002D4   3533*
_SQ363                                    EQU  000002D6   3534*
_SQ364                                    EQU  000002D8   3535*
_SQ365                                    EQU  000002DA   3536*
_SQ366                                    EQU  000002DC   3537*
_SQ367                                    EQU  000002DE   3538*
_SQ368                                    EQU  000002E0   3539*
_SQ369                                    EQU  000002E2   3540*
_SQ370                                    EQU  000002E4   3541*
_SQ371                                    EQU  000002E6   3542*
_SQ372                                    EQU  000002E8   3543*
_SQ373                                    EQU  000002EA   3544*
_SQ374                                    EQU  000002EC   3545*
_SQ375                                    EQU  000002EE   3546*
_SQ376                                    EQU  000002F0   3547*
_SQ377                                    EQU  000002F2   3548*
_SQ378                                    EQU  000002F4   3549*
_SQ379                                    EQU  000002F6   3550*
_SQ380                                    EQU  000002F8   3551*
_SQ381                                    EQU  000002FA   3552*
_SQ382                                    EQU  000002FC   3553*
_SQ383                                    EQU  000002FE   3554*
_SQ384                                    EQU  00000300   3555*
_SQ385                                    EQU  00000302   3556*
_SQ386                                    EQU  00000304   3557*
_SQ387                                    EQU  00000306   3558*
_SQ388                                    EQU  00000308   3559*
_SQ389                                    EQU  0000030A   3560*
_SQ390                                    EQU  0000030C   3561*
_SQ391                                    EQU  0000030E   3562*
_SQ392                                    EQU  00000310   3563*
_SQ393                                    EQU  00000312   3564*
_SQ394                                    EQU  00000314   3565*
_SQ395                                    EQU  00000316   3566*
_SQ396                                    EQU  00000318   3567*
_SQ397                                    EQU  0000031A   3568*
_SQ398                                    EQU  0000031C   3569*
_SQ399                                    EQU  0000031E   3570*
_SQ400                                    EQU  00000320   3572*
_SQ401                                    EQU  00000322   3573*
_SQ402                                    EQU  00000324   3574*
_SQ403                                    EQU  00000326   3575*
_SQ404                                    EQU  00000328   3576*
_SQ405                                    EQU  0000032A   3577*
_SQ406                                    EQU  0000032C   3578*
_SQ407                                    EQU  0000032E   3579*
_SQ408                                    EQU  00000330   3580*
_SQ409                                    EQU  00000332   3581*
_SQ410                                    EQU  00000334   3582*
_SQ411                                    EQU  00000336   3583*
_SQ412                                    EQU  00000338   3584*
_SQ413                                    EQU  0000033A   3585*
_SQ414                                    EQU  0000033C   3586*
_SQ415                                    EQU  0000033E   3587*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    82

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_SQ416                                    EQU  00000340   3588*
_SQ417                                    EQU  00000342   3589*
_SQ418                                    EQU  00000344   3590*
_SQ419                                    EQU  00000346   3591*
_SQ420                                    EQU  00000348   3592*
_SQ421                                    EQU  0000034A   3593*
_SQ422                                    EQU  0000034C   3594*
_SQ423                                    EQU  0000034E   3595*
_SQ424                                    EQU  00000350   3596*
_SQ425                                    EQU  00000352   3597*
_SQ426                                    EQU  00000354   3598*
_SQ427                                    EQU  00000356   3599*
_SQ428                                    EQU  00000358   3600*
_SQ429                                    EQU  0000035A   3601*
_SQ430                                    EQU  0000035C   3602*
_SQ431                                    EQU  0000035E   3603*
_SQ432                                    EQU  00000360   3604*
_SQ433                                    EQU  00000362   3605*
_SQ434                                    EQU  00000364   3606*
_SQ435                                    EQU  00000366   3607*
_SQ436                                    EQU  00000368   3608*
_SQ437                                    EQU  0000036A   3609*
_SQ438                                    EQU  0000036C   3610*
_SQ439                                    EQU  0000036E   3611*
_SQ440                                    EQU  00000370   3612*
_SQ441                                    EQU  00000372   3613*
_SQ442                                    EQU  00000374   3614*
_SQ443                                    EQU  00000376   3615*
_SQ444                                    EQU  00000378   3616*
_SQ445                                    EQU  0000037A   3617*
_SQ446                                    EQU  0000037C   3618*
_SQ447                                    EQU  0000037E   3619*
_SQ448                                    EQU  00000380   3620*
_SQ449                                    EQU  00000382   3621*
_SQ450                                    EQU  00000384   3622*
_SQ451                                    EQU  00000386   3623*
_SQ452                                    EQU  00000388   3624*
_SQ453                                    EQU  0000038A   3625*
_SQ454                                    EQU  0000038C   3626*
_SQ455                                    EQU  0000038E   3627*
_SQ456                                    EQU  00000390   3628*
_SQ457                                    EQU  00000392   3629*
_SQ458                                    EQU  00000394   3630*
_SQ459                                    EQU  00000396   3631*
_SQ460                                    EQU  00000398   3632*
_SQ461                                    EQU  0000039A   3633*
_SQ462                                    EQU  0000039C   3634*
_SQ463                                    EQU  0000039E   3635*
_SQ464                                    EQU  000003A0   3636*
_SQ465                                    EQU  000003A2   3637*
_SQ466                                    EQU  000003A4   3638*
_SQ467                                    EQU  000003A6   3639*
_SQ468                                    EQU  000003A8   3640*
_SQ469                                    EQU  000003AA   3641*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    83

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_SQ470                                    EQU  000003AC   3642*
_SQ471                                    EQU  000003AE   3643*
_SQ472                                    EQU  000003B0   3644*
_SQ473                                    EQU  000003B2   3645*
_SQ474                                    EQU  000003B4   3646*
_SQ475                                    EQU  000003B6   3647*
_SQ476                                    EQU  000003B8   3648*
_SQ477                                    EQU  000003BA   3649*
_SQ478                                    EQU  000003BC   3650*
_SQ479                                    EQU  000003BE   3651*
_SQ480                                    EQU  000003C0   3652*
_SQ481                                    EQU  000003C2   3653*
_SQ482                                    EQU  000003C4   3654*
_SQ483                                    EQU  000003C6   3655*
_SQ484                                    EQU  000003C8   3656*
_SQ485                                    EQU  000003CA   3657*
_SQ486                                    EQU  000003CC   3658*
_SQ487                                    EQU  000003CE   3659*
_SQ488                                    EQU  000003D0   3660*
_SQ489                                    EQU  000003D2   3661*
_SQ490                                    EQU  000003D4   3662*
_SQ491                                    EQU  000003D6   3663*
_SQ492                                    EQU  000003D8   3664*
_SQ493                                    EQU  000003DA   3665*
_SQ494                                    EQU  000003DC   3666*
_SQ495                                    EQU  000003DE   3667*
_SQ496                                    EQU  000003E0   3668*
_SQ497                                    EQU  000003E2   3669*
_SQ498                                    EQU  000003E4   3670*
_SQ499                                    EQU  000003E6   3671*
_SQ500                                    EQU  000003E8   3673*
_SQ501                                    EQU  000003EA   3674*
_SQ502                                    EQU  000003EC   3675*
_SQ503                                    EQU  000003EE   3676*
_SQ504                                    EQU  000003F0   3677*
_SQ505                                    EQU  000003F2   3678*
_SQ506                                    EQU  000003F4   3679*
_SQ507                                    EQU  000003F6   3680*
_SQ508                                    EQU  000003F8   3681*
_SQ509                                    EQU  000003FA   3682*
_SQ510                                    EQU  000003FC   3683*
_SQ511                                    EQU  000003FE   3684*
_SQ512                                    EQU  00000400   3685*
_SQ513                                    EQU  00000402   3686*
_SQ514                                    EQU  00000404   3687*
_SQ515                                    EQU  00000406   3688*
_SQ516                                    EQU  00000408   3689*
_SQ517                                    EQU  0000040A   3690*
_SQ518                                    EQU  0000040C   3691*
_SQ519                                    EQU  0000040E   3692*
_SQ520                                    EQU  00000410   3693*
_SQ521                                    EQU  00000412   3694*
_SQ522                                    EQU  00000414   3695*
_SQ523                                    EQU  00000416   3696*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    84

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_SQ524                                    EQU  00000418   3697*
_SQ525                                    EQU  0000041A   3698*
_SQ526                                    EQU  0000041C   3699*
_SQ527                                    EQU  0000041E   3700*
_SQ528                                    EQU  00000420   3701*
_SQ529                                    EQU  00000422   3702*
_SQ530                                    EQU  00000424   3703*
_SQ531                                    EQU  00000426   3704*
_SQ532                                    EQU  00000428   3705*
_SQ533                                    EQU  0000042A   3706*
_SQ534                                    EQU  0000042C   3707*
_SQ535                                    EQU  0000042E   3708*
_SQ536                                    EQU  00000430   3709*
_SQ537                                    EQU  00000432   3710*
_SQ538                                    EQU  00000434   3711*
_SQ539                                    EQU  00000436   3712*
_SQ540                                    EQU  00000438   3713*
_SQ541                                    EQU  0000043A   3714*
_SQ542                                    EQU  0000043C   3715*
_SQ543                                    EQU  0000043E   3716*
_SQ544                                    EQU  00000440   3717*
_SQ545                                    EQU  00000442   3718*
_SQ546                                    EQU  00000444   3719*
_SQ547                                    EQU  00000446   3720*
_SQ548                                    EQU  00000448   3721*
_SQ549                                    EQU  0000044A   3722*
_SQ550                                    EQU  0000044C   3723*
_SQ551                                    EQU  0000044E   3724*
_SQ552                                    EQU  00000450   3725*
_SQ553                                    EQU  00000452   3726*
_SQ554                                    EQU  00000454   3727*
_SQ555                                    EQU  00000456   3728*
_SQ556                                    EQU  00000458   3729*
_SQ557                                    EQU  0000045A   3730*
_SQ558                                    EQU  0000045C   3731*
_SQ559                                    EQU  0000045E   3732*
_SQ560                                    EQU  00000460   3733*
_SQ561                                    EQU  00000462   3734*
_SQ562                                    EQU  00000464   3735*
_SQ563                                    EQU  00000466   3736*
_SQ564                                    EQU  00000468   3737*
_SQ565                                    EQU  0000046A   3738*
_SQ566                                    EQU  0000046C   3739*
_SQ567                                    EQU  0000046E   3740*
_SQ568                                    EQU  00000470   3741*
_SQ569                                    EQU  00000472   3742*
_SQ570                                    EQU  00000474   3743*
_SQ571                                    EQU  00000476   3744*
_SQ572                                    EQU  00000478   3745*
_SQ573                                    EQU  0000047A   3746*
_SQ574                                    EQU  0000047C   3747*
_SQ575                                    EQU  0000047E   3748*
_SQ576                                    EQU  00000480   3749*
_SQ577                                    EQU  00000482   3750*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    85

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_SQ578                                    EQU  00000484   3751*
_SQ579                                    EQU  00000486   3752*
_SQ580                                    EQU  00000488   3753*
_SQ581                                    EQU  0000048A   3754*
_SQ582                                    EQU  0000048C   3755*
_SQ583                                    EQU  0000048E   3756*
_SQ584                                    EQU  00000490   3757*
_SQ585                                    EQU  00000492   3758*
_SQ586                                    EQU  00000494   3759*
_SQ587                                    EQU  00000496   3760*
_SQ588                                    EQU  00000498   3761*
_SQ589                                    EQU  0000049A   3762*
_SQ590                                    EQU  0000049C   3763*
_SQ591                                    EQU  0000049E   3764*
_SQ592                                    EQU  000004A0   3765*
_SQ593                                    EQU  000004A2   3766*
_SQ594                                    EQU  000004A4   3767*
_SQ595                                    EQU  000004A6   3768*
_SQ596                                    EQU  000004A8   3769*
_SQ597                                    EQU  000004AA   3770*
_SQ598                                    EQU  000004AC   3771*
_SQ599                                    EQU  000004AE   3772*
_SQ600                                    EQU  000004B0   3774*
_SQ601                                    EQU  000004B2   3775*
_SQ602                                    EQU  000004B4   3776*
_SQ603                                    EQU  000004B6   3777*
_SQ604                                    EQU  000004B8   3778*
_SQ605                                    EQU  000004BA   3779*
_SQ606                                    EQU  000004BC   3780*
_SQ607                                    EQU  000004BE   3781*
_SQ608                                    EQU  000004C0   3782*
_SQ609                                    EQU  000004C2   3783*
_SQ610                                    EQU  000004C4   3784*
_SQ611                                    EQU  000004C6   3785*
_SQ612                                    EQU  000004C8   3786*
_SQ613                                    EQU  000004CA   3787*
_SQ614                                    EQU  000004CC   3788*
_SQ615                                    EQU  000004CE   3789*
_SQ616                                    EQU  000004D0   3790*
_SQ617                                    EQU  000004D2   3791*
_SQ618                                    EQU  000004D4   3792*
_SQ619                                    EQU  000004D6   3793*
_SQ620                                    EQU  000004D8   3794*
_SQ621                                    EQU  000004DA   3795*
_SQ622                                    EQU  000004DC   3796*
_SQ623                                    EQU  000004DE   3797*
_SQ624                                    EQU  000004E0   3798*
_SQ625                                    EQU  000004E2   3799*
_SQ626                                    EQU  000004E4   3800*
_SQ627                                    EQU  000004E6   3801*
_SQ628                                    EQU  000004E8   3802*
_SQ629                                    EQU  000004EA   3803*
_SQ630                                    EQU  000004EC   3804*
_SQ631                                    EQU  000004EE   3805*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    86

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_SQ632                                    EQU  000004F0   3806*
_SQ633                                    EQU  000004F2   3807*
_SQ634                                    EQU  000004F4   3808*
_SQ635                                    EQU  000004F6   3809*
_SQ636                                    EQU  000004F8   3810*
_SQ637                                    EQU  000004FA   3811*
_SQ638                                    EQU  000004FC   3812*
_SQ639                                    EQU  000004FE   3813*
_SQ640                                    EQU  00000500   3814*
_SQ641                                    EQU  00000502   3815*
_SQ642                                    EQU  00000504   3816*
_SQ643                                    EQU  00000506   3817*
_SQ644                                    EQU  00000508   3818*
_SQ645                                    EQU  0000050A   3819*
_SQ646                                    EQU  0000050C   3820*
_SQ647                                    EQU  0000050E   3821*
_SQ648                                    EQU  00000510   3822*
_SQ649                                    EQU  00000512   3823*
_SQ650                                    EQU  00000514   3824*
_SQ651                                    EQU  00000516   3825*
_SQ652                                    EQU  00000518   3826*
_SQ653                                    EQU  0000051A   3827*
_SQ654                                    EQU  0000051C   3828*
_SQ655                                    EQU  0000051E   3829*
_SQ656                                    EQU  00000520   3830*
_SQ657                                    EQU  00000522   3831*
_SQ658                                    EQU  00000524   3832*
_SQ659                                    EQU  00000526   3833*
_SQ660                                    EQU  00000528   3834*
_SQ661                                    EQU  0000052A   3835*
_SQ662                                    EQU  0000052C   3836*
_SQ663                                    EQU  0000052E   3837*
_SQ664                                    EQU  00000530   3838*
_SQ665                                    EQU  00000532   3839*
_SQ666                                    EQU  00000534   3840*
_SQ667                                    EQU  00000536   3841*
_SQ668                                    EQU  00000538   3842*
_SQ669                                    EQU  0000053A   3843*
_SQ670                                    EQU  0000053C   3844*
_SQ671                                    EQU  0000053E   3845*
_SQ672                                    EQU  00000540   3846*
_SQ673                                    EQU  00000542   3847*
_SQ674                                    EQU  00000544   3848*
_SQ675                                    EQU  00000546   3849*
_SQ676                                    EQU  00000548   3850*
_SQ677                                    EQU  0000054A   3851*
_SQ678                                    EQU  0000054C   3852*
_SQ679                                    EQU  0000054E   3853*
_SQ680                                    EQU  00000550   3854*
_SQ681                                    EQU  00000552   3855*
_SQ682                                    EQU  00000554   3856*
_SQ683                                    EQU  00000556   3857*
_SQ684                                    EQU  00000558   3858*
_SQ685                                    EQU  0000055A   3859*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    87

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_SQ686                                    EQU  0000055C   3860*
_SQ687                                    EQU  0000055E   3861*
_SQ688                                    EQU  00000560   3862*
_SQ689                                    EQU  00000562   3863*
_SQ690                                    EQU  00000564   3864*
_SQ691                                    EQU  00000566   3865*
_SQ692                                    EQU  00000568   3866*
_SQ693                                    EQU  0000056A   3867*
_SQ694                                    EQU  0000056C   3868*
_SQ695                                    EQU  0000056E   3869*
_SQ696                                    EQU  00000570   3870*
_SQ697                                    EQU  00000572   3871*
_SQ698                                    EQU  00000574   3872*
_SQ699                                    EQU  00000576   3873*
_SQCB200                                  EQU  00000000   3095*
_SQCB201                                  EQU  00000002   3096*
_SQCB202                                  EQU  00000004   3097*
_SQCB203                                  EQU  00000006   3098*
_SQCB204                                  EQU  00000008   3099*
_SQCB205                                  EQU  0000000A   3100*
_SQCB206                                  EQU  0000000C   3101*
_SQCB207                                  EQU  0000000E   3102*
_SQCB208                                  EQU  00000010   3103*
_SQCB209                                  EQU  00000012   3104*
_SQCB210                                  EQU  00000014   3105*
_SQCB211                                  EQU  00000016   3106*
_SQCB212                                  EQU  00000018   3107*
_SQCB213                                  EQU  0000001A   3108*
_SQCB214                                  EQU  0000001C   3109*
_SQCB215                                  EQU  0000001E   3110*
_SQCB216                                  EQU  00000020   3111*
_SQCB217                                  EQU  00000022   3112*
_SQCB218                                  EQU  00000024   3113*
_SQCB219                                  EQU  00000026   3114*
_SQCB220                                  EQU  00000028   3115*
_SQCB221                                  EQU  0000002A   3116*
_SQCB222                                  EQU  0000002C   3117*
_SQCB223                                  EQU  0000002E   3118*
_SQCB224                                  EQU  00000030   3119*
_SQCB225                                  EQU  00000032   3120*
_SQCB226                                  EQU  00000034   3121*
_SQCB227                                  EQU  00000036   3122*
_SQCB228                                  EQU  00000038   3123*
_SQCB229                                  EQU  0000003A   3124*
_SQCB230                                  EQU  0000003C   3125*
_SQCB231                                  EQU  0000003E   3126*
_SQCB232                                  EQU  00000040   3127*
_SQCB233                                  EQU  00000042   3128*
_SQCB234                                  EQU  00000044   3129*
_SQCB235                                  EQU  00000046   3130*
_SQCB236                                  EQU  00000048   3131*
_SQCB237                                  EQU  0000004A   3132*
_SQCB238                                  EQU  0000004C   3133*
_SQCB239                                  EQU  0000004E   3134*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    88

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_SQCB240                                  EQU  00000050   3135*
_SQCB241                                  EQU  00000052   3136*
_SQCB242                                  EQU  00000054   3137*
_SQCB243                                  EQU  00000056   3138*
_SQCB244                                  EQU  00000058   3139*
_SQCB245                                  EQU  0000005A   3140*
_SQCB246                                  EQU  0000005C   3141*
_SQCB247                                  EQU  0000005E   3142*
_SQCB248                                  EQU  00000060   3143*
_SQCB249                                  EQU  00000062   3144*
_SQCB250                                  EQU  00000064   3145*
_SQCB251                                  EQU  00000066   3146*
_SQCB252                                  EQU  00000068   3147*
_SQCB253                                  EQU  0000006A   3148*
_SQCB254                                  EQU  0000006C   3149*
_SQCB255                                  EQU  0000006E   3150*
_SQCB256                                  EQU  00000070   3151*
_SQCB257                                  EQU  00000072   3152*
_SQCB258                                  EQU  00000074   3153*
_SQCB259                                  EQU  00000076   3154*
_SQCB260                                  EQU  00000078   3155*
_SQCB261                                  EQU  0000007A   3156*
_SQCB262                                  EQU  0000007C   3157*
_SQCB263                                  EQU  0000007E   3158*
_SQCB264                                  EQU  00000080   3159*
_SQCB265                                  EQU  00000082   3160*
_SQCB266                                  EQU  00000084   3161*
_SQCB267                                  EQU  00000086   3162*
_SQCB268                                  EQU  00000088   3163*
_SQCB269                                  EQU  0000008A   3164*
_SQ_CB_DAT1                               EQU  00000046   3091*
_SQ_ERR_END                               EQU  0000FF00   3040* 4543  4692  4789  4888  4988  5087  5186  5277  5368  5448  5538 
                                                          5643  5737  5845  5936  6045  6109  6175  6306  6589  6666  6741  6815 
                                                          6890  6966  7042  7118  7194  7270  7345  7421  7497 
_SQ_NML_COD                               EQU  00000000   3038* 4486  4578  4671  4769  4869  4969  5068  5167  5258  5348  5429 
                                                          5518  5622  5718  5824  5915  6024  6094  6160  6225  6288  6353  6571 
                                                          6649  6724  6798  6873  6949  7025  7101  7177  7253  7328  7404  7480 
_SQ_NML_END                               EQU  00000055   3039* 4489  6511 
_START_ACK_COD                            EQU  00004321    213*
_START_REQ_COD                            EQU  00009876    212*
_STBCR                                    IMPT 00000000    350 
_STBCR2                                   IMPT 00000000    353 
_STWU_CHG                        P        EXPT 00000D0A   2987  6758*
_STWU_CODE                                IMPT 00000000   2930  6769  6770 
_STWU_CODE_END                            IMPT 00000000   2931  6769 
_STW_CHG                         P        EXPT 00000CA6   2988  6684*
_STW_CMD                                  EQU  00000024   3075*
_STW_CODE                                 IMPT 00000000   2932  6695  6696 
_STW_CODE_END                             IMPT 00000000   2933  6695 
_STW_SUB                                  IMPT 00000000   2865 
_ST_C80                          P             00000744   5562  5642*
_ST_CHG                          P        EXPT 000006AE   2971  5555*
_ST_CHG_EX                       P             00000746   5624  5645*
_ST_CODE                                  IMPT 00000000   2896  5564  5565 
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    89

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_ST_CODE_END                              IMPT 00000000   2897  5564 
_SUB_CHG                         P        EXPT 00000F62   2994  7212*
_SUB_CMD                                  EQU  00000048   3084*
_SUB_CODE                                 IMPT 00000000   2950  7223  7224 
_SUB_CODE_END                             IMPT 00000000   2951  7223 
_SUB_SUB                                  IMPT 00000000   2874 
_TCNT0                                    IMPT 00000000    366 
_TCNT1                                    IMPT 00000000    369 
_TCNT2                                    IMPT 00000000    372 
_TCOR0                                    IMPT 00000000    365 
_TCOR1                                    IMPT 00000000    368 
_TCOR2                                    IMPT 00000000    371 
_TCPR2                                    IMPT 00000000    374 
_TCR0                                     IMPT 00000000    367 
_TCR1                                     IMPT 00000000    370 
_TCR2                                     IMPT 00000000    373 
_TEA                                      IMPT 00000000    288 
_TMR_CMD                                  EQU  00000010   3070*
_TOCR                                     IMPT 00000000    363 
_TRA                                      IMPT 00000000    293 
_TSTR                                     IMPT 00000000    364 
_TTB                                      IMPT 00000000    287 
_VUPCHECK_EQU                             EQU  11AB3739     98*
_WCR1                                     IMPT 00000000    314 
_WCR2                                     IMPT 00000000    315 
_WCR3                                     IMPT 00000000    316 
_WCTR_CHG                        P        EXPT 000009F2   2976  6128*
_WCTR_CODE                                IMPT 00000000   2920  6139  6140 
_WCTR_CODE_END                            IMPT 00000000   2921  6139 
_WCTR_SUB                                 IMPT 00000000   2861 
_WNNRG_CHG                       P        EXPT 00000B98   2983  6466*
_WNNRG_CODE                               IMPT 00000000   2912  6471  6472 
_WNNRG_CODE_END                           IMPT 00000000   2913  6471 
_WNRG_CHG                        P        EXPT 00000B78   2982  6436*
_WNRG_CODE                                IMPT 00000000   2910  6441  6442 
_WNRG_CODE_END                            IMPT 00000000   2911  6441 
_WSC_C80                         P             000007CC   5668  5736*
_WSC_CHG                         P        EXPT 0000074E   2972  5661*
_WSC_CHG_EX                      P             000007CE   5720  5739*
_WSC_CMD                                  EQU  00000018   3072*
_WSC_CODE                                 IMPT 00000000   2922  5670  5671 
_WSC_CODE_END                             IMPT 00000000   2923  5670 
_WSC_SUB                                  IMPT 00000000   2862 
_WSR_CHG                         P        EXPT 00000A3E   2977  6192*
_WSR_CMD                                  EQU  0000001C   3073*
_WSR_CODE                                 IMPT 00000000   2924  6197  6198 
_WSR_CODE_END                             IMPT 00000000   2925  6197 
_WSR_SUB                                  IMPT 00000000   2863 
_WTCNT                                    IMPT 00000000    351 
_WTCSR                                    IMPT 00000000    352 
_WTMR_CHG                        P        EXPT 000009A6   2975  6062*
_WTMR_CODE                                IMPT 00000000   2918  6073  6074 
_WTMR_CODE_END                            IMPT 00000000   2919  6073 
_WTMR_SUB                                 IMPT 00000000   2860 
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    90

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_XORW_CHG                        P        EXPT 0000108E   2997  7439*
_XORW_CMD                                 EQU  00000040   3082*
_XORW_CODE                                IMPT 00000000   2946  7450  7451 
_XORW_CODE_END                            IMPT 00000000   2947  7450 
_XORW_SUB                                 IMPT 00000000   2872 
_data_init2_timer                         IMPT 00000000   2807 
_mem_chk_flg                              IMPT 00000000   2809 
_sram_top                                 IMPT 00000000   2805 
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/13/20 18:20:50                                                  PAGE    91

*** SECTION DATA LIST

SECTION                          ATTRIBUTE    SIZE             START

P                                REL-CODE    000001112        
