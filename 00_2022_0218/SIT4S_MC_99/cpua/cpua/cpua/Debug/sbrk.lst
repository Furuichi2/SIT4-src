SH SERIES C/C++ Compiler (V.9.04.01.002)                                                         13-Dec-2020 18:20:44  PAGE    1

************ OBJECT LISTING ************

FILE NAME: D:\SIT4S_MC_99\cpua\cpua\cpua\sbrk.c

SCT OFFSET   CODE       C LABEL     INSTRUCTION OPERAND    COMMENT

               sbrk.c          1    /***********************************************************************/
               sbrk.c          2    /*                                                                     */
               sbrk.c          3    /*  FILE        :sbrk.c                                                */
               sbrk.c          4    /*  DATE        :Mon, Jun 24, 2002                                     */
               sbrk.c          5    /*  DESCRIPTION :Program of sbrk                                       */
               sbrk.c          6    /*  CPU TYPE    :SH7750                                                */
               sbrk.c          7    /*                                                                     */
               sbrk.c          8    /*  This file is generated by Hitachi Project Generator (Ver.1.1).     */
               sbrk.c          9    /*                                                                     */
               sbrk.c         10    /***********************************************************************/
               sbrk.c         11                      
               sbrk.c         12    
               sbrk.c         13    
               sbrk.c         14    #include <stddef.h>
             stddef.h          1    /***************************************************************************/
             stddef.h          2    /* Copyright (C) 1992 (1995 - 2010) Renesas Electronics Corporation and    */
             stddef.h          3    /* Renesas Solutions Corp. All Rights Reserved.                            */
             stddef.h          4    /***************************************************************************/
             stddef.h          5    /***********************************************************************/
             stddef.h          6    /* SPEC;                                                               */
             stddef.h          7    /*  NAME = stddef :                                                    */
             stddef.h          8    /*                                                                     */
             stddef.h          9    /*  FUNC = this module do the following functions                      */
             stddef.h         10    /*                                                                     */
             stddef.h         11    /*  CLAS = UNIT;                                                       */
             stddef.h         12    /*                                                                     */
             stddef.h         13    /* END;                                                                */
             stddef.h         14    /***********************************************************************/
             stddef.h         15    #ifndef _STDDEF
             stddef.h         16    #define _STDDEF
             stddef.h         17    
             stddef.h         18    #ifndef _PTRDIFF_T
             stddef.h         19    #define _PTRDIFF_T
             stddef.h         20    typedef int ptrdiff_t;
             stddef.h         21    #endif
             stddef.h         22    
             stddef.h         23    #ifndef _SIZE_T
             stddef.h         24    #define _SIZE_T
             stddef.h         25    typedef unsigned long size_t;
             stddef.h         26    #endif
             stddef.h         27    
             stddef.h         28    #ifndef  NULL
             stddef.h         29    #ifdef  __cplusplus
             stddef.h         30 X  #define  NULL           (0)
             stddef.h         31    #else
             stddef.h         32    #define  NULL           ((void *)0)
             stddef.h         33    #endif
             stddef.h         34    #endif
             stddef.h         35    
             stddef.h         36    #ifndef  offsetof
             stddef.h         37    #ifdef __cplusplus
             stddef.h         38 X  #define offsetof(t, memb) ((size_t)(&(((t *)0)->memb)))
             stddef.h         39    #else
             stddef.h         40  E #define offsetof(type,id) ((char *)(&(((type *)NULL)->id))  -                               (char *)((type *)NULL))
             stddef.h         41    #endif
             stddef.h         42    #endif
             stddef.h         43    
             stddef.h         44    #ifndef  errno
             stddef.h         45    #define  errno          _errno
             stddef.h         46    #endif
             stddef.h         47    
             stddef.h         48    #endif
               sbrk.c         15    #include <stdio.h>
              stdio.h          1    /***************************************************************************/
              stdio.h          2    /* Copyright (C) 1992 (1995 - 2011) Renesas Electronics Corporation and    */
              stdio.h          3    /* Renesas Solutions Corp. All Rights Reserved.                            */
              stdio.h          4    /***************************************************************************/
              stdio.h          5    /***********************************************************************/
              stdio.h          6    /* SPEC;                                                               */
              stdio.h          7    /*  NAME = stdio : header file for standard I/O function ;             */
              stdio.h          8    /*                                                                     */
              stdio.h          9    /*  FUNC = this header file do the following functions;                */
              stdio.h         10    /*         (1) file entry table define;                                */
              stdio.h         11    /*         (2) I/O macro define;                                       */
              stdio.h         12    /*         (3) symbol define;                                          */
              stdio.h         13    /*  CLAS = UNIT;                                                       */
              stdio.h         14    /*                                                                     */
              stdio.h         15    /* END;                                                                */
              stdio.h         16    /***********************************************************************/
              stdio.h         17    #ifndef _STDIO
              stdio.h         18    #define _STDIO
              stdio.h         19    
              stdio.h         20    #include <stddef.h>
              stdio.h         21    
              stdio.h         22    #ifdef __cplusplus
              stdio.h         23 X  extern "C" {
              stdio.h         24    #endif
              stdio.h         25    
              stdio.h         26    #ifndef _NFILE
              stdio.h         27    #define _NFILE _nfiles
              stdio.h         28    #endif
              stdio.h         29    
              stdio.h         30    #define FOPEN_MAX _nfiles
              stdio.h         31    
              stdio.h         32    extern const int _nfiles;                   
              stdio.h         33    #pragma pack 4
              stdio.h         34    extern struct _iobuf {
              stdio.h         35           unsigned char *_bufptr;          /* buffer pointer              */
              stdio.h         36                    long  _bufcnt;          /* buffer count                */
              stdio.h         37           unsigned char *_bufbase;         /* buffer base pointer         */
              stdio.h         38                    long  _buflen;          /* buffer length               */
              stdio.h         39                    char  _ioflag1;         /* I/O control flag 1          */
              stdio.h         40                    char  _ioflag2;         /* I/O control flag 2          */
              stdio.h         41                    char  _iofd;
              stdio.h         42    }  _iob[];
              stdio.h         43    #pragma unpack
              stdio.h         44    
              stdio.h         45    #ifndef _REENTRANT
              stdio.h         46    extern volatile int         _errno;
              stdio.h         47    #else
              stdio.h         48 X  extern  int *errno_addr(void);
              stdio.h         49 X  #define _errno (*errno_addr())
              stdio.h         50    #endif
              stdio.h         51    
              stdio.h         52    typedef struct _iobuf FILE;             /* define FILE of file-stream    */
              stdio.h         53    
              stdio.h         54                                            /* define function of prototype  */
              stdio.h         55    extern int     _fillbuf(FILE*);
              stdio.h         56    extern int     _flshbuf(int,FILE*);
              stdio.h         57    extern void    _putcsub(FILE*);
              stdio.h         58    extern int     fclose(FILE *);
              stdio.h         59    extern int     fflush(FILE *);
              stdio.h         60    extern FILE   *fopen(const char *, const char *);
              stdio.h         61    extern FILE   *freopen(const char *, const char *, FILE *);
              stdio.h         62    extern void    setbuf(FILE *, char *);
              stdio.h         63    extern int     setvbuf(FILE *, char *, int, size_t);
              stdio.h         64    extern int     fprintf(FILE *, const char *, ...);
              stdio.h         65    extern int     fscanf(FILE *, const char *, ...);
              stdio.h         66    extern int     printf(const char * ,...);
              stdio.h         67    extern int     scanf(const char * ,...);
              stdio.h         68    extern int     sprintf(char *, const char * ,...);
              stdio.h         69    extern int     sscanf(const char *, const char * ,...);
              stdio.h         70    extern int     vfprintf(FILE *, const char *, char *);
              stdio.h         71    extern int     vprintf(const char *, char *);
              stdio.h         72    extern int     vsprintf(char *, const char *, char *);
              stdio.h         73    extern int     fgetc(FILE *);
              stdio.h         74    extern char   *fgets(char *, int, FILE *);
              stdio.h         75    extern int     fputc(int , FILE *);
              stdio.h         76    extern int     fputs(const char *, FILE *);
              stdio.h         77    extern int     getc(FILE *);
              stdio.h         78    extern int     getchar(void);
              stdio.h         79    extern char   *gets(char *);
              stdio.h         80    extern int     putc(int, FILE *);
              stdio.h         81    extern int     putchar(int);
              stdio.h         82    extern int     puts(const char *);
              stdio.h         83    extern int     ungetc(int, FILE *);
              stdio.h         84    extern size_t  fread(void *, size_t, size_t, FILE *);
              stdio.h         85    extern size_t  fwrite(const void *, size_t, size_t, FILE *);
              stdio.h         86    extern int     fseek(FILE *, long int, int);
              stdio.h         87    extern long    ftell(FILE *);
              stdio.h         88    extern void    rewind(FILE *);
              stdio.h         89    extern void    clearerr(FILE *);
              stdio.h         90    extern int     feof(FILE *);
              stdio.h         91    extern int     ferror(FILE *);
              stdio.h         92    extern void    perror(const char *);
              stdio.h         93    #ifdef __cplusplus
              stdio.h         94 X  }
              stdio.h         95    #endif
              stdio.h         96    
              stdio.h         97    #define _IOFBF 1                        /* define _IOFBF of full buffering */
              stdio.h         98    #define _IOLBF 2                        /* define _IOLBF of line buffering */
              stdio.h         99    #define _IONBF 3                        /* define _IONBF of non buffering  */
              stdio.h        100    
              stdio.h        101    #define SEEK_SET 0                      /* allocate top position */
              stdio.h        102    #define SEEK_CUR 1                      /* allocate current position */
              stdio.h        103    #define SEEK_END 2                      /* allocate bottom position */
              stdio.h        104    
              stdio.h        105    #define BUFSIZ 512                      /* default buffer size */
              stdio.h        106    
              stdio.h        107                                            /* error number define */
              stdio.h        108    #ifndef EBADF
              stdio.h        109    #define EBADF  1302                     /* I/O operation error */
              stdio.h        110    #endif
              stdio.h        111    
              stdio.h        112    #ifndef PTRERR
              stdio.h        113    #define PTRERR 1106                     /* fp null */
              stdio.h        114    #endif
              stdio.h        115    
              stdio.h        116    #ifndef ECSPEC
              stdio.h        117    #define ECSPEC 1304                     /* format err */
              stdio.h        118    #endif
              stdio.h        119    
              stdio.h        120    #ifndef NOTOPN
              stdio.h        121    #define NOTOPN 1300                     /* file not open */
              stdio.h        122    #endif
              stdio.h        123    
              stdio.h        124    #ifndef EMALRESM
              stdio.h        125    #define EMALRESM 2100                   /* malloc semaphore reserve error */
              stdio.h        126    #endif
              stdio.h        127    #ifndef ETOKRESM
              stdio.h        128    #define ETOKRESM 2110                   /* strtok semaphore reserve error */
              stdio.h        129    #endif
              stdio.h        130    #ifndef EIOBRESM
              stdio.h        131    #define EIOBRESM 2120                   /* _iob   semaphore reserve error */
              stdio.h        132    #endif
              stdio.h        133    #ifndef EMALFRSM
              stdio.h        134    #define EMALFRSM 2101                   /* malloc semaphore free error    */
              stdio.h        135    #endif
              stdio.h        136    #ifndef ETOKFRSM
              stdio.h        137    #define ETOKFRSM 2111                   /* strtok semaphore free error    */
              stdio.h        138    #endif
              stdio.h        139    #ifndef EIOBFRSM
              stdio.h        140    #define EIOBFRSM 2121                   /* _iob   semaphore free error    */
              stdio.h        141    #endif
              stdio.h        142    
              stdio.h        143                                            /* I/O flags for _ioflag1      */
              stdio.h        144    #define _IOREAD    1                    /* only read or update read    */
              stdio.h        145    #define _IOWRITE   2                    /* only write or update write  */
              stdio.h        146    #define _IORW      4                    /* update file                 */
              stdio.h        147    #define _IOUNBUF   8                    /* unbffering I/O              */
              stdio.h        148    #define _IOBGBUF  16                    /* automatic buffer allocate   */
              stdio.h        149    #define _IOEOF    32                    /* end of file                 */
              stdio.h        150    #define _IOERR    64                    /* I/O error                   */
              stdio.h        151    #define _IOBIN   128                    /* binaly file                 */
              stdio.h        152    #define _UNGTC     1                    /* ungetc issued (_ioflag2)    */
              stdio.h        153    #define _IOLINBUF  2                    /* line buffering              */
              stdio.h        154    
              stdio.h        155    #define EOF     (-1)
              stdio.h        156    #define _EOL    (0X0A)                  /* end of line                 */
              stdio.h        157    
              stdio.h        158    #define stdin       (&_iob[0])          /* standard input file */
              stdio.h        159    #define stdout      (&_iob[1])          /* standard output file */
              stdio.h        160    #define stderr      (&_iob[2])          /* standard error output file */
              stdio.h        161    
              stdio.h        162    #ifndef _REENTRANT
              stdio.h        163  E #define getc(fp) ((fp)->_ioflag2&=~_UNGTC,(((fp)->_ioflag1&(_IORW|_IOWRITE))== (_IORW|_IOWRITE))&&(fp)->_bufcnt==(fp)->_buflen?(_fillbuf(fp)): --(fp)->_bufcnt>=0 ?((int)*(fp)->_bufptr++):_fillbuf(fp))
              stdio.h        164  E #define putc(x,fp) (((((fp)->_ioflag1&_IORW)!=0&&((fp)->_ioflag1&_IOWRITE)==0) ?_putcsub(fp):(void)0),(((fp)->_bufcnt==0||(fp)->_buflen==1 ||(((fp)->_ioflag2&_IOLINBUF)!=0&&(x)==_EOL)) ?_flshbuf((int)(x),(fp)): (((fp)->_bufcnt--),((int)(*(fp)->_bufptr++=(unsigned char)(x))))))
              stdio.h        165    
              stdio.h        166    #define getchar()   getc(stdin)
              stdio.h        167    #define putchar(x)  putc(x,stdout)
              stdio.h        168    
              stdio.h        169    #define feof(fp)    ((fp)->_ioflag1&_IOEOF)
              stdio.h        170    #define ferror(fp)  ((fp)->_ioflag1&_IOERR)
              stdio.h        171    #define clearerr(fp) ((void)((fp)->_ioflag1&=~(_IOEOF|_IOERR)))
              stdio.h        172    #endif
              stdio.h        173    
              stdio.h        174    #endif
               sbrk.c         16    #include "sbrk.h"
               sbrk.h          1    /***********************************************************************/
               sbrk.h          2    /*                                                                     */
               sbrk.h          3    /*  FILE        :sbrk.h                                                */
               sbrk.h          4    /*  DATE        :Mon, Jun 24, 2002                                     */
               sbrk.h          5    /*  DESCRIPTION :Header file of sbrk file                              */
               sbrk.h          6    /*  CPU TYPE    :SH7750                                                */
               sbrk.h          7    /*                                                                     */
               sbrk.h          8    /*  This file is generated by Hitachi Project Generator (Ver.1.1).     */
               sbrk.h          9    /*                                                                     */
               sbrk.h         10    /***********************************************************************/
               sbrk.h         11    /* size of area managed by sbrk */
               sbrk.h         12    #define HEAPSIZE 0x400
               sbrk.c         17    
               sbrk.c         18    extern char *_s1ptr;
               sbrk.c         19    extern void srand(unsigned int);
               sbrk.c         20    
               sbrk.c         21    static  union  {
               sbrk.c         22          long  dummy ;        /* Dummy for 4-byte boundary          */
               sbrk.c         23  E       char heap[0x400];  
               sbrk.c         24                                 /*                           by sbrk */
               sbrk.c         25     }heap_area ;
               sbrk.c         26    
               sbrk.c         27    static  char  *brk=(char *)&heap_area;/* End address of area assigned     */
               sbrk.c         28    
               sbrk.c         29    /**************************************************************************/
               sbrk.c         30    /*     sbrk:Data write                                                      */
               sbrk.c         31    /*        Return value:Start address of the assigned area (Pass)            */
               sbrk.c         32    /*                     -1                 (Failure)                         */
               sbrk.c         33    /**************************************************************************/
               sbrk.c         34    char  *sbrk(unsigned long size)          /* Assigned area size      */
P   00000000              _sbrk:                           ; function: sbrk
                                                           ; frame size=4
    00000000 7FFC                   ADD         #-4,R15
               sbrk.c         35    {
               sbrk.c         36          char  *p;
               sbrk.c         37    
               sbrk.c         38  E       if(brk+size>heap_area.heap+0x400)  
    00000002 D112                   MOV.L       L16+4,R1   ; __$brk
    00000004 6212                   MOV.L       @R1,R2     ; brk
    00000006 324C                   ADD         R4,R2
    00000008 D611                   MOV.L       L16+8,R6   ; __$heap_area
    0000000A 911D                   MOV.W       L16,R1     ; H'0400
    0000000C 361C                   ADD         R1,R6
    0000000E 3266                   CMP/HI      R6,R2
    00000010 8B02                   BF          L12
               sbrk.c         39         return (char *)-1 ;
    00000012 E2FF                   MOV         #-1,R2     ; H'FFFFFFFF
    00000014 A006                   BRA         L13
    00000016 0009                   NOP
    00000018              L12:
               sbrk.c         40    
               sbrk.c         41          p=brk ;                /* Area assignment         */
    00000018 D10C                   MOV.L       L16+4,R1   ; __$brk
    0000001A 6612                   MOV.L       @R1,R6     ; brk
    0000001C 6263                   MOV         R6,R2
               sbrk.c         42          brk += size ;              /* End address update      */
    0000001E 364C                   ADD         R4,R6
    00000020 D10A                   MOV.L       L16+4,R1   ; __$brk
    00000022 2162                   MOV.L       R6,@R1     ; brk
    00000024              L13:
    00000024 6023                   MOV         R2,R0
    00000026 7F04                   ADD         #4,R15
               sbrk.c         43          return p ;
               sbrk.c         44    }
    00000028 000B                   RTS
    0000002A 0009                   NOP
               sbrk.c         45    
               sbrk.c         46    /****************************************************************************/
               sbrk.c         47    /* _INIT_OTHERLIB                                                           */
               sbrk.c         48    /*    Initialize C library Functions, if necessary.               */
               sbrk.c         49    /*    Define OTHERLIB on Assembler Option.                    */
               sbrk.c         50    /****************************************************************************/
               sbrk.c         51    
               sbrk.c         52    void _INIT_OTHERLIB(void)
    0000002C              __INIT_OTHERLIB:                 ; function: _INIT_OTHERLIB
                                                           ; frame size=4
    0000002C 4F22                   STS.L       PR,@-R15
               sbrk.c         53    {
               sbrk.c         54  E   _errno=0;
    0000002E E100                   MOV         #0,R1      ; H'00000000
    00000030 D708                   MOV.L       L16+12,R7  ; __errno
    00000032 2712                   MOV.L       R1,@R7     ; _errno
               sbrk.c         55      srand(1);
    00000034 E401                   MOV         #1,R4      ; H'00000001
    00000036 D308                   MOV.L       L16+16,R3  ; _srand
    00000038 430B                   JSR         @R3
    0000003A 0009                   NOP
               sbrk.c         56  E   _s1ptr=((void *)0);
    0000003C E100                   MOV         #0,R1      ; H'00000000
    0000003E D707                   MOV.L       L16+20,R7  ; __s1ptr
    00000040 2712                   MOV.L       R1,@R7     ; _s1ptr
    00000042 4F26                   LDS.L       @R15+,PR
               sbrk.c         57    }
    00000044 000B                   RTS
    00000046 0009                   NOP
    00000048              L16:
    00000048 0400                   .DATA.W     H'0400
    0000004A 00000002               .RES.W      1
    0000004C <00000000>             .DATA.L     __$brk
    00000050 <00000000>             .DATA.L     __$heap_area
    00000054 <00000000>             .DATA.L     __errno
    00000058 <00000000>             .DATA.L     _srand
    0000005C <00000000>             .DATA.L     __s1ptr
D   00000000              __$brk:                          ; static: __$brk
    00000000 <00000000>   
                                    .DATA.L     __$heap_area
B   00000000              __$heap_area:                    ; static: __$heap_area
    00000000 00000004               .RES.L      256
SH SERIES C/C++ Compiler (V.9.04.01.002)                                                         13-Dec-2020 18:20:44  PAGE    1


******** STATISTICS INFORMATION ********


********** ERROR INFORMATION ***********

NUMBER OF ERRORS:           0
NUMBER OF WARNINGS:         0




******* SOURCE LINE INFORMATION ********

COMPILED SOURCE LINE:       57



******* SECTION SIZE INFORMATION *******

PROGRAM  SECTION (P):                                 00000060 Byte(s)
CONSTANT SECTION (C):                                 00000000 Byte(s)
DATA     SECTION (D):                                 00000004 Byte(s)
BSS      SECTION (B):                                 00000400 Byte(s)

TOTAL PROGRAM  SECTION: 00000060 Byte(s)
TOTAL CONSTANT SECTION: 00000000 Byte(s)
TOTAL DATA     SECTION: 00000004 Byte(s)
TOTAL BSS      SECTION: 00000400 Byte(s)

    TOTAL PROGRAM SIZE: 00000464 Byte(s)



********** LABEL INFORMATION ***********

NUMBER OF EXTERNAL REFERENCE SYMBOLS:            3
NUMBER OF EXTERNAL DEFINITION SYMBOLS:           2
NUMBER OF INTERNAL/EXTERNAL SYMBOLS:             8



*** COMMAND PARAMETER ***

-subcommand=D:\SIT4S_MC_99\cpua\cpua\cpua\Debug\sbrk.shc
-cpu=sh4
-include="D:\SIT4S_MC_99\cpua\cpua\HW_SRC","D:\SIT4S_MC_99\comon","D:\SIT4S_MC_99\cpua\cpua","D:\SIT4S_MC_99\cpua\cpua\SEQ_SRC","D:\SIT4S_MC_99\cpua\cpua\cb_src\COMON","D:\SIT4S_MC_99\cpua\cpua\cb_src\K_SRC","D:\SIT4S_MC_99\comon\cpua_inc"
-object="D:\SIT4S_MC_99\cpua\cpua\cpua\Debug\sbrk.obj"
-debug
-listfile="D:\SIT4S_MC_99\cpua\cpua\cpua\Debug\sbrk.lst"
-show=source,include,expansion,tab=4
-optimize=0
-noinline
-gbr=auto
-chgincpath
-errorpath
"D:\SIT4S_MC_99\cpua\cpua\cpua\sbrk.c"
-global_volatile=0
-opt_range=all
-infinite_loop=0
-del_vacant_loop=0
-struct_alloc=1
-lang=c
-nologo
