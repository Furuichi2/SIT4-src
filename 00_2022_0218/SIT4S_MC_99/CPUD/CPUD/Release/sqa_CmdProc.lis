*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE     1
PROGRAM NAME =

    1                               1     ;****************************************************************************************
    2                               2     ;* File Name    : ssa_CmdProc.src
    3                               3     ;* Function     : シーケンスコード毎実処理
    4                               4     ;* Author       : Designed by T.Akiba, Coded by T.Akiba
    5                               5     ;* Date         : 2009-11-20 Akiba
    6                               6     ;* Update       : 2010-08-11 Y.Kobayashi(コード整理)
    7                               7     ;****************************************************************************************
    8                               8     
    9                               9     ;********************************************************************
   10                              10     ;* INCLUDE
   11                              11     ;********************************************************************
 2292                              19     
 2293 00000000                     20             .SECTION        P,CODE
 2294                              21     
 2295                              22     ;********************************************************************
 2296                              23     ;* EXTERN 宣言 PROGRAM
 2297                              24     ;********************************************************************
 2298                              25             .IMPORT _DIVS_32REG2_32REG1_R4_32REG2_R2
 2299                              26     
 2300                              27     ;********************************************************************
 2301                              28     ;* DEFINE定義
 2302                              29     ;********************************************************************
 2303                              30     ; 実行シーケンス置換用
 2304                              31     _SEQ_KND_T_TOP          .DEFINE         "_SEQ_CARD_RAM+_MKIND_T_ADR"    ;
 2305                              32     _SEQ_KND_TD_TOP         .DEFINE         "_SEQ_CARD_RAM+_MKIND_TD_ADR"   ;
 2306                              33     _SEQ_KND_C_TOP          .DEFINE         "_SEQ_CARD_RAM+_MKIND_C_ADR"    ;
 2307                              34     _SEQ_KND_CD_TOP         .DEFINE         "_SEQ_CARD_RAM+_MKIND_CD_ADR"   ;
 2308                              35     
 2309                              36     ;命令で置き換える対象で数値は最大値を記述してる
 2310          0000007F            37     CHG_SQ_ADR              .EQU            H'7F            ; Xに置き換える WORD-MEM/256=X...Y
 2311          000000FF            38     CHG_SQ_OFS              .EQU            H'FF            ; Yに置き換える WORD-MEM/256=X...Y
 2312          000000FF            39     CHG_SQ_BIT              .EQU            H'FF            ; BIT0~BIT7に置き換える
 2313          0000000F            40     CHG_SQ_BTD              .EQU            H'0F            ; BIT0〜BIT15を"0~F"に置き換える
 2314          000000FF            41     CHG_HHDATA              .EQU            H'FF            ; 数値に置き換える
 2315          000000FF            42     CHG_HLDATA              .EQU            H'FF            ; 数値
 2316          000000FF            43     CHG_LHDATA              .EQU            H'FF            ; 数値
 2317          000000FF            44     CHG_LLDATA              .EQU            H'FF            ; 数値
 2318          0000007F            45     CHG_UNIT_H              .EQU            H'7F            ; ﾀｲﾏ・ｶｳﾝﾀのﾕﾆｯﾄ番号H
 2319          000000FF            46     CHG_UNIT_L              .EQU            H'FF            ; ﾀｲﾏ・ｶｳﾝﾀのﾕﾆｯﾄ番号L
 2320          0000000F            47     CHG_DGT_SL              .EQU            H'0F            ; ﾀｲﾏ変換方法(単位)
 2321                              48     
 2322                              49     ;********************************************************************
 2323                              50     ;* シーケンス関係テーブル
 2324                              51     ;********************************************************************
 2325 00000000                     52             .ALIGN  4
 2326                              53     
 2327 00000000 00000000            54     _BIT_DATA_TBL1          .DATA.L         0
 2328 00000004 00000001            55     _BIT_DATA_TBL2          .DATA.L         BIT0            ; 0
 2329 00000008 00000002            56                             .DATA.L         BIT1            ; 1
 2330 0000000C 00000004            57                             .DATA.L         BIT2            ; 2
 2331 00000010 00000008            58                             .DATA.L         BIT3            ; 3
 2332 00000014 00000010            59                             .DATA.L         BIT4            ; 4
 2333 00000018 00000020            60                             .DATA.L         BIT5            ; 5
 2334 0000001C 00000040            61                             .DATA.L         BIT6            ; 6
 2335 00000020 00000080            62                             .DATA.L         BIT7            ; 7
 2336 00000024 00000100            63                             .DATA.L         BIT8            ; 8
 2337 00000028 00000200            64                             .DATA.L         BIT9            ; 9
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE     2
PROGRAM NAME =

 2338 0000002C 00000400            65                             .DATA.L         BIT10           ; A
 2339 00000030 00000800            66                             .DATA.L         BIT11           ; B
 2340 00000034 00001000            67                             .DATA.L         BIT12           ; C
 2341 00000038 00002000            68                             .DATA.L         BIT13           ; D
 2342 0000003C 00004000            69                             .DATA.L         BIT14           ; E
 2343 00000040 00008000            70                             .DATA.L         BIT15           ; F
 2344                              71     
 2345                              72     ;********************************************************************
 2346                              73     ;* CALLテーブル
 2347                              74     ;*
 2348                              75     ;* 実行側ｿﾌﾄのみ使用
 2349                              76     ;* ラベル参照なので並ぶ順番はどうでもいい
 2350                              77     ;* CTBL_REG = _SEQ_CALL_TBL1
 2351                              78     ;********************************************************************
 2352                              79     
 2353                              80             .EXPORT _SEQ_CALL_TBL1
 2354 00000044                     81             .ALIGN  4
 2355                              82     
 2356 00000044                     83     _SEQ_CALL_TBL1                                          ; CALL TABLEは127個まで
 2357 00000044 00000000            84     DSETLI_CALL             .DATA.L         _DSETLI_SUB     ; 直接数値の4BYTE読出
 2358 00000048 00000000            85     PLS_CALL                .DATA.L         _PLS_SUB        ; ON EDGE 1PLS命令 ｻﾌﾞﾙｰﾁﾝｱﾄﾞﾚｽ 1
 2359 0000004C 00000000            86     PLF_CALL                .DATA.L         _PLF_SUB        ; OF EDGE 1PLS命令 ｻﾌﾞﾙｰﾁﾝｱﾄﾞﾚｽ 2
 2360 00000050 00000000            87     WTMR_CALL               .DATA.L         _WTMR_SUB       ; ﾀｲﾏ命令 ｻﾌﾞﾙｰﾁﾝｱﾄﾞﾚｽ          4
 2361 00000054 00000000            88     WCTR_CALL               .DATA.L         _WCTR_SUB       ; ｶｳﾝﾀ命令 ｻﾌﾞﾙｰﾁﾝｱﾄﾞﾚｽ         5
 2362 00000058 00000000            89     WSC_CALL                .DATA.L         _WSC_SUB        ; ｽﾃｯﾌﾟｺﾝﾄﾛｰﾙ命令 ｻﾌﾞﾙｰﾁﾝｱﾄﾞﾚｽ  6
 2363 0000005C 00000000            90     WSR_CALL                .DATA.L         _WSR_SUB        ; ｼﾌﾄﾚｼﾞｽﾀ命令 ｻﾌﾞﾙｰﾁﾝｱﾄﾞﾚｽ     7
 2364                              91     
 2365                              92     ;********************************************************************
 2366                              93     ;* 特殊データ領域TBL
 2367                              94     ;*
 2368                              95     ;* DTBL_REG = _SEQ_DATA_TBL1
 2369                              96     ;* SR、タイマ、カウンタ
 2370                              97     ;********************************************************************
 2371                              98             .EXPORT _SEQ_DATA_TBL1          ;
 2372 00000060                     99             .ALIGN  4
 2373                             100     
 2374 00000060                    101     _SEQ_DATA_TBL1
 2375 00000060 00000000           102     SR_STCT_TOP     .DATA.L         _SEQ_SR_FLG             ; USED
 2376 00000064 00000000           103     TM_STCT_TOP     .DATA.L         _SEQ_TMR_DATA           ; USED
 2377 00000068 00000000           104     TM_KND_T_TOP    .DATA.L         _SEQ_CARD_RAM+_MKIND_T_ADR              ; USED
 2378 0000006C 00000000           105     TM_KND_TD_TOP   .DATA.L         _SEQ_CARD_RAM+_MKIND_TD_ADR             ; USED
 2379 00000070 00000000           106     TM_LAT_CG_TOP   .DATA.L         _TM_LATE_CHGTOP         ; USED
 2380 00000074 00000000           107     CT_STCT_TOP     .DATA.L         _SEQ_CTR_DATA           ; USED
 2381 00000078 00000000           108     CT_KDN_C_TOP    .DATA.L         _SEQ_CARD_RAM+_MKIND_C_ADR              ; USED
 2382 0000007C 00000000           109     CT_KND_CD_TOP   .DATA.L         _SEQ_CARD_RAM+_MKIND_CD_ADR             ; USED
 2383                             110     
 2384                             111     
 2385                             112     ;********************************************************************
 2386                             113     ;* シーケンス命令用
 2387                             114     ;* マクロ
 2388                             115     ;********************************************************************
 2389                             116     
 2390                             117     ;       *******************************************
 2391                             118     ;       ***                                     ***
 2392                             119     ;       ***     LD命令時のMﾚｼﾞへのｽﾀｯｸ          ***
 2393                             120     ;       ***     [3]                             ***
 2394                             121     ;       *******************************************
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE     3
PROGRAM NAME =

 2395                             122             .MACRO  LD_M_STACK                      ;
 2396                             123                     SHLL    M_REG                           ; MRG ｼﾌﾄ
 2397                             124                     OR      A_REG,M_REG                     ; NEW Mreg SAVE
 2398                             125             .ENDM
 2399                             126     
 2400                             127     ;       *******************************************
 2401                             128     ;       ***                                     ***
 2402                             129     ;       ***     ADR.BIT命令時のADRESS作成       ***
 2403                             130     ;       ***     byteｱﾄﾞﾚｽ･･･+0/+1処理有り       ***
 2404                             131     ;       ***     ANS ADR=R0 USED R1              ***
 2405                             132     ;       ***     [5]                             ***
 2406                             133     ;       *******************************************
 2407                             134             .MACRO  ADR_MAKE1_BIT   LBEL1,LBEL2
 2408                             135     \LBEL1:         MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE(0~7Fま
                                          で)
 2409                             136     \LBEL2:         MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYTE
 2410                             137                     SHLL8   R1
 2411                             138                     EXTU.B  R0,R0                           ;
 2412                             139                     OR      R1,R0                           ; adress
 2413                             140             .ENDM
 2414                             141     
 2415                             142     ;       *******************************************
 2416                             143     ;       ***                                     ***
 2417                             144     ;       ***     WORD命令時のADRESS作成          ***
 2418                             145     ;       ***     byteｱﾄﾞﾚｽ 但し偶数(+0)のみ      ***
 2419                             146     ;       ***     ANS ADR=R0 USED R1              ***
 2420                             147     ;       ***     [5]                             ***
 2421                             148     ;       *******************************************
 2422                             149             .MACRO  ADR_MAKE1_WORD LBEL1,LBEL2
 2423                             150                     ADR_MAKE1_BIT \LBEL1,\LBEL2
 2424                             151             .ENDM
 2425                             152     
 2426                             153     ;       *******************************************
 2427                             154     ;       ***                                     ***
 2428                             155     ;       ***     WORD命令時の直接数値作成        ***
 2429                             156     ;       ***     byteｱﾄﾞﾚｽ 但し偶数(+0)のみ      ***
 2430                             157     ;       ***     ANS data=R2 USED R1,R2          ***
 2431                             158     ;       ***     [5]                             ***
 2432                             159     ;       *******************************************
 2433                             160             .MACRO  IMD_MAKE1_WORD LBEL1,LBEL2              ;
 2434                             161     \LBEL1:         MOV.B   #CHG_LHDATA,R1                  ; H_BYTE
 2435                             162     \LBEL2:         MOV.B   #CHG_LLDATA,R2                  ; L_BYTE
 2436                             163                     SHLL8   R1                              ; 符号をそのまま
 2437                             164                     EXTU.B  R2,R2                           ;
 2438                             165                     OR      R1,R2                           ; data
 2439                             166             .ENDM
 2440                             167     
 2441                             168     ;       *******************************************
 2442                             169     ;       ***                                     ***
 2443                             170     ;       ***     WORD命令時の直接数値作成        ***
 2444                             171     ;       ***     byteｱﾄﾞﾚｽ 但し偶数(+0)のみ      ***
 2445                             172     ;       ***     ANS data=R2 USED R1,R2          ***
 2446                             173     ;       ***     [5]                             ***
 2447                             174     ;       *******************************************
 2448                             175             .MACRO  IMD_MAKE1_LONG LBEL1,LBEL2,LBEL3,LBEL4
 2449                             176     \LBEL1:         MOV.B   #CHG_HHDATA,R3                  ; H_BYTE
 2450                             177     \LBEL2:         MOV.B   #CHG_HLDATA,R4                  ; L_BYTE
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE     4
PROGRAM NAME =

 2451                             178     \LBEL3:         MOV.B   #CHG_LHDATA,R1                  ; H_BYTE
 2452                             179     \LBEL4:         MOV.B   #CHG_LLDATA,R2                  ; L_BYTE
 2453                             180     
 2454                             181                     EXTU.B  R3,R3                           ; 000x
 2455                             182                     SHLL8   R3                              ; 00x0
 2456                             183                     SWAP.W  R3,R3                           ; x000 HH,0,0,0
 2457                             184                                                             ; 16bitｼﾌﾄ+下位WORD0ｸﾘｱ
 2458                             185     
 2459                             186                     EXTU.B  R4,R4                           ; 000x
 2460                             187                     SWAP.W  R4,R4                           ; 0x00 0,HL,0,0
 2461                             188     
 2462                             189                     EXTU.B  R1,R1                           ; 000x
 2463                             190                     SHLL8   R1                              ; 00x0 0,0,LH,0
 2464                             191     
 2465                             192                     EXTU.B  R2,R2                           ; LL
 2466                             193                     OR      R3,R2                           ;
 2467                             194                     OR      R4,R2                           ;
 2468                             195                     OR      R1,R2                           ;
 2469                             196             .ENDM
 2470                             197     
 2471                             198     ;       ***************************************************
 2472                             199     ;       ***                                             ***
 2473                             200     ;       ***     ADR.BIT命令時のBIT→R0作成              ***
 2474                             201     ;       ***     [3]     LD,AND,OR                       ***
 2475                             202     ;       ***************************************************
 2476                             203             .MACRO  BIT_LD_R0 LBEL1
 2477                             204     \LBEL1:         TST.B   #CHG_SQ_BIT,@(R0,GBR)           ; [命令書換用ラベル] BIT=OFFならTB
                                          IT=1
 2478                             205                     MOVT    R0                              ; T-BIT==>R0
 2479                             206                     XOR     #BIT0,R0                        ;
 2480                             207             .ENDM
 2481                             208     
 2482                             209     ;       ***************************************************
 2483                             210     ;       ***                                             ***
 2484                             211     ;       ***     ADR.BIT命令時のBITの反転→R0作成        ***
 2485                             212     ;       ***     [2]     LDN,ANDN,ORN                    ***
 2486                             213     ;       ***************************************************
 2487                             214             .MACRO  BIT_LD_NOT_R0 LBEL1
 2488                             215     \LBEL1:         TST.B   #CHG_SQ_BIT,@(R0,GBR)           ; [命令書換用ラベル];BIT=OFFならTB
                                          IT=1
 2489                             216                     MOVT    R0                              ; T-BIT==>R0
 2490                             217             .ENDM
 2491                             218     
 2492                             219     
 2493                             220     ;********************************************************************
 2494                             221     ;* シーケンス命令
 2495                             222     ;* BIT操作
 2496                             223     ;********************************************************************
 2497                             224     ;         ------------------------------
 2498                             225     ;       +0|       命令CODE      (  )   |
 2499                             226     ;         ------------------------------
 2500                             227     ;       +1|     ﾒﾓﾘ種別/BIT     (  )   |
 2501                             228     ;         ------------------------------
 2502                             229     ;       +2|       MEM_ADR上位   (  )   |
 2503                             230     ;         ------------------------------
 2504                             231     ;       +3|       MEM_ADR下位   (  )   |
 2505                             232     ;         ------------------------------
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE     5
PROGRAM NAME =

 2506                             233     
 2507                             234     ;       *********************************************************************
 2508                             235     ;       *****   常時ON                                  4*2             *****
 2509                             236     ;       *********************************************************************
 2510 00000080                    237             .ALIGN  4
 2511 00000080                    238     _LDON_CODE:
 2512                             239             LD_M_STACK                                      ; A->Mｽﾀｯｸ      ARG and NRGを削除
                                          091105AKIBA
 2513 00000080 4700                   M                   SHLL    M_REG                           ; MRG ｼﾌﾄ
 2514 00000082 275B                   M                   OR      A_REG,M_REG                     ; NEW Mreg SAVE
 2515 00000084 E001               240             MOV.B   #BIT0,R0                                ;
 2516 00000086 6503               241             MOV     R0,A_REG                                ; R0→Areg
 2517 00000088                    242     _LDON_CODE_END:
 2518                             243     ;
 2519                             244     ;       *********************************************************************
 2520                             245     ;       *****   Read command                            11*2            *****
 2521                             246     ;       *********************************************************************
 2522                             247     ;       USED DESTROY REG R0
 2523                             248     ;       USED         R5,R6,R7,GBR
 2524                             249     ;
 2525 00000088                    250             .ALIGN  4
 2526 00000088                    251     _LD_CODE:
 2527                             252             LD_M_STACK                                      ; A->Mｽﾀｯｸ      ARG and NRGを削除
                                          091105AKIBA
 2528 00000088 4700                   M                   SHLL    M_REG                           ; MRG ｼﾌﾄ
 2529 0000008A 275B                   M                   OR      A_REG,M_REG                     ; NEW Mreg SAVE
 2530                             253             ADR_MAKE1_BIT LBEL1=LD_ADR,LBEL2=LD_OFS
 2531 0000008C E17F                   M   LD_ADR:         MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE(0~7Fま
                                          で)
 2532 0000008E E0FF                   M   LD_OFS:         MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYTE
 2533 00000090 4118                   M                   SHLL8   R1
 2534 00000092 600C                   M                   EXTU.B  R0,R0                           ;
 2535 00000094 201B                   M                   OR      R1,R0                           ; adress
 2536                             254             BIT_LD_R0 LBEL1=LD_BIT                          ;
 2537 00000096 CCFF                   M   LD_BIT:         TST.B   #CHG_SQ_BIT,@(R0,GBR)           ; [命令書換用ラベル] BIT=OFFならTB
                                          IT=1
 2538 00000098 0029                   M                   MOVT    R0                              ; T-BIT==>R0
 2539 0000009A CA01                   M                   XOR     #BIT0,R0                        ;
 2540 0000009C 6503               255             MOV     R0,A_REG                                ; R0→Areg
 2541 0000009E                    256     _LD_CODE_END:
 2542                             257     
 2543                             258     ;       *********************************************************************
 2544                             259     ;       *****   Read Not command                        10*2            *****
 2545                             260     ;       *********************************************************************
 2546                             261     ;       USED DESTROY REG R0
 2547                             262     ;       USED         R5,R6,R7,GBR
 2548                             263     ;
 2549 000000A0                    264             .ALIGN  4
 2550 000000A0                    265     _LDN_CODE:
 2551                             266             LD_M_STACK                                      ; A->Mｽﾀｯｸ      ARG and NRGを削除
                                          091105AKIBA
 2552 000000A0 4700                   M                   SHLL    M_REG                           ; MRG ｼﾌﾄ
 2553 000000A2 275B                   M                   OR      A_REG,M_REG                     ; NEW Mreg SAVE
 2554                             267             ADR_MAKE1_BIT LBEL1=LDN_ADR,LBEL2=LDN_OFS
 2555 000000A4 E17F                   M   LDN_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 2556 000000A6 E0FF                   M   LDN_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE     6
PROGRAM NAME =

                                          E
 2557 000000A8 4118                   M                   SHLL8   R1
 2558 000000AA 600C                   M                   EXTU.B  R0,R0                           ;
 2559 000000AC 201B                   M                   OR      R1,R0                           ; adress
 2560                             268             BIT_LD_NOT_R0 LBEL1=LDN_BIT                     ;
 2561 000000AE CCFF                   M   LDN_BIT:                TST.B   #CHG_SQ_BIT,@(R0,GBR)           ; [命令書換用ラベル];BIT=O
                                          FFならTBIT=1
 2562 000000B0 0029                   M                   MOVT    R0                              ; T-BIT==>R0
 2563 000000B2 6503               269             MOV     R0,A_REG                                ;
 2564 000000B4                    270     _LDN_CODE_END:
 2565                             271     
 2566                             272     ;       *********************************************************************
 2567                             273     ;       *****   And command                             9*2             *****
 2568                             274     ;       *********************************************************************
 2569                             275     ;       USED DESTROY REG R0
 2570                             276     ;       USED         R5,R6,R7,GBR
 2571                             277     ;
 2572 000000B4                    278             .ALIGN  4
 2573 000000B4                    279     _AND_CODE:
 2574                             280             ADR_MAKE1_BIT LBEL1=AND_ADR,LBEL2=AND_OFS       ;
 2575 000000B4 E17F                   M   AND_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 2576 000000B6 E0FF                   M   AND_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 2577 000000B8 4118                   M                   SHLL8   R1
 2578 000000BA 600C                   M                   EXTU.B  R0,R0                           ;
 2579 000000BC 201B                   M                   OR      R1,R0                           ; adress
 2580                             281             BIT_LD_R0 LBEL1=AND_BIT                         ;
 2581 000000BE CCFF                   M   AND_BIT:                TST.B   #CHG_SQ_BIT,@(R0,GBR)           ; [命令書換用ラベル] BIT=O
                                          FFならTBIT=1
 2582 000000C0 0029                   M                   MOVT    R0                              ; T-BIT==>R0
 2583 000000C2 CA01                   M                   XOR     #BIT0,R0                        ;
 2584 000000C4 2509               282             AND     R0,A_REG                                ; ARG and DATA(T) -> ARG
 2585 000000C6                    283     _AND_CODE_END:
 2586                             284     
 2587                             285     ;       *********************************************************************
 2588                             286     ;       *****   And Not command                         8*2             *****
 2589                             287     ;       *********************************************************************
 2590                             288     ;       USE REG R0
 2591                             289     ;
 2592 000000C8                    290             .ALIGN  4
 2593 000000C8                    291     _ANDN_CODE:
 2594                             292             ADR_MAKE1_BIT LBEL1=ANDN_ADR,LBEL2=ANDN_OFS     ;
 2595 000000C8 E17F                   M   ANDN_ADR:               MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 2596 000000CA E0FF                   M   ANDN_OFS:               MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 2597 000000CC 4118                   M                   SHLL8   R1
 2598 000000CE 600C                   M                   EXTU.B  R0,R0                           ;
 2599 000000D0 201B                   M                   OR      R1,R0                           ; adress
 2600                             293             BIT_LD_NOT_R0 LBEL1=ANDN_BIT                    ;
 2601 000000D2 CCFF                   M   ANDN_BIT:               TST.B   #CHG_SQ_BIT,@(R0,GBR)           ; [命令書換用ラベル];BIT=O
                                          FFならTBIT=1
 2602 000000D4 0029                   M                   MOVT    R0                              ; T-BIT==>R0
 2603 000000D6 2509               294             AND     R0,A_REG                                ; ARG and DATA(T) -> ARG
 2604 000000D8                    295     _ANDN_CODE_END:
 2605                             296     
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE     7
PROGRAM NAME =

 2606                             297     ;       *********************************************************************
 2607                             298     ;       *****   Or command                               9*2            *****
 2608                             299     ;       *********************************************************************
 2609 000000D8                    300             .ALIGN  4
 2610 000000D8                    301     _OR_CODE:
 2611                             302             ADR_MAKE1_BIT LBEL1=OR_ADR,LBEL2=OR_OFS         ;
 2612 000000D8 E17F                   M   OR_ADR:         MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE(0~7Fま
                                          で)
 2613 000000DA E0FF                   M   OR_OFS:         MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYTE
 2614 000000DC 4118                   M                   SHLL8   R1
 2615 000000DE 600C                   M                   EXTU.B  R0,R0                           ;
 2616 000000E0 201B                   M                   OR      R1,R0                           ; adress
 2617                             303             BIT_LD_R0 LBEL1=OR_BIT                          ;
 2618 000000E2 CCFF                   M   OR_BIT:         TST.B   #CHG_SQ_BIT,@(R0,GBR)           ; [命令書換用ラベル] BIT=OFFならTB
                                          IT=1
 2619 000000E4 0029                   M                   MOVT    R0                              ; T-BIT==>R0
 2620 000000E6 CA01                   M                   XOR     #BIT0,R0                        ;
 2621 000000E8 250B               304             OR      R0,A_REG                                ; ARG or DATA(T) -> ARG
 2622 000000EA                    305     _OR_CODE_END:
 2623                             306     
 2624                             307     ;       *********************************************************************
 2625                             308     ;       *****   Or command                               8*2            *****
 2626                             309     ;       *********************************************************************
 2627 000000EC                    310             .ALIGN  4
 2628 000000EC                    311     _ORN_CODE:
 2629                             312             ADR_MAKE1_BIT LBEL1=ORN_ADR,LBEL2=ORN_OFS       ;
 2630 000000EC E17F                   M   ORN_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 2631 000000EE E0FF                   M   ORN_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 2632 000000F0 4118                   M                   SHLL8   R1
 2633 000000F2 600C                   M                   EXTU.B  R0,R0                           ;
 2634 000000F4 201B                   M                   OR      R1,R0                           ; adress
 2635                             313             BIT_LD_NOT_R0 LBEL1=ORN_BIT                     ;
 2636 000000F6 CCFF                   M   ORN_BIT:                TST.B   #CHG_SQ_BIT,@(R0,GBR)           ; [命令書換用ラベル];BIT=O
                                          FFならTBIT=1
 2637 000000F8 0029                   M                   MOVT    R0                              ; T-BIT==>R0
 2638 000000FA 250B               314             OR      R0,A_REG                                ; ARG or DATA(T) -> ARG
 2639 000000FC                    315     _ORN_CODE_END:
 2640                             316     
 2641                             317     ;       *********************************************************************
 2642                             318     ;       *****   Write command                           9*2             *****
 2643                             319     ;       *********************************************************************
 2644                             320     ;       Areg & Nreg--->Areg-->MEM
 2645 000000FC                    321             .ALIGN  4
 2646 000000FC                    322     _ST_CODE:
 2647                             323             ADR_MAKE1_BIT LBEL1=ST_ADR,LBEL2=ST_OFS ;5
 2648 000000FC E17F                   M   ST_ADR:         MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE(0~7Fま
                                          で)
 2649 000000FE E0FF                   M   ST_OFS:         MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYTE
 2650 00000100 4118                   M                   SHLL8   R1
 2651 00000102 600C                   M                   EXTU.B  R0,R0                           ;
 2652 00000104 201B                   M                   OR      R1,R0                           ; adress
 2653 00000106 2558               324             TST     A_REG,A_REG                             ;
 2654                             325             TST_BIT_OF STCD_CLRBIT                          ;
 2655 00000108 8902                   M           BT      STCD_CLRBIT
 2656                             326     
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE     8
PROGRAM NAME =

 2657 0000010A                    327     STCD_SETBIT:                                            ; [命令書換用ラベル]
 2658 0000010A CFFF               328             OR.B    #CHG_SQ_BIT,@(R0,GBR)                   ; OR-BIT  B'00001000
 2659                             329             M_BRA   _ST_CODE_END                            ;
 2660 0000010C A001                   M           BRA     _ST_CODE_END
 2661 0000010E 0009                   M           NOP
 2662                             330     
 2663 00000110                    331     STCD_CLRBIT:                                            ; [命令書換用ラベル]
 2664 00000110 CDFF               332             AND.B   #CHG_SQ_BIT,@(R0,GBR)                   ; AND-BIT  B'11110111
 2665 00000112                    333     _ST_CODE_END:                                           ;
 2666                             334     
 2667                             335     ;       ***********************************************************
 2668                             336     ;       ***     SET BIT CODE CHANGE ROUTINE             8*2     ***
 2669                             337     ;       ***********************************************************
 2670                             338     ;       Areg & Nreg--->AregがONならMEM:ON
 2671 00000114                    339             .ALIGN  4
 2672 00000114                    340     _SET_CODE:                                              ; 00001110B     E
 2673                             341             ADR_MAKE1_BIT LBEL1=SET_ADR,LBEL2=SET_OFS       ;
 2674 00000114 E17F                   M   SET_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 2675 00000116 E0FF                   M   SET_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 2676 00000118 4118                   M                   SHLL8   R1
 2677 0000011A 600C                   M                   EXTU.B  R0,R0                           ;
 2678 0000011C 201B                   M                   OR      R1,R0                           ; adress
 2679 0000011E 2558               342             TST     A_REG,A_REG                             ;
 2680                             343             TST_BIT_OF _SET_CODE_END                        ;
 2681 00000120 8900                   M           BT      _SET_CODE_END
 2682                             344     
 2683 00000122                    345     SETCD_SETBIT:                                           ; [命令書換用ラベル]
 2684 00000122 CFFF               346             OR.B    #CHG_SQ_BIT,@(R0,GBR)                   ; OR-BIT  B'00001000
 2685 00000124                    347     _SET_CODE_END:
 2686                             348     
 2687                             349     ;       ***********************************************************
 2688                             350     ;       ***     RESET BIT CODE CHANGE ROUTINE           8*2     ***
 2689                             351     ;       ***********************************************************
 2690 00000124                    352             .ALIGN  4
 2691 00000124                    353     _RST_CODE:                                              ; 00001110B     E
 2692                             354             ADR_MAKE1_BIT LBEL1=RST_ADR,LBEL2=RST_OFS       ;
                                                          ;
 2693 00000124 E17F                   M   RST_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 2694 00000126 E0FF                   M   RST_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 2695 00000128 4118                   M                   SHLL8   R1
 2696 0000012A 600C                   M                   EXTU.B  R0,R0                           ;
 2697 0000012C 201B                   M                   OR      R1,R0                           ; adress
 2698 0000012E 2558               355             TST     A_REG,A_REG                             ;
 2699                             356             TST_BIT_OF _RST_CODE_END                        ;
 2700 00000130 8900                   M           BT      _RST_CODE_END
 2701                             357     
 2702 00000132                    358     RSTCD_SETBIT:                                           ; [命令書換用ラベル]
 2703 00000132 CDFF               359             AND.B   #CHG_SQ_BIT,@(R0,GBR)                   ; AND-BIT  B'111101111
 2704 00000134                    360     _RST_CODE_END:
 2705                             361     
 2706                             362     
 2707                             363     ;********************************************************************
 2708                             364     ;* シーケンス命令
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE     9
PROGRAM NAME =

 2709                             365     ;* BIT制御命令
 2710                             366     ;********************************************************************
 2711                             367     ;         ------------------------------
 2712                             368     ;       +0|       命令CODE      (  )   |
 2713                             369     ;         ------------------------------
 2714                             370     ;       +1|                     (  )   |
 2715                             371     ;         ------------------------------
 2716                             372     ;       +2|                     (  )   |
 2717                             373     ;         ------------------------------
 2718                             374     ;       +3|                     (  )   |
 2719                             375     ;         ------------------------------
 2720                             376     
 2721                             377     ;       ***********************************************************
 2722                             378     ;       ***     And MRG command                 2*2             ***
 2723                             379     ;       ***********************************************************
 2724 00000134                    380             .ALIGN  4
 2725 00000134                    381     _AMRG_CODE:
 2726 00000134 2579               382             AND     M_REG,A_REG                             ; ARG and MRG
 2727 00000136 4701               383             SHLR    M_REG                                   ; shift old MRG
 2728 00000138                    384     _AMRG_CODE_END:
 2729                             385     
 2730                             386     ;       ***********************************************************
 2731                             387     ;       ***     Or MRG command                  2*2             ***
 2732                             388     ;       ***********************************************************
 2733 00000138                    389             .ALIGN  4
 2734 00000138                    390     _OMRG_CODE:
 2735 00000138 4701               391             SHLR    M_REG                                   ; shift old MRG(POP M_REG)
 2736 0000013A 0029               392             MOVT    R0                                      ;
 2737 0000013C 250B               393             OR      R0,A_REG                                ; ARG or MRG
 2738 0000013E                    394     _OMRG_CODE_END:
 2739                             395     ;
 2740                             396     ;       ***********************************************************
 2741                             397     ;       ***     Write NRG command               3*2             ***
 2742                             398     ;       ***********************************************************
 2743 00000140                    399             .ALIGN  4
 2744 00000140                    400     _PUSH_CODE:
 2745 00000140 4600               401             SHLL    N_REG                                   ; NRGｽﾀｯｸ
 2746 00000142 265B               402             OR      A_REG,N_REG                             ; ARG store to NRG
 2747 00000144                    403     _PUSH_CODE_END:
 2748                             404     
 2749                             405     ;       ***********************************************************
 2750                             406     ;       ***     Write Not NRG command           1*2             ***
 2751                             407     ;       ***********************************************************
 2752 00000144                    408             .ALIGN  4
 2753 00000144                    409     _POP_CODE:
 2754 00000144 255A               410             XOR     A_REG,A_REG                             ; ARGｸﾘｱ
 2755 00000146 0008               411             CLRT                                            ; Tﾋﾞｯﾄｸﾘｱ
 2756 00000148 4625               412             ROTCR   N_REG                                   ; 右ｼﾌﾄ(Tﾋﾞｯﾄ付)
 2757 0000014A 4524               413             ROTCL   A_REG                                   ; 左ｼﾌﾄ(Tﾋﾞｯﾄ付)
 2758 0000014C                    414     _POP_CODE_END:
 2759                             415     
 2760                             416     ;       ***********************************************************
 2761                             417     ;       ***     LEAD NRG command                3*2             ***
 2762                             418     ;       ***********************************************************
 2763 0000014C                    419             .ALIGN  4
 2764 0000014C                    420     _LDNRG_CODE:
 2765 0000014C 6063               421             MOV     N_REG,R0                                ; N_REG LOAD
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE    10
PROGRAM NAME =

 2766 0000014E C901               422             AND     #H'0001,R0                              ; BIT0以外CLR
 2767 00000150 6503               423             MOV     R0,A_REG                                ;
 2768 00000152                    424     _LDNRG_CODE_END:
 2769                             425     
 2770                             426     ;       ***********************************************************
 2771                             427     ;       ***     END NRG command                 1*2             ***
 2772                             428     ;       ***********************************************************
 2773 00000154                    429             .ALIGN  4
 2774 00000154                    430     _ENDNRG_CODE:
 2775 00000154 E601               431             MOV.B   #BIT0,N_REG                             ; N_REG CLR
 2776 00000156                    432     _ENDNRG_CODE_END:
 2777                             433     
 2778                             434     
 2779                             435     ;********************************************************************
 2780                             436     ;* シーケンス応用命令
 2781                             437     ;*
 2782                             438     ;********************************************************************
 2783                             439     
 2784                             440     ;       ***********************************************************
 2785                             441     ;       ***                                                     ***
 2786                             442     ;       ***     Clear Card command              9*2             ***
 2787                             443     ;       ***     AregがON時に指定されたﾒﾓﾘﾜｰﾄﾞをｸﾘｱする          ***
 2788                             444     ;       ***                                                     ***
 2789                             445     ;       ***********************************************************
 2790 00000158                    446             .ALIGN  4
 2791 00000158                    447     _CLR_CODE:
 2792 00000158 2558               448             TST     A_REG,A_REG                             ;
 2793                             449             TST_BIT_OF _CLR_CODE_END                        ;
 2794 0000015A 8906                   M           BT      _CLR_CODE_END
 2795                             450             ADR_MAKE1_WORD LBEL1=CLR_ADR,LBEL2=CLR_OFS      ; R0=WORDｱﾄﾞﾚｽ
 2796                                 M                   ADR_MAKE1_BIT CLR_ADR,CLR_OFS
 2797 0000015C E17F                   M   CLR_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 2798 0000015E E0FF                   M   CLR_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 2799 00000160 4118                   M                   SHLL8   R1
 2800 00000162 600C                   M                   EXTU.B  R0,R0                           ;
 2801 00000164 201B                   M                   OR      R1,R0                           ; adress
 2802 00000166 222A               451             XOR     R2,R2                                   ;
 2803 00000168 0E25               452             MOV.W   R2,@(R0,TOP_REG)                        ;
 2804 0000016A                    453     _CLR_CODE_END:
 2805                             454     
 2806                             455     ;       ***********************************************************
 2807                             456     ;       ***     ON EDGE 1PULSE ON CODE CHANGE ROUTINE           ***
 2808                             457     ;       ***     AregのONｴｯｼﾞ時に1ｽｷｬﾝAregをonする               ***
 2809                             458     ;       ***     割り込み禁止が必要                              ***
 2810                             459     ;       ***********************************************************
 2811                             460     ;       byte adr
 2812 0000016C                    461             .ALIGN  4
 2813 0000016C                    462     _PLS_CODE:                                                      ;
 2814                             463                     ADR_MAKE1_BIT LBEL1=PLS_ADR,LBEL2=PLS_OFS       ; R0:adr
 2815 0000016C E17F                   M   PLS_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 2816 0000016E E0FF                   M   PLS_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 2817 00000170 4118                   M                   SHLL8   R1
 2818 00000172 600C                   M                   EXTU.B  R0,R0                           ;
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE    11
PROGRAM NAME =

 2819 00000174 201B                   M                   OR      R1,R0                           ; adress
 2820 00000176 E2FF               464     PLS_BIT:        MOV.B   #CHG_SQ_BIT,R2                          ; [命令書換用ラベル]
 2821 00000178 51B1               465                     MOV.L   @(PLS_CALL-_SEQ_CALL_TBL1,CTBL_REG),R1  ;
 2822 0000017A 410B               466                     JSR     @R1                                     ;
 2823 0000017C 0009               467                     NOP                                             ;
 2824 0000017E                    468     _PLS_CODE_END:
 2825                             469     
 2826                             470     ;       ***************************************************
 2827                             471     ;       ***     ON EDGE 1PULSE ON CODE CHANGE SUB       ***
 2828                             472     ;       ***************************************************
 2829                             473     ;       INPUT R2:BIT,R0:ADR
 2830 00000180                    474             .ALIGN  4
 2831 00000180                    475     _PLS_SUB:
 2832                             476             SUB_START
 2833 00000180 4F22                   M           STS.L   PR,@-R15                ;[必要]
 2834                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 2835 00000182 622C               477             EXTU.B  R2,R2                                           ; SET用(BIT7~BIT0)
 2836 00000184 6923               478             MOV     R2,R9                                           ; PUSH
 2837                             479     
 2838 00000186 6327               480             NOT     R2,R3                                           ; AND用
 2839 00000188 2558               481             TST     A_REG,A_REG                                     ;
 2840                             482             TST_BIT_ON PLS_SB100                                    ;
 2841 0000018A 8B00                   M           BF      PLS_SB100
 2842 0000018C 222A               483             XOR     R2,R2                                           ;
 2843                             484     
 2844 0000018E                    485     PLS_SB100:
 2845                             486             DI_PUSH_SR_SH3  WK_REG1=R1,WK_REG2=R4                   ; 割込みマスク
 2846 0000018E 0102                   M           STC     SR,R1                   ;
 2847 00000190 9411                   M           MOV.W   #H'000000F0,R4          ;
 2848 00000192 214B                   M           OR      R4,R1           ;INT15
 2849 00000194 4F03                   M           STC.L   SR,@-R15                        ;PUSH SR
 2850 00000196 410E                   M           LDC     R1,SR                   ;割込禁止（15）
 2851 00000198 01EC               487             MOV.B   @(R0,TOP_REG),R1                                ; OLD情報読出
 2852 0000019A 6413               488             MOV     R1,R4                                           ; old push
 2853 0000019C 2139               489             AND     R3,R1                                           ; OLD BIT情報をCLR
 2854 0000019E 212B               490             OR      R2,R1                                           ; NEW BIT情報SET
 2855 000001A0 0E14               491             MOV.B   R1,@(R0,TOP_REG)                                ; new save
 2856                             492             EI_POP_SR_SH3                                           ; 割込みマスク解除
 2857 000001A2 4F07                   M           LDC.L   @R15+,SR                        ;POP SR
 2858 000001A4 241A               493             XOR     R1,R4                                           ; R1 XOR R4 = R4(変化)
 2859 000001A6 2149               494             AND     R4,R1                                           ; R4 and R1 = ON ｴｯｼﾞ
 2860 000001A8 2198               495             TST     R9,R1                                           ;
 2861 000001AA 0029               496             MOVT    R0                                              ; 0
 2862 000001AC CA01               497             XOR     #BIT0,R0
 2863 000001AE 6503               498             MOV     R0,A_REG                                        ; Tの反転 -> ARG
 2864                             499     
 2865 000001B0                    500     _PLS_SUB_END:
 2866                             501             SUB_END
 2867                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 2868 000001B0 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 2869                             502             M_RTS
 2870 000001B2 000B                   M           RTS                             ;RTSの後ろの
 2871 000001B4 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 2872                             503     
 2873                             504     
 2874                             505     ;--------ﾘﾚﾗﾙﾌﾟｰﾙが存在する FFFFFF00(割込禁止)----
 2875                             506     
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE    12
PROGRAM NAME =

 2876                             507     ;       ***********************************************************
 2877                             508     ;       ***     OFF EDGE 1PULSE ON CODE CHANGE ROUTINE  16byte  ***
 2878                             509     ;       ***     AregのOffｴｯｼﾞ時に1ｽｷｬﾝAregをonする              ***
 2879                             510     ;       ***     割り込み禁止が必要                              ***
 2880                             511     ;       ***********************************************************
 2881                                     ***** BEGIN-POOL *****
 2882 000001B6 00F0                       DATA FOR SOURCE-LINE 486
 2883                                     ***** END-POOL *****
 2884 000001B8                    512             .ALIGN  4
 2885 000001B8                    513     _PLF_CODE:                                                      ;
 2886                             514                     ADR_MAKE1_BIT LBEL1=PLF_ADR,LBEL2=PLF_OFS       ; R0:adr
 2887 000001B8 E17F                   M   PLF_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 2888 000001BA E0FF                   M   PLF_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 2889 000001BC 4118                   M                   SHLL8   R1
 2890 000001BE 600C                   M                   EXTU.B  R0,R0                           ;
 2891 000001C0 201B                   M                   OR      R1,R0                           ; adress
 2892 000001C2 E2FF               515     PLF_BIT:        MOV.B   #CHG_SQ_BIT,R2                          ; [命令書換用ラベル]
 2893                             516                                                                     ;
 2894 000001C4 51B2               517                     MOV.L   @(PLF_CALL-_SEQ_CALL_TBL1,CTBL_REG),R1  ;
 2895 000001C6 410B               518                     JSR     @R1                                     ;
 2896 000001C8 0009               519                     NOP                                             ;
 2897 000001CA                    520     _PLF_CODE_END:
 2898                             521     
 2899                             522     ;       ***************************************************
 2900                             523     ;       ***     OFF EDGE 1PULSE ON CODE CHANGE SUB      ***
 2901                             524     ;       ***************************************************
 2902                             525     ;       INPUT R2:BIT,R3,ADR
 2903                             526     
 2904 000001CC                    527             .ALIGN  4
 2905 000001CC                    528     _PLF_SUB:
 2906                             529             SUB_START
 2907 000001CC 4F22                   M           STS.L   PR,@-R15                ;[必要]
 2908                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 2909 000001CE 622C               530             EXTU.B  R2,R2                                           ; SET用(BIT7~BIT0)
 2910 000001D0 6923               531             MOV     R2,R9                                           ; PUSH
 2911 000001D2 6327               532             NOT     R2,R3                                           ; AND用
 2912 000001D4 2558               533             TST     A_REG,A_REG                                     ;
 2913                             534             TST_BIT_ON PLF_SB100                                    ;
 2914 000001D6 8B00                   M           BF      PLF_SB100
 2915 000001D8 222A               535             XOR     R2,R2                                           ;
 2916 000001DA                    536     PLF_SB100:
 2917                             537             DI_PUSH_SR_SH3  WK_REG1=R1,WK_REG2=R4                   ;
 2918 000001DA 0102                   M           STC     SR,R1                   ;
 2919 000001DC 9411                   M           MOV.W   #H'000000F0,R4          ;
 2920 000001DE 214B                   M           OR      R4,R1           ;INT15
 2921 000001E0 4F03                   M           STC.L   SR,@-R15                        ;PUSH SR
 2922 000001E2 410E                   M           LDC     R1,SR                   ;割込禁止（15）
 2923 000001E4 01EC               538             MOV.B   @(R0,TOP_REG),R1                                ;
 2924 000001E6 6413               539             MOV     R1,R4                                           ; old push
 2925 000001E8 2139               540             AND     R3,R1                                           ;
 2926 000001EA 212B               541             OR      R2,R1                                           ;
 2927 000001EC 0E14               542             MOV.B   R1,@(R0,TOP_REG)                                ; new save
 2928                             543             EI_POP_SR_SH3                                           ;
 2929 000001EE 4F07                   M           LDC.L   @R15+,SR                        ;POP SR
 2930 000001F0 214A               544             XOR     R4,R1                                           ; R1 XOR R4 = R1(変化)
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE    13
PROGRAM NAME =

 2931 000001F2 2419               545             AND     R1,R4                                           ; R1 and R4(前回) = OFF ｴｯ
                                          ｼﾞ
 2932 000001F4 2498               546             TST     R9,R4                                           ;
 2933 000001F6 0029               547             MOVT    R0                                              ; 0
 2934 000001F8 CA01               548             XOR     #BIT0,R0                                        ;
 2935 000001FA 6503               549             MOV     R0,A_REG                                        ; Tの反転 -> ARG
 2936                             550     
 2937 000001FC                    551     _PLF_SUB_END:
 2938                             552             SUB_END
 2939                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 2940 000001FC 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 2941                             553             M_RTS
 2942 000001FE 000B                   M           RTS                             ;RTSの後ろの
 2943 00000200 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 2944                             554     
 2945                             555     ;--------ﾘﾚﾗﾙﾌﾟｰﾙが存在する FFFFFF00(割込禁止)----
 2946                             556     
 2947                             557     ;       ***********************************************************
 2948                             558     ;       *****   Write Skip Controlor command            9*2     ***
 2949                             559     ;       ***     AregのON時に指定されたBITをonし                 ***
 2950                             560     ;       ***     それ以外の15bitはoffする                        ***
 2951                             561     ;       ***     割り込み禁止は不要(禁止と同じ命令を使用)        ***
 2952                             562     ;       ***                                                     ***
 2953                             563     ;       ***********************************************************
 2954                                     ***** BEGIN-POOL *****
 2955 00000202 00F0                       DATA FOR SOURCE-LINE 537
 2956                                     ***** END-POOL *****
 2957 00000204                    564             .ALIGN  4
 2958 00000204                    565     _WSC_CODE:                                                      ;
 2959                             566                     ADR_MAKE1_BIT LBEL1=WSC_ADR,LBEL2=WSC_OFS       ; R0:adr
 2960 00000204 E17F                   M   WSC_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 2961 00000206 E0FF                   M   WSC_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 2962 00000208 4118                   M                   SHLL8   R1
 2963 0000020A 600C                   M                   EXTU.B  R0,R0                           ;
 2964 0000020C 201B                   M                   OR      R1,R0                           ; adress
 2965 0000020E E20F               567     WSC_BTD:        MOV.B   #CHG_SQ_BTD,R2                          ; [命令書換用ラベル]"0~F"
 2966                             568                                                                     ;
 2967 00000210 51B5               569                     MOV.L   @(WSC_CALL-_SEQ_CALL_TBL1,CTBL_REG),R1  ; R0:adr R2:bit
 2968 00000212 410B               570                     JSR     @R1                                     ;
 2969 00000214 0009               571                     NOP                                             ;
 2970 00000216                    572     _WSC_CODE_END:
 2971                             573     
 2972                             574     ;       *************************************************************
 2973                             575     ;       *****   Write Skip Controlor command subroutine         *****
 2974                             576     ;       *************************************************************
 2975                             577     ;       Input R0 ADR ,R2 BITCOD(0~F)注意
 2976 00000218                    578             .ALIGN  4
 2977 00000218                    579     _WSC_SUB:
 2978                             580             SUB_START
 2979 00000218 4F22                   M           STS.L   PR,@-R15                ;[必要]
 2980                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 2981                             581     
 2982 0000021A 2558               582             TST     A_REG,A_REG                                     ;
 2983                             583             TST_BIT_OF WSC_S10                                      ; if ARG = 0  then jump
 2984 0000021C 8904                   M           BT      WSC_S10
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE    14
PROGRAM NAME =

 2985                             584     
 2986 0000021E D104               585             MOV.L   #_BIT_DATA_TBL2,R1                              ;
 2987 00000220 4208               586             SHLL2   R2                                              ; *4
 2988 00000222 312C               587             ADD     R2,R1                                           ;
 2989 00000224 6212               588             MOV.L   @R1,R2                                          ; (R2=BIT0~BIT15)
 2990                             589     
 2991 00000226 0E25               590             MOV.W   R2,@(R0,TOP_REG)                                ; 指定されたBITをON、それ
                                          以外OFF割込み禁止いらなかった
 2992                             591     
 2993 00000228                    592     WSC_S10:
 2994                             593             SUB_END
 2995                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 2996 00000228 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 2997                             594             M_RTS
 2998 0000022A 000B                   M           RTS                             ;RTSの後ろの
 2999 0000022C 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 3000                             595     
 3001                             596     ;       ------ﾘﾃﾗﾙﾌﾟｰﾙあり BIT_DATA_TBL2----
 3002                             597     
 3003                             598     ;       ***********************************************************
 3004                             599     ;       ***     Shift Register commnd                   8*2     ***
 3005                             600     ;       ***     CLK入力 Aregの立ち上がりで　Data(Mreg）でｼﾌﾄ    ***
 3006                             601     ;       ***     全ﾒﾓﾘ領域に相当するWORK-RAMあり                 ***
 3007                             602     ;       ***********************************************************
 3008                             603     ;       Mreg:data
 3009                             604     ;       Areg:clk
 3010                                     ***** BEGIN-POOL *****
 3011 0000022E 0000                       ALIGNMENT CODE
 3012 00000230 00000000                   DATA FOR SOURCE-LINE 585
 3013                                     ***** END-POOL *****
 3014 00000234                    605             .ALIGN  4
 3015 00000234                    606     _WSR_CODE:                                                      ;
 3016                             607             ADR_MAKE1_BIT LBEL1=WSR_ADR,LBEL2=WSR_OFS               ; R0:adr
 3017 00000234 E17F                   M   WSR_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 3018 00000236 E0FF                   M   WSR_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 3019 00000238 4118                   M                   SHLL8   R1
 3020 0000023A 600C                   M                   EXTU.B  R0,R0                           ;
 3021 0000023C 201B                   M                   OR      R1,R0                           ; adress
 3022                             608     
 3023 0000023E 51B6               609             MOV.L   @(WSR_CALL-_SEQ_CALL_TBL1,CTBL_REG),R1          ; R0:adr R2:bit
 3024 00000240 410B               610             JSR     @R1                                             ;
 3025 00000242 0009               611             NOP                                                     ;
 3026 00000244                    612     _WSR_CODE_END:
 3027                             613     
 3028                             614     ;       ***********************************************************
 3029                             615     ;       ***     Shift Register CODE CHANGE ROUTINE              ***
 3030                             616     ;       ***********************************************************
 3031                             617     ;       INPUT   R0 SHIFT CARD ADDRESS
 3032                             618     ;       1word --1bitのﾜｰｸRAMを使用
 3033                             619     ;       Mreg:data
 3034                             620     ;       Areg:clk
 3035 00000244                    621     _WSR_SUB:
 3036                             622             SUB_START
 3037 00000244 4F22                   M           STS.L   PR,@-R15                ;[必要]
 3038                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE    15
PROGRAM NAME =

 3039                             623     
 3040 00000246 5AC0               624             MOV.L   @(SR_STCT_TOP-_SEQ_DATA_TBL1,DTBL_REG),R10      ; R10=_SEQ_SR_FLG
 3041                             625                                                                     ; SHIFT (OLD ARG) CARD ADD
                                          RESS TOP
 3042 00000248 01AD               626             MOV.W   @(R0,R10),R1                                    ; load old ARG
 3043 0000024A 0A55               627             MOV.W   A_REG,@(R0,R10)                                 ; store new ARG 1word 1bit
 3044                             628     
 3045 0000024C 215A               629             XOR     A_REG,R1                                        ; (old ARG) xor (new ARG)
 3046 0000024E 2159               630             AND     A_REG,R1                                        ; and (new ARG)
 3047 00000250 2118               631             TST     R1,R1                                           ; ON EGDE CHECK
 3048                             632             TST_BIT_OF WSR_S10                                      ; if ARG not 0-->1 then ju
                                          mp
 3049 00000252 890A                   M           BT      WSR_S10
 3050                             633     
 3051 00000254 6273               634             MOV     M_REG,R2                                        ;
 3052                             635             DI_PUSH_SR_SH3  WK_REG1=R1,WK_REG2=R4                   ;
 3053 00000256 0102                   M           STC     SR,R1                   ;
 3054 00000258 940A                   M           MOV.W   #H'000000F0,R4          ;
 3055 0000025A 214B                   M           OR      R4,R1           ;INT15
 3056 0000025C 4F03                   M           STC.L   SR,@-R15                        ;PUSH SR
 3057 0000025E 410E                   M           LDC     R1,SR                   ;割込禁止（15）
 3058 00000260 01ED               636             MOV.W   @(R0,TOP_REG),R1                                ;
 3059 00000262 4225               637             ROTCR   R2                                              ; BIT_LOAD
 3060 00000264 4124               638             ROTCL   R1                                              ;
 3061                             639     
 3062 00000266 0E15               640             MOV.W   R1,@(R0,TOP_REG)                                ;
 3063                             641             EI_POP_SR_SH3                                           ;
 3064 00000268 4F07                   M           LDC.L   @R15+,SR                        ;POP SR
 3065                             642     
 3066 0000026A                    643     WSR_S10:
 3067                             644             SUB_END
 3068                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 3069 0000026A 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 3070                             645             M_RTS
 3071 0000026C 000B                   M           RTS                             ;RTSの後ろの
 3072 0000026E 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 3073                             646     
 3074                             647     
 3075                             648     ;********************************************************************
 3076                             649     ;* タイマ、カウンタ
 3077                             650     ;*
 3078                             651     ;********************************************************************
 3079                             652     ;__TMCT_ST_CNT  .EQU    12      ;12byte占有
 3080                             653     ;__TMCT_PV      .EQU    0*4     ;
 3081                             654     ;__TMCT_SV      .EQU    1*4     ;
 3082                             655     ;__TMCT_FLG     .EQU    2*4     ;
 3083                             656     
 3084                             657     ;       ***************************************************
 3085                             658     ;       ***                                             ***
 3086                             659     ;       ***     ﾀｲﾏ・ｶｳﾝﾀ構造                           ***
 3087                             660     ;       ***     *12(3data*4byte)                        ***
 3088                             661     ;       ***************************************************
 3089                             662             .MACRO  TMR_CNT_STRCT_ADR UNIT_REG,WKREG1
 3090                             663                     SHLL2   \UNIT_REG                               ; *4
 3091                             664                     MOV     \UNIT_REG,\WKREG1                       ;
 3092                             665                     SHLL    \UNIT_REG                               ; *8
 3093                             666                     ADD     \UNIT_REG,\WKREG1                       ;
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE    16
PROGRAM NAME =

 3094                             667             .ENDM
 3095                             668     
 3096                             669     ;0: 1ms         =1ms*1
 3097                             670     ;1: 10ms        =10ms*1
 3098                             671     ;2: 100ms       =10ms*10
 3099                             672     ;3: 1000ms      =100ms*10
 3100                             673     ;4: 60s         =1sec*60
 3101                             674     ;5: 3600s       =1sec*3600
 3102                             675     
 3103                             676     ;       *******************************************************************
 3104                             677     ;       ***                                                             ***
 3105                             678     ;       ***                                                             ***
 3106                             679     ;       ***     Write Timmer command                    6*2             ***
 3107                             680     ;       ***                                                             ***
 3108                             681     ;       *******************************************************************
 3109                             682     ;       Mreg:1:ﾀｲﾏﾓｼﾞｭ-ﾙｽﾀｰﾄ　0:停止 0->1設定ﾛｰﾄﾞ
 3110                             683     ;       Areg:1:ﾀｲﾏ計測 0:一旦停止
 3111                             684     ;
 3112                                     ***** BEGIN-POOL *****
 3113 00000270 00F0                       DATA FOR SOURCE-LINE 635
 3114                                     ***** END-POOL *****
 3115 00000274                    685             .ALIGN  4
 3116 00000274                    686     _WTMR_CODE:
 3117 00000274 E27F               687     WTMR_UNH:       MOV.B   #CHG_UNIT_H,R2                          ; TMR-H 番号
 3118 00000276 E0FF               688     WTMR_UNL:       MOV.B   #CHG_UNIT_L,R0                          ; TMR-L 番号
 3119 00000278 E30F               689     WTMR_DGT:       MOV.B   #CHG_DGT_SL,R3                          ; (0~5)ﾀｲﾏ領域より決定
 3120 0000027A 51B3               690             MOV.L   @(WTMR_CALL-_SEQ_CALL_TBL1,CTBL_REG),R1         ; R0:adr R2:bit
 3121 0000027C 410B               691             JSR     @R1                                             ;
 3122 0000027E 0009               692             NOP                                                     ;
 3123 00000280                    693     _WTMR_CODE_END:
 3124                             694     
 3125                             695     ;       *************************************************************
 3126                             696     ;       *****   Write Timmer command subroutine                 *****
 3127                             697     ;       *************************************************************
 3128                             698     ;       Mreg:1:ﾀｲﾏﾓｼﾞｭ-ﾙｽﾀｰﾄ　0:停止 0->1設定ﾛｰﾄﾞ
 3129                             699     ;       Areg:1:ﾀｲﾏ計測 0:一旦停止
 3130                             700     ;
 3131                             701     ;       R2:H
 3132                             702     ;       R0:L
 3133                             703     ;       R3:LATE
 3134                             704     
 3135 00000280                    705             .ALIGN  4
 3136 00000280                    706     _TM_LATE_CHGTOP
 3137 00000280 00000001           707             .DATA.L         1               ; 0:1ms    1MS*1
 3138 00000284 00000001           708             .DATA.L         1               ; 1:10ms   10MS*1
 3139 00000288 0000000A           709             .DATA.L         10              ; 2:100ms  10MS*10
 3140 0000028C 0000000A           710             .DATA.L         10              ; 3:1000   100MS*10
 3141 00000290 0000003C           711             .DATA.L         60              ; 4:1min    60S*1S
 3142 00000294 00000E10           712             .DATA.L         3600            ; 5:1h    3600S*1S
 3143 00000298 00000001           713             .DATA.L         1               ; 6
 3144 0000029C 00000001           714             .DATA.L         1               ; 7
 3145                             715     
 3146 000002A0                    716             .ALIGN  4
 3147 000002A0                    717     _WTMR_SUB:
 3148                             718             SUB_START
 3149 000002A0 4F22                   M           STS.L   PR,@-R15                ;[必要]
 3150                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE    17
PROGRAM NAME =

 3151                             719     ;;;     AND     N_REG,A_REG                                     ; ARG and NRG   ARG and NR
                                          Gを削除 091105AKIBA
 3152                             720     
 3153 000002A2 4218               721             SHLL8   R2                                              ; R2は0か1(ﾀｲﾏは500個　多
                                          くて1000個 3E8)EXTUは不要
 3154 000002A4 600C               722             EXTU.B  R0,R0                                           ;
 3155 000002A6 220B               723             OR      R0,R2                                           ; R2:ﾀｲﾏ番号
 3156 000002A8 6923               724             MOV     R2,R9_REG                                       ; ﾀｲﾏ番号PUSH
 3157                             725     
 3158                             726     ;       ----- ﾀｲﾏ構造体読出 -----
 3159 000002AA 5AC1               727             MOV.L   @(TM_STCT_TOP-_SEQ_DATA_TBL1,DTBL_REG),R10_REG  ; R10=_SEQ_TMR_DATA　ﾀｲﾏ演
                                          算ﾜｰｸram-top
 3160                             728             TMR_CNT_STRCT_ADR UNIT_REG=R2,WKREG1=R1                 ; R2*12=R1
 3161 000002AC 4208                   M                   SHLL2   R2                              ; *4
 3162 000002AE 6123                   M                   MOV     R2,R1                   ;
 3163 000002B0 4200                   M                   SHLL    R2                              ; *8
 3164 000002B2 312C                   M                   ADD     R2,R1                   ;
 3165 000002B4 3A1C               729             ADD     R1,R10                                          ; *12(R1)+TOP//////ﾀｲﾏ構造
                                          TOP
 3166                             730     
 3167                             731     ;       ----- ﾀｲﾏ番号(計測ﾀｲﾏ)選択 -----
 3168 000002B6 E007               732             MOV.B   #(BIT2+BIT1+BIT0),R0                            ;
 3169 000002B8 2309               733             AND     R0,R3                                           ; 変換LATE 0~7
 3170 000002BA 50C4               734             MOV.L   @(TM_LAT_CG_TOP-_SEQ_DATA_TBL1,DTBL_REG),R0     ; R10=_SEQ_TMR_DATA
 3171                             735     ;       MOV.W   @R0,R1_REG                                      ; 演算LATE(1,10,60,3600の
                                          いずれか)
 3172 000002BC 4308               736             SHLL2   R3                                              ; *4 (LONGﾃﾞｰﾀの為)
 3173 000002BE 303C               737             ADD     R3,R0                                           ; TOPｱﾄﾞﾚｽ + LATE
 3174 000002C0 6102               738             MOV.L   @R0,R1_REG                                      ; 演算LATE(1,10,60,3600の
                                          いずれか)
 3175                             739     
 3176                             740     ;       ----- ﾀｲﾑｱｯﾌﾟ,一旦停止,起動情報確認 -----
 3177 000002C2 50A2               741             MOV.L   @(__TMCT_FLG,R10_REG),R0                        ; FLAG領域
 3178 000002C4 C801               742             TST     #BIT0,R0                                        ; ACTIVE?
 3179                             743             TST_BIT_ON WTMR_S30                                     ; YES ACTIVE JUMP
 3180 000002C6 8B0C                   M           BF      WTMR_S30
 3181                             744     
 3182                             745     ;       -------- ILDE -------
 3183 000002C8 6473               746             MOV     M_REG,R4                                        ; Mreg読出
 3184 000002CA 4425               747             ROTCR   R4                                              ; 右ｼﾌﾄ(Tﾋﾞｯﾄ付)
 3185 000002CC 8B5C               748             BF      WTMR_S98                                        ; Mreg(ｽﾀｰﾄ指令OFF)
 3186                             749     
 3187                             750     ;       ----- Mreg ON(有効)-------
 3188 000002CE 200A               751             XOR     R0,R0                                           ; ｸﾘｱ
 3189 000002D0 1A02               752             MOV.L   R0,@(__TMCT_FLG,R10_REG)                        ; FLAG領域ｸﾘｱ BIT0(処理ﾌﾗｸ
                                          ﾞ),1(計測指令),2(up) 計測条件 ****,*011
 3190 000002D2 1A00               753             MOV.L   R0,@(__TMCT_PV,R10_REG)                         ; 実測PV=0
 3191                             754     
 3192                             755     ;       ----- ﾀｲﾏ設定値SET -----
 3193                             756     ;       設定LOAD data*1,10,(100),(1000),60,3600
 3194 000002D4 6283               757             MOV     D_REG,R2                                        ; ﾀｲﾏ設定(R2)*late R1
 3195 000002D6 622D               758             EXTU.W  R2,R2                                           ; 符号なし
 3196 000002D8 321D               759             DMULS.L R1_REG,R2                                       ; R1 * R2 → MACH,MACL
 3197 000002DA 001A               760             STS.L   MACL,R0                                         ; 3600*FFFF 1*FFFF
 3198 000002DC 1A01               761             MOV.L   R0,@(__TMCT_SV,R10_REG)                         ; SV:SET
 3199                             762     
 3200                             763     ;       ----- ﾀｲﾏ起動 -----
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE    18
PROGRAM NAME =

 3201 000002DE E001               764             MOV.B   #BIT0,R0                                        ;
 3202 000002E0 1A02               765             MOV.L   R0,@(__TMCT_FLG,R10_REG)                        ; 起動中SET(ﾀｲﾏ計測指令BIT
                                          1=0のままで起動しない)
 3203                             766     
 3204                             767     ;       ------- 測定中 -----------------
 3205 000002E2                    768     WTMR_S30:
 3206                             769     ;       ----- ﾀｲﾑｱｯﾌﾟ確認 -----
 3207 000002E2 50A2               770             MOV.L   @(__TMCT_FLG,R10_REG),R0                        ; FLAG領域
 3208 000002E4 C804               771             TST     #BIT2,R0                                        ; ﾀｲﾑｱｯﾌﾟ確認
 3209                             772             TST_BIT_ON WTMR_S70                                     ; ﾀｲﾑｱｯﾌﾟでｼﾞｬﾝﾌﾟ
 3210 000002E6 8B2E                   M           BF      WTMR_S70
 3211                             773                                                                     ;
 3212                             774     
 3213                             775     ;       -----ﾀｲﾏ一旦停止CHECK---
 3214 000002E8 50A2               776             MOV.L   @(__TMCT_FLG,R10_REG),R0                        ; FLAG領域
 3215 000002EA 2558               777             TST     A_REG,A_REG                                     ; 一旦停止情報確認
 3216                             778             TST_BIT_ON WTMR_S40                                     ; 継続でｼﾞｬﾝﾌﾟ
 3217 000002EC 8B02                   M           BF      WTMR_S40
 3218 000002EE C9FD               779             AND     #LOW ~BIT1,R0                                   ; 0:一旦停止
 3219                             780             M_BRA   WTMR_S45                                        ;
 3220 000002F0 A001                   M           BRA     WTMR_S45
 3221 000002F2 0009                   M           NOP
 3222 000002F4                    781     WTMR_S40:
 3223 000002F4 CB02               782             OR      #BIT1,R0                                        ; 1:継続
 3224 000002F6                    783     WTMR_S45:
 3225 000002F6 1A02               784             MOV.L   R0,@(__TMCT_FLG,R10_REG)                        ; FLAG領域
 3226                             785     
 3227                             786     ;       -------------実測比較・ﾘﾌﾚｯｼｭ-----------------
 3228 000002F8 50A0               787             MOV.L   @(__TMCT_PV,R10_REG),R0                         ; PV LOAD
 3229 000002FA 6203               788             MOV     R0,R2                                           ; PV=R2
 3230                             789     
 3231 000002FC 50A1               790             MOV.L   @(__TMCT_SV,R10_REG),R0                         ; SV LOAD
 3232 000002FE 3202               791             CMP/HS  R0,R2                                           ; R0=<R2
 3233 00000300 8B15               792             BF      WTMR_S50                                        ; NO R2 < R0 ﾀｲﾏ計測 ﾀｲﾑｱｯ
                                          ﾌﾟで無い時ｼﾞｬﾝﾌﾟ
 3234                             793     
 3235 00000302 6203               794             MOV     R0,R2                                           ; 実測はﾀｲﾑｱｯﾌﾟで設定を表
                                          示する
 3236                             795                                                                     ; 実測は端数,処理時間を表
                                          すものではない
 3237                             796     ;       --------- ﾀｲﾏﾀｲﾑｱｯﾌﾟ-----
 3238 00000304 E005               797             MOV.B   #(BIT2+BIT0),R0                                 ; ﾀｲﾏ停止(ﾀｲﾑｱｯﾌﾟ,起動ﾋﾞｯﾄ
                                          初期化)
 3239 00000306 1A02               798             MOV.L   R0,@(__TMCT_FLG,R10_REG)                        ; FLAG領域
 3240                             799     
 3241                             800             PUSH_REG1 R1_REG
 3242 00000308 2F16                   M           MOV.L   R1_REG,@-R15            ;PUSH=SP-4
 3243                                 M                                           ;REG=>[SP]
 3244                                 M                                           ;"-4" FF,FF,FF,FC
 3245                             801             PUSH_REG1 R2                                            ; ﾀｲﾏPV
 3246 0000030A 2F26                   M           MOV.L   R2,@-R15                ;PUSH=SP-4
 3247                                 M                                           ;REG=>[SP]
 3248                                 M                                           ;"-4" FF,FF,FF,FC
 3249                             802     ;       --------------ﾀｲﾑｱｯﾌﾟﾋﾞﾄｾｯﾄ(ﾀｲﾏ,ｶｳﾝﾀ同じ)-------
 3250 0000030C 50C2               803             MOV.L   @(TM_KND_T_TOP-_SEQ_DATA_TBL1,DTBL_REG),R0      ; ﾒﾓﾘ種別「T」TOPｱﾄﾞﾚｽLOAD
 3251                             804     ;;;     MOV.L   @R0,R1_REG                                      ; R1=_SEQ_CARD_RAM+_MKIND_
                                          T_ADR
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE    19
PROGRAM NAME =

 3252 0000030E 6103               805             MOV.L   R0,R1_REG                                       ; R1=_SEQ_CARD_RAM+_MKIND_
                                          T_ADR 値ではなくｱﾄﾞﾚｽをSET AKIBA
 3253 00000310 6293               806             MOV     R9_REG,R2_REG                                   ; ﾀｲﾏ番号PUSH
 3254                             807             FAR_JSR #_TMR_CNT_ADR_BIT_MAKE,R0                       ; input R1,R2 /ANS=R1:ADR
                                          R0:BIT
 3255 00000312 D012                   M           MOV.L   #_TMR_CNT_ADR_BIT_MAKE,R0               ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 3256 00000314 400B                   M           JSR     @R0                     ;
 3257 00000316 0009                   M           NOP                                     ;
 3258                             808     
 3259                             809             DI_PUSH_SR_SH3  WK_REG1=R2,WK_REG2=R4                   ; 割込ﾏｽｸ
 3260 00000318 0202                   M           STC     SR,R2                   ;
 3261 0000031A 941D                   M           MOV.W   #H'000000F0,R4          ;
 3262 0000031C 224B                   M           OR      R4,R2           ;INT15
 3263 0000031E 4F03                   M           STC.L   SR,@-R15                        ;PUSH SR
 3264 00000320 420E                   M           LDC     R2,SR                   ;割込禁止（15）
 3265 00000322 6310               810             MOV.B   @R1,R3                                          ; ﾒﾓﾘ内情報LOAD
 3266 00000324 230B               811             OR      R0,R3                                           ; BIT-SET
 3267 00000326 2130               812             MOV.B   R3,@R1                                          ; ﾒﾓﾘ情報更新
 3268                             813             EI_POP_SR_SH3                                           ; 割込ﾏｽｸ解除
 3269 00000328 4F07                   M           LDC.L   @R15+,SR                        ;POP SR
 3270                             814     ;       -------------------------------------------------
 3271                             815             POP_REG1 R2                                             ; ﾀｲﾏPV
 3272                                 M                                   ; RE"+4" 00,00,00,04
 3273 0000032A 62F6                   M           MOV.L   @R15+,R2        ;
 3274                             816             POP_REG1 R1_REG
 3275                                 M                                   ; RE"+4" 00,00,00,04
 3276 0000032C 61F6                   M           MOV.L   @R15+,R1_REG        ;
 3277 0000032E                    817     WTMR_S50:
 3278                             818     
 3279 0000032E E402               819             MOV.B   #2,R4                                           ;
 3280 00000330 3412               820             CMP/HS  R1_REG,R4                                       ; R2(2)=< R1
 3281 00000332 8903               821             BT      WTMR_S60                                        ; R1=0,1 =< R4 YES(演算な
                                          い)
 3282 00000334 6413               822             MOV     R1_REG,R4                                       ;
 3283                             823             FAR_JSR #_DIVS_32REG2_32REG1_R4_32REG2_R2,R0            ; R2/R4=R2
 3284 00000336 D00A                   M           MOV.L   #_DIVS_32REG2_32REG1_R4_32REG2_R2,R0            ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 3285 00000338 400B                   M           JSR     @R0                     ;
 3286 0000033A 0009                   M           NOP                                     ;
 3287 0000033C                    824     WTMR_S60:
 3288                             825     ;       --------------実測の転送(ﾀｲﾏ,ｶｳﾝﾀ同じ)-------
 3289 0000033C 50C3               826             MOV.L   @(TM_KND_TD_TOP-_SEQ_DATA_TBL1,DTBL_REG),R0     ; ﾒﾓﾘ種別「Td」TOPｱﾄﾞﾚｽLOA
                                          D
 3290                             827     ;;;     MOV.L   @R0,R1                                          ; R1=_SEQ_CARD_RAM+_MKIND_
                                          TD_ADR
 3291 0000033E 6103               828             MOV.L   R0,R1                                           ; R1=_SEQ_CARD_RAM+_MKIND_
                                          TD_ADR
 3292 00000340 319C               829             ADD     R9_REG,R1                                       ;
 3293 00000342 319C               830             ADD     R9_REG,R1                                       ;
 3294 00000344 2121               831             MOV.W   R2,@R1                                          ; TD_TOP+UNIT*2 PV SAVE
 3295                             832     
 3296 00000346                    833     WTMR_S70:
 3297 00000346 6473               834             MOV     M_REG,R4                                        ; M_REG情報LOAD
 3298 00000348 4425               835             ROTCR   R4                                              ; Mreg[起動指令]
 3299 0000034A 8B0B               836             BF      WTMR_S95                                        ; (終了・中断)
 3300                             837     
 3301 0000034C 50A2               838             MOV.L   @(__TMCT_FLG,R10_REG),R0                        ; FLAG領域
 3302 0000034E C804               839             TST     #BIT2,R0                                        ; 内部ﾀｲﾑｱｯﾌﾟ?
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE    20
PROGRAM NAME =

 3303                             840             TST_BIT_OF WTMR_S98                                     ; NO
 3304 00000350 891A                   M           BT      WTMR_S98
 3305                             841     
 3306                             842     ;       ------ TIME UP -------------------
 3307 00000352                    843     WTMR_S90:
 3308 00000352 E501               844             MOV.B   #BIT0,A_REG                                     ; A_REG ON
 3309                             845             M_BRA   WTMR_SEND                                       ;
 3310 00000354 A019                   M           BRA     WTMR_SEND
 3311 00000356 0009                   M           NOP
 3312                             846     
 3313                             847     
 3314                             848     ;       ------ 中断/ﾀｲﾑｱｯﾌﾟ後の終了 ------
 3315                                     ***** BEGIN-POOL *****
 3316 00000358 00F0                       DATA FOR SOURCE-LINE 809
 3317 0000035A 0000                       ALIGNMENT CODE
 3318 0000035C 00000000                   DATA FOR SOURCE-LINE 807
 3319 00000360 00000000                   DATA FOR SOURCE-LINE 823
 3320                                     ***** END-POOL *****
 3321 00000364                    849     WTMR_S95:
 3322 00000364 200A               850             XOR     R0,R0                                           ; ｸﾘｱ
 3323 00000366 1A02               851             MOV.L   R0,@(__TMCT_FLG,R10_REG)                        ; FLAG領域ｸﾘｱ BIT0(処理ﾌﾗｸ
                                          ﾞ),1(計測指令),2(up)
 3324                             852     
 3325                             853     ;       --------------ﾀｲﾑｱｯﾌﾟﾋﾞﾄｸﾘｱ(ﾀｲﾏ,ｶｳﾝﾀ同じ)-------
 3326 00000368 50C2               854             MOV.L   @(TM_KND_T_TOP-_SEQ_DATA_TBL1,DTBL_REG),R0      ; ﾒﾓﾘ種別「T」 TOPｱﾄﾞﾚｽLOA
                                          D
 3327                             855     ;;;     MOV.L   @R0,R1_REG                                      ; R1=_SEQ_CARD_RAM+_MKIND_
                                          T_ADR
 3328 0000036A 6103               856             MOV.L   R0,R1_REG                                       ; R1=_SEQ_CARD_RAM+_MKIND_
                                          T_ADR 値ではなくｱﾄﾞﾚｽをSET AKIBA
 3329 0000036C 6293               857             MOV     R9_REG,R2_REG                                   ; ﾀｲﾏ番号PUSH
 3330                             858             FAR_JSR #_TMR_CNT_ADR_BIT_MAKE,R0                       ; input R1,R2 /ANS=R1:ADR
                                          R0:BIT
 3331 0000036E D009                   M           MOV.L   #_TMR_CNT_ADR_BIT_MAKE,R0               ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 3332 00000370 400B                   M           JSR     @R0                     ;
 3333 00000372 0009                   M           NOP                                     ;
 3334                             859     
 3335                             860             DI_PUSH_SR_SH3  WK_REG1=R2,WK_REG2=R4                   ; 割込ﾏｽｸ
 3336 00000374 0202                   M           STC     SR,R2                   ;
 3337 00000376 940B                   M           MOV.W   #H'000000F0,R4          ;
 3338 00000378 224B                   M           OR      R4,R2           ;INT15
 3339 0000037A 4F03                   M           STC.L   SR,@-R15                        ;PUSH SR
 3340 0000037C 420E                   M           LDC     R2,SR                   ;割込禁止（15）
 3341 0000037E 6007               861             NOT     R0,R0                                           ; R0反転
 3342 00000380 6310               862             MOV.B   @R1,R3                                          ; ﾒﾓﾘ内情報LOAD
 3343 00000382 2309               863             AND     R0,R3                                           ; BIT--CLR
 3344 00000384 2130               864             MOV.B   R3,@R1                                          ; ﾒﾓﾘ情報更新
 3345                             865             EI_POP_SR_SH3                                           ; 割込ﾏｽｸ解除
 3346 00000386 4F07                   M           LDC.L   @R15+,SR                        ;POP SR
 3347                             866     
 3348                             867     ;       ------ IDEL ------
 3349 00000388                    868     WTMR_S98                                                        ; Mreg(ｽﾀｰﾄ指令OFF)
 3350 00000388 255A               869             XOR     A_REG,A_REG                                     ; A_REGｸﾘｱ
 3351                             870     
 3352 0000038A                    871     WTMR_SEND:
 3353                             872             SUB_END
 3354                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE    21
PROGRAM NAME =

 3355 0000038A 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 3356                             873             M_RTS
 3357 0000038C 000B                   M           RTS                             ;RTSの後ろの
 3358 0000038E 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 3359                             874     
 3360                             875     ;       *************************************************************
 3361                             876     ;       *****   Write Counter command                   5*2     *****
 3362                             877     ;       *************************************************************
 3363                                     ***** BEGIN-POOL *****
 3364 00000390 00F0                       DATA FOR SOURCE-LINE 860
 3365 00000392 0000                       ALIGNMENT CODE
 3366 00000394 00000000                   DATA FOR SOURCE-LINE 858
 3367                                     ***** END-POOL *****
 3368 00000398                    878             .ALIGN  4
 3369 00000398                    879     _WCTR_CODE:
 3370                             880     
 3371 00000398 E27F               881     WCTR_UNH:       MOV.B   #CHG_UNIT_H,R2                          ; CNT-H 番号
 3372 0000039A E0FF               882     WCTR_UNL:       MOV.B   #CHG_UNIT_L,R0                          ; CNT-L 番号
 3373 0000039C 51B4               883             MOV.L   @(WCTR_CALL-_SEQ_CALL_TBL1,CTBL_REG),R1         ; R0:adr R2:bit
 3374 0000039E 410B               884             JSR     @R1                                             ;
 3375 000003A0 0009               885             NOP                                                     ;
 3376 000003A2                    886     _WCTR_CODE_END:
 3377                             887     
 3378                             888     ;       *************************************************************
 3379                             889     ;       *****   Write Counter command subroutine                *****
 3380                             890     ;       *************************************************************
 3381                             891     ;       Mreg ENABLE
 3382                             892     ;       Areg CLK
 3383                             893     ;
 3384 000003A4                    894             .ALIGN  4
 3385 000003A4                    895     _WCTR_SUB:
 3386                             896             SUB_START
 3387 000003A4 4F22                   M           STS.L   PR,@-R15                ;[必要]
 3388                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 3389                             897     
 3390 000003A6 4218               898             SHLL8   R2                                              ; R2は0か1(ﾀｲﾏは500個　多
                                          くて1000個 3E8)EXTUは不要
 3391 000003A8 600C               899             EXTU.B  R0,R0                                           ;
 3392 000003AA 220B               900             OR      R0,R2                                           ; R2:ｶｳﾝﾀ番号
 3393 000003AC 6923               901             MOV     R2,R9_REG                                       ; ｶｳﾝﾀ番号PUSH
 3394                             902     
 3395 000003AE 5AC5               903             MOV.L   @(CT_STCT_TOP-_SEQ_DATA_TBL1,DTBL_REG),R10_REG  ; R10=_SEQ_CTR_DATA ｶｳﾝﾀ演
                                          算ﾜｰｸram-top
 3396                             904             TMR_CNT_STRCT_ADR UNIT_REG=R2,WKREG1=R1                 ; R2*12=R1
 3397 000003B0 4208                   M                   SHLL2   R2                              ; *4
 3398 000003B2 6123                   M                   MOV     R2,R1                   ;
 3399 000003B4 4200                   M                   SHLL    R2                              ; *8
 3400 000003B6 312C                   M                   ADD     R2,R1                   ;
 3401 000003B8 3A1C               905             ADD     R1,R10                                          ; *12(R1)+TOP//////ｶｳﾝﾀ構
                                          造TOP
 3402                             906     
 3403                             907     ;       ========= 内部的には前回値のリフレッシュとカウントを常時行う====
 3404                             908     ;       ---------- CLK(A_REG) REFLASH ------
 3405 000003BA 211A               909             XOR     R1,R1                                           ; 前回値格納ﾚｼﾞｽﾀｸﾘｱ
 3406 000003BC 2558               910             TST     A_REG,A_REG                                     ; 今回値確認
 3407                             911             TST_BIT_OF WCTR_S10                                     ;
 3408 000003BE 8900                   M           BT      WCTR_S10
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE    22
PROGRAM NAME =

 3409 000003C0 E102               912             MOV     #BIT1,R1                                        ; CLK(今回値格納)
 3410 000003C2                    913     WCTR_S10:
 3411 000003C2 50A2               914             MOV.L   @(__TMCT_FLG,R10_REG),R0                        ; FLAG領域ｸﾘｱ BIT0(処理ﾌﾗｸ
                                          ﾞ),BIT1:CLK-前回値
 3412 000003C4 6303               915             MOV     R0,R3                                           ; OLD
 3413 000003C6 C9FD               916             AND     #LOW ~BIT1,R0                                   ; BIT1ｸﾘｱ
 3414 000003C8 201B               917             OR      R1,R0                                           ; NEW A_REG SAVE
 3415 000003CA 1A02               918             MOV.L   R0,@(__TMCT_FLG,R10_REG)                        ; FLAG領域更新
 3416                             919     
 3417                             920     ;       -------- ON-EDGE なら+1 0000,FFFFでﾘﾐｯﾄ-----
 3418 000003CC 230A               921             XOR     R0,R3                                           ; NEW XOR OLD->R3
 3419 000003CE 2039               922             AND     R3,R0                                           ; EDGE(R3) AND R0 ->R0
 3420 000003D0 C802               923             TST     #BIT1,R0                                        ;
 3421                             924             TST_BIT_OF WCTR_S20                                     ;
 3422 000003D2 8905                   M           BT      WCTR_S20
 3423                             925     
 3424 000003D4 50A0               926             MOV.L   @(__TMCT_PV,R10_REG),R0                         ; PV LOAD
 3425 000003D6 7001               927             ADD     #1,R0                                           ;
 3426 000003D8 D417               928             MOV.L   #H'FFFF0000,R4                                  ; PV=0000,FFFFまで
 3427 000003DA 2048               929             TST     R4,R0                                           ;
 3428                             930             TST_BIT_ON WCTR_S20                                     ;
 3429 000003DC 8B00                   M           BF      WCTR_S20
 3430 000003DE 1A00               931             MOV.L   R0,@(__TMCT_PV,R10_REG)                         ;
 3431 000003E0                    932     WCTR_S20:
 3432                             933     
 3433                             934     ;       =========処理開始==============
 3434 000003E0 50A2               935             MOV.L   @(__TMCT_FLG,R10_REG),R0                        ; FLAG領域
 3435 000003E2 C801               936             TST     #BIT0,R0                                        ; ACTIVE?
 3436                             937             TST_BIT_ON WCTR_S30                                     ; YES ACTIVE JUMP
 3437 000003E4 8B09                   M           BF      WCTR_S30
 3438                             938     
 3439                             939     ;       -------- ILDE -------
 3440 000003E6 6473               940             MOV     M_REG,R4
 3441 000003E8 4425               941             ROTCR   R4                                              ;
 3442 000003EA 8B3C               942             BF      WCTR_S98                                        ; Mreg(ｽﾀｰﾄ指令OFF)
 3443                             943     
 3444                             944     ;       ----- Mreg ON(有効)-------
 3445 000003EC 50A2               945             MOV.L   @(__TMCT_FLG,R10_REG),R0                        ; FLAG領域ｸﾘｱ BIT0(処理ﾌﾗｸ
                                          ﾞ),BIT1:CLK-前回値
 3446 000003EE C9FE               946             AND     #LOW ~BIT0,R0
 3447 000003F0 1A02               947             MOV.L   R0,@(__TMCT_FLG,R10_REG)                        ; FLAG領域ｸﾘｱ BIT0(処理ﾌﾗｸ
                                          ﾞ),BIT1:CLK-前回値
 3448                             948     
 3449 000003F2 200A               949             XOR     R0,R0
 3450 000003F4 1A00               950             MOV.L   R0,@(__TMCT_PV,R10_REG)                         ; 実測PV=0
 3451                             951     
 3452                             952     ;       ----- ｶｳﾝﾀ起動 -----
 3453 000003F6 E001               953             MOV.B   #BIT0,R0                                        ;
 3454 000003F8 1A02               954             MOV.L   R0,@(__TMCT_FLG,R10_REG)                        ; 起動中SET(ﾀｲﾏ計測指令BIT
                                          1=0のままで起動しない)
 3455                             955     
 3456                             956     ;       ------- 測定中 -----------------
 3457 000003FA                    957     WCTR_S30:
 3458 000003FA 6473               958             MOV     M_REG,R4
 3459 000003FC 4425               959             ROTCR   R4                                              ;
 3460 000003FE 8B1F               960             BF      WCTR_S95                                        ; Mreg(ｽﾀｰﾄ指令OFF)
 3461                             961     
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE    23
PROGRAM NAME =

 3462                             962     ;       ---------- 実測転送------------
 3463 00000400 50A0               963             MOV.L   @(__TMCT_PV,R10_REG),R0                         ; PV LOAD
 3464 00000402 6203               964             MOV     R0,R2
 3465                             965     
 3466 00000404 50C7               966             MOV.L   @(CT_KND_CD_TOP-_SEQ_DATA_TBL1,DTBL_REG),R0     ;
 3467                             967     ;;;     MOV.L   @R0,R1                                          ; R1=_SEQ_CARD_RAM+_MKIND_
                                          CD_ADR
 3468 00000406 6103               968             MOV.L   R0,R1                                           ; R1=_SEQ_CARD_RAM+_MKIND_
                                          CD_ADR
 3469 00000408 319C               969             ADD     R9_REG,R1                                       ;
 3470 0000040A 319C               970             ADD     R9_REG,R1                                       ;
 3471 0000040C 2121               971             MOV.W   R2,@R1                                          ; TD_TOP+UNIT*2 PV SAVE
 3472                             972     
 3473                             973     ;       --------- 比較--------------
 3474 0000040E 3282               974             CMP/HS  D_REG,R2                                        ; SV =< PV?
 3475 00000410 8B19               975             BF      WCTR_S97                                        ; NO PV < SV
 3476                             976     
 3477 00000412                    977     WCTR_S90:
 3478                             978     ;       --------------ｶｳﾝﾄｱｯﾌﾟﾋﾞﾄｾｯﾄ(ﾀｲﾏ,ｶｳﾝﾀ同じ)-------
 3479 00000412 50C6               979             MOV.L   @(CT_KDN_C_TOP-_SEQ_DATA_TBL1,DTBL_REG),R0      ;
 3480                             980     ;;;     MOV.L   @R0,R1_REG                                      ; R1=_SEQ_CARD_RAM+_MKIND_
                                          T_ADR
 3481 00000414 6103               981             MOV.L   R0,R1_REG                                       ; R1=_SEQ_CARD_RAM+_MKIND_
                                          T_ADR
 3482 00000416 6293               982             MOV     R9_REG,R2_REG                                   ; ｶｳﾝﾀ番号PUSH
 3483                             983             FAR_JSR #_TMR_CNT_ADR_BIT_MAKE,R0                       ; input R1,R2 /ANS=R1:ADR
                                          R0:BIT
 3484 00000418 D008                   M           MOV.L   #_TMR_CNT_ADR_BIT_MAKE,R0               ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 3485 0000041A 400B                   M           JSR     @R0                     ;
 3486 0000041C 0009                   M           NOP                                     ;
 3487                             984     
 3488                             985             DI_PUSH_SR_SH3  WK_REG1=R2,WK_REG2=R4                   ;
 3489 0000041E 0202                   M           STC     SR,R2                   ;
 3490 00000420 9409                   M           MOV.W   #H'000000F0,R4          ;
 3491 00000422 224B                   M           OR      R4,R2           ;INT15
 3492 00000424 4F03                   M           STC.L   SR,@-R15                        ;PUSH SR
 3493 00000426 420E                   M           LDC     R2,SR                   ;割込禁止（15）
 3494 00000428 6310               986             MOV.B   @R1,R3                                          ;
 3495 0000042A 230B               987             OR      R0,R3                                           ; BIT-SET
 3496 0000042C 2130               988             MOV.B   R3,@R1                                          ;
 3497                             989             EI_POP_SR_SH3                                           ;
 3498 0000042E 4F07                   M           LDC.L   @R15+,SR                        ;POP SR
 3499                             990     ;       -------------------------------------------------
 3500 00000430 E501               991             MOV.B   #BIT0,A_REG                                     ;
 3501                             992             M_BRA   WCTR_SEND                                       ;
 3502 00000432 A019                   M           BRA     WCTR_SEND
 3503 00000434 0009                   M           NOP
 3504                             993     
 3505                             994     ;       ==== ﾀｲﾏﾕﾆｯﾄ中断/終了===
 3506                                     ***** BEGIN-POOL *****
 3507 00000436 00F0                       DATA FOR SOURCE-LINE 985
 3508 00000438 FFFF0000                   DATA FOR SOURCE-LINE 928
 3509 0000043C 00000000                   DATA FOR SOURCE-LINE 983
 3510                                     ***** END-POOL *****
 3511 00000440                    995     WCTR_S95:
 3512 00000440 50A2               996             MOV.L   @(__TMCT_FLG,R10_REG),R0                        ; FLAG領域ｸﾘｱ BIT0(処理ﾌﾗｸ
                                          ﾞ),BIT1:CLK-前回値
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE    24
PROGRAM NAME =

 3513 00000442 C9FE               997             AND     #LOW ~BIT0,R0
 3514 00000444 1A02               998             MOV.L   R0,@(__TMCT_FLG,R10_REG)                        ; FLAG領域ｸﾘｱ BIT0(処理ﾌﾗｸ
                                          ﾞ),BIT1:CLK-前回値
 3515                             999     
 3516 00000446                   1000     WCTR_S97:
 3517                            1001     ;       --------------ﾀｲﾑｱｯﾌﾟﾋﾞﾄｸﾘｱ(ﾀｲﾏ,ｶｳﾝﾀ同じ)-------
 3518 00000446 50C6              1002             MOV.L   @(CT_KDN_C_TOP-_SEQ_DATA_TBL1,DTBL_REG),R0      ;
 3519                            1003     ;;;     MOV.L   @R0,R1_REG                                      ; R1=_SEQ_CARD_RAM+_MKIND_
                                          T_ADR
 3520 00000448 6103              1004             MOV.L   R0,R1_REG                                       ; R1=_SEQ_CARD_RAM+_MKIND_
                                          T_ADR
 3521 0000044A 6293              1005             MOV     R9_REG,R2_REG                                   ; ﾀｲﾏ番号PUSH
 3522                            1006             FAR_JSR #_TMR_CNT_ADR_BIT_MAKE,R0                       ; input R1,R2 /ANS=R1:ADR
                                          R0:BIT
 3523 0000044C D008                   M           MOV.L   #_TMR_CNT_ADR_BIT_MAKE,R0               ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 3524 0000044E 400B                   M           JSR     @R0                     ;
 3525 00000450 0009                   M           NOP                                     ;
 3526                            1007     
 3527                            1008             DI_PUSH_SR_SH3  WK_REG1=R2,WK_REG2=R4                   ;
 3528 00000452 0202                   M           STC     SR,R2                   ;
 3529 00000454 940B                   M           MOV.W   #H'000000F0,R4          ;
 3530 00000456 224B                   M           OR      R4,R2           ;INT15
 3531 00000458 4F03                   M           STC.L   SR,@-R15                        ;PUSH SR
 3532 0000045A 420E                   M           LDC     R2,SR                   ;割込禁止（15）
 3533 0000045C 6007              1009             NOT     R0,R0                                           ;
 3534 0000045E 6310              1010             MOV.B   @R1,R3                                          ;
 3535 00000460 2309              1011             AND     R0,R3                                           ; BIT--CLR
 3536 00000462 2130              1012             MOV.B   R3,@R1                                          ;
 3537                            1013             EI_POP_SR_SH3                                           ;
 3538 00000464 4F07                   M           LDC.L   @R15+,SR                        ;POP SR
 3539                            1014     
 3540                            1015     ;       ------ IDEL ------
 3541 00000466                   1016     WCTR_S98                                                        ; Mreg(ｽﾀｰﾄ指令OFF)
 3542 00000466 255A              1017             XOR     A_REG,A_REG
 3543                            1018     
 3544 00000468                   1019     WCTR_SEND:
 3545                            1020             SUB_END
 3546                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 3547 00000468 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 3548                            1021             M_RTS
 3549 0000046A 000B                   M           RTS                             ;RTSの後ろの
 3550 0000046C 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 3551                            1022     
 3552                            1023     ;       ***************************************************
 3553                            1024     ;       ***                                             ***
 3554                            1025     ;       ***     ﾀｲﾏ,ｶｳﾝﾀ番号からのｱﾄﾞﾚｽ,ﾋﾞｯﾄ作成        ***
 3555                            1026     ;       ***                                             ***
 3556                            1027     ;       ***************************************************
 3557                            1028     ;       MOV.L   @(TM_KND_T_TOP-_SEQ_DATA_TBL1,DTBL_REG),R0      ;
 3558                            1029     ;       MOV.L   @R0,R1                                          ; R1=_SEQ_CARD_RAM+_MKIND_
                                          T_ADR
 3559                            1030     ;       MOV     R9,R2                                           ; ﾀｲﾏ番号PUSH
 3560                            1031     ;       Input R1(TOP_ADR),R2(ﾀｲﾏ番号)
 3561                            1032     ;       ANS R1:byte adr
 3562                            1033     ;       ANS R0:bit0~7
 3563                            1034     ;
 3564                            1035     ;       USED R0,R1,R2,R4
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE    25
PROGRAM NAME =

 3565                            1036     ;
 3566                                     ***** BEGIN-POOL *****
 3567 0000046E 00F0                       DATA FOR SOURCE-LINE 1008
 3568 00000470 00000000                   DATA FOR SOURCE-LINE 1006
 3569                                     ***** END-POOL *****
 3570 00000474                   1037     _TMR_CNT_ADR_BIT_MAKE
 3571                            1038             SUB_START
 3572 00000474 4F22                   M           STS.L   PR,@-R15                ;[必要]
 3573                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 3574                            1039     
 3575 00000476 6023              1040             MOV     R2_REG,R0                                       ;
 3576                            1041     
 3577                            1042     ;       ---- R0 NO.-->BIT0~7変換----
 3578 00000478 C90F              1043             AND     #(BIT3+BIT2+BIT1+BIT0),R0                       ; ADD 100112 AKIBA
 3579 0000047A D405              1044             MOV.L   #_BIT_DATA_TBL2,R4                              ;
 3580 0000047C 4008              1045             SHLL2   R0                                              ;
 3581 0000047E 340C              1046             ADD     R0,R4                                           ;
 3582 00000480 6042              1047             MOV.L   @R4,R0_REG                                      ; (R0=BIT0~BIT7)
 3583                            1048     
 3584 00000482 D404              1049             MOV.L   #H'00FF,R4                                      ; ADD 100112 AKIBA
 3585 00000484 3403              1050             CMP/GE  R0,R4                                           ; BIT DATAﾁｪｯｸ IF OVER THE
                                          N ERR R4 >= R0
 3586 00000486 8907              1051             BT      _TMR_CNT_ADR_BIT_L                              ; R4>=R0 JUMP
 3587 00000488 4019              1052             SHLR8   R0                                              ;
 3588                            1053             M_BRA   _TMR_CNT_ADR_BIT_H                              ;
 3589 0000048A A007                   M           BRA     _TMR_CNT_ADR_BIT_H
 3590 0000048C 0009                   M           NOP
 3591                            1054     
 3592                                     ***** BEGIN-POOL *****
 3593 0000048E 0000                       ALIGNMENT CODE
 3594 00000490 00000000                   DATA FOR SOURCE-LINE 1044
 3595 00000494 000000FF                   DATA FOR SOURCE-LINE 1049
 3596                                     ***** END-POOL *****
 3597 00000498                   1055     _TMR_CNT_ADR_BIT_L
 3598 00000498 D404              1056             MOV.L   #H'0001,R4                                      ;
 3599 0000049A 314C              1057             ADD     R4,R1                                           ; MEM ADR L + 1
 3600                            1058     
 3601 0000049C                   1059     _TMR_CNT_ADR_BIT_H
 3602 0000049C 4209              1060             SHLR2   R2                                              ; ﾀｲﾏ番号/8
 3603 0000049E 4209              1061             SHLR2   R2                                              ; ﾀｲﾏ番号/16 X(R2)...Y(R0)
 3604 000004A0 4200              1062             SHLL    R2                                              ; ﾀｲﾏ番号/8 X(R2)...Y(R0)
                                          ADD 100112 AKIBA
 3605 000004A2 312C              1063             ADD     R2,R1_REG                                       ; TOP+ adr
 3606                            1064     
 3607                            1065             SUB_END
 3608                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 3609 000004A4 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 3610                            1066             M_RTS
 3611 000004A6 000B                   M           RTS                             ;RTSの後ろの
 3612 000004A8 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 3613                            1067     
 3614                            1068     ;********************************************************************
 3615                            1069     ;* シーケンス応用命令
 3616                            1070     ;* データ命令
 3617                            1071     ;********************************************************************
 3618                            1072     ;         ------------------------------
 3619                            1073     ;       +0|       命令CODE      (  )   |
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE    26
PROGRAM NAME =

 3620                            1074     ;         ------------------------------
 3621                            1075     ;       +1|         空き        (  )   |
 3622                            1076     ;         ------------------------------
 3623                            1077     ;       +2|       ﾃﾞｰﾀ上位LH    (  )   |
 3624                            1078     ;         ------------------------------
 3625                            1079     ;       +3|       ﾃﾞｰﾀ下位LL    (  )   |
 3626                            1080     ;         ------------------------------
 3627                            1081     
 3628                            1082     ;         ------------------------------
 3629                            1083     ;       +0|       命令CODE      (  )   |
 3630                            1084     ;         ------------------------------
 3631                            1085     ;       +1|         空き        (  )   |
 3632                            1086     ;         ------------------------------
 3633                            1087     ;       +2|         空き        (  )   |
 3634                            1088     ;         ------------------------------
 3635                            1089     ;       +3|         空き        (  )   |
 3636                            1090     ;         ------------------------------
 3637                            1091     ;       +4|       ﾃﾞｰﾀHH        (  )   |
 3638                            1092     ;         ------------------------------
 3639                            1093     ;       +5|       ﾃﾞｰﾀHL        (  )   |
 3640                            1094     ;         ------------------------------
 3641                            1095     ;       +6|       ﾃﾞｰﾀLH        (  )   |
 3642                            1096     ;         ------------------------------
 3643                            1097     ;       +7|       ﾃﾞｰﾀLL        (  )   |
 3644                            1098     ;         ------------------------------
 3645                            1099     ;
 3646                            1100     ;         ------------------------------
 3647                            1101     ;       +0|       命令CODE      (  )   |
 3648                            1102     ;         ------------------------------
 3649                            1103     ;       +1|      ﾒﾓﾘ種別        (  )   |
 3650                            1104     ;         ------------------------------
 3651                            1105     ;       +2|       ｱﾄﾞﾚｽ上位     (  )   |
 3652                            1106     ;         ------------------------------
 3653                            1107     ;       +3|       ｱﾄﾞﾚｽ下位     (  )   |
 3654                            1108     ;         ------------------------------
 3655                            1109     ;
 3656                            1110     ;       *********************************************************************
 3657                            1111     ;       *****   Data Set command                        8*2             *****
 3658                            1112     ;       *********************************************************************
 3659                                     ***** BEGIN-POOL *****
 3660 000004AA 0000                       ALIGNMENT CODE
 3661 000004AC 00000001                   DATA FOR SOURCE-LINE 1056
 3662                                     ***** END-POOL *****
 3663 000004B0                   1113             .ALIGN  4
 3664 000004B0                   1114     _DSETWI_CODE:
 3665 000004B0 2558              1115             TST     A_REG,A_REG                                     ; 変更 091105AKIBA
 3666                            1116             TST_BIT_OF _DSETWI_CODE_END                             ; Areg=OFF
 3667 000004B2 8905                   M           BT      _DSETWI_CODE_END
 3668                            1117     
 3669                            1118             IMD_MAKE1_WORD LBEL1=DSETWI_DT_LH,LBEL2=DSETWI_DT_LL    ; ANS.R2
 3670 000004B4 E1FF                   M   DSETWI_DT_LH:           MOV.B   #CHG_LHDATA,R1                  ; H_BYTE
 3671 000004B6 E2FF                   M   DSETWI_DT_LL:           MOV.B   #CHG_LLDATA,R2                  ; L_BYTE
 3672 000004B8 4118                   M                   SHLL8   R1                              ; 符号をそのまま
 3673 000004BA 622C                   M                   EXTU.B  R2,R2                           ;
 3674 000004BC 221B                   M                   OR      R1,R2                           ; data
 3675 000004BE 6823              1119             MOV     R2,D_REG
 3676 000004C0                   1120     _DSETWI_CODE_END:
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE    27
PROGRAM NAME =

 3677                            1121     
 3678                            1122     ;       *********************************************************************
 3679                            1123     ;       *****   Data Set command                        9*2             *****
 3680                            1124     ;       *********************************************************************
 3681 000004C0                   1125             .ALIGN  4
 3682 000004C0                   1126     _DSETLI_CODE:
 3683 000004C0 2558              1127             TST     A_REG,A_REG                                     ; 変更 091105AKIBA
 3684                            1128             TST_BIT_OF _DSETLI_CODE_END                             ; Areg=OFF ADD 100114 AKIB
                                          A
 3685 000004C2 8906                   M           BT      _DSETLI_CODE_END
 3686                            1129     
 3687 000004C4 E3FF              1130     DSETLI_DT_HH:   MOV.B   #CHG_HHDATA,R3                          ; HH_BYTE
 3688 000004C6 E4FF              1131     DSETLI_DT_HL:   MOV.B   #CHG_HLDATA,R4                          ; HL_BYTE
 3689 000004C8 E1FF              1132     DSETLI_DT_LH:   MOV.B   #CHG_LHDATA,R1                          ; LH_BYTE
 3690 000004CA E2FF              1133     DSETLI_DT_LL:   MOV.B   #CHG_LLDATA,R2                          ; LL_BYTE
 3691                            1134     
 3692 000004CC 50B0              1135             MOV.L   @(DSETLI_CALL-_SEQ_CALL_TBL1,CTBL_REG),R0       ;
 3693 000004CE 400B              1136             JSR     @R0                                             ;
 3694 000004D0 0009              1137             NOP                                                     ;
 3695 000004D2                   1138     _DSETLI_CODE_END:
 3696                            1139     
 3697                            1140     ;       ------------------------------------
 3698                            1141     ;       ----    DSETLI ｻﾌﾞﾙｰﾁﾝ          ----
 3699                            1142     ;       ------------------------------------
 3700                            1143     ;       ----------- Input　R3,R4,R1,R2:4byte　data　----------
 3701 000004D4                   1144             .ALIGN  4
 3702 000004D4                   1145     _DSETLI_SUB:
 3703                            1146             SUB_START
 3704 000004D4 4F22                   M           STS.L   PR,@-R15                ;[必要]
 3705                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 3706                            1147     
 3707 000004D6 633C              1148             EXTU.B  R3,R3                                           ; 000x
 3708 000004D8 4318              1149             SHLL8   R3                                              ; 00x0
 3709 000004DA 6339              1150             SWAP.W  R3,R3                                           ; x000 HHﾃﾞｰﾀ抽出
 3710                            1151                                                                     ; 16bitｼﾌﾄ+下位WORD0ｸﾘｱ
 3711 000004DC 644C              1152             EXTU.B  R4,R4                                           ; 000x
 3712 000004DE 6449              1153             SWAP.W  R4,R4                                           ; 0x00 HLﾃﾞｰﾀ抽出
 3713                            1154     
 3714 000004E0 611C              1155             EXTU.B  R1,R1                                           ; 000x
 3715 000004E2 4118              1156             SHLL8   R1                                              ; 00x0 LHﾃﾞｰﾀ抽出
 3716                            1157     
 3717 000004E4 622C              1158             EXTU.B  R2,R2                                           ; 000x          LLﾃﾞｰﾀ抽出
 3718 000004E6 223B              1159             OR      R3,R2                                           ; HH,0,0,LL     HHﾃﾞｰﾀ格納
 3719 000004E8 224B              1160             OR      R4,R2                                           ; HH,HL,0,LL    HLﾃﾞｰﾀ格納
 3720 000004EA 221B              1161             OR      R1,R2                                           ; HH,HL,LH,LL   LLﾃﾞｰﾀ格納
 3721                            1162     
 3722 000004EC 6823              1163             MOV.L   R2,D_REG                                        ; ----4byteALIGN-----
 3723                            1164     
 3724                            1165             SUB_END
 3725                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 3726 000004EE 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 3727                            1166             M_RTS
 3728 000004F0 000B                   M           RTS                             ;RTSの後ろの
 3729 000004F2 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 3730                            1167     
 3731                            1168     ;       *********************************************************************
 3732                            1169     ;       *****   LDW command                             8*2             *****
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE    28
PROGRAM NAME =

 3733                            1170     ;       *********************************************************************
 3734 000004F4                   1171             .ALIGN  4
 3735 000004F4                   1172     _LDW_CODE:
 3736 000004F4 2558              1173             TST     A_REG,A_REG                                     ; 変更 091105AKIBA
 3737                            1174             TST_BIT_OF _LDW_CODE_END                                ;
 3738 000004F6 8905                   M           BT      _LDW_CODE_END
 3739                            1175     
 3740                            1176             ADR_MAKE1_WORD LBEL1=LDW_ADR,LBEL2=LDW_OFS              ; R0=WORDｱﾄﾞﾚｽ
 3741                                 M                   ADR_MAKE1_BIT LDW_ADR,LDW_OFS
 3742 000004F8 E17F                   M   LDW_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 3743 000004FA E0FF                   M   LDW_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 3744 000004FC 4118                   M                   SHLL8   R1
 3745 000004FE 600C                   M                   EXTU.B  R0,R0                           ;
 3746 00000500 201B                   M                   OR      R1,R0                           ; adress
 3747 00000502 08ED              1177             MOV.W   @(R0,TOP_REG),D_REG                             ;
 3748                            1178     
 3749 00000504                   1179     _LDW_CODE_END:
 3750                            1180     
 3751                            1181     ;       *********************************************************************
 3752                            1182     ;       *****   LDL command                             8*2             *****
 3753                            1183     ;       *********************************************************************
 3754 00000504                   1184             .ALIGN  4
 3755 00000504                   1185     _LDL_CODE:
 3756 00000504 2558              1186             TST     A_REG,A_REG                                     ; 変更 091105AKIBA
 3757                            1187             TST_BIT_OF _LDL_CODE_END                                ;
 3758 00000506 8905                   M           BT      _LDL_CODE_END
 3759                            1188     
 3760                            1189             ADR_MAKE1_WORD LBEL1=LDL_ADR,LBEL2=LDL_OFS              ; R0=4byte　ALIGNｱﾄﾞﾚｽ
 3761                                 M                   ADR_MAKE1_BIT LDL_ADR,LDL_OFS
 3762 00000508 E17F                   M   LDL_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 3763 0000050A E0FF                   M   LDL_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 3764 0000050C 4118                   M                   SHLL8   R1
 3765 0000050E 600C                   M                   EXTU.B  R0,R0                           ;
 3766 00000510 201B                   M                   OR      R1,R0                           ; adress
 3767                            1190     
 3768 00000512 08EE              1191             MOV.L   @(R0,TOP_REG),D_REG                             ; ----4byteALIGN-----
 3769                            1192     
 3770 00000514                   1193     _LDL_CODE_END:
 3771                            1194     
 3772                            1195     ;       *********************************************************************
 3773                            1196     ;       *****   STW command                             8*2             *****
 3774                            1197     ;       *********************************************************************
 3775 00000514                   1198             .ALIGN  4
 3776 00000514                   1199     _STW_CODE:
 3777 00000514 2558              1200             TST     A_REG,A_REG                                     ; 変更 091105AKIBA
 3778                            1201             TST_BIT_OF _STW_CODE_END                                ;
 3779 00000516 8905                   M           BT      _STW_CODE_END
 3780                            1202     
 3781                            1203             ADR_MAKE1_WORD LBEL1=STW_ADR,LBEL2=STW_OFS              ; R0=WORDｱﾄﾞﾚｽ
 3782                                 M                   ADR_MAKE1_BIT STW_ADR,STW_OFS
 3783 00000518 E17F                   M   STW_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 3784 0000051A E0FF                   M   STW_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE    29
PROGRAM NAME =

                                          E
 3785 0000051C 4118                   M                   SHLL8   R1
 3786 0000051E 600C                   M                   EXTU.B  R0,R0                           ;
 3787 00000520 201B                   M                   OR      R1,R0                           ; adress
 3788 00000522 0E85              1204             MOV.W   D_REG,@(R0,TOP_REG)                             ;
 3789 00000524                   1205     _STW_CODE_END:
 3790                            1206     
 3791                            1207     ;       *********************************************************************
 3792                            1208     ;       *****   STL command                             8*2             *****
 3793                            1209     ;       *********************************************************************
 3794 00000524                   1210             .ALIGN  4
 3795 00000524                   1211     _STL_CODE:
 3796 00000524 2558              1212             TST     A_REG,A_REG                                     ; 変更 091105AKIBA
 3797                            1213             TST_BIT_OF _STL_CODE_END                                ; 誤記修正 091105AKIBA
 3798 00000526 8905                   M           BT      _STL_CODE_END
 3799                            1214     
 3800                            1215             ADR_MAKE1_WORD LBEL1=STL_ADR,LBEL2=STL_OFS              ; R0=WORDｱﾄﾞﾚｽ
 3801                                 M                   ADR_MAKE1_BIT STL_ADR,STL_OFS
 3802 00000528 E17F                   M   STL_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 3803 0000052A E0FF                   M   STL_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 3804 0000052C 4118                   M                   SHLL8   R1
 3805 0000052E 600C                   M                   EXTU.B  R0,R0                           ;
 3806 00000530 201B                   M                   OR      R1,R0                           ; adress
 3807 00000532 0E86              1216             MOV.L   D_REG,@(R0,TOP_REG)                             ; ----4byteALIGN-----
 3808 00000534                   1217     _STL_CODE_END:
 3809                            1218     
 3810                            1219     
 3811                            1220     ;********************************************************************
 3812                            1221     ;* シーケンス応用命令
 3813                            1222     ;* データ演算命令
 3814                            1223     ;********************************************************************
 3815                            1224     
 3816                            1225     ;       *******************************************************************
 3817                            1226     ;       ***                                                             ***
 3818                            1227     ;       ***                                                             ***
 3819                            1228     ;       ***             CMP/GT,GE,EQ  Dreg,(MEMword,MEMlong,IMIword )   ***
 3820                            1229     ;       ***                                                             ***
 3821                            1230     ;       ***             [MEM11,IMI10]                                   ***
 3822                            1231     ;       *******************************************************************
 3823                            1232     ;       --------- メモリ------
 3824                            1233             .MACRO  CMPCMD_MEM1 EXIT,LBEL1,LBEL2,LG,CMPCMD,OP1,OP2
 3825                            1234                     TST     A_REG,A_REG                             ;
 3826                            1235                     TST_BIT_OF \EXIT                                ; Areg=0 jump(比較しないと
                                          きはAreg=0を返す)
 3827                            1236     
 3828                            1237                     ADR_MAKE1_WORD LBEL1=\LBEL1,LBEL2=\LBEL2        ; R0=WORDｱﾄﾞﾚｽ
 3829                            1238                     MOV.\LG @(R0,TOP_REG),R2                        ; [[W/L]]
 3830                            1239                     CMP/\CMPCMD     \OP1,\OP2                       ; R2 < D_REG THEN T=1
 3831                            1240                     MOVT    A_REG                                   ; Areg<= T
 3832                            1241             .ENDM
 3833                            1242     
 3834                            1243     ;       --------- 直接数値----
 3835                            1244             .MACRO  CMPCMD_IMI1 EXIT,LBEL1,LBEL2,LG,CMPCMD,OP1,OP2
 3836                            1245                     TST     A_REG,A_REG                             ;
 3837                            1246                     TST_BIT_OF \EXIT                                ; Areg=0 jump(比較しないと
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE    30
PROGRAM NAME =

                                          きはAreg=0を返す)
 3838                            1247     
 3839                            1248                     IMD_MAKE1_WORD LBEL1=\LBEL1,LBEL2=\LBEL2        ; R2
 3840                            1249                     CMP/\CMPCMD     \OP1,\OP2                       ; R2 < D_REG THEN T=1
 3841                            1250                     MOVT    A_REG                                   ; Areg<= T
 3842                            1251             .ENDM
 3843                            1252     
 3844                            1253     ;       *******************************************************************
 3845                            1254     ;       ***                                                             ***
 3846                            1255     ;       ***                                                             ***
 3847                            1256     ;       ***             NE  Dreg,(MEMword,MEMlong,IMIword )             ***
 3848                            1257     ;       ***             (SHの持つ命令の論理が反対)                      ***
 3849                            1258     ;       ***             [MEM13,IMI12]                                   ***
 3850                            1259     ;       *******************************************************************
 3851                            1260     ;       --------- メモリ------
 3852                            1261             .MACRO  CMPCMD_MEM2 EXIT,LBEL1,LBEL2,LG,CMPCMD,OP1,OP2
 3853                            1262                     TST     A_REG,A_REG                             ;
 3854                            1263                     TST_BIT_OF \EXIT                                ; Areg=0 jump(比較しないと
                                          きはAreg=0を返す)
 3855                            1264     
 3856                            1265                     ADR_MAKE1_WORD LBEL1=\LBEL1,LBEL2=\LBEL2        ; R0=WORDｱﾄﾞﾚｽ
 3857                            1266                     MOV.\LG @(R0,TOP_REG),R2                        ; [[W/L]]
 3858                            1267                     CMP/\CMPCMD     \OP1,\OP2                       ; R2 < D_REG THEN T=1
 3859                            1268                     MOVT    R0                                      ;
 3860                            1269                     XOR     #BIT0,R0
 3861                            1270                     MOV     R0,A_REG                                ; Areg<= T
 3862                            1271             .ENDM
 3863                            1272     
 3864                            1273     ;       --------- 直接数値----
 3865                            1274             .MACRO  CMPCMD_IMI2 EXIT,LBEL1,LBEL2,LG,CMPCMD,OP1,OP2
 3866                            1275                     TST     A_REG,A_REG                             ;
 3867                            1276                     TST_BIT_OF \EXIT                                ; Areg=0 jump(比較しないと
                                          きはAreg=0を返す)
 3868                            1277     
 3869                            1278                     IMD_MAKE1_WORD LBEL1=\LBEL1,LBEL2=\LBEL2        ; R2
 3870                            1279                     CMP/\CMPCMD     \OP1,\OP2                       ; R2 < D_REG THEN T=1
 3871                            1280                     MOVT    R0                                      ;
 3872                            1281                     XOR     #BIT0,R0
 3873                            1282                     MOV     R0,A_REG                                ; Areg<= T
 3874                            1283             .ENDM
 3875                            1284     
 3876                            1285     ;       *******************************************************************
 3877                            1286     ;       ***                                                             ***
 3878                            1287     ;       ***                                                             ***
 3879                            1288     ;       ***     ADD,SUB,ANDL,ORL,XORL  (MEMword,MEMlong,IMIword ),Dreg  ***
 3880                            1289     ;       ***                                                             ***
 3881                            1290     ;       ***             [MEM9,IMI8]                                     ***
 3882                            1291     ;       *******************************************************************
 3883                            1292     ;       --------- メモリ------
 3884                            1293             .MACRO  CALCMD_MEM1 EXIT,LBEL1,LBEL2,LG,CALCMD
 3885                            1294                     TST     A_REG,A_REG                             ; 変更 091105AKIBA
 3886                            1295                     TST_BIT_OF \EXIT                                ; Areg=0 jump(比較しないと
                                          きはAreg=0を返す)
 3887                            1296     
 3888                            1297                     ADR_MAKE1_WORD LBEL1=\LBEL1,LBEL2=\LBEL2        ; R0=WORDｱﾄﾞﾚｽ
 3889                            1298                     MOV.\LG @(R0,TOP_REG),R2                        ; [[W/L]]
 3890                            1299                     \CALCMD R2,D_REG                                ; D_REG-R2=D_REG
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE    31
PROGRAM NAME =

 3891                            1300             .ENDM
 3892                            1301     
 3893                            1302     ;       --------- 直接数値----
 3894                            1303             .MACRO  CALCMD_IMI1 EXIT,LBEL1,LBEL2,LG,CALCMD
 3895                            1304                     TST     A_REG,A_REG                             ; 変更 091105AKIBA
 3896                            1305                     TST_BIT_OF \EXIT                                ; Areg=0 jump(比較しないと
                                          きはAreg=0を返す)
 3897                            1306     
 3898                            1307                     IMD_MAKE1_WORD LBEL1=\LBEL1,LBEL2=\LBEL2        ; R2
 3899                            1308                     \CALCMD R2,D_REG                                ; D_REG-R2=D_REG
 3900                            1309             .ENDM
 3901                            1310     
 3902                            1311     ;       *******************************************************************
 3903                            1312     ;       ***                                                             ***
 3904                            1313     ;       ***                                                             ***
 3905                            1314     ;       ***     AND,XOR,ORのWORD  (MEMword,MEMlong,IMIword ),Dreg       ***
 3906                            1315     ;       ***                                                             ***
 3907                            1316     ;       ***             [MEM10,IMI9]                                    ***
 3908                            1317     ;       *******************************************************************
 3909                            1318     ;       --------- メモリ------
 3910                            1319             .MACRO  CALCMD_MEM1_U EXIT,LBEL1,LBEL2,LG,CALCMD
 3911                            1320                     TST     A_REG,A_REG                             ; 変更 091105AKIBA
 3912                            1321                     TST_BIT_OF \EXIT                                ; Areg=0 jump(比較しないと
                                          きはAreg=0を返す)
 3913                            1322     
 3914                            1323                     ADR_MAKE1_WORD LBEL1=\LBEL1,LBEL2=\LBEL2        ; R0=WORDｱﾄﾞﾚｽ
 3915                            1324                     MOV.\LG @(R0,TOP_REG),R2                        ; [[W/L]]
 3916                            1325                     EXTU.W  R2,R2
 3917                            1326                     \CALCMD R2,D_REG                                ; D_REG-R2=D_REG
 3918                            1327             .ENDM
 3919                            1328     
 3920                            1329     ;       --------- 直接数値----
 3921                            1330             .MACRO  CALCMD_IMI1_U EXIT,LBEL1,LBEL2,LG,CALCMD
 3922                            1331                     TST     A_REG,A_REG                             ; 変更 091105AKIBA
 3923                            1332                     TST_BIT_OF \EXIT                                ; Areg=0 jump(比較しないと
                                          きはAreg=0を返す)
 3924                            1333     
 3925                            1334                     IMD_MAKE1_WORD LBEL1=\LBEL1,LBEL2=\LBEL2        ; R2
 3926                            1335                     EXTU.W  R2,R2
 3927                            1336                     \CALCMD R2,D_REG                                ; D_REG-R2=D_REG
 3928                            1337             .ENDM
 3929                            1338     
 3930                            1339     ;       *******************************************************************
 3931                            1340     ;       ***                                                             ***
 3932                            1341     ;       ***                                                             ***
 3933                            1342     ;       ***             CMP/EQ Dreg,(MEMword,MEMlong,IMIword )          ***
 3934                            1343     ;       ***                                                             ***
 3935                            1344     ;       ***                                                             ***
 3936                            1345     ;       *******************************************************************
 3937                            1346     
 3938                            1347     ;       *********************************************************************
 3939                            1348     ;       *****   CMP EQW command                         10*2            *****
 3940                            1349     ;       *********************************************************************
 3941 00000534                   1350             .ALIGN  4
 3942 00000534                   1351     _EQW_CODE:
 3943                            1352             CMPCMD_MEM1 EXIT=_EQW_CODE_END,LBEL1=EQW_ADR,LBEL2=EQW_OFS,LG=W,CMPCMD=EQ,OP1=R2,O
                                          P2=D_REG
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE    32
PROGRAM NAME =

 3944 00000534 2558                   M                   TST     A_REG,A_REG                             ;
 3945                                 M                   TST_BIT_OF _EQW_CODE_END                                ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 3946 00000536 8907                   M           BT      _EQW_CODE_END
 3947                                 M   
 3948                                 M                   ADR_MAKE1_WORD LBEL1=EQW_ADR,LBEL2=EQW_OFS      ; R0=WORDｱﾄﾞﾚｽ
 3949                                 M                   ADR_MAKE1_BIT EQW_ADR,EQW_OFS
 3950 00000538 E17F                   M   EQW_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 3951 0000053A E0FF                   M   EQW_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 3952 0000053C 4118                   M                   SHLL8   R1
 3953 0000053E 600C                   M                   EXTU.B  R0,R0                           ;
 3954 00000540 201B                   M                   OR      R1,R0                           ; adress
 3955 00000542 02ED                   M                   MOV.W   @(R0,TOP_REG),R2                        ; [[W/L]]
 3956 00000544 3820                   M                   CMP/EQ  R2,D_REG                        ; R2 < D_REG THEN T=1
 3957 00000546 0529                   M                   MOVT    A_REG                                   ; Areg<= T
 3958 00000548                   1353     _EQW_CODE_END:
 3959                            1354     
 3960                            1355     ;       *********************************************************************
 3961                            1356     ;       *****   CMP EQL command                         10*2            *****
 3962                            1357     ;       *********************************************************************
 3963 00000548                   1358             .ALIGN  4
 3964 00000548                   1359     _EQL_CODE:
 3965                            1360             CMPCMD_MEM1 EXIT=_EQL_CODE_END,LBEL1=EQL_ADR,LBEL2=EQL_OFS,LG=L,CMPCMD=EQ,OP1=R2,O
                                          P2=D_REG
 3966 00000548 2558                   M                   TST     A_REG,A_REG                             ;
 3967                                 M                   TST_BIT_OF _EQL_CODE_END                                ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 3968 0000054A 8907                   M           BT      _EQL_CODE_END
 3969                                 M   
 3970                                 M                   ADR_MAKE1_WORD LBEL1=EQL_ADR,LBEL2=EQL_OFS      ; R0=WORDｱﾄﾞﾚｽ
 3971                                 M                   ADR_MAKE1_BIT EQL_ADR,EQL_OFS
 3972 0000054C E17F                   M   EQL_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 3973 0000054E E0FF                   M   EQL_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 3974 00000550 4118                   M                   SHLL8   R1
 3975 00000552 600C                   M                   EXTU.B  R0,R0                           ;
 3976 00000554 201B                   M                   OR      R1,R0                           ; adress
 3977 00000556 02EE                   M                   MOV.L   @(R0,TOP_REG),R2                        ; [[W/L]]
 3978 00000558 3820                   M                   CMP/EQ  R2,D_REG                        ; R2 < D_REG THEN T=1
 3979 0000055A 0529                   M                   MOVT    A_REG                                   ; Areg<= T
 3980 0000055C                   1361     _EQL_CODE_END:
 3981                            1362     
 3982                            1363     ;       *********************************************************************
 3983                            1364     ;       *****   CMP EQI command                         9*2             *****
 3984                            1365     ;       *********************************************************************
 3985 0000055C                   1366             .ALIGN  4
 3986 0000055C                   1367     _EQWI_CODE:
 3987                            1368             CMPCMD_IMI1 EXIT=_EQWI_CODE_END,LBEL1=EQWI_DT_LH,LBEL2=EQWI_DT_LL,LG=NOUSE,CMPCMD=
                                          EQ,OP1=R2,OP2=D_REG
 3988 0000055C 2558                   M                   TST     A_REG,A_REG                             ;
 3989                                 M                   TST_BIT_OF _EQWI_CODE_END                               ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 3990 0000055E 8906                   M           BT      _EQWI_CODE_END
 3991                                 M   
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE    33
PROGRAM NAME =

 3992                                 M                   IMD_MAKE1_WORD LBEL1=EQWI_DT_LH,LBEL2=EQWI_DT_LL        ; R2
 3993 00000560 E1FF                   M   EQWI_DT_LH:             MOV.B   #CHG_LHDATA,R1                  ; H_BYTE
 3994 00000562 E2FF                   M   EQWI_DT_LL:             MOV.B   #CHG_LLDATA,R2                  ; L_BYTE
 3995 00000564 4118                   M                   SHLL8   R1                              ; 符号をそのまま
 3996 00000566 622C                   M                   EXTU.B  R2,R2                           ;
 3997 00000568 221B                   M                   OR      R1,R2                           ; data
 3998 0000056A 3820                   M                   CMP/EQ  R2,D_REG                        ; R2 < D_REG THEN T=1
 3999 0000056C 0529                   M                   MOVT    A_REG                                   ; Areg<= T
 4000                            1369     
 4001 0000056E                   1370     _EQWI_CODE_END:
 4002                            1371     
 4003                            1372     ;       *******************************************************************
 4004                            1373     ;       ***                                                             ***
 4005                            1374     ;       ***                                                             ***
 4006                            1375     ;       ***             CMP/EQの反転 Dreg,(MEMword,MEMlong,IMIword )    ***
 4007                            1376     ;       ***                                                             ***
 4008                            1377     ;       ***                                                             ***
 4009                            1378     ;       *******************************************************************
 4010                            1379     ;       *********************************************************************
 4011                            1380     ;       *****   CMP NEW command                         12*2            *****
 4012                            1381     ;       *********************************************************************
 4013 00000570                   1382             .ALIGN  4
 4014 00000570                   1383     _NEW_CODE:
 4015                            1384             CMPCMD_MEM2 EXIT=_NEW_CODE_END,LBEL1=NEW_ADR,LBEL2=NEW_OFS,LG=W,CMPCMD=EQ,OP1=R2,O
                                          P2=D_REG
 4016 00000570 2558                   M                   TST     A_REG,A_REG                             ;
 4017                                 M                   TST_BIT_OF _NEW_CODE_END                                ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4018 00000572 8909                   M           BT      _NEW_CODE_END
 4019                                 M   
 4020                                 M                   ADR_MAKE1_WORD LBEL1=NEW_ADR,LBEL2=NEW_OFS      ; R0=WORDｱﾄﾞﾚｽ
 4021                                 M                   ADR_MAKE1_BIT NEW_ADR,NEW_OFS
 4022 00000574 E17F                   M   NEW_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 4023 00000576 E0FF                   M   NEW_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 4024 00000578 4118                   M                   SHLL8   R1
 4025 0000057A 600C                   M                   EXTU.B  R0,R0                           ;
 4026 0000057C 201B                   M                   OR      R1,R0                           ; adress
 4027 0000057E 02ED                   M                   MOV.W   @(R0,TOP_REG),R2                        ; [[W/L]]
 4028 00000580 3820                   M                   CMP/EQ  R2,D_REG                        ; R2 < D_REG THEN T=1
 4029 00000582 0029                   M                   MOVT    R0                                      ;
 4030 00000584 CA01                   M                   XOR     #BIT0,R0
 4031 00000586 6503                   M                   MOV     R0,A_REG                                ; Areg<= T
 4032 00000588                   1385     _NEW_CODE_END:
 4033                            1386     
 4034                            1387     ;       *********************************************************************
 4035                            1388     ;       *****   CMP NEL command                         12*2            *****
 4036                            1389     ;       *********************************************************************
 4037 00000588                   1390             .ALIGN  4
 4038 00000588                   1391     _NEL_CODE:
 4039                            1392             CMPCMD_MEM2 EXIT=_NEL_CODE_END,LBEL1=NEL_ADR,LBEL2=NEL_OFS,LG=L,CMPCMD=EQ,OP1=R2,O
                                          P2=D_REG
 4040 00000588 2558                   M                   TST     A_REG,A_REG                             ;
 4041                                 M                   TST_BIT_OF _NEL_CODE_END                                ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4042 0000058A 8909                   M           BT      _NEL_CODE_END
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE    34
PROGRAM NAME =

 4043                                 M   
 4044                                 M                   ADR_MAKE1_WORD LBEL1=NEL_ADR,LBEL2=NEL_OFS      ; R0=WORDｱﾄﾞﾚｽ
 4045                                 M                   ADR_MAKE1_BIT NEL_ADR,NEL_OFS
 4046 0000058C E17F                   M   NEL_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 4047 0000058E E0FF                   M   NEL_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 4048 00000590 4118                   M                   SHLL8   R1
 4049 00000592 600C                   M                   EXTU.B  R0,R0                           ;
 4050 00000594 201B                   M                   OR      R1,R0                           ; adress
 4051 00000596 02EE                   M                   MOV.L   @(R0,TOP_REG),R2                        ; [[W/L]]
 4052 00000598 3820                   M                   CMP/EQ  R2,D_REG                        ; R2 < D_REG THEN T=1
 4053 0000059A 0029                   M                   MOVT    R0                                      ;
 4054 0000059C CA01                   M                   XOR     #BIT0,R0
 4055 0000059E 6503                   M                   MOV     R0,A_REG                                ; Areg<= T
 4056 000005A0                   1393     _NEL_CODE_END:
 4057                            1394     
 4058                            1395     ;       *********************************************************************
 4059                            1396     ;       *****   CMP NEI command                         11*2            *****
 4060                            1397     ;       *********************************************************************
 4061 000005A0                   1398             .ALIGN  4
 4062 000005A0                   1399     _NEWI_CODE:
 4063                            1400             CMPCMD_IMI2 EXIT=_NEWI_CODE_END,LBEL1=NEWI_DT_LH,LBEL2=NEWI_DT_LL,LG=NOUSE,CMPCMD=
                                          EQ,OP1=R2,OP2=D_REG
 4064 000005A0 2558                   M                   TST     A_REG,A_REG                             ;
 4065                                 M                   TST_BIT_OF _NEWI_CODE_END                               ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4066 000005A2 8908                   M           BT      _NEWI_CODE_END
 4067                                 M   
 4068                                 M                   IMD_MAKE1_WORD LBEL1=NEWI_DT_LH,LBEL2=NEWI_DT_LL        ; R2
 4069 000005A4 E1FF                   M   NEWI_DT_LH:             MOV.B   #CHG_LHDATA,R1                  ; H_BYTE
 4070 000005A6 E2FF                   M   NEWI_DT_LL:             MOV.B   #CHG_LLDATA,R2                  ; L_BYTE
 4071 000005A8 4118                   M                   SHLL8   R1                              ; 符号をそのまま
 4072 000005AA 622C                   M                   EXTU.B  R2,R2                           ;
 4073 000005AC 221B                   M                   OR      R1,R2                           ; data
 4074 000005AE 3820                   M                   CMP/EQ  R2,D_REG                        ; R2 < D_REG THEN T=1
 4075 000005B0 0029                   M                   MOVT    R0                                      ;
 4076 000005B2 CA01                   M                   XOR     #BIT0,R0
 4077 000005B4 6503                   M                   MOV     R0,A_REG                                ; Areg<= T
 4078 000005B6                   1401     _NEWI_CODE_END:
 4079                            1402     
 4080                            1403     ;       *******************************************************************
 4081                            1404     ;       ***                                                             ***
 4082                            1405     ;       ***                                                             ***
 4083                            1406     ;       ***             CMP/GT  Dreg,(MEMword,MEMlong,IMIword )         ***
 4084                            1407     ;       ***                                                             ***
 4085                            1408     ;       ***                                                             ***
 4086                            1409     ;       *******************************************************************
 4087                            1410     ;       *********************************************************************
 4088                            1411     ;       *****   CMP GTW command                         10*2            *****
 4089                            1412     ;       *********************************************************************
 4090 000005B8                   1413             .ALIGN  4
 4091 000005B8                   1414     _GTW_CODE:
 4092                            1415             CMPCMD_MEM1 EXIT=_GTW_CODE_END,LBEL1=GTW_ADR,LBEL2=GTW_OFS,LG=W,CMPCMD=GT,OP1=R2,O
                                          P2=D_REG
 4093 000005B8 2558                   M                   TST     A_REG,A_REG                             ;
 4094                                 M                   TST_BIT_OF _GTW_CODE_END                                ; Areg=0 jump(比較
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE    35
PROGRAM NAME =

                                          しないときはAreg=0を返す)
 4095 000005BA 8907                   M           BT      _GTW_CODE_END
 4096                                 M   
 4097                                 M                   ADR_MAKE1_WORD LBEL1=GTW_ADR,LBEL2=GTW_OFS      ; R0=WORDｱﾄﾞﾚｽ
 4098                                 M                   ADR_MAKE1_BIT GTW_ADR,GTW_OFS
 4099 000005BC E17F                   M   GTW_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 4100 000005BE E0FF                   M   GTW_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 4101 000005C0 4118                   M                   SHLL8   R1
 4102 000005C2 600C                   M                   EXTU.B  R0,R0                           ;
 4103 000005C4 201B                   M                   OR      R1,R0                           ; adress
 4104 000005C6 02ED                   M                   MOV.W   @(R0,TOP_REG),R2                        ; [[W/L]]
 4105 000005C8 3827                   M                   CMP/GT  R2,D_REG                        ; R2 < D_REG THEN T=1
 4106 000005CA 0529                   M                   MOVT    A_REG                                   ; Areg<= T
 4107 000005CC                   1416     _GTW_CODE_END:
 4108                            1417     
 4109                            1418     ;;      ﾏｸﾛ展開の結果
 4110                            1419     ;;_GTW_CODE:
 4111                            1420     ;;      AND     N_REG,A_REG                                     ; ARG and NRG
 4112                            1421     ;;      TST     A_REG,A_REG                                     ;
 4113                            1422     ;;      TST_BIT_OF _GTW_CODE_END                                ; Areg=0 jump(比較しないと
                                          きはAreg=0を返す)
 4114                            1423     ;;
 4115                            1424     ;;      ADR_MAKE1_WORD LBEL1=GTW_ADR,LBEL2=GTW_OFS              ; R0=WORDｱﾄﾞﾚｽ
 4116                            1425     ;;      MOV.W   @(R0,TOP_REG),R2                                ; [[W]]
 4117                            1426     ;;      CMP/GT  R2,D_REG                                        ; R2 < D_REG THEN T=1
 4118                            1427     ;;      MOVT    A_REG                                           ; Areg<= T
 4119                            1428     ;;
 4120                            1429     ;;_GTW_CODE_END:
 4121                            1430     
 4122                            1431     ;       *********************************************************************
 4123                            1432     ;       *****   CMP GTL command                         10*2            *****
 4124                            1433     ;       *********************************************************************
 4125 000005CC                   1434             .ALIGN  4
 4126 000005CC                   1435     _GTL_CODE:
 4127                            1436             CMPCMD_MEM1 EXIT=_GTL_CODE_END,LBEL1=GTL_ADR,LBEL2=GTL_OFS,LG=L,CMPCMD=GT,OP1=R2,O
                                          P2=D_REG
 4128 000005CC 2558                   M                   TST     A_REG,A_REG                             ;
 4129                                 M                   TST_BIT_OF _GTL_CODE_END                                ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4130 000005CE 8907                   M           BT      _GTL_CODE_END
 4131                                 M   
 4132                                 M                   ADR_MAKE1_WORD LBEL1=GTL_ADR,LBEL2=GTL_OFS      ; R0=WORDｱﾄﾞﾚｽ
 4133                                 M                   ADR_MAKE1_BIT GTL_ADR,GTL_OFS
 4134 000005D0 E17F                   M   GTL_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 4135 000005D2 E0FF                   M   GTL_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 4136 000005D4 4118                   M                   SHLL8   R1
 4137 000005D6 600C                   M                   EXTU.B  R0,R0                           ;
 4138 000005D8 201B                   M                   OR      R1,R0                           ; adress
 4139 000005DA 02EE                   M                   MOV.L   @(R0,TOP_REG),R2                        ; [[W/L]]
 4140 000005DC 3827                   M                   CMP/GT  R2,D_REG                        ; R2 < D_REG THEN T=1
 4141 000005DE 0529                   M                   MOVT    A_REG                                   ; Areg<= T
 4142 000005E0                   1437     _GTL_CODE_END:
 4143                            1438     
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE    36
PROGRAM NAME =

 4144                            1439     ;       *********************************************************************
 4145                            1440     ;       *****   CMP GTWI command                        9*2             *****
 4146                            1441     ;       *********************************************************************
 4147 000005E0                   1442             .ALIGN  4
 4148 000005E0                   1443     _GTWI_CODE:
 4149                            1444             CMPCMD_IMI1 EXIT=_GTWI_CODE_END,LBEL1=GTWI_DT_LH,LBEL2=GTWI_DT_LL,LG=NOUSE,CMPCMD=
                                          GT,OP1=R2,OP2=D_REG
 4150 000005E0 2558                   M                   TST     A_REG,A_REG                             ;
 4151                                 M                   TST_BIT_OF _GTWI_CODE_END                               ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4152 000005E2 8906                   M           BT      _GTWI_CODE_END
 4153                                 M   
 4154                                 M                   IMD_MAKE1_WORD LBEL1=GTWI_DT_LH,LBEL2=GTWI_DT_LL        ; R2
 4155 000005E4 E1FF                   M   GTWI_DT_LH:             MOV.B   #CHG_LHDATA,R1                  ; H_BYTE
 4156 000005E6 E2FF                   M   GTWI_DT_LL:             MOV.B   #CHG_LLDATA,R2                  ; L_BYTE
 4157 000005E8 4118                   M                   SHLL8   R1                              ; 符号をそのまま
 4158 000005EA 622C                   M                   EXTU.B  R2,R2                           ;
 4159 000005EC 221B                   M                   OR      R1,R2                           ; data
 4160 000005EE 3827                   M                   CMP/GT  R2,D_REG                        ; R2 < D_REG THEN T=1
 4161 000005F0 0529                   M                   MOVT    A_REG                                   ; Areg<= T
 4162 000005F2                   1445     _GTWI_CODE_END:
 4163                            1446     
 4164                            1447     ;       *******************************************************************
 4165                            1448     ;       ***                                                             ***
 4166                            1449     ;       ***                                                             ***
 4167                            1450     ;       ***             CMP/GE  Dreg,(MEMword,MEMlong,IMIword )         ***
 4168                            1451     ;       ***                                                             ***
 4169                            1452     ;       ***                                                             ***
 4170                            1453     ;       *******************************************************************
 4171                            1454     ;       *********************************************************************
 4172                            1455     ;       *****   CMP GEW command                         10*2            *****
 4173                            1456     ;       *********************************************************************
 4174 000005F4                   1457             .ALIGN  4
 4175 000005F4                   1458     _GEW_CODE:
 4176                            1459             CMPCMD_MEM1 EXIT=_GEW_CODE_END,LBEL1=GEW_ADR,LBEL2=GEW_OFS,LG=W,CMPCMD=GE,OP1=R2,O
                                          P2=D_REG
 4177 000005F4 2558                   M                   TST     A_REG,A_REG                             ;
 4178                                 M                   TST_BIT_OF _GEW_CODE_END                                ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4179 000005F6 8907                   M           BT      _GEW_CODE_END
 4180                                 M   
 4181                                 M                   ADR_MAKE1_WORD LBEL1=GEW_ADR,LBEL2=GEW_OFS      ; R0=WORDｱﾄﾞﾚｽ
 4182                                 M                   ADR_MAKE1_BIT GEW_ADR,GEW_OFS
 4183 000005F8 E17F                   M   GEW_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 4184 000005FA E0FF                   M   GEW_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 4185 000005FC 4118                   M                   SHLL8   R1
 4186 000005FE 600C                   M                   EXTU.B  R0,R0                           ;
 4187 00000600 201B                   M                   OR      R1,R0                           ; adress
 4188 00000602 02ED                   M                   MOV.W   @(R0,TOP_REG),R2                        ; [[W/L]]
 4189 00000604 3823                   M                   CMP/GE  R2,D_REG                        ; R2 < D_REG THEN T=1
 4190 00000606 0529                   M                   MOVT    A_REG                                   ; Areg<= T
 4191 00000608                   1460     _GEW_CODE_END:
 4192                            1461     
 4193                            1462     ;       *********************************************************************
 4194                            1463     ;       *****   CMP GEL command                         10*2            *****
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE    37
PROGRAM NAME =

 4195                            1464     ;       *********************************************************************
 4196 00000608                   1465             .ALIGN  4
 4197 00000608                   1466     _GEL_CODE:
 4198                            1467             CMPCMD_MEM1 EXIT=_GEL_CODE_END,LBEL1=GEL_ADR,LBEL2=GEL_OFS,LG=L,CMPCMD=GE,OP1=R2,O
                                          P2=D_REG
 4199 00000608 2558                   M                   TST     A_REG,A_REG                             ;
 4200                                 M                   TST_BIT_OF _GEL_CODE_END                                ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4201 0000060A 8907                   M           BT      _GEL_CODE_END
 4202                                 M   
 4203                                 M                   ADR_MAKE1_WORD LBEL1=GEL_ADR,LBEL2=GEL_OFS      ; R0=WORDｱﾄﾞﾚｽ
 4204                                 M                   ADR_MAKE1_BIT GEL_ADR,GEL_OFS
 4205 0000060C E17F                   M   GEL_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 4206 0000060E E0FF                   M   GEL_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 4207 00000610 4118                   M                   SHLL8   R1
 4208 00000612 600C                   M                   EXTU.B  R0,R0                           ;
 4209 00000614 201B                   M                   OR      R1,R0                           ; adress
 4210 00000616 02EE                   M                   MOV.L   @(R0,TOP_REG),R2                        ; [[W/L]]
 4211 00000618 3823                   M                   CMP/GE  R2,D_REG                        ; R2 < D_REG THEN T=1
 4212 0000061A 0529                   M                   MOVT    A_REG                                   ; Areg<= T
 4213 0000061C                   1468     _GEL_CODE_END:
 4214                            1469     
 4215                            1470     ;       *********************************************************************
 4216                            1471     ;       *****   CMP GEWI command                        9*2             *****
 4217                            1472     ;       *********************************************************************
 4218 0000061C                   1473             .ALIGN  4
 4219 0000061C                   1474     _GEWI_CODE:
 4220                            1475             CMPCMD_IMI1 EXIT=_GEWI_CODE_END,LBEL1=GEWI_DT_LH,LBEL2=GEWI_DT_LL,LG=NOUSE,CMPCMD=
                                          GE,OP1=R2,OP2=D_REG
 4221 0000061C 2558                   M                   TST     A_REG,A_REG                             ;
 4222                                 M                   TST_BIT_OF _GEWI_CODE_END                               ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4223 0000061E 8906                   M           BT      _GEWI_CODE_END
 4224                                 M   
 4225                                 M                   IMD_MAKE1_WORD LBEL1=GEWI_DT_LH,LBEL2=GEWI_DT_LL        ; R2
 4226 00000620 E1FF                   M   GEWI_DT_LH:             MOV.B   #CHG_LHDATA,R1                  ; H_BYTE
 4227 00000622 E2FF                   M   GEWI_DT_LL:             MOV.B   #CHG_LLDATA,R2                  ; L_BYTE
 4228 00000624 4118                   M                   SHLL8   R1                              ; 符号をそのまま
 4229 00000626 622C                   M                   EXTU.B  R2,R2                           ;
 4230 00000628 221B                   M                   OR      R1,R2                           ; data
 4231 0000062A 3823                   M                   CMP/GE  R2,D_REG                        ; R2 < D_REG THEN T=1
 4232 0000062C 0529                   M                   MOVT    A_REG                                   ; Areg<= T
 4233 0000062E                   1476     _GEWI_CODE_END:
 4234                            1477     
 4235                            1478     ;       *******************************************************************
 4236                            1479     ;       ***                                                             ***
 4237                            1480     ;       ***                                                             ***
 4238                            1481     ;       ***             CMP/LT  Dreg,(MEMword,MEMlong,IMIword )         ***
 4239                            1482     ;       ***             =>CMP/GE MEM,DREGで結果BIT反転                  ***
 4240                            1483     ;       ***                                                             ***
 4241                            1484     ;       *******************************************************************
 4242                            1485     ;       *********************************************************************
 4243                            1486     ;       *****   CMP LTW command                         10*2            *****
 4244                            1487     ;       *********************************************************************
 4245 00000630                   1488             .ALIGN  4
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE    38
PROGRAM NAME =

 4246 00000630                   1489     _LTW_CODE:
 4247                            1490             CMPCMD_MEM1 EXIT=_LTW_CODE_END,LBEL1=LTW_ADR,LBEL2=LTW_OFS,LG=W,CMPCMD=GT,OP1=D_RE
                                          G,OP2=R2        ; add akiba
 4248 00000630 2558                   M                   TST     A_REG,A_REG                             ;
 4249                                 M                   TST_BIT_OF _LTW_CODE_END                                ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4250 00000632 8907                   M           BT      _LTW_CODE_END
 4251                                 M   
 4252                                 M                   ADR_MAKE1_WORD LBEL1=LTW_ADR,LBEL2=LTW_OFS      ; R0=WORDｱﾄﾞﾚｽ
 4253                                 M                   ADR_MAKE1_BIT LTW_ADR,LTW_OFS
 4254 00000634 E17F                   M   LTW_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 4255 00000636 E0FF                   M   LTW_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 4256 00000638 4118                   M                   SHLL8   R1
 4257 0000063A 600C                   M                   EXTU.B  R0,R0                           ;
 4258 0000063C 201B                   M                   OR      R1,R0                           ; adress
 4259 0000063E 02ED                   M                   MOV.W   @(R0,TOP_REG),R2                        ; [[W/L]]
 4260 00000640 3287                   M                   CMP/GT  D_REG,R2                        ; R2 < D_REG THEN T=1
 4261 00000642 0529                   M                   MOVT    A_REG                                   ; Areg<= T
 4262 00000644                   1491     _LTW_CODE_END:
 4263                            1492     
 4264                            1493     ;       *********************************************************************
 4265                            1494     ;       *****   CMP LTL command                         10*2            *****
 4266                            1495     ;       *********************************************************************
 4267 00000644                   1496             .ALIGN  4
 4268 00000644                   1497     _LTL_CODE:
 4269                            1498             CMPCMD_MEM1 EXIT=_LTL_CODE_END,LBEL1=LTL_ADR,LBEL2=LTL_OFS,LG=L,CMPCMD=GT,OP1=D_RE
                                          G,OP2=R2        ; add akiba
 4270 00000644 2558                   M                   TST     A_REG,A_REG                             ;
 4271                                 M                   TST_BIT_OF _LTL_CODE_END                                ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4272 00000646 8907                   M           BT      _LTL_CODE_END
 4273                                 M   
 4274                                 M                   ADR_MAKE1_WORD LBEL1=LTL_ADR,LBEL2=LTL_OFS      ; R0=WORDｱﾄﾞﾚｽ
 4275                                 M                   ADR_MAKE1_BIT LTL_ADR,LTL_OFS
 4276 00000648 E17F                   M   LTL_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 4277 0000064A E0FF                   M   LTL_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 4278 0000064C 4118                   M                   SHLL8   R1
 4279 0000064E 600C                   M                   EXTU.B  R0,R0                           ;
 4280 00000650 201B                   M                   OR      R1,R0                           ; adress
 4281 00000652 02EE                   M                   MOV.L   @(R0,TOP_REG),R2                        ; [[W/L]]
 4282 00000654 3287                   M                   CMP/GT  D_REG,R2                        ; R2 < D_REG THEN T=1
 4283 00000656 0529                   M                   MOVT    A_REG                                   ; Areg<= T
 4284 00000658                   1499     _LTL_CODE_END:
 4285                            1500     
 4286                            1501     ;       *********************************************************************
 4287                            1502     ;       *****   CMP LTWI command                        9*2             *****
 4288                            1503     ;       *********************************************************************
 4289 00000658                   1504             .ALIGN  4
 4290 00000658                   1505     _LTWI_CODE:
 4291                            1506             CMPCMD_IMI1 EXIT=_LTWI_CODE_END,LBEL1=LTWI_DT_LH,LBEL2=LTWI_DT_LL,LG=NOUSE,CMPCMD=
                                          GT,OP1=D_REG,OP2=R2     ; add akiba
 4292 00000658 2558                   M                   TST     A_REG,A_REG                             ;
 4293                                 M                   TST_BIT_OF _LTWI_CODE_END                               ; Areg=0 jump(比較
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE    39
PROGRAM NAME =

                                          しないときはAreg=0を返す)
 4294 0000065A 8906                   M           BT      _LTWI_CODE_END
 4295                                 M   
 4296                                 M                   IMD_MAKE1_WORD LBEL1=LTWI_DT_LH,LBEL2=LTWI_DT_LL        ; R2
 4297 0000065C E1FF                   M   LTWI_DT_LH:             MOV.B   #CHG_LHDATA,R1                  ; H_BYTE
 4298 0000065E E2FF                   M   LTWI_DT_LL:             MOV.B   #CHG_LLDATA,R2                  ; L_BYTE
 4299 00000660 4118                   M                   SHLL8   R1                              ; 符号をそのまま
 4300 00000662 622C                   M                   EXTU.B  R2,R2                           ;
 4301 00000664 221B                   M                   OR      R1,R2                           ; data
 4302 00000666 3287                   M                   CMP/GT  D_REG,R2                        ; R2 < D_REG THEN T=1
 4303 00000668 0529                   M                   MOVT    A_REG                                   ; Areg<= T
 4304 0000066A                   1507     _LTWI_CODE_END:
 4305                            1508     
 4306                            1509     ;       *******************************************************************
 4307                            1510     ;       ***                                                             ***
 4308                            1511     ;       ***                                                             ***
 4309                            1512     ;       ***             CMP/LE  Dreg,(MEMword,MEMlong,IMIword )         ***
 4310                            1513     ;       ***             =>CMP/GT MEM,DREGで結果BIT反転                  ***
 4311                            1514     ;       ***                                                             ***
 4312                            1515     ;       *******************************************************************
 4313                            1516     ;       *********************************************************************
 4314                            1517     ;       *****   CMP LEW command                         10*2            *****
 4315                            1518     ;       *********************************************************************
 4316 0000066C                   1519             .ALIGN  4
 4317 0000066C                   1520     _LEW_CODE:
 4318                            1521             CMPCMD_MEM1 EXIT=_LEW_CODE_END,LBEL1=LEW_ADR,LBEL2=LEW_OFS,LG=W,CMPCMD=GE,OP1=D_RE
                                          G,OP2=R2        ; add akiba
 4319 0000066C 2558                   M                   TST     A_REG,A_REG                             ;
 4320                                 M                   TST_BIT_OF _LEW_CODE_END                                ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4321 0000066E 8907                   M           BT      _LEW_CODE_END
 4322                                 M   
 4323                                 M                   ADR_MAKE1_WORD LBEL1=LEW_ADR,LBEL2=LEW_OFS      ; R0=WORDｱﾄﾞﾚｽ
 4324                                 M                   ADR_MAKE1_BIT LEW_ADR,LEW_OFS
 4325 00000670 E17F                   M   LEW_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 4326 00000672 E0FF                   M   LEW_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 4327 00000674 4118                   M                   SHLL8   R1
 4328 00000676 600C                   M                   EXTU.B  R0,R0                           ;
 4329 00000678 201B                   M                   OR      R1,R0                           ; adress
 4330 0000067A 02ED                   M                   MOV.W   @(R0,TOP_REG),R2                        ; [[W/L]]
 4331 0000067C 3283                   M                   CMP/GE  D_REG,R2                        ; R2 < D_REG THEN T=1
 4332 0000067E 0529                   M                   MOVT    A_REG                                   ; Areg<= T
 4333 00000680                   1522     _LEW_CODE_END:
 4334                            1523     
 4335                            1524     ;       *********************************************************************
 4336                            1525     ;       *****   CMP LEL command                         10*2            *****
 4337                            1526     ;       *********************************************************************
 4338 00000680                   1527             .ALIGN  4
 4339 00000680                   1528     _LEL_CODE:
 4340                            1529             CMPCMD_MEM1 EXIT=_LEL_CODE_END,LBEL1=LEL_ADR,LBEL2=LEL_OFS,LG=L,CMPCMD=GE,OP1=D_RE
                                          G,OP2=R2        ; add akiba
 4341 00000680 2558                   M                   TST     A_REG,A_REG                             ;
 4342                                 M                   TST_BIT_OF _LEL_CODE_END                                ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4343 00000682 8907                   M           BT      _LEL_CODE_END
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE    40
PROGRAM NAME =

 4344                                 M   
 4345                                 M                   ADR_MAKE1_WORD LBEL1=LEL_ADR,LBEL2=LEL_OFS      ; R0=WORDｱﾄﾞﾚｽ
 4346                                 M                   ADR_MAKE1_BIT LEL_ADR,LEL_OFS
 4347 00000684 E17F                   M   LEL_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 4348 00000686 E0FF                   M   LEL_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 4349 00000688 4118                   M                   SHLL8   R1
 4350 0000068A 600C                   M                   EXTU.B  R0,R0                           ;
 4351 0000068C 201B                   M                   OR      R1,R0                           ; adress
 4352 0000068E 02EE                   M                   MOV.L   @(R0,TOP_REG),R2                        ; [[W/L]]
 4353 00000690 3283                   M                   CMP/GE  D_REG,R2                        ; R2 < D_REG THEN T=1
 4354 00000692 0529                   M                   MOVT    A_REG                                   ; Areg<= T
 4355 00000694                   1530     _LEL_CODE_END:
 4356                            1531     
 4357                            1532     ;       *********************************************************************
 4358                            1533     ;       *****   CMP LEWI command                        9*2             *****
 4359                            1534     ;       *********************************************************************
 4360 00000694                   1535             .ALIGN  4
 4361 00000694                   1536     _LEWI_CODE:
 4362                            1537             CMPCMD_IMI1 EXIT=_LEWI_CODE_END,LBEL1=LEWI_DT_LH,LBEL2=LEWI_DT_LL,LG=NOUSE,CMPCMD=
                                          GE,OP1=D_REG,OP2=R2     ; add akiba
 4363 00000694 2558                   M                   TST     A_REG,A_REG                             ;
 4364                                 M                   TST_BIT_OF _LEWI_CODE_END                               ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4365 00000696 8906                   M           BT      _LEWI_CODE_END
 4366                                 M   
 4367                                 M                   IMD_MAKE1_WORD LBEL1=LEWI_DT_LH,LBEL2=LEWI_DT_LL        ; R2
 4368 00000698 E1FF                   M   LEWI_DT_LH:             MOV.B   #CHG_LHDATA,R1                  ; H_BYTE
 4369 0000069A E2FF                   M   LEWI_DT_LL:             MOV.B   #CHG_LLDATA,R2                  ; L_BYTE
 4370 0000069C 4118                   M                   SHLL8   R1                              ; 符号をそのまま
 4371 0000069E 622C                   M                   EXTU.B  R2,R2                           ;
 4372 000006A0 221B                   M                   OR      R1,R2                           ; data
 4373 000006A2 3283                   M                   CMP/GE  D_REG,R2                        ; R2 < D_REG THEN T=1
 4374 000006A4 0529                   M                   MOVT    A_REG                                   ; Areg<= T
 4375 000006A6                   1538     _LEWI_CODE_END:
 4376                            1539     
 4377                            1540     ;       *******************************************************************
 4378                            1541     ;       ***                                                             ***
 4379                            1542     ;       ***                                                             ***
 4380                            1543     ;       ***     AND  (MEMword,MEMlong,IMIword ),Dreg=>Dreg              ***
 4381                            1544     ;       ***                                                             ***
 4382                            1545     ;       *******************************************************************
 4383                            1546     ;       *********************************************************************
 4384                            1547     ;       *****   ANDW command                            10*2            *****
 4385                            1548     ;       *********************************************************************
 4386 000006A8                   1549             .ALIGN  4
 4387 000006A8                   1550     _ANDW_CODE:
 4388                            1551             CALCMD_MEM1_U EXIT=_ANDW_CODE_END,LBEL1=ANDW_ADR,LBEL2=ANDW_OFS,LG=W,CALCMD=AND
 4389 000006A8 2558                   M                   TST     A_REG,A_REG                             ; 変更 091105AKIBA
 4390                                 M                   TST_BIT_OF _ANDW_CODE_END                               ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4391 000006AA 8907                   M           BT      _ANDW_CODE_END
 4392                                 M   
 4393                                 M                   ADR_MAKE1_WORD LBEL1=ANDW_ADR,LBEL2=ANDW_OFS    ; R0=WORDｱﾄﾞﾚｽ
 4394                                 M                   ADR_MAKE1_BIT ANDW_ADR,ANDW_OFS
 4395 000006AC E17F                   M   ANDW_ADR:               MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE    41
PROGRAM NAME =

                                          (0~7Fまで)
 4396 000006AE E0FF                   M   ANDW_OFS:               MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 4397 000006B0 4118                   M                   SHLL8   R1
 4398 000006B2 600C                   M                   EXTU.B  R0,R0                           ;
 4399 000006B4 201B                   M                   OR      R1,R0                           ; adress
 4400 000006B6 02ED                   M                   MOV.W   @(R0,TOP_REG),R2                        ; [[W/L]]
 4401 000006B8 622D                   M                   EXTU.W  R2,R2
 4402 000006BA 2829                   M                   AND     R2,D_REG                                ; D_REG-R2=D_REG
 4403 000006BC                   1552     _ANDW_CODE_END:
 4404                            1553     
 4405                            1554     ;       *********************************************************************
 4406                            1555     ;       *****   ANDL command                            10*2            *****
 4407                            1556     ;       *********************************************************************
 4408 000006BC                   1557             .ALIGN  4
 4409 000006BC                   1558     _ANDL_CODE:
 4410                            1559             CALCMD_MEM1 EXIT=_ANDL_CODE_END,LBEL1=ANDL_ADR,LBEL2=ANDL_OFS,LG=L,CALCMD=AND
 4411 000006BC 2558                   M                   TST     A_REG,A_REG                             ; 変更 091105AKIBA
 4412                                 M                   TST_BIT_OF _ANDL_CODE_END                               ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4413 000006BE 8906                   M           BT      _ANDL_CODE_END
 4414                                 M   
 4415                                 M                   ADR_MAKE1_WORD LBEL1=ANDL_ADR,LBEL2=ANDL_OFS    ; R0=WORDｱﾄﾞﾚｽ
 4416                                 M                   ADR_MAKE1_BIT ANDL_ADR,ANDL_OFS
 4417 000006C0 E17F                   M   ANDL_ADR:               MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 4418 000006C2 E0FF                   M   ANDL_OFS:               MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 4419 000006C4 4118                   M                   SHLL8   R1
 4420 000006C6 600C                   M                   EXTU.B  R0,R0                           ;
 4421 000006C8 201B                   M                   OR      R1,R0                           ; adress
 4422 000006CA 02EE                   M                   MOV.L   @(R0,TOP_REG),R2                        ; [[W/L]]
 4423 000006CC 2829                   M                   AND     R2,D_REG                                ; D_REG-R2=D_REG
 4424 000006CE                   1560     _ANDL_CODE_END:
 4425                            1561     
 4426                            1562     ;       *********************************************************************
 4427                            1563     ;       *****   ANDWI command                           9*2             *****
 4428                            1564     ;       *********************************************************************
 4429 000006D0                   1565             .ALIGN  4
 4430 000006D0                   1566     _ANDWI_CODE:
 4431                            1567             CALCMD_IMI1_U EXIT=_ANDWI_CODE_END,LBEL1=ANDWI_DT_LH,LBEL2=ANDWI_DT_LL,LG=NOUSE,CA
                                          LCMD=AND
 4432 000006D0 2558                   M                   TST     A_REG,A_REG                             ; 変更 091105AKIBA
 4433                                 M                   TST_BIT_OF _ANDWI_CODE_END                              ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4434 000006D2 8906                   M           BT      _ANDWI_CODE_END
 4435                                 M   
 4436                                 M                   IMD_MAKE1_WORD LBEL1=ANDWI_DT_LH,LBEL2=ANDWI_DT_LL      ; R2
 4437 000006D4 E1FF                   M   ANDWI_DT_LH:            MOV.B   #CHG_LHDATA,R1                  ; H_BYTE
 4438 000006D6 E2FF                   M   ANDWI_DT_LL:            MOV.B   #CHG_LLDATA,R2                  ; L_BYTE
 4439 000006D8 4118                   M                   SHLL8   R1                              ; 符号をそのまま
 4440 000006DA 622C                   M                   EXTU.B  R2,R2                           ;
 4441 000006DC 221B                   M                   OR      R1,R2                           ; data
 4442 000006DE 622D                   M                   EXTU.W  R2,R2
 4443 000006E0 2829                   M                   AND     R2,D_REG                                ; D_REG-R2=D_REG
 4444 000006E2                   1568     _ANDWI_CODE_END:
 4445                            1569     
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE    42
PROGRAM NAME =

 4446                            1570     ;       *******************************************************************
 4447                            1571     ;       ***                                                             ***
 4448                            1572     ;       ***                                                             ***
 4449                            1573     ;       ***     OR  (MEMword,MEMlong,IMIword ),Dreg=>Dreg               ***
 4450                            1574     ;       ***                                                             ***
 4451                            1575     ;       *******************************************************************
 4452                            1576     ;       *********************************************************************
 4453                            1577     ;       *****   ORW command                             10*2            *****
 4454                            1578     ;       *********************************************************************
 4455 000006E4                   1579             .ALIGN  4
 4456 000006E4                   1580     _ORW_CODE:
 4457                            1581             CALCMD_MEM1_U EXIT=_ORW_CODE_END,LBEL1=ORW_ADR,LBEL2=ORW_OFS,LG=W,CALCMD=OR
 4458 000006E4 2558                   M                   TST     A_REG,A_REG                             ; 変更 091105AKIBA
 4459                                 M                   TST_BIT_OF _ORW_CODE_END                                ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4460 000006E6 8907                   M           BT      _ORW_CODE_END
 4461                                 M   
 4462                                 M                   ADR_MAKE1_WORD LBEL1=ORW_ADR,LBEL2=ORW_OFS      ; R0=WORDｱﾄﾞﾚｽ
 4463                                 M                   ADR_MAKE1_BIT ORW_ADR,ORW_OFS
 4464 000006E8 E17F                   M   ORW_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 4465 000006EA E0FF                   M   ORW_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 4466 000006EC 4118                   M                   SHLL8   R1
 4467 000006EE 600C                   M                   EXTU.B  R0,R0                           ;
 4468 000006F0 201B                   M                   OR      R1,R0                           ; adress
 4469 000006F2 02ED                   M                   MOV.W   @(R0,TOP_REG),R2                        ; [[W/L]]
 4470 000006F4 622D                   M                   EXTU.W  R2,R2
 4471 000006F6 282B                   M                   OR      R2,D_REG                                ; D_REG-R2=D_REG
 4472 000006F8                   1582     _ORW_CODE_END:
 4473                            1583     
 4474                            1584     ;       *********************************************************************
 4475                            1585     ;       ***     ORL command                             10*2            *****
 4476                            1586     ;       *********************************************************************
 4477 000006F8                   1587             .ALIGN  4
 4478 000006F8                   1588     _ORL_CODE:
 4479                            1589             CALCMD_MEM1 EXIT=_ORL_CODE_END,LBEL1=ORL_ADR,LBEL2=ORL_OFS,LG=L,CALCMD=OR
 4480 000006F8 2558                   M                   TST     A_REG,A_REG                             ; 変更 091105AKIBA
 4481                                 M                   TST_BIT_OF _ORL_CODE_END                                ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4482 000006FA 8906                   M           BT      _ORL_CODE_END
 4483                                 M   
 4484                                 M                   ADR_MAKE1_WORD LBEL1=ORL_ADR,LBEL2=ORL_OFS      ; R0=WORDｱﾄﾞﾚｽ
 4485                                 M                   ADR_MAKE1_BIT ORL_ADR,ORL_OFS
 4486 000006FC E17F                   M   ORL_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 4487 000006FE E0FF                   M   ORL_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 4488 00000700 4118                   M                   SHLL8   R1
 4489 00000702 600C                   M                   EXTU.B  R0,R0                           ;
 4490 00000704 201B                   M                   OR      R1,R0                           ; adress
 4491 00000706 02EE                   M                   MOV.L   @(R0,TOP_REG),R2                        ; [[W/L]]
 4492 00000708 282B                   M                   OR      R2,D_REG                                ; D_REG-R2=D_REG
 4493 0000070A                   1590     _ORL_CODE_END:
 4494                            1591     
 4495                            1592     ;       *********************************************************************
 4496                            1593     ;       *****   ORWI command                            9*2             *****
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE    43
PROGRAM NAME =

 4497                            1594     ;       *********************************************************************
 4498 0000070C                   1595             .ALIGN  4
 4499 0000070C                   1596     _ORWI_CODE:
 4500                            1597             CALCMD_IMI1_U EXIT=_ORWI_CODE_END,LBEL1=ORWI_DT_LH,LBEL2=ORWI_DT_LL,LG=NOUSE,CALCM
                                          D=OR
 4501 0000070C 2558                   M                   TST     A_REG,A_REG                             ; 変更 091105AKIBA
 4502                                 M                   TST_BIT_OF _ORWI_CODE_END                               ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4503 0000070E 8906                   M           BT      _ORWI_CODE_END
 4504                                 M   
 4505                                 M                   IMD_MAKE1_WORD LBEL1=ORWI_DT_LH,LBEL2=ORWI_DT_LL        ; R2
 4506 00000710 E1FF                   M   ORWI_DT_LH:             MOV.B   #CHG_LHDATA,R1                  ; H_BYTE
 4507 00000712 E2FF                   M   ORWI_DT_LL:             MOV.B   #CHG_LLDATA,R2                  ; L_BYTE
 4508 00000714 4118                   M                   SHLL8   R1                              ; 符号をそのまま
 4509 00000716 622C                   M                   EXTU.B  R2,R2                           ;
 4510 00000718 221B                   M                   OR      R1,R2                           ; data
 4511 0000071A 622D                   M                   EXTU.W  R2,R2
 4512 0000071C 282B                   M                   OR      R2,D_REG                                ; D_REG-R2=D_REG
 4513 0000071E                   1598     _ORWI_CODE_END:
 4514                            1599     
 4515                            1600     ;       *******************************************************************
 4516                            1601     ;       ***                                                             ***
 4517                            1602     ;       ***                                                             ***
 4518                            1603     ;       ***     XOR  (MEMword,MEMlong,IMIword ),Dreg=>Dreg              ***
 4519                            1604     ;       ***                                                             ***
 4520                            1605     ;       *******************************************************************
 4521                            1606     ;       *********************************************************************
 4522                            1607     ;       *****   XORW command                            10*2            *****
 4523                            1608     ;       *********************************************************************
 4524 00000720                   1609             .ALIGN  4
 4525 00000720                   1610     _XORW_CODE:
 4526                            1611             CALCMD_MEM1_U EXIT=_XORW_CODE_END,LBEL1=XORW_ADR,LBEL2=XORW_OFS,LG=W,CALCMD=XOR
 4527 00000720 2558                   M                   TST     A_REG,A_REG                             ; 変更 091105AKIBA
 4528                                 M                   TST_BIT_OF _XORW_CODE_END                               ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4529 00000722 8907                   M           BT      _XORW_CODE_END
 4530                                 M   
 4531                                 M                   ADR_MAKE1_WORD LBEL1=XORW_ADR,LBEL2=XORW_OFS    ; R0=WORDｱﾄﾞﾚｽ
 4532                                 M                   ADR_MAKE1_BIT XORW_ADR,XORW_OFS
 4533 00000724 E17F                   M   XORW_ADR:               MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 4534 00000726 E0FF                   M   XORW_OFS:               MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 4535 00000728 4118                   M                   SHLL8   R1
 4536 0000072A 600C                   M                   EXTU.B  R0,R0                           ;
 4537 0000072C 201B                   M                   OR      R1,R0                           ; adress
 4538 0000072E 02ED                   M                   MOV.W   @(R0,TOP_REG),R2                        ; [[W/L]]
 4539 00000730 622D                   M                   EXTU.W  R2,R2
 4540 00000732 282A                   M                   XOR     R2,D_REG                                ; D_REG-R2=D_REG
 4541 00000734                   1612     _XORW_CODE_END:
 4542                            1613     
 4543                            1614     ;       *********************************************************************
 4544                            1615     ;       ***     XORL command                            10*2            *****
 4545                            1616     ;       *********************************************************************
 4546 00000734                   1617             .ALIGN  4
 4547 00000734                   1618     _XORL_CODE:
 4548                            1619             CALCMD_MEM1 EXIT=_XORL_CODE_END,LBEL1=XORL_ADR,LBEL2=XORL_OFS,LG=L,CALCMD=XOR
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE    44
PROGRAM NAME =

 4549 00000734 2558                   M                   TST     A_REG,A_REG                             ; 変更 091105AKIBA
 4550                                 M                   TST_BIT_OF _XORL_CODE_END                               ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4551 00000736 8906                   M           BT      _XORL_CODE_END
 4552                                 M   
 4553                                 M                   ADR_MAKE1_WORD LBEL1=XORL_ADR,LBEL2=XORL_OFS    ; R0=WORDｱﾄﾞﾚｽ
 4554                                 M                   ADR_MAKE1_BIT XORL_ADR,XORL_OFS
 4555 00000738 E17F                   M   XORL_ADR:               MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 4556 0000073A E0FF                   M   XORL_OFS:               MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 4557 0000073C 4118                   M                   SHLL8   R1
 4558 0000073E 600C                   M                   EXTU.B  R0,R0                           ;
 4559 00000740 201B                   M                   OR      R1,R0                           ; adress
 4560 00000742 02EE                   M                   MOV.L   @(R0,TOP_REG),R2                        ; [[W/L]]
 4561 00000744 282A                   M                   XOR     R2,D_REG                                ; D_REG-R2=D_REG
 4562 00000746                   1620     _XORL_CODE_END:
 4563                            1621     
 4564                            1622     ;       *********************************************************************
 4565                            1623     ;       *****   XORWI command                           9*2             *****
 4566                            1624     ;       *********************************************************************
 4567 00000748                   1625             .ALIGN  4
 4568 00000748                   1626     _XORWI_CODE:
 4569                            1627             CALCMD_IMI1_U EXIT=_XORWI_CODE_END,LBEL1=XORWI_DT_LH,LBEL2=XORWI_DT_LL,LG=NOUSE,CA
                                          LCMD=XOR
 4570 00000748 2558                   M                   TST     A_REG,A_REG                             ; 変更 091105AKIBA
 4571                                 M                   TST_BIT_OF _XORWI_CODE_END                              ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4572 0000074A 8906                   M           BT      _XORWI_CODE_END
 4573                                 M   
 4574                                 M                   IMD_MAKE1_WORD LBEL1=XORWI_DT_LH,LBEL2=XORWI_DT_LL      ; R2
 4575 0000074C E1FF                   M   XORWI_DT_LH:            MOV.B   #CHG_LHDATA,R1                  ; H_BYTE
 4576 0000074E E2FF                   M   XORWI_DT_LL:            MOV.B   #CHG_LLDATA,R2                  ; L_BYTE
 4577 00000750 4118                   M                   SHLL8   R1                              ; 符号をそのまま
 4578 00000752 622C                   M                   EXTU.B  R2,R2                           ;
 4579 00000754 221B                   M                   OR      R1,R2                           ; data
 4580 00000756 622D                   M                   EXTU.W  R2,R2
 4581 00000758 282A                   M                   XOR     R2,D_REG                                ; D_REG-R2=D_REG
 4582 0000075A                   1628     _XORWI_CODE_END:
 4583                            1629     
 4584                            1630     ;       *******************************************************************
 4585                            1631     ;       ***                                                             ***
 4586                            1632     ;       ***                                                             ***
 4587                            1633     ;       ***     ADD  (MEMword,MEMlong,IMIword ),Dreg=>Dreg              ***
 4588                            1634     ;       ***                                                             ***
 4589                            1635     ;       *******************************************************************
 4590                            1636     ;       *********************************************************************
 4591                            1637     ;       *****   ADDW command                            9*2             *****
 4592                            1638     ;       *********************************************************************
 4593 0000075C                   1639             .ALIGN  4
 4594 0000075C                   1640     _ADDW_CODE:
 4595                            1641             CALCMD_MEM1 EXIT=_ADDW_CODE_END,LBEL1=ADDW_ADR,LBEL2=ADDW_OFS,LG=W,CALCMD=ADD
 4596 0000075C 2558                   M                   TST     A_REG,A_REG                             ; 変更 091105AKIBA
 4597                                 M                   TST_BIT_OF _ADDW_CODE_END                               ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4598 0000075E 8906                   M           BT      _ADDW_CODE_END
 4599                                 M   
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE    45
PROGRAM NAME =

 4600                                 M                   ADR_MAKE1_WORD LBEL1=ADDW_ADR,LBEL2=ADDW_OFS    ; R0=WORDｱﾄﾞﾚｽ
 4601                                 M                   ADR_MAKE1_BIT ADDW_ADR,ADDW_OFS
 4602 00000760 E17F                   M   ADDW_ADR:               MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 4603 00000762 E0FF                   M   ADDW_OFS:               MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 4604 00000764 4118                   M                   SHLL8   R1
 4605 00000766 600C                   M                   EXTU.B  R0,R0                           ;
 4606 00000768 201B                   M                   OR      R1,R0                           ; adress
 4607 0000076A 02ED                   M                   MOV.W   @(R0,TOP_REG),R2                        ; [[W/L]]
 4608 0000076C 382C                   M                   ADD     R2,D_REG                                ; D_REG-R2=D_REG
 4609 0000076E                   1642     _ADDW_CODE_END:
 4610                            1643     
 4611                            1644     ;       *********************************************************************
 4612                            1645     ;       *****   ADDL command                            10*2            *****
 4613                            1646     ;       *********************************************************************
 4614 00000770                   1647             .ALIGN  4
 4615 00000770                   1648     _ADDL_CODE:
 4616                            1649             CALCMD_MEM1 EXIT=_ADDL_CODE_END,LBEL1=ADDL_ADR,LBEL2=ADDL_OFS,LG=L,CALCMD=ADD
 4617 00000770 2558                   M                   TST     A_REG,A_REG                             ; 変更 091105AKIBA
 4618                                 M                   TST_BIT_OF _ADDL_CODE_END                               ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4619 00000772 8906                   M           BT      _ADDL_CODE_END
 4620                                 M   
 4621                                 M                   ADR_MAKE1_WORD LBEL1=ADDL_ADR,LBEL2=ADDL_OFS    ; R0=WORDｱﾄﾞﾚｽ
 4622                                 M                   ADR_MAKE1_BIT ADDL_ADR,ADDL_OFS
 4623 00000774 E17F                   M   ADDL_ADR:               MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 4624 00000776 E0FF                   M   ADDL_OFS:               MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 4625 00000778 4118                   M                   SHLL8   R1
 4626 0000077A 600C                   M                   EXTU.B  R0,R0                           ;
 4627 0000077C 201B                   M                   OR      R1,R0                           ; adress
 4628 0000077E 02EE                   M                   MOV.L   @(R0,TOP_REG),R2                        ; [[W/L]]
 4629 00000780 382C                   M                   ADD     R2,D_REG                                ; D_REG-R2=D_REG
 4630 00000782                   1650     _ADDL_CODE_END:
 4631                            1651     
 4632                            1652     ;       *********************************************************************
 4633                            1653     ;       *****   ADDWI command                           8*2             *****
 4634                            1654     ;       *********************************************************************
 4635 00000784                   1655             .ALIGN  4
 4636 00000784                   1656     _ADDWI_CODE:
 4637                            1657             CALCMD_IMI1 EXIT=_ADDWI_CODE_END,LBEL1=ADDWI_DT_LH,LBEL2=ADDWI_DT_LL,LG=NOUSE,CALC
                                          MD=ADD
 4638 00000784 2558                   M                   TST     A_REG,A_REG                             ; 変更 091105AKIBA
 4639                                 M                   TST_BIT_OF _ADDWI_CODE_END                              ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4640 00000786 8905                   M           BT      _ADDWI_CODE_END
 4641                                 M   
 4642                                 M                   IMD_MAKE1_WORD LBEL1=ADDWI_DT_LH,LBEL2=ADDWI_DT_LL      ; R2
 4643 00000788 E1FF                   M   ADDWI_DT_LH:            MOV.B   #CHG_LHDATA,R1                  ; H_BYTE
 4644 0000078A E2FF                   M   ADDWI_DT_LL:            MOV.B   #CHG_LLDATA,R2                  ; L_BYTE
 4645 0000078C 4118                   M                   SHLL8   R1                              ; 符号をそのまま
 4646 0000078E 622C                   M                   EXTU.B  R2,R2                           ;
 4647 00000790 221B                   M                   OR      R1,R2                           ; data
 4648 00000792 382C                   M                   ADD     R2,D_REG                                ; D_REG-R2=D_REG
 4649 00000794                   1658     _ADDWI_CODE_END:
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE    46
PROGRAM NAME =

 4650                            1659     
 4651                            1660     ;       *******************************************************************
 4652                            1661     ;       ***                                                             ***
 4653                            1662     ;       ***                                                             ***
 4654                            1663     ;       ***     SUB  (MEMword,MEMlong,IMIword ),Dreg=>Dreg              ***
 4655                            1664     ;       ***                                                             ***
 4656                            1665     ;       *******************************************************************
 4657                            1666     ;       *********************************************************************
 4658                            1667     ;       *****   SUBW command                            9*2             *****
 4659                            1668     ;       *********************************************************************
 4660 00000794                   1669             .ALIGN  4
 4661 00000794                   1670     _SUBW_CODE:
 4662                            1671             CALCMD_MEM1 EXIT=_SUBW_CODE_END,LBEL1=SUBW_ADR,LBEL2=SUBW_OFS,LG=W,CALCMD=SUB
 4663 00000794 2558                   M                   TST     A_REG,A_REG                             ; 変更 091105AKIBA
 4664                                 M                   TST_BIT_OF _SUBW_CODE_END                               ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4665 00000796 8906                   M           BT      _SUBW_CODE_END
 4666                                 M   
 4667                                 M                   ADR_MAKE1_WORD LBEL1=SUBW_ADR,LBEL2=SUBW_OFS    ; R0=WORDｱﾄﾞﾚｽ
 4668                                 M                   ADR_MAKE1_BIT SUBW_ADR,SUBW_OFS
 4669 00000798 E17F                   M   SUBW_ADR:               MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 4670 0000079A E0FF                   M   SUBW_OFS:               MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 4671 0000079C 4118                   M                   SHLL8   R1
 4672 0000079E 600C                   M                   EXTU.B  R0,R0                           ;
 4673 000007A0 201B                   M                   OR      R1,R0                           ; adress
 4674 000007A2 02ED                   M                   MOV.W   @(R0,TOP_REG),R2                        ; [[W/L]]
 4675 000007A4 3828                   M                   SUB     R2,D_REG                                ; D_REG-R2=D_REG
 4676 000007A6                   1672     _SUBW_CODE_END:
 4677                            1673     
 4678                            1674     ;       *********************************************************************
 4679                            1675     ;       *****   SUBL command                            10*2            *****
 4680                            1676     ;       *********************************************************************
 4681 000007A8                   1677             .ALIGN  4
 4682 000007A8                   1678     _SUBL_CODE:
 4683                            1679             CALCMD_MEM1 EXIT=_SUBL_CODE_END,LBEL1=SUBL_ADR,LBEL2=SUBL_OFS,LG=L,CALCMD=SUB
 4684 000007A8 2558                   M                   TST     A_REG,A_REG                             ; 変更 091105AKIBA
 4685                                 M                   TST_BIT_OF _SUBL_CODE_END                               ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4686 000007AA 8906                   M           BT      _SUBL_CODE_END
 4687                                 M   
 4688                                 M                   ADR_MAKE1_WORD LBEL1=SUBL_ADR,LBEL2=SUBL_OFS    ; R0=WORDｱﾄﾞﾚｽ
 4689                                 M                   ADR_MAKE1_BIT SUBL_ADR,SUBL_OFS
 4690 000007AC E17F                   M   SUBL_ADR:               MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 4691 000007AE E0FF                   M   SUBL_OFS:               MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 4692 000007B0 4118                   M                   SHLL8   R1
 4693 000007B2 600C                   M                   EXTU.B  R0,R0                           ;
 4694 000007B4 201B                   M                   OR      R1,R0                           ; adress
 4695 000007B6 02EE                   M                   MOV.L   @(R0,TOP_REG),R2                        ; [[W/L]]
 4696 000007B8 3828                   M                   SUB     R2,D_REG                                ; D_REG-R2=D_REG
 4697 000007BA                   1680     _SUBL_CODE_END:
 4698                            1681     
 4699                            1682     ;       *********************************************************************
 4700                            1683     ;       *****   SUBWI command                           8*2             *****
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE    47
PROGRAM NAME =

 4701                            1684     ;       *********************************************************************
 4702 000007BC                   1685             .ALIGN  4
 4703 000007BC                   1686     _SUBWI_CODE:
 4704                            1687             CALCMD_IMI1 EXIT=_SUBWI_CODE_END,LBEL1=SUBWI_DT_LH,LBEL2=SUBWI_DT_LL,LG=NOUSE,CALC
                                          MD=SUB
 4705 000007BC 2558                   M                   TST     A_REG,A_REG                             ; 変更 091105AKIBA
 4706                                 M                   TST_BIT_OF _SUBWI_CODE_END                              ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4707 000007BE 8905                   M           BT      _SUBWI_CODE_END
 4708                                 M   
 4709                                 M                   IMD_MAKE1_WORD LBEL1=SUBWI_DT_LH,LBEL2=SUBWI_DT_LL      ; R2
 4710 000007C0 E1FF                   M   SUBWI_DT_LH:            MOV.B   #CHG_LHDATA,R1                  ; H_BYTE
 4711 000007C2 E2FF                   M   SUBWI_DT_LL:            MOV.B   #CHG_LLDATA,R2                  ; L_BYTE
 4712 000007C4 4118                   M                   SHLL8   R1                              ; 符号をそのまま
 4713 000007C6 622C                   M                   EXTU.B  R2,R2                           ;
 4714 000007C8 221B                   M                   OR      R1,R2                           ; data
 4715 000007CA 3828                   M                   SUB     R2,D_REG                                ; D_REG-R2=D_REG
 4716 000007CC                   1688     _SUBWI_CODE_END:
 4717                            1689     
 4718                            1690     ;       *********************************************************************
 4719                            1691     ;       *****   End command                             8byte           *****
 4720                            1692     ;       *********************************************************************
 4721 000007CC                   1693             .ALIGN  4
 4722 000007CC                   1694     _END_CODE:
 4723                            1695             SUB_END                                 ; END命令の中身
 4724                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 4725 000007CC 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 4726                            1696             M_RTS                                   ;
 4727 000007CE 000B                   M           RTS                             ;RTSの後ろの
 4728 000007D0 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 4729 000007D2                   1697     _END_CODE_END:
 4730                            1698     
 4731                            1699     ;       *********************************************************************
 4732                            1700     ;       *****   No Operation command            1step    4clocks        *****
 4733                            1701     ;       *********************************************************************
 4734 000007D4                   1702             .ALIGN  4
 4735 000007D4                   1703     _NOP_CODE:
 4736 000007D4 0009              1704             NOP                                     ; no operation
 4737 000007D6                   1705     _NOP_CODE_END:
 4738                            1706     
 4739                            1707             .END
  *****TOTAL ERRORS       0
  *****TOTAL WARNINGS     0
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE    48

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

ADDL_ADR                         P        EXPT 00000774   1950  4623*
ADDL_OFS                         P        EXPT 00000776   1951  4624*
ADDWI_DT_LH                      P        EXPT 00000788   1955  4643*
ADDWI_DT_LL                      P        EXPT 0000078A   1956  4644*
ADDW_ADR                         P        EXPT 00000760   1945  4602*
ADDW_OFS                         P        EXPT 00000762   1946  4603*
ANDL_ADR                         P        EXPT 000006C0   1980  4417*
ANDL_OFS                         P        EXPT 000006C2   1981  4418*
ANDN_ADR                         P        EXPT 000000C8   1736  2595*
ANDN_BIT                         P        EXPT 000000D2   1738  2601*
ANDN_OFS                         P        EXPT 000000CA   1737  2596*
ANDWI_DT_LH                      P        EXPT 000006D4   1985  4437*
ANDWI_DT_LL                      P        EXPT 000006D6   1986  4438*
ANDW_ADR                         P        EXPT 000006AC   1975  4395*
ANDW_OFS                         P        EXPT 000006AE   1976  4396*
AND_ADR                          P        EXPT 000000B4   1730  2575*
AND_BIT                          P        EXPT 000000BE   1732  2581*
AND_OFS                          P        EXPT 000000B6   1731  2576*
A_REG                                     REG             2274* 2514  2516  2529  2540  2553  2563  2584  2603  2621  2638  2653 
                                                          2653  2679  2679  2698  2698  2726  2737  2746  2754  2754  2757  2767 
                                                          2792  2792  2839  2839  2863  2912  2912  2935  2982  2982  3043  3045 
                                                          3046  3215  3215  3308  3350  3350  3406  3406  3500  3542  3542  3665 
                                                          3665  3683  3683  3736  3736  3756  3756  3777  3777  3796  3796  3944 
                                                          3944  3957  3966  3966  3979  3988  3988  3999  4016  4016  4031  4040 
                                                          4040  4055  4064  4064  4077  4093  4093  4106  4128  4128  4141  4150 
                                                          4150  4161  4177  4177  4190  4199  4199  4212  4221  4221  4232  4248 
                                                          4248  4261  4270  4270  4283  4292  4292  4303  4319  4319  4332  4341 
                                                          4341  4354  4363  4363  4374  4389  4389  4411  4411  4432  4432  4458 
                                                          4458  4480  4480  4501  4501  4527  4527  4549  4549  4570  4570  4596 
                                                          4596  4617  4617  4638  4638  4663  4663  4684  4684  4705  4705 
BIT0                                      EQU  00000001     19* 2328  2515  2539  2583  2620  2775  2862  2934  3168  3178  3201 
                                                          3238  3308  3435  3446  3453  3500  3513  3578  4030  4054  4076 
BIT1                                      EQU  00000002     20* 2329  3168  3218  3223  3409  3413  3420  3578 
BIT10                                     EQU  00000400     29* 2338 
BIT11                                     EQU  00000800     30* 2339 
BIT12                                     EQU  00001000     31* 2340 
BIT13                                     EQU  00002000     32* 2341 
BIT14                                     EQU  00004000     33* 2342 
BIT15                                     EQU  00008000     34* 2343 
BIT16                                     EQU  00010000     35*
BIT17                                     EQU  00020000     36*
BIT18                                     EQU  00040000     37*
BIT19                                     EQU  00080000     38*
BIT2                                      EQU  00000004     21* 2330  3168  3208  3238  3302  3578 
BIT20                                     EQU  00100000     39*
BIT21                                     EQU  00200000     40*
BIT22                                     EQU  00400000     41*
BIT23                                     EQU  00800000     42*
BIT24                                     EQU  01000000     43*
BIT25                                     EQU  02000000     44*
BIT26                                     EQU  04000000     45*
BIT27                                     EQU  08000000     46*
BIT28                                     EQU  10000000     47*
BIT29                                     EQU  20000000     48*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE    49

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

BIT3                                      EQU  00000008     22* 2331  3578 
BIT30                                     EQU  40000000     49*
BIT31                                     EQU  80000000     50*
BIT4                                      EQU  00000010     23* 2332 
BIT5                                      EQU  00000020     24* 2333 
BIT6                                      EQU  00000040     25* 2334 
BIT7                                      EQU  00000080     26* 2335 
BIT8                                      EQU  00000100     27* 2336 
BIT9                                      EQU  00000200     28* 2337 
CHG_DGT_SL                                EQU  0000000F   2320* 3119 
CHG_HHDATA                                EQU  000000FF   2314* 3687 
CHG_HLDATA                                EQU  000000FF   2315* 3688 
CHG_LHDATA                                EQU  000000FF   2316* 3670  3689  3993  4069  4155  4226  4297  4368  4437  4506  4575 
                                                          4643  4710 
CHG_LLDATA                                EQU  000000FF   2317* 3671  3690  3994  4070  4156  4227  4298  4369  4438  4507  4576 
                                                          4644  4711 
CHG_SQ_ADR                                EQU  0000007F   2310* 2531  2555  2575  2595  2612  2630  2648  2674  2693  2797  2815 
                                                          2887  2960  3017  3742  3762  3783  3802  3950  3972  4022  4046  4099 
                                                          4134  4183  4205  4254  4276  4325  4347  4395  4417  4464  4486  4533 
                                                          4555  4602  4623  4669  4690 
CHG_SQ_BIT                                EQU  000000FF   2312* 2537  2561  2581  2601  2618  2636  2658  2664  2684  2703  2820 
                                                          2892 
CHG_SQ_BTD                                EQU  0000000F   2313* 2965 
CHG_SQ_OFS                                EQU  000000FF   2311* 2532  2556  2576  2596  2613  2631  2649  2675  2694  2798  2816 
                                                          2888  2961  3018  3743  3763  3784  3803  3951  3973  4023  4047  4100 
                                                          4135  4184  4206  4255  4277  4326  4348  4396  4418  4465  4487  4534 
                                                          4556  4603  4624  4670  4691 
CHG_UNIT_H                                EQU  0000007F   2318* 3117  3371 
CHG_UNIT_L                                EQU  000000FF   2319* 3118  3372 
CLR_ADR                          P        EXPT 0000015C   1808  2797*
CLR_OFS                          P        EXPT 0000015E   1809  2798*
CTBL_REG                                  REG             2278* 2821  2894  2967  3023  3120  3373  3692 
CT_KDN_C_TOP                     P             00000078   2381* 3479  3518 
CT_KND_CD_TOP                    P             0000007C   2382* 3466 
CT_STCT_TOP                      P             00000074   2380* 3395 
DSETLI_CALL                      P             00000044   2357* 3692 
DSETLI_DT_HH                     P        EXPT 000004C4   2029  3687*
DSETLI_DT_HL                     P        EXPT 000004C6   2030  3688*
DSETLI_DT_LH                     P        EXPT 000004C8   2031  3689*
DSETLI_DT_LL                     P        EXPT 000004CA   2032  3690*
DSETWI_DT_LH                     P        EXPT 000004B4   1803  3670*
DSETWI_DT_LL                     P        EXPT 000004B6   1804  3671*
DTBL_REG                                  REG             2279* 3040  3159  3170  3250  3289  3326  3395  3466  3479  3518 
D_REG                                     REG             2277* 3194  3474  3675  3722  3747  3768  3788  3807  3956  3978  3998 
                                                          4028  4052  4074  4105  4140  4160  4189  4211  4231  4260  4282  4302 
                                                          4331  4353  4373  4402  4423  4443  4471  4492  4512  4540  4561  4581 
                                                          4608  4629  4648  4675  4696  4715 
EQL_ADR                          P        EXPT 0000054C   1860  3972*
EQL_OFS                          P        EXPT 0000054E   1861  3973*
EQWI_DT_LH                       P        EXPT 00000560   1865  3993*
EQWI_DT_LL                       P        EXPT 00000562   1866  3994*
EQW_ADR                          P        EXPT 00000538   1855  3950*
EQW_OFS                          P        EXPT 0000053A   1856  3951*
GEL_ADR                          P        EXPT 0000060C   1905  4205*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE    50

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

GEL_OFS                          P        EXPT 0000060E   1906  4206*
GEWI_DT_LH                       P        EXPT 00000620   1910  4226*
GEWI_DT_LL                       P        EXPT 00000622   1911  4227*
GEW_ADR                          P        EXPT 000005F8   1900  4183*
GEW_OFS                          P        EXPT 000005FA   1901  4184*
GTL_ADR                          P        EXPT 000005D0   1890  4134*
GTL_OFS                          P        EXPT 000005D2   1891  4135*
GTWI_DT_LH                       P        EXPT 000005E4   1895  4155*
GTWI_DT_LL                       P        EXPT 000005E6   1896  4156*
GTW_ADR                          P        EXPT 000005BC   1885  4099*
GTW_OFS                          P        EXPT 000005BE   1886  4100*
H_BYTE                                    EQU  00000000     86*
LDL_ADR                          P        EXPT 00000508   1840  3762*
LDL_OFS                          P        EXPT 0000050A   1841  3763*
LDN_ADR                          P        EXPT 000000A4   1724  2555*
LDN_BIT                          P        EXPT 000000AE   1726  2561*
LDN_OFS                          P        EXPT 000000A6   1725  2556*
LDW_ADR                          P        EXPT 000004F8   1835  3742*
LDW_OFS                          P        EXPT 000004FA   1836  3743*
LD_ADR                           P        EXPT 0000008C   1718  2531*
LD_BIT                           P        EXPT 00000096   1720  2537*
LD_OFS                           P        EXPT 0000008E   1719  2532*
LEL_ADR                          P        EXPT 00000684   1935  4347*
LEL_OFS                          P        EXPT 00000686   1936  4348*
LEWI_DT_LH                       P        EXPT 00000698   1940  4368*
LEWI_DT_LL                       P        EXPT 0000069A   1941  4369*
LEW_ADR                          P        EXPT 00000670   1930  4325*
LEW_OFS                          P        EXPT 00000672   1931  4326*
LTL_ADR                          P        EXPT 00000648   1920  4276*
LTL_OFS                          P        EXPT 0000064A   1921  4277*
LTWI_DT_LH                       P        EXPT 0000065C   1925  4297*
LTWI_DT_LL                       P        EXPT 0000065E   1926  4298*
LTW_ADR                          P        EXPT 00000634   1915  4254*
LTW_OFS                          P        EXPT 00000636   1916  4255*
L_BYTE                                    EQU  00000001     85*
M_REG                                     REG             2276* 2513  2514  2528  2529  2552  2553  2726  2727  2735  3051  3183 
                                                          3297  3440  3458 
NBIT0                                     EQU  000000FE     53*
NBIT1                                     EQU  000000FD     54*
NBIT10                                    EQU  0000FBFF     64*
NBIT11                                    EQU  0000F7FF     65*
NBIT12                                    EQU  0000EFFF     66*
NBIT13                                    EQU  0000DFFF     67*
NBIT14                                    EQU  0000BFFF     68*
NBIT15                                    EQU  00007FFF     69*
NBIT2                                     EQU  000000FB     55*
NBIT3                                     EQU  000000F7     56*
NBIT4                                     EQU  000000EF     57*
NBIT5                                     EQU  000000DF     58*
NBIT6                                     EQU  000000BF     59*
NBIT7                                     EQU  0000007F     60*
NBIT8                                     EQU  0000FEFF     62*
NBIT9                                     EQU  0000FDFF     63*
NEL_ADR                          P        EXPT 0000058C   1875  4046*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE    51

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

NEL_OFS                          P        EXPT 0000058E   1876  4047*
NEWI_DT_LH                       P        EXPT 000005A4   1880  4069*
NEWI_DT_LL                       P        EXPT 000005A6   1881  4070*
NEW_ADR                          P        EXPT 00000574   1870  4022*
NEW_OFS                          P        EXPT 00000576   1871  4023*
N_REG                                     REG             2275* 2745  2746  2756  2765  2775 
ORL_ADR                          P        EXPT 000006FC   1995  4486*
ORL_OFS                          P        EXPT 000006FE   1996  4487*
ORN_ADR                          P        EXPT 000000EC   1748  2630*
ORN_BIT                          P        EXPT 000000F6   1750  2636*
ORN_OFS                          P        EXPT 000000EE   1749  2631*
ORWI_DT_LH                       P        EXPT 00000710   2000  4506*
ORWI_DT_LL                       P        EXPT 00000712   2001  4507*
ORW_ADR                          P        EXPT 000006E8   1990  4464*
ORW_OFS                          P        EXPT 000006EA   1991  4465*
OR_ADR                           P        EXPT 000000D8   1742  2612*
OR_BIT                           P        EXPT 000000E2   1744  2618*
OR_OFS                           P        EXPT 000000DA   1743  2613*
P                                P        SCT  00000000   2293*
PLF_ADR                          P        EXPT 000001B8   1779  2887*
PLF_BIT                          P        EXPT 000001C2   1781  2892*
PLF_CALL                         P             0000004C   2359* 2894 
PLF_OFS                          P        EXPT 000001BA   1780  2888*
PLF_SB100                        P             000001DA   2914  2916*
PLS_ADR                          P        EXPT 0000016C   1773  2815*
PLS_BIT                          P        EXPT 00000176   1775  2820*
PLS_CALL                         P             00000048   2358* 2821 
PLS_OFS                          P        EXPT 0000016E   1774  2816*
PLS_SB100                        P             0000018E   2841  2844*
R0_REG                                    REG             2283* 3582 
R10_REG                                   REG             2289* 3159  3177  3189  3190  3198  3202  3207  3214  3225  3228  3231 
                                                          3239  3301  3323  3395  3411  3415  3424  3430  3434  3445  3447  3450 
                                                          3454  3463  3512  3514 
R1_REG                                    REG             2284* 3174  3196  3242  3252  3276  3280  3282  3328  3481  3520  3605 
R2_REG                                    REG             2285* 3253  3329  3482  3521  3575 
R3_REG                                    REG             2286*
R4_REG                                    REG             2287*
R9_REG                                    REG             2288* 3156  3253  3292  3293  3329  3393  3469  3470  3482  3521 
RSTCD_SETBIT                     P        EXPT 00000132   1769  2702*
RST_ADR                          P        EXPT 00000124   1767  2693*
RST_OFS                          P        EXPT 00000126   1768  2694*
SETCD_SETBIT                     P        EXPT 00000122   1763  2683*
SET_ADR                          P        EXPT 00000114   1761  2674*
SET_OFS                          P        EXPT 00000116   1762  2675*
SR_STCT_TOP                      P             00000060   2375* 3040 
STCD_CLRBIT                      P        EXPT 00000110   1757  2655  2663*
STCD_SETBIT                      P        EXPT 0000010A   1756  2657*
STL_ADR                          P        EXPT 00000528   1850  3802*
STL_OFS                          P        EXPT 0000052A   1851  3803*
STW_ADR                          P        EXPT 00000518   1845  3783*
STW_OFS                          P        EXPT 0000051A   1846  3784*
ST_ADR                           P        EXPT 000000FC   1754  2648*
ST_OFS                           P        EXPT 000000FE   1755  2649*
SUBL_ADR                         P        EXPT 000007AC   1965  4690*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE    52

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

SUBL_OFS                         P        EXPT 000007AE   1966  4691*
SUBWI_DT_LH                      P        EXPT 000007C0   1970  4710*
SUBWI_DT_LL                      P        EXPT 000007C2   1971  4711*
SUBW_ADR                         P        EXPT 00000798   1960  4669*
SUBW_OFS                         P        EXPT 0000079A   1961  4670*
TM_KND_TD_TOP                    P             0000006C   2378* 3289 
TM_KND_T_TOP                     P             00000068   2377* 3250  3326 
TM_LAT_CG_TOP                    P             00000070   2379* 3170 
TM_STCT_TOP                      P             00000064   2376* 3159 
TOP_REG                                   REG             2280* 2803  2851  2855  2923  2927  2991  3058  3062  3747  3768  3788 
                                                          3807  3955  3977  4027  4051  4104  4139  4188  4210  4259  4281  4330 
                                                          4352  4400  4422  4469  4491  4538  4560  4607  4628  4674  4695 
WCTR_CALL                        P             00000054   2361* 3373 
WCTR_S10                         P             000003C2   3408  3410*
WCTR_S20                         P             000003E0   3422  3429  3431*
WCTR_S30                         P             000003FA   3437  3457*
WCTR_S90                         P             00000412   3477*
WCTR_S95                         P             00000440   3460  3511*
WCTR_S97                         P             00000446   3475  3516*
WCTR_S98                         P             00000466   3442  3541*
WCTR_SEND                        P             00000468   3502  3544*
WCTR_UNH                         P        EXPT 00000398   1819  3371*
WCTR_UNL                         P        EXPT 0000039A   1820  3372*
WSC_ADR                          P        EXPT 00000204   1824  2960*
WSC_BTD                          P        EXPT 0000020E   1826  2965*
WSC_CALL                         P             00000058   2362* 2967 
WSC_OFS                          P        EXPT 00000206   1825  2961*
WSC_S10                          P             00000228   2984  2993*
WSR_ADR                          P        EXPT 00000234   1830  3017*
WSR_CALL                         P             0000005C   2363* 3023 
WSR_OFS                          P        EXPT 00000236   1831  3018*
WSR_S10                          P             0000026A   3049  3066*
WTMR_CALL                        P             00000050   2360* 3120 
WTMR_DGT                         P        EXPT 00000278   1815  3119*
WTMR_S30                         P             000002E2   3180  3205*
WTMR_S40                         P             000002F4   3217  3222*
WTMR_S45                         P             000002F6   3220  3224*
WTMR_S50                         P             0000032E   3233  3277*
WTMR_S60                         P             0000033C   3281  3287*
WTMR_S70                         P             00000346   3210  3296*
WTMR_S90                         P             00000352   3307*
WTMR_S95                         P             00000364   3299  3321*
WTMR_S98                         P             00000388   3185  3304  3349*
WTMR_SEND                        P             0000038A   3310  3352*
WTMR_UNH                         P        EXPT 00000274   1813  3117*
WTMR_UNL                         P        EXPT 00000276   1814  3118*
XBIT0                                     EQU  00000000     72*
XBIT1                                     EQU  00000001     73*
XBIT2                                     EQU  00000002     74*
XBIT3                                     EQU  00000003     75*
XBIT4                                     EQU  00000004     76*
XBIT5                                     EQU  00000005     77*
XBIT6                                     EQU  00000006     78*
XBIT7                                     EQU  00000007     79*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE    53

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

XORL_ADR                         P        EXPT 00000738   2010  4555*
XORL_OFS                         P        EXPT 0000073A   2011  4556*
XORWI_DT_LH                      P        EXPT 0000074C   2015  4575*
XORWI_DT_LL                      P        EXPT 0000074E   2016  4576*
XORW_ADR                         P        EXPT 00000724   2005  4533*
XORW_OFS                         P        EXPT 00000726   2006  4534*
_ADDL_CHG                                 IMPT 00000000   2092 
_ADDL_CODE                       P        EXPT 00000770   1949  4615*
_ADDL_CODE_END                   P        EXPT 00000782   1952  4619  4630*
_ADDWI_CHG                                IMPT 00000000   2093 
_ADDWI_CODE                      P        EXPT 00000784   1954  4636*
_ADDWI_CODE_END                  P        EXPT 00000794   1957  4640  4649*
_ADDW_CHG                                 IMPT 00000000   2091 
_ADDW_CODE                       P        EXPT 0000075C   1944  4594*
_ADDW_CODE_END                   P        EXPT 0000076E   1947  4598  4609*
_ADD_CODE                                 IMPT 00000000   2019 
_ADD_CODE_END                             IMPT 00000000   2020 
_ADD_SUB                                  IMPT 00000000   1703 
_AMRG_CHG                                 IMPT 00000000   2059 
_AMRG_CODE                       P        EXPT 00000134   1784  2725*
_AMRG_CODE_END                   P        EXPT 00000138   1785  2728*
_ANDL_CHG                                 IMPT 00000000   2100 
_ANDL_CODE                       P        EXPT 000006BC   1979  4409*
_ANDL_CODE_END                   P        EXPT 000006CE   1982  4413  4424*
_ANDN_CHG                                 IMPT 00000000   2044 
_ANDN_CODE                       P        EXPT 000000C8   1735  2593*
_ANDN_CODE_END                   P        EXPT 000000D8   1739  2604*
_ANDWI_CHG                                IMPT 00000000   2101 
_ANDWI_CODE                      P        EXPT 000006D0   1984  4430*
_ANDWI_CODE_END                  P        EXPT 000006E2   1987  4434  4444*
_ANDW_CHG                                 IMPT 00000000   2099 
_ANDW_CODE                       P        EXPT 000006A8   1974  4387*
_ANDW_CODE_END                   P        EXPT 000006BC   1977  4391  4403*
_ANDW_SUB                                 IMPT 00000000   1700 
_AND_CHG                                  IMPT 00000000   2043 
_AND_CODE                        P        EXPT 000000B4   1729  2573*
_AND_CODE_END                    P        EXPT 000000C6   1733  2585*
_BIT_DATA_TBL1                   P             00000000   2327*
_BIT_DATA_TBL2                   P             00000004   2328* 2986  3579 
_CB_BAKUP_CMD1                            EQU  00005678    118*
_CB_BAKUP_CMD2                            EQU  00001234    119*
_CB_BAK_SUM_COD1                          EQU  5AA51234    116*
_CB_BAK_SUM_COD2                          EQU  A55A4321    117*
_CB_ERR_INFO_MEM                          EQU  00000080    142*
_CB_ERR_INFO_PSIZE                        EQU  00000008    143*
_CB_STS_BUF_1BLK                          EQU  00000040    121*  123 
_CB_STS_BUF_BLKMAX                        EQU  00000008    122*  123 
_CB_STS_BUF_MAX                           EQU  00000200    123*
_CB_TRD_BEFORE                            EQU  00000060    131*
_CB_TRD_BUF_DP_MAX                        EQU  00000080    135*
_CB_TRD_BUF_MAX                           EQU  00000800    132*
_CB_TRD_DP_1CNT                           EQU  00000008    134*
_CB_TRD_DP_CH                             EQU  00000004    127*
_CB_TRD_SMP_CNT                           EQU  00000080    130*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE    54

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_CLR_CHG                                  IMPT 00000000   2057 
_CLR_CODE                        P        EXPT 00000158   1807  2791*
_CLR_CODE_END                    P        EXPT 0000016A   1810  2794  2804*
_CLR_SUB                                  IMPT 00000000   1689 
_DIVS_32REG2_32REG1_R4_32REG2_R2          IMPT 00000000   2298  3284 
_DI_X_TOP1                                IMPT 00000000   1654 
_DI_X_TOP2                                IMPT 00000000   1655 
_DO_Y_TOP1                                IMPT 00000000   1656 
_DO_Y_TOP2                                IMPT 00000000   1657 
_DSETLI_CHG                               IMPT 00000000   2109 
_DSETLI_CODE                     P        EXPT 000004C0   2028  3682*
_DSETLI_CODE_END                 P        EXPT 000004D2   2033  3685  3695*
_DSETLI_SUB                      P             000004D4   2357  3702*
_DSETWI_CHG                               IMPT 00000000   2058 
_DSETWI_CODE                     P        EXPT 000004B0   1802  3664*
_DSETWI_CODE_END                 P        EXPT 000004C0   1805  3667  3676*
_DUMMY_SUM_CODE                           EQU  5AA53CC3    109*
_ENDNRG_CHG                               IMPT 00000000   2064 
_ENDNRG_CODE                     P        EXPT 00000154   1799  2774*
_ENDNRG_CODE_END                 P        EXPT 00000156   1800  2776*
_END_CHG                                  IMPT 00000000   2065 
_END_CODE                        P        EXPT 000007CC   2025  4722*
_END_CODE_END                    P        EXPT 000007D2   2026  4729*
_END_SUB                                  IMPT 00000000   1705 
_EQL_CHG                                  IMPT 00000000   2073 
_EQL_CODE                        P        EXPT 00000548   1859  3964*
_EQL_CODE_END                    P        EXPT 0000055C   1862  3968  3980*
_EQWI_CHG                                 IMPT 00000000   2074 
_EQWI_CODE                       P        EXPT 0000055C   1864  3986*
_EQWI_CODE_END                   P        EXPT 0000056E   1867  3990  4001*
_EQW_CHG                                  IMPT 00000000   2072 
_EQW_CODE                        P        EXPT 00000534   1854  3942*
_EQW_CODE_END                    P        EXPT 00000548   1857  3946  3958*
_EQ_SUB                                   IMPT 00000000   1696 
_GEL_CHG                                  IMPT 00000000   2082 
_GEL_CODE                        P        EXPT 00000608   1904  4197*
_GEL_CODE_END                    P        EXPT 0000061C   1907  4201  4213*
_GEWI_CHG                                 IMPT 00000000   2083 
_GEWI_CODE                       P        EXPT 0000061C   1909  4219*
_GEWI_CODE_END                   P        EXPT 0000062E   1912  4223  4233*
_GEW_CHG                                  IMPT 00000000   2081 
_GEW_CODE                        P        EXPT 000005F4   1899  4175*
_GEW_CODE_END                    P        EXPT 00000608   1902  4179  4191*
_GTL_CHG                                  IMPT 00000000   2079 
_GTL_CODE                        P        EXPT 000005CC   1889  4126*
_GTL_CODE_END                    P        EXPT 000005E0   1892  4130  4142*
_GTWI_CHG                                 IMPT 00000000   2080 
_GTWI_CODE                       P        EXPT 000005E0   1894  4148*
_GTWI_CODE_END                   P        EXPT 000005F2   1897  4152  4162*
_GTW_CHG                                  IMPT 00000000   2078 
_GTW_CODE                        P        EXPT 000005B8   1884  4091*
_GTW_CODE_END                    P        EXPT 000005CC   1887  4095  4107*
_GT_SUB                                   IMPT 00000000   1698 
_LDL_CHG                                  IMPT 00000000   2068 
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE    55

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_LDL_CODE                        P        EXPT 00000504   1839  3755*
_LDL_CODE_END                    P        EXPT 00000514   1842  3758  3770*
_LDNRG_CHG                                IMPT 00000000   2063 
_LDNRG_CODE                      P        EXPT 0000014C   1796  2764*
_LDNRG_CODE_END                  P        EXPT 00000152   1797  2768*
_LDN_CHG                                  IMPT 00000000   2042 
_LDN_CODE                        P        EXPT 000000A0   1723  2550*
_LDN_CODE_END                    P        EXPT 000000B4   1727  2564*
_LDON_CHG                                 IMPT 00000000   2040 
_LDON_CODE                       P        EXPT 00000080   1714  2511*
_LDON_CODE_END                   P        EXPT 00000088   1715  2517*
_LDW_CHG                                  IMPT 00000000   2067 
_LDW_CODE                        P        EXPT 000004F4   1834  3735*
_LDW_CODE_END                    P        EXPT 00000504   1837  3738  3749*
_LDW_SUB                                  IMPT 00000000   1694 
_LD_CHG                                   IMPT 00000000   2041 
_LD_CODE                         P        EXPT 00000088   1717  2526*
_LD_CODE_END                     P        EXPT 0000009E   1721  2541*
_LEL_CHG                                  IMPT 00000000   2089 
_LEL_CODE                        P        EXPT 00000680   1934  4339*
_LEL_CODE_END                    P        EXPT 00000694   1937  4343  4355*
_LEWI_CHG                                 IMPT 00000000   2090 
_LEWI_CODE                       P        EXPT 00000694   1939  4361*
_LEWI_CODE_END                   P        EXPT 000006A6   1942  4365  4375*
_LEW_CHG                                  IMPT 00000000   2088 
_LEW_CODE                        P        EXPT 0000066C   1929  4317*
_LEW_CODE_END                    P        EXPT 00000680   1932  4321  4333*
_LE_SUB                                   IMPT 00000000   1699 
_LTL_CHG                                  IMPT 00000000   2086 
_LTL_CODE                        P        EXPT 00000644   1919  4268*
_LTL_CODE_END                    P        EXPT 00000658   1922  4272  4284*
_LTWI_CHG                                 IMPT 00000000   2087 
_LTWI_CODE                       P        EXPT 00000658   1924  4290*
_LTWI_CODE_END                   P        EXPT 0000066A   1927  4294  4304*
_LTW_CHG                                  IMPT 00000000   2085 
_LTW_CODE                        P        EXPT 00000630   1914  4246*
_LTW_CODE_END                    P        EXPT 00000644   1917  4250  4262*
_MKIND_A                                  EQU  00000040   2250*
_MKIND_A_ADR                              EQU  00001610   2249*
_MKIND_C                                  EQU  00000040   2232* 2233 
_MKIND_CD                                 EQU  00000400   2236* 2237 
_MKIND_CD_ADR                             EQU  00000900   2235* 2237  2382 
_MKIND_C_ADR                              EQU  000004C0   2231* 2233  2381 
_MKIND_F                                  EQU  00000110   2246* 2247 
_MKIND_F_ADR                              EQU  00000D00   2245* 2247 
_MKIND_L                                  EQU  00000040   2228* 2229 
_MKIND_L_ADR                              EQU  00000440   2227* 2229 
_MKIND_M                                  EQU  00000400   2226* 2227 
_MKIND_M_ADR                              EQU  00000040   2225* 2227 
_MKIND_S                                  EQU  00000800   2248* 2249 
_MKIND_S_ADR                              EQU  00000E10   2247* 2249 
_MKIND_T                                  EQU  00000040   2230* 2231 
_MKIND_TBL                                IMPT 00000000   2139 
_MKIND_TBL_TOP                            IMPT 00000000   2140 
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE    56

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_MKIND_TD                                 EQU  00000400   2234* 2235 
_MKIND_TD_ADR                             EQU  00000500   2233* 2235  2378 
_MKIND_T_ADR                              EQU  00000480   2229* 2231  2377 
_MKIND_W0                                 EQU  00000000   2220* 2221 
_MKIND_W0_ADR                             EQU  00000000   2219*
_MKIND_W1                                 EQU  00000000   2238* 2239 
_MKIND_W1_ADR                             EQU  00000D00   2237* 2239 
_MKIND_W2                                 EQU  00000000   2240* 2241 
_MKIND_W2_ADR                             EQU  00000D00   2239* 2241 
_MKIND_W3                                 EQU  00000000   2242* 2243 
_MKIND_W3_ADR                             EQU  00000D00   2241* 2243 
_MKIND_W4                                 EQU  00000000   2244* 2245 
_MKIND_W4_ADR                             EQU  00000D00   2243* 2245 
_MKIND_X                                  EQU  00000020   2222* 2223 
_MKIND_X_ADR                              EQU  00000000   2221* 2223 
_MKIND_Y                                  EQU  00000020   2224* 2225 
_MKIND_Y_ADR                              EQU  00000020   2223* 2225 
_NEL_CHG                                  IMPT 00000000   2076 
_NEL_CODE                        P        EXPT 00000588   1874  4038*
_NEL_CODE_END                    P        EXPT 000005A0   1877  4042  4056*
_NEWI_CHG                                 IMPT 00000000   2077 
_NEWI_CODE                       P        EXPT 000005A0   1879  4062*
_NEWI_CODE_END                   P        EXPT 000005B6   1882  4066  4078*
_NEW_CHG                                  IMPT 00000000   2075 
_NEW_CODE                        P        EXPT 00000570   1869  4014*
_NEW_CODE_END                    P        EXPT 00000588   1872  4018  4032*
_NE_SUB                                   IMPT 00000000   1697 
_NOP_CHG                                  IMPT 00000000   2039 
_NOP_CODE                        P        EXPT 000007D4   1711  4735*
_NOP_CODE_END                    P        EXPT 000007D6   1712  4737*
_OMRG_CHG                                 IMPT 00000000   2060 
_OMRG_CODE                       P        EXPT 00000138   1787  2734*
_OMRG_CODE_END                   P        EXPT 0000013E   1788  2738*
_ORL_CHG                                  IMPT 00000000   2103 
_ORL_CODE                        P        EXPT 000006F8   1994  4478*
_ORL_CODE_END                    P        EXPT 0000070A   1997  4482  4493*
_ORN_CHG                                  IMPT 00000000   2046 
_ORN_CODE                        P        EXPT 000000EC   1747  2628*
_ORN_CODE_END                    P        EXPT 000000FC   1751  2639*
_ORWI_CHG                                 IMPT 00000000   2104 
_ORWI_CODE                       P        EXPT 0000070C   1999  4499*
_ORWI_CODE_END                   P        EXPT 0000071E   2002  4503  4513*
_ORW_CHG                                  IMPT 00000000   2102 
_ORW_CODE                        P        EXPT 000006E4   1989  4456*
_ORW_CODE_END                    P        EXPT 000006F8   1992  4460  4472*
_ORW_SUB                                  IMPT 00000000   1701 
_OR_CHG                                   IMPT 00000000   2045 
_OR_CODE                         P        EXPT 000000D8   1741  2610*
_OR_CODE_END                     P        EXPT 000000EA   1745  2622*
_PLF_CHG                                  IMPT 00000000   2048 
_PLF_CODE                        P        EXPT 000001B8   1778  2885*
_PLF_CODE_END                    P        EXPT 000001CA   1782  2897*
_PLF_SUB                         P        EXPT 000001CC   1688  2359  2905*
_PLF_SUB_END                     P             000001FC   2937*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE    57

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_PLS_CHG                                  IMPT 00000000   2047 
_PLS_CODE                        P        EXPT 0000016C   1772  2813*
_PLS_CODE_END                    P        EXPT 0000017E   1776  2824*
_PLS_SUB                         P        EXPT 00000180   1687  2358  2831*
_PLS_SUB_END                     P             000001B0   2865*
_POP_CHG                                  IMPT 00000000   2062 
_POP_CODE                        P        EXPT 00000144   1793  2753*
_POP_CODE_END                    P        EXPT 0000014C   1794  2758*
_PUSH_CHG                                 IMPT 00000000   2061 
_PUSH_CODE                       P        EXPT 00000140   1790  2744*
_PUSH_CODE_END                   P        EXPT 00000144   1791  2747*
_RST_CHG                                  IMPT 00000000   2052 
_RST_CODE                        P        EXPT 00000124   1766  2691*
_RST_CODE_END                    P        EXPT 00000134   1770  2700  2704*
_SEQ_ARG1_DATA                            IMPT 00000000   1635 
_SEQ_ARG2_DATA                            IMPT 00000000   1642 
_SEQ_ARG3_DATA                            IMPT 00000000   1649 
_SEQ_ASM_RAM_TOP                          IMPT 00000000   1613 
_SEQ_A_SET                                EQU  00000020   2189* 2250 
_SEQ_BBIT_CHG_TBL                         IMPT 00000000   2120 
_SEQ_CALL_TBL1                   P        EXPT 00000044   2353  2356* 2821  2894  2967  3023  3120  3373  3692 
_SEQ_CARD_MAX                             EQU  00000C00   2190*
_SEQ_CARD_RAM                             IMPT 00000000   1627  2377  2378  2381  2382 
_SEQ_CD_SET                               EQU  00000200   2182* 2236 
_SEQ_CHG_TBL0                             IMPT 00000000   2116 
_SEQ_CMP_ERR1                             IMPT 00000000   1633 
_SEQ_CMP_ERR2                             IMPT 00000000   1640 
_SEQ_CMP_ERR3                             IMPT 00000000   1647 
_SEQ_CMP_ERR_ADR1                         IMPT 00000000   1634 
_SEQ_CMP_ERR_ADR2                         IMPT 00000000   1641 
_SEQ_CMP_ERR_ADR3                         IMPT 00000000   1648 
_SEQ_CMP_START                            IMPT 00000000   1661 
_SEQ_CTR_DATA                             IMPT 00000000   1630  2380 
_SEQ_C_SET                                EQU  00000020   2180* 2182  2232 
_SEQ_DATA_TBL1                   P        EXPT 00000060   2371  2374* 3040  3159  3170  3250  3289  3326  3395  3466  3479  3518 
_SEQ_DRG1_DATA                            IMPT 00000000   1638 
_SEQ_DRG2_DATA                            IMPT 00000000   1645 
_SEQ_DRG3_DATA                            IMPT 00000000   1652 
_SEQ_F_SET                                EQU  00000088   2187* 2246 
_SEQ_LD_TIMOUT                            IMPT 00000000   1669 
_SEQ_L_SET                                EQU  00000020   2178* 2228 
_SEQ_MAX_BYTE                             EQU  0000001E   2213*
_SEQ_MRG1_DATA                            IMPT 00000000   1636 
_SEQ_MRG2_DATA                            IMPT 00000000   1643 
_SEQ_MRG3_DATA                            IMPT 00000000   1650 
_SEQ_M_SET                                EQU  00000200   2177* 2226 
_SEQ_NRG1_DATA                            IMPT 00000000   1637 
_SEQ_NRG2_DATA                            IMPT 00000000   1644 
_SEQ_NRG3_DATA                            IMPT 00000000   1651 
_SEQ_POU_SET                              EQU  00004000   2214*
_SEQ_RUN1                                 IMPT 00000000   1616 
_SEQ_RUN1_END                             IMPT 00000000   1617 
_SEQ_RUN1_TOP                             IMPT 00000000   1615 
_SEQ_RUN2                                 IMPT 00000000   1620 
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE    58

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_SEQ_RUN2_END                             IMPT 00000000   1621 
_SEQ_RUN2_TOP                             IMPT 00000000   1619 
_SEQ_RUN3                                 IMPT 00000000   1624 
_SEQ_RUN3_END                             IMPT 00000000   1625 
_SEQ_RUN3_TOP                             IMPT 00000000   1623 
_SEQ_RUN_CHG1_ERR_END                     IMPT 00000000   2097 
_SEQ_SR_FLG                               IMPT 00000000   1631  2375 
_SEQ_S_SET                                EQU  00000400   2188* 2248 
_SEQ_TD_SET                               EQU  00000200   2181* 2234 
_SEQ_TIM_WK1000M                          IMPT 00000000   1672 
_SEQ_TIM_WK100M                           IMPT 00000000   1671 
_SEQ_TMR_DATA                             IMPT 00000000   1629  2376 
_SEQ_T_SET                                EQU  00000020   2179* 2181  2230 
_SEQ_W0_SET                               EQU  00000000   2174* 2220 
_SEQ_W1_SET                               EQU  00000000   2183* 2238 
_SEQ_W2_SET                               EQU  00000000   2184* 2240 
_SEQ_W3_SET                               EQU  00000000   2185* 2242 
_SEQ_W4_SET                               EQU  00000000   2186* 2244 
_SEQ_X_SET                                EQU  00000010   2175* 2222 
_SEQ_Y_SET                                EQU  00000010   2176* 2224 
_SET_CHG                                  IMPT 00000000   2051 
_SET_CODE                        P        EXPT 00000114   1760  2672*
_SET_CODE_END                    P        EXPT 00000124   1764  2681  2685*
_SQ_ERR_END                               EQU  0000FF00   2167*
_SQ_NML_COD                               EQU  00000000   2165*
_SQ_NML_END                               EQU  00000055   2166*
_START_ACK_COD                            EQU  00004321    217*
_START_REQ_COD                            EQU  00009876    216*
_STL_CHG                                  IMPT 00000000   2070 
_STL_CODE                        P        EXPT 00000524   1849  3795*
_STL_CODE_END                    P        EXPT 00000534   1852  3798  3808*
_STW_CHG                                  IMPT 00000000   2069 
_STW_CODE                        P        EXPT 00000514   1844  3776*
_STW_CODE_END                    P        EXPT 00000524   1847  3779  3789*
_STW_SUB                                  IMPT 00000000   1695 
_ST_CHG                                   IMPT 00000000   2049 
_ST_CODE                         P        EXPT 000000FC   1753  2646*
_ST_CODE_END                     P        EXPT 00000112   1758  2660  2665*
_SUBL_CHG                                 IMPT 00000000   2095 
_SUBL_CODE                       P        EXPT 000007A8   1964  4682*
_SUBL_CODE_END                   P        EXPT 000007BA   1967  4686  4697*
_SUBWI_CHG                                IMPT 00000000   2096 
_SUBWI_CODE                      P        EXPT 000007BC   1969  4703*
_SUBWI_CODE_END                  P        EXPT 000007CC   1972  4707  4716*
_SUBW_CHG                                 IMPT 00000000   2094 
_SUBW_CODE                       P        EXPT 00000794   1959  4661*
_SUBW_CODE_END                   P        EXPT 000007A6   1962  4665  4676*
_SUB_CODE                                 IMPT 00000000   2022 
_SUB_CODE_END                             IMPT 00000000   2023 
_SUB_SUB                                  IMPT 00000000   1704 
_SeqLd_MKIND_TBL_TOP                      IMPT 00000000   2141 
_SeqSysStat                               IMPT 00000000   1663 
_TMR_CNT_ADR_BIT_H               P             0000049C   3589  3601*
_TMR_CNT_ADR_BIT_L               P             00000498   3586  3597*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE    59

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_TMR_CNT_ADR_BIT_MAKE            P             00000474   3255  3331  3484  3523  3570*
_TM_LATE_CHGTOP                  P             00000280   2379  3136*
_T_0001HR_CNT                             EQU  00000020   2269*
_T_0001HR_TOP                             EQU  000001E0   2268*
_T_0001MS_CNT                             EQU  00000040   2267* 2268 
_T_0001MS_TOP                             EQU  000001A0   2266* 2268 
_T_0010MS_CNT                             EQU  00000100   2261* 2262 
_T_0010MS_TOP                             EQU  00000000   2260* 2262 
_T_0100MS_CNT                             EQU  00000080   2263* 2264 
_T_0100MS_TOP                             EQU  00000100   2262* 2264 
_T_1000MS_CNT                             EQU  00000020   2265* 2266 
_T_1000MS_TOP                             EQU  00000180   2264* 2266 
_VUPCHECK_EQU                             EQU  11AB3739    102*
_WCTR_CHG                                 IMPT 00000000   2055 
_WCTR_CODE                       P        EXPT 00000398   1818  3369*
_WCTR_CODE_END                   P        EXPT 000003A2   1821  3376*
_WCTR_SUB                        P        EXPT 000003A4   1691  2361  3385*
_WSC_CHG                                  IMPT 00000000   2050 
_WSC_CODE                        P        EXPT 00000204   1823  2958*
_WSC_CODE_END                    P        EXPT 00000216   1827  2970*
_WSC_SUB                         P        EXPT 00000218   1692  2362  2977*
_WSR_CHG                                  IMPT 00000000   2056 
_WSR_CODE                        P        EXPT 00000234   1829  3015*
_WSR_CODE_END                    P        EXPT 00000244   1832  3026*
_WSR_SUB                         P        EXPT 00000244   1693  2363  3035*
_WTMR_CHG                                 IMPT 00000000   2054 
_WTMR_CODE                       P        EXPT 00000274   1812  3116*
_WTMR_CODE_END                   P        EXPT 00000280   1816  3123*
_WTMR_SUB                        P        EXPT 000002A0   1690  2360  3147*
_XORL_CHG                                 IMPT 00000000   2106 
_XORL_CODE                       P        EXPT 00000734   2009  4547*
_XORL_CODE_END                   P        EXPT 00000746   2012  4551  4562*
_XORWI_CHG                                IMPT 00000000   2107 
_XORWI_CODE                      P        EXPT 00000748   2014  4568*
_XORWI_CODE_END                  P        EXPT 0000075A   2017  4572  4582*
_XORW_CHG                                 IMPT 00000000   2105 
_XORW_CODE                       P        EXPT 00000720   2004  4525*
_XORW_CODE_END                   P        EXPT 00000734   2007  4529  4541*
_XORW_SUB                                 IMPT 00000000   1702 
_X_PUSH_TOP1                              IMPT 00000000   1658 
_X_PUSH_TOP2                              IMPT 00000000   1659 
__TMCT_FLG                                EQU  00000008   2258* 3177  3189  3202  3207  3214  3225  3239  3301  3323  3411  3415 
                                                          3434  3445  3447  3454  3512  3514 
__TMCT_PV                                 EQU  00000000   2256* 3190  3228  3424  3430  3450  3463 
__TMCT_ST_CNT                             EQU  0000000C   2255*
__TMCT_SV                                 EQU  00000004   2257* 3198  3231 
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 20:26:24                                                  PAGE    60

*** SECTION DATA LIST

SECTION                          ATTRIBUTE    SIZE             START

P                                REL-CODE    0000007D6        
