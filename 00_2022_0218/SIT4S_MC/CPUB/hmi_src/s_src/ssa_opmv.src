;	*******************************************************************
;	***								***
;	***	hmi/cop1z interface soft				***
;	***	(荷重計・Ｔﾘﾝｸ)						***
;	***	first 2002-12-06	orignal	koma			***
;	***								***
;	***	ｵﾌﾟｼｮﾝが未接続ならｵﾌﾟｼｮﾝからのﾃﾞｰﾀREADは行わない	***
;	***	但し、DPRAMｸﾘｱ等のWRの処理は行う			***
;	*******************************************************************
;
;	=== SH2 C/B DATA ===
	.GLOBAL		_ENC360_HEX		;//HEX data
	.GLOBAL		_ENC360_INDT		;
;;;	.GLOBAL		_INC_ENC360		;


	.GLOBAL		_SEQ_PAR_450
	.GLOBAL		_SEQ_PAR_451
	.GLOBAL		_SEQ_PAR_452
	.GLOBAL		_SEQ_PAR_380
	.GLOBAL		_SEQ_PAR_381
	.GLOBAL		_SEQ_PAR_382
	.GLOBAL		_SEQ_PAR_383
	.GLOBAL		_SEQ_PAR_384
	.GLOBAL		_SEQ_PAR_385
;;;;	.GLOBAL		_SEQ_020_SV


	.MACRO	MOT_DAT_CHG_INTEL LG,REG1
	SWAP.\LG	\REG1,\REG1
	EXTS.W		\REG1,\REG1
	
	.ENDM

;	-------
	.EXPORT	_COP1_START_INIT1
;;[]	.EXPORT	_COP1_MAIN_SEQ_DAT_REF
	.EXPORT	_COP1_INT_ENC_REF
	.EXPORT	_COP1_INT_TIM_REF
	.EXPORT	_COP1_INT_WR
	.EXPORT	_COP1_ENC_WR


;	=====================
;	******************************************
;	**********	PUBLIC TABLE	**********
;	******************************************
	.GLOBAL		OP_RAM_TOP
	.GLOBAL		OP_STS_TOP
;
	.GLOBAL		_CLO_TOP
	.GLOBAL		_CLO_TRK_L
	.GLOBAL		_CLO_TRK_R
	.GLOBAL		_CLO_TRK_T
;	.GLOBAL		_CLO_GAIN_BAK1L
;	.GLOBAL		_CLO_GAIN_BAK1R
;	.GLOBAL		_CLO_GAIN_BAK2L
;	.GLOBAL		_CLO_GAIN_BAK2R
;	.GLOBAL		_CLO_GAIN_BAK3L
;	.GLOBAL		_CLO_GAIN_BAK3R
;	.GLOBAL		_CLO_GAIN_BAK4L
;	.GLOBAL		_CLO_GAIN_BAK4R
;	.GLOBAL		_CLO_GAIN_BAK5L
;	.GLOBAL		_CLO_GAIN_BAK5R
;	.GLOBAL		_CLO_OF_BAKL
;	.GLOBAL		_CLO_OF_BAKR
;	.GLOBAL		_CLO_OF_AVE_BAKL
;	.GLOBAL		_CLO_OF_AVE_BAKR
;	.GLOBAL		_CLO_OF_AVE_BAKT
	.GLOBAL		_CLO_STRAIN_L
	.GLOBAL		_CLO_STRAIN_R
	.GLOBAL		_CLO_STRAIN_T
	.GLOBAL		_CLO_MAXLD_L
	.GLOBAL		_CLO_MAXLD_R
	.GLOBAL		_CLO_MAXLD_T
	.GLOBAL		_CLO_PROOF_L
	.GLOBAL		_CLO_PROOF_R
	.GLOBAL		_CLO_PROOF_T
	.GLOBAL		_CLO_PROOF_SEI
	.GLOBAL		_CLO_OVER_L
	.GLOBAL		_CLO_OVER_R
	.GLOBAL		_CLO_OVER_T
	.GLOBAL		_CLO_LOWER_L
	.GLOBAL		_CLO_LOWER_R
	.GLOBAL		_CLO_LOWER_T
	.GLOBAL		_CSET_SET

	.GLOBAL		CPOS_TOP
	.GLOBAL		_CPOS_SET_TOPL
	.GLOBAL		_CPOS_SET_LOWL
	.GLOBAL		_CPOS_SET_MRE
	.GLOBAL		_CPOS_SET_POSI
	.GLOBAL		_CPOS_SET_UNIT
	.GLOBAL		_CPOS_SET_ALFA
	.GLOBAL		_CPOS_SET_BETA
	.GLOBAL		_CPOS_SET_DELTA
	.GLOBAL		_CPOS_SET_GANMA
	.GLOBAL		_CPOS_STD_BAK
	.GLOBAL		_CPOS_SET_STD

	.GLOBAL		CCALE_TOP
	.GLOBAL		_CCALE_IN

	.GLOBAL		SEQ_360_371_TOP
	.GLOBAL		_CPOS_RQE
	.GLOBAL		_CLO_RQE
	.GLOBAL		_CLO_ZERO	;

	.GLOBAL		_SEQ_384_447_TOP
	.GLOBAL		_CTLINK_C_OP

	.GLOBAL		CSTATUS_TOP
	.GLOBAL		_CSTATUS_C

	.GLOBAL		OPLO_TOP
	.GLOBAL		_CLO_DEG_L
	.GLOBAL		_CLO_DEG_R
	.GLOBAL		_CLO_DEG_T
;	.GLOBAL		_CLO_GAIN_SET1L
;	.GLOBAL		_CLO_GAIN_SET1R
;	.GLOBAL		_CLO_GAIN_SET2L
;	.GLOBAL		_CLO_GAIN_SET2R
;	.GLOBAL		_CLO_GAIN_SET3L
;	.GLOBAL		_CLO_GAIN_SET3R
;	.GLOBAL		_CLO_GAIN_SET4L
;	.GLOBAL		_CLO_GAIN_SET4R
;	.GLOBAL		_CLO_GAIN_SET5L
;	.GLOBAL		_CLO_GAIN_SET5R
;	.GLOBAL		_CLO_OF_SETL
;	.GLOBAL		_CLO_OF_SETR
;	.GLOBAL		_CLO_OF_AVE_SETL
;	.GLOBAL		_CLO_OF_AVE_SETR
;	.GLOBAL		_CLO_OF_AVE_SETT
	.GLOBAL		_CLO_OFAD_L
	.GLOBAL		_CLO_OFAD_R
	.GLOBAL		_CLO_OFAD_T
	.GLOBAL		_CLO_LOAD_L
	.GLOBAL		_CLO_LOAD_R
	.GLOBAL		_CLO_LOAD_T
	.GLOBAL		_CPOS_NOW_MM
	.GLOBAL		_CPOS_STD
	.GLOBAL		_CCALE_OUT

	.GLOBAL		SEQ_372_383_TOP
	.GLOBAL		_CPOS_CONDI
	.GLOBAL		_CPOS_ORDER
	.GLOBAL		_CLO_CONDI
	.GLOBAL		_CLO_LIMERR
	.GLOBAL		_CLO_SATURATE
	.GLOBAL		_CLO_END_FLG	;

	.GLOBAL		_SEQ_448_511_TOP
	.GLOBAL		_CTLINK_OP_C
	.GLOBAL		_CCTRL_OP_LO
	.GLOBAL		_CCTRL_OP_PO
	.GLOBAL		_CCTRL_OP_CALE
	.GLOBAL		_CCTRL_OP_GAMEN
	.GLOBAL		_CCTRL_OP_TLINK
	.GLOBAL		_CERROR_C
	.GLOBAL		_CPUC_ROM_ER
	.GLOBAL		_CPUC_RAM_ER
	.GLOBAL		_CPUC_CB1_ER
	.GLOBAL		_CPUC_CB2_ER
	.GLOBAL		_CPUC_OP_ER
	.GLOBAL		_CPUC_CMP_ER
	.GLOBAL		_CPUC_PDN_ER
	.GLOBAL		_CPUC_079_ER
	.GLOBAL		_CPUC_077_ER
	.GLOBAL		_CPUC_160_DT
;--------------------------------------------------------------- '94-10-31 [H]
	.GLOBAL		_V25_OP_0
	.GLOBAL		_V25_OP_1
	.GLOBAL		_V25_OP_2
	.GLOBAL		_V25_OP_3
	.GLOBAL		_V25_OP_4
	.GLOBAL		_V25_OP_5
	.GLOBAL		_V25_OP_6
	.GLOBAL		_V25_OP_7
	.GLOBAL		_V25_OP_10
	.GLOBAL		_V25_OP_11
	.GLOBAL		_V25_OP_12

;---------------------------------------------------------------
	.GLOBAL		_CERROR_OP
	.GLOBAL		_OP_ERROR1
	.GLOBAL		_OP_ERROR2
;--------------------------------------------------------------- '94-10-31 [H]
	.GLOBAL		_OP_VER
	.GLOBAL		_OP_V25_0
	.GLOBAL		_OP_V25_1
	.GLOBAL		_OP_V25_2
	.GLOBAL		_OP_V25_3
	.GLOBAL		_OP_V25_4
	.GLOBAL		_OP_V25_5
	.GLOBAL		_OP_V25_6
	.GLOBAL		_OP_V25_7
;---------------------------------------------------------------
	.GLOBAL		_CENC_DEG
	.GLOBAL		_RAMOP_C_INT
	.GLOBAL		_RAMC_OP_INT
;
	.GLOBAL		_OP_STATUS
;
	.GLOBAL		_CLO_DEG_MRD			;2000-09-04

	.GLOBAL		_CLO_EXT_SMPSIG			;2003-01-31 koma

;	------ 2006-07-14 V01v
	.GLOBAL	_CLO_LOAD_LIVE_L;		//荷重生（TON）(1word)
	.GLOBAL	_CLO_LOAD_LIVE_T;		//荷重生（TON）(1word)
	.GLOBAL	_CLO_LOAD_LIVE_R;		//荷重生（TON）(1word)
	.GLOBAL	_CLO_LOAD_L2;		//区間最大荷重
	.GLOBAL	_CLO_LOAD_T2;		//区間最大荷重TOTALのみ使用
	.GLOBAL	_CLO_LOAD_R2;		//区間最大荷重

;	***********************************
;	***				***
;	***	R0,R1,R4 USED		***
;	***	ｵﾌﾟｼｮﾝｶｰﾄﾞ接続有/無	***
;	***	T=1有り T=0無し		***
;	***********************************
	.MACRO	OPTION_CONECT_CHK
	MOV.L	#_OP_STATUS,R1		;
	MOV.B	@R1,R0			;
	MOV.W	#H'0050,R4		;
	AND	R4,R0			;
	CMP/EQ	#H'50,R0		;"5*"なら接続有り
	.ENDM
	


	.IMPORT	_FPU_R2_MUL_R1_DIV_R4	;

;	***********************************
;	***				***
;	***		荷重計		***
;	***				***
;	***********************************
_COP1_START_INIT1:
	SUB_START
	PUSH_ALL

	FAR_JSR	#_DEF_DATA_INITAL_CHK,R0	;

	FAR_JSR	#_COP1_INT_WR,R0		;

	MOV.B	#(BIT1+BIT0),R0			;
	MOV.L	#_CSTATUS_C,R1			;DB	1	DUP(?)		; LOAD MONITOR STATUS
	MOV.B	R0,@R1				;

	MOV.B	#H'80,R0			;
	MOV.L	#_CSET_SET,R1			; SYOKI SETTEITI
	MOV.B	R0,@R1				;


	POP_ALL
	SUB_END
	M_RTS

;	***********************************
;	***				***
;	***		荷重計		***
;	***				***
;	***********************************
;	①CPUDがｲﾆｼｬﾙ処理を行ったか
;
_DEF_DATA_INITAL_CHK
	SUB_START
	FAR_JSR	#_CPU_to_DP_SET1,R0	;

	SUB_END
	M_RTS

;	***********************************
;	***				***
;	***	ｼｰｹﾝｽ及びﾃﾞｰﾀのﾘﾌﾚｯｼｭ	***
;	***	荷重計関連		***
;	***				***
;	***********************************
	.import	_sq_to_cop_com1;//2003-01-31
	.IMPORT	_COP_CB_LD_MONI_SIG;//荷重測定用信号(C/Bから)

_COP1_MAIN_SEQ_DAT_REF
	SUB_START
	PUSH_ALL
;	===========================
;	====	2003-01-31	===
;	===========================
	MOV.L	#_SEQAB_DP_TOP+342*2,R1	;
	MOV.W	@R1,R0			;
	SHLR8	R0			;bit8~bit10==>bit0~bit2

	OR	#BIT0,R0		;SIT-Sﾓｰﾄﾞ固定
	MOV.L	#_sq_to_cop_com1,R1	;
	MOV.W	R0,@R1			;


;	==HMI==>OP======================
	MOV.L	#_SEQAB_DP_TOP+450*2,R1	;
	MOV.W	@R1,R0			;
	MOV.L	#_CPOS_RQE,R1		;
	MOV.B	R0,@R1			;

	MOV.L	#_SEQAB_DP_TOP+451*2,R1	;
	MOV.W	@R1,R0			;
	MOV.L	#_CLO_RQE,R1		;
	MOV.B	R0,@R1			;

	MOV.L	#_SEQAB_DP_TOP+452*2,R1	;
	MOV.W	@R1,R0			;
	MOV.L	#_CLO_ZERO,R1		;ｾﾞﾛｻﾌﾟﾚｽ関連の指令(CLO_ZERO )
	MOV.B	R0,@R1			;451.4=1

;	====OP==>HMI ===================
	MOV.L	#_CPOS_CONDI,R1		;旧372
	MOV.B	@R1,R0			;
	EXTU.B	R0,R0			;2004-06-08 V01j
	MOV.L	#_SEQAB_DP_TOP+380*2,R1	;
	MOV.W	R0,@R1			;

	MOV.L	#_CPOS_ORDER,R1		;旧373
	MOV.B	@R1,R0			;
	EXTU.B	R0,R0			;2004-06-08 V01j
	MOV.L	#_SEQAB_DP_TOP+381*2,R1	;
	MOV.W	R0,@R1			;

	MOV.L	#_CLO_CONDI,R1		;旧374
	MOV.B	@R1,R0			;
	EXTU.B	R0,R0			;2002-12-22
	MOV.L	#_SEQAB_DP_TOP+382*2,R1	;
	MOV.W	R0,@R1			;

	MOV.L	#_CLO_LIMERR,R1		;375
	MOV.B	@R1,R0			;
	EXTU.B	R0,R0			;2002-12-22
	MOV.L	#_SEQAB_DP_TOP+383*2,R1	;
	MOV.W	R0,@R1			;

	MOV.L	#_CLO_SATURATE,R1
	MOV.B	@R1,R0			;376
	EXTU.B	R0,R0			;2002-12-22
	MOV.L	#_SEQAB_DP_TOP+384*2,R1	;
	MOV.W	R0,@R1			;

	MOV.L	#_CLO_END_FLG,R1
	MOV.B	@R1,R0			;383
	EXTU.B	R0,R0			;2002-12-22
	MOV.L	#_SEQAB_DP_TOP+385*2,R1	;
	MOV.W	R0,@R1			;

;	===== HMI ==> OP DPRAM DATA ====
;;;2013-12-18 MC ﾃﾞﾊﾞｯｸADR変更	MOV.L	#_CLO_EXT_SMPSIG,R1	;
;;;2013-12-18 MC ﾃﾞﾊﾞｯｸADR変更	MOV.B	@R1,R0			;
;;;2013-12-18 MC ﾃﾞﾊﾞｯｸADR変更	EXTU.B	R0,R0			;
;;;2013-12-18 MC ﾃﾞﾊﾞｯｸADR変更	MOV.L	#_SEQAB_DP_TOP+99*2,R1	;
;;;2013-12-18 MC ﾃﾞﾊﾞｯｸADR変更	MOV.W	R0,@R1			;

;	===== HMI ==> OP DPRAM 仕様選択 =====	V01j
;//MC	MOV.L	#_SEQ_020_SV,R1
	MOV.L	#_SEQAB_DP_TOP+20*2,R1	;
	MOV.W	@R1,R0
	SHLR	R0
	MOV	R0,R1
	MOV.W	#H'0E0,R2
	AND	R2,R0
	SHLR	R1
	MOV.W	#H'08,R2
	AND	R2,R1
	OR	R1,R0
	MOV.L	#_CSET_SET,R1
	MOV.B	R0,@R1

COP1_MAIN_SEQ_DTREF_EXT:
	POP_ALL
	SUB_END
	M_RTS

;	===== ｴﾝｺｰﾀﾞREAD+
;_CLO_DEG_MRD	1BYTE 	; CPU-B LOAD DEG DATA READING FLAG 2000-09-04


;	***********************************
;	***				***
;	***********************************

_COP1_INT_TIM_REF:
	SUB_START

	OPTION_CONECT_CHK
	BF	COP1_INT_TIM_RF_EXT	;

	MOV.L	#_cop_enc_int_enb,R1	;
	MOV.W	@R1,R0			;
	CMP/EQ	#1,R0			;
	BF	COP1_INT_TIM_RF_EXT	;

	FAR_JSR	#_KAJYUU_TRND_DT_LOAD,R0	;1msec割込発生前に取り込む

;;;;mc	MOV.L	#_cop_enc_int_enb,R1			;
;;;;mc	MOV.W	@R1,R0					;
;;;;mc	CMP/EQ	#1,R0					;
;;;;mc	BF	COP1_INT_TIM_RF_EXT			;

	FAR_JSR	#_COP1_MAIN_SEQ_DAT_REF,R1		; 2007/12/11 V05j SHIMA
	FAR_JSR	#_COP1_MAIN_TLINK_DAT_REF,R0		; 


	MOV.L	#_sq_to_cop_com1,R1	;2003-01-31
	MOV.W	@R1,R0			;2003-01-31
	TST	#BIT0,R0		;2003-01-31
	TST_BIT_OF COP1_INT_TIM_RF_EXT	;2003-01-31

	MOV.L	#_sq_to_cop_com1,R1	;2003-01-31
	MOV.W	@R1,R0			;
	MOV.L	#_COP_CB_LD_MONI_SIG,R1	;//荷重測定用信号(C/Bから)
	MOV.W	@R1,R2			;
	OR	R2,R0			;
	MOV.L	#_CLO_EXT_SMPSIG,R1	;
	MOV.B	R0,@R1			;


	FAR_JSR	#_COP1_INT_WR,R0	;1msecｲﾍﾞﾝﾄ

;
	FAR_JSR	#_CPU_from_DP_LOAD,R0		;画面関連のデータ転送
	FAR_JSR	#_CPU_to_DP_SET1,R0		;

	FAR_JSR	#_CPUD_TO_COP1_EVENT_SET,R0	;


;	--------- 2014-02-05-----------------
;;;;	FAR_JSR	#_MIN_KAJYUU_CALC,R0

	FAR_JSR	#_KAJYUU_MONI_ALL_SMP,R0
	FAR_JSR	#_KAJYUU_MONI_TRD_SMP,R0







COP1_INT_TIM_RF_EXT

	SUB_END
	M_RTS

;	***********************************
;	***				***
;	***				***
;	***				***
;	***********************************
;	--- 2006-07-14 V01v ﾄﾚﾝﾄﾞ用生ﾃﾞｰﾀ ----
;	生値LOAD
	.IMPORT	_PAR_COP1DT_SEL	;
	.IMPORT	_CB_SYS_PARAM000	;
	.IMPORT	_W_PARAM_TOP		;
	.IMPORT	_PAR_KJ_MINSHOS		;4　0,1~100.00%


_KAJYUU_TRND_DT_LOAD:
	SUB_START

	MOV.L	#(_PAR_COP1DT_SEL-_CB_SYS_PARAM000+_W_PARAM_TOP),R0	;
	MOV.W	@R0,R0							;
	CMP/EQ	#1,R0							;
	BF	KAJYUU_TRND_DTLD_100					;
	FAR_JSR	#_KAJYUU_TRND_DT_LD_SHIN,R0				;"1"符号拡張
	M_BRA	KAJYUU_TRND_DTLD_EXT					;
KAJYUU_TRND_DTLD_100:


	FAR_JSR	#_KAJYUU_TRND_DT_LD_EXTU,R0				;"0"拡張
KAJYUU_TRND_DTLD_EXT:




	SUB_END
	M_RTS



_KAJYUU_TRND_DT_LD_SHIN:
	SUB_START


	MOV.L	#_CLO_LOAD_LIVE_L,R7			;		//荷重生（TON）(1word)
	MOV.L	#_CLO_LOAD_LIVE_T,R8			;		//荷重生（TON）(1word)
	MOV.L	#_CLO_LOAD_LIVE_R,R9			;		//荷重生（TON）(1word)

	MOV.L	#_SVP_MACINE_SEL1,R1			;
	MOV.W	@R1,R0					;
	MOV.W	#D'1234,R1				;#_MCN_FUJI_DBG1,
	CMP/EQ	R1,R0					;D=1234
	BF	DBG_KJYULD_END				;待機点２が123、待機点３が210
	MOV.L	#_SVP_WT_DIG2,R1			;待機点選択2 123
	MOV.W	@R1,R0					;
	MOV.W	#D'123*10,R1				;
	CMP/EQ	R1,R0					;
	BF	DBG_KJYULD_END
	MOV.L	#_SVP_WT_DIG3,R1			;待機点選択3 210
	MOV.W	@R1,R0					;
	MOV.W	#D'210*10,R1				;
	CMP/EQ	R1,R0					;
	BF	DBG_KJYULD_END

	MOV.L	#_PVPAB_DBG_KYUIN1,R7			;CPUA=>CPUB
	MOV.L	#_PVPAB_DBG_KYUIN2,R8			;CPUA=>CPUB
	MOV.L	#_PVPAB_DBG_KYUIN3,R9			;CPUA=>CPUB

DBG_KJYULD_END:



;;;;;	MOV.L	#_CLO_LOAD_LIVE_L,R7			;		//荷重生（TON）(1word)
;;;;;	MOV.L	#_CLO_LOAD_LIVE_T,R8			;		//荷重生（TON）(1word)
;;;;;	MOV.L	#_CLO_LOAD_LIVE_R,R9			;		//荷重生（TON）(1word)




;	--------------------------------------
;;;;	MOV.L	#_CLO_LOAD_LIVE_L,R7	;		//荷重生（TON）(1word)
	MOV.W	@R7,R0			;
	MOT_DAT_CHG_INTEL LG=B,REG1=R0	;

	FAR_JSR	#_KAJYU_MAINS_HOSEI,R1	;
	MOV.L	#_PVP_KAJLIV_LFT,R1	;
	MOV.W	R0,@R1			;
	MOV.L	#_PVPAB_KAJLIV_LFT,R1	;
	MOV.L	R0,@R1			;
;	--------------------------------------
;;;;	MOV.L	#_CLO_LOAD_LIVE_T,R18	;		//荷重生（TON）(1word)
	MOV.W	@R8,R0			;
	MOT_DAT_CHG_INTEL LG=B,REG1=R0	;

	FAR_JSR	#_KAJYU_MAINS_HOSEI,R1	;

	MOV.L	#_PVP_KAJLIV_TTL,R1	;
	MOV.W	R0,@R1			;
	MOV.L	#_PVPAB_KAJLIV_TTL,R1	;
	MOV.L	R0,@R1			;
;	--------------------------------------
;;;;	MOV.L	#_CLO_LOAD_LIVE_R,R9	;		//荷重生（TON）(1word)
	MOV.W	@R9,R0			;
	MOT_DAT_CHG_INTEL LG=B,REG1=R0	;

	FAR_JSR	#_KAJYU_MAINS_HOSEI,R1	;

	MOV.L	#_PVP_KAJLIV_RIH,R1	;
	MOV.W	R0,@R1			;
	MOV.L	#_PVPAB_KAJLIV_RIH,R1	;
	MOV.L	R0,@R1			;
;	--------------------------------------



;	================= 区間==================
	MOV.L	#_CLO_LOAD_L2,R1	;//荷重（TON）(1word)	V01w(INS)
	MOV.W	@R1,R0			;
	MOT_DAT_CHG_INTEL LG=B,REG1=R0	;
	EXTU.W	R0,R0			;+のみ
	MOV.L	#_PVP_ARA1_KAJ_L,R1	;
	MOV.W	R0,@R1			;

	MOV.L	#_PVPAB_ARA1_KAJ_L,R1	;
	MOV.L	R0,@R1			;
;;;	MOV.L	#_PVPAB_ARA1_KAJ_L,R1	;
;;;	MOV.W	R0,@R1			;

	MOV.L	#_CLO_LOAD_R2,R1	;		//荷重（TON）(1word)	V01w(INS)
	MOV.W	@R1,R0			;
	MOT_DAT_CHG_INTEL LG=B,REG1=R0	;
	EXTU.W	R0,R0			;+のみ
	MOV.L	#_PVP_ARA1_KAJ_R,R1	;
	MOV.W	R0,@R1			;

	MOV.L	#_PVPAB_ARA1_KAJ_R,R1	;
	MOV.L	R0,@R1			;
;;;	MOV.L	#_PVPAB_ARA1_KAJ_R,R1	;
;;;	MOV.W	R0,@R1			;

	MOV.L	#_CLO_LOAD_T2,R1	;		//荷重（TON）(1word)	V01w(INS)
	MOV.W	@R1,R0			;
	MOT_DAT_CHG_INTEL LG=B,REG1=R0	;
	EXTU.W	R0,R0			;+のみ
	MOV.L	#_PVP_ARA1_KAJ_T,R1	;
	MOV.W	R0,@R1			;

	MOV.L	#_PVPAB_ARA1_KAJ_T,R1	;
	MOV.L	R0,@R1			;
;;;	MOV.L	#_PVPAB_ARA1_KAJ_T,R1	;
;;;	MOV.W	R0,@R1			;

	SUB_END
	M_RTS

_KAJYUU_TRND_DT_LD_EXTU:
	SUB_START

;------------------左-----------------------
	MOV.L	#_CLO_LOAD_LIVE_L,R1	;		//荷重生（TON）(1word)
	MOV.W	@R1,R0			;
	MOT_DAT_CHG_INTEL LG=B,REG1=R0	;
	EXTU.W	R0,R0			;
	MOV.L	#_PVP_KAJLIV_LFT,R1	;
	MOV.W	R0,@R1			;
	MOV.L	#_PVPAB_KAJLIV_LFT,R1	;
	MOV.L	R0,@R1			;

;------------------合計-----------------------
	MOV.L	#_CLO_LOAD_LIVE_T,R1	;		//荷重生（TON）(1word)
	MOV.W	@R1,R0			;
	MOT_DAT_CHG_INTEL LG=B,REG1=R0	;
	EXTU.W	R0,R0			;
	MOV.L	#_PVP_KAJLIV_TTL,R1	;
	MOV.W	R0,@R1			;
	MOV.L	#_PVPAB_KAJLIV_TTL,R1	;
	MOV.L	R0,@R1			;

;------------------右-----------------------
	MOV.L	#_CLO_LOAD_LIVE_R,R1	;		//荷重生（TON）(1word)
	MOV.W	@R1,R0			;
	MOT_DAT_CHG_INTEL LG=B,REG1=R0	;
	EXTU.W	R0,R0			;
	MOV.L	#_PVP_KAJLIV_RIH,R1	;
	MOV.W	R0,@R1			;
	MOV.L	#_PVPAB_KAJLIV_RIH,R1	;
	MOV.L	R0,@R1			;

;-----------------------------------------
	MOV.L	#_CLO_LOAD_L2,R1	;		//荷重（TON）(1word)	V01w(INS)
	MOV.W	@R1,R0			;
	MOT_DAT_CHG_INTEL LG=B,REG1=R0	;
	EXTU.W	R0,R0			;
	MOV.L	#_PVP_ARA1_KAJ_L,R1	;
	MOV.W	R0,@R1			;
	
	MOV.L	#_PVPAB_ARA1_KAJ_L,R1	;
	MOV.L	R0,@R1			;
;;;	MOV.L	#_PVPAB_ARA1_KAJ_L,R1	;
;;;	MOV.W	R0,@R1			;

	MOV.L	#_CLO_LOAD_R2,R1	;		//荷重（TON）(1word)	V01w(INS)
	MOV.W	@R1,R0			;
	MOT_DAT_CHG_INTEL LG=B,REG1=R0	;
	EXTU.W	R0,R0			;
	MOV.L	#_PVP_ARA1_KAJ_R,R1	;
	MOV.W	R0,@R1			;

	MOV.L	#_PVPAB_ARA1_KAJ_R,R1	;
	MOV.L	R0,@R1			;
;;;	MOV.L	#_PVPAB_ARA1_KAJ_R,R1	;
;;;	MOV.W	R0,@R1			;

	MOV.L	#_CLO_LOAD_T2,R1	;		//荷重（TON）(1word)	V01w(INS)
	MOV.W	@R1,R0			;
	MOT_DAT_CHG_INTEL LG=B,REG1=R0	;
	EXTU.W	R0,R0			;
	MOV.L	#_PVP_ARA1_KAJ_T,R1	;
	MOV.W	R0,@R1			;

	MOV.L	#_PVPAB_ARA1_KAJ_T,R1	;
	MOV.L	R0,@R1			;
;;;;	MOV.L	#_PVPAB_ARA1_KAJ_T,R1	;
;;;;	MOV.W	R0,@R1			;

	SUB_END
	M_RTS


_KAJYU_MAINS_HOSEI
	SUB_START

	CMP/PZ	R0			;data>=0
	BT	KAJYU_MAINSHOS_END	;

	MOV.L	#(_PAR_KJ_MINSHOS-_CB_SYS_PARAM000+_W_PARAM_TOP),R1	;
	MOV.W	@R1,R1							;
	TST	R1,R1
	TST_BIT_OF KAJYU_MAINSHOS_END					;

	MOV	R0,R2
	MOV.W	#D'10000,R4
	FAR_JSR	#_FPU_R2_MUL_R1_DIV_R4,R0			;
	MOV	R2,R0

KAJYU_MAINSHOS_END
	SUB_END
	M_RTS


;	***********************************
;	***	ｴﾝｺｰﾀﾞのﾘﾌﾚｯｼｭ		***
;	***********************************
;	ﾒｶﾌﾟﾚｽ360ｴﾝｺｰﾀﾞﾓｰﾄﾞ用
	.import	_cop_enc_int_enb;
_COP1_INT_ENC_REF
	SUB_START
	MOV.L	#_sq_to_cop_com1,R1	;2003-01-31
	MOV.W	@R1,R0			;2003-01-31
	TST	#BIT0,R0		;2003-01-31
	TST_BIT_ON COP1_INT_ENC_RF_EXT	;2003-01-31

	MOV.L	#_cop_enc_int_enb,R1	;
	MOV.W	@R1,R0			;
	CMP/EQ	#1,R0			;
	BF	COP1_INT_ENC_RF_EXT	;

	XOR	R0,R0			;2003-01-31
	MOV.L	#_CLO_EXT_SMPSIG,R1	;SH2=>OP
	MOV.W	R0,@R1			;

	FAR_JSR	#_COP1_ENC_WR,R0	;
	FAR_JSR	#_COP1_INT_WR,R0	;

COP1_INT_ENC_RF_EXT

	SUB_END
	M_RTS

;	***********************************
;	***				***
;	***********************************
_COP1_ENC_WR:
	SUB_START
	MOV.L	#_ENC360_INDT,R1	;
	MOV.W	@R1,R0			;

	MOT_DAT_CHG_INTEL LG=B,REG1=R0	;
	MOV.L	#_CENC_DEG,R1		;角度SAVE
	MOV.W	R0,@R1			;
	SUB_END
	M_RTS

;	***********************************
;	***				***
;	***********************************
;	==== 割り込み=====
_COP1_INT_WR:
	SUB_START
	MOV.W	#H'55,R0		;DPRAM INT
	MOV.L	#_RAMC_OP_INT,R1	;
	MOV.B	R0,@R1			;
	SUB_END
	M_RTS

;	***********************************
;	***	DPRAM CLR		***
;	***********************************
	.MACRO	SET_DAT_OP SRC_ADR,LG,SET_DAT
	MOV.\LG	#\SET_DAT,R0		;
	MOV.L	#\SRC_ADR,R1		;
	MOV.\LG	R0,@R1			;
	.ENDM


	.EXPORT	_COP1_DPRAM_CLR1
_COP1_DPRAM_CLR1:
	SUB_START
	PUSH_ALL
	MOV.L	#_CLO_TOP,R1		;
	MOV.L	#_CLO_DEG_MRD,R2	;
	FAR_JSR	#_COP_MEM_CLR_LOP,R0	;

	MOV.L	#_CERROR_C,R1		;
	MOV.L	#_CERROR_OP,R2		;
	FAR_JSR	#_COP_MEM_CLR_LOP,R0	;
	SET_DAT_OP	_CENC_DEG	,W,0	;.SRES	1

	POP_ALL
	SUB_END
	M_RTS


;	SET_DAT_OP	_CPUC_ROM_ER	,B,0;		.SRES	1	;DB	1	DUP(?)		; CPU-C ROM err       (00=OK)
;	SET_DAT_OP	_CPUC_RAM_ER	,B,0;		.SRES	1	;DB	1	DUP(?)		; CPU-C RAM err       (00=OK)
;	SET_DAT_OP	_CPUC_CB1_ER	,B,0;		.SRES	1	;DB	1	DUP(?)		; CPU-C DPRAM1 err    (00=OK)
;	SET_DAT_OP	_CPUC_CB2_ER	,B,0;		.SRES	1	;DB	1	DUP(?)		; CPU-C DPRAM2 err    (00=OK)
;	SET_DAT_OP	_CPUC_OP_ER	,B,0;		.SRES	1	;DB	1	DUP(?)		; CPU-C OP-DPRAM err  (00=OK)
;	SET_DAT_OP	_CPUC_CMP_ER	,B,0;		.SRES	1	;DB	1	DUP(?)		; CPU-C COMPILE err   (00=OK)
;	SET_DAT_OP	_CPUC_PDN_ER	,B,0;		.SRES	1	;DB	1	DUP(?)		; CPU-C POWER DOWN err(00=OK)
;	SET_DAT_OP	_CPUC_079_ER	,B,0;		.SRES	1	;DB	1	DUP(?)		; CPU-C SEQ_079       (00=OK)
;	SET_DAT_OP	_CPUC_077_ER	,B,0;		.SRES	1	;DB	1	DUP(?)		; CPU-C SEQ_077       (00=OK)
;	SET_DAT_OP	_CPUC_160_DT	,B,0;		.SRES	1	;DB	1	DUP(?)		; CPU-C SEQ_160
;
;	SET_DAT_OP	_CCALE_IN	,L,0	;4
;	SET_DAT_OP	_CCALE_IN+4	,L,0	;4
;	SET_DAT_OP	_CCALE_IN+8	,L,0	;4
;	SET_DAT_OP	_CCALE_IN+12	,L,0	;4
;
;	SET_DAT_OP	_CLO_DEG_MRD	,B,0	;.SRES	1; CPU-B LOAD DEG DATA READING FLAG 2000-09-04
;
;;	==================================
;	SET_DAT_OP	_CSTATUS_C	,B,0	;.SRES	1
;	SET_DAT_OP	_CSET_SET	,B,0	;.SRES	1
;
;	SET_DAT_OP	_CPOS_RQE	,B,0	;.SRES	1
;	SET_DAT_OP	_CLO_RQE        ,B,0	;.SRES	1
;	SET_DAT_OP	_CLO_ZERO	,B,0	;.SRES	1
;
;	SET_DAT_OP	_CENC_DEG	,W,0	;.SRES	1
;
;
;	POP_ALL
;	SUB_END
;	M_RTS
;
;	===== TOP ADORESS ===
;	INPUT R1:BASE
;	INPUT R2:LAST ADRESS
_COP_MEM_CLR_LOP
	SUB_START
	XOR	R0,R0			;
COP_MEM_CLR_LP_100:
	CMP/HS	R2,R1			;R2 =< R1 (最後のバイトはやらない)
	BT	COP_MEM_CLR_LP_EXT	;YES END
	MOV.B	R0,@R1			;
	ADD	#1,R1			;
	M_BRA	COP_MEM_CLR_LP_100	;

COP_MEM_CLR_LP_EXT
	SUB_END
	M_RTS



;	***********************************
;	***				***
;	***		Tﾘﾝｸ		***
;	***				***
;	***********************************
	.GLOBAL		_SEQ_PAR_466	;
	.GLOBAL		_SEQ_PAR_396	;

;	if( OP_STATUS != E_OPSTS_NON ) {			//ｵﾌﾟｼｮﾝｶｰﾄﾞ有り？
;OP_STATUS
;#define		E_OPSTS_OK	0x55					//ｵﾌﾟｼｮﾝｶｰﾄﾞ有り
;#define		E_OPSTS_WDT	0x54					//ｵﾌﾟｼｮﾝｶｰﾄﾞ有り(WDT-UP)
;#define		E_OPSTS_NON	0x00					//ｵﾌﾟｼｮﾝｶｰﾄﾞなし


	.EXPORT	_COP1_MAIN_TLINK_DAT_REF
_COP1_MAIN_TLINK_DAT_REF
	SUB_START
	PUSH_ALL

	OPTION_CONECT_CHK		;
	BF	COP1_TLINK_DATREF600	;未接続


;	_SEQ_384_447_TOP=_CTLINK_C_OP	; T LINK DATA    SIT=>OP=>T-LINK(SEQ_PAR_446~ 32WORD)466からが正解
	MOV.W	#D'32,R3		;
;;;;2013-12-18 MC	MOV.L	#_SEQ_PAR_466,R5	;
	MOV.L	#_SEQAB_DP_TOP+466*2,R5	;MC
	MOV.L	#_CTLINK_C_OP,R6	;R5=>
	SHLR	R6			;
	SHLL	R6			;

COP1_TLINK_DATREF050:
	TST	R3,R3
	TST_BIT_OF  COP1_TLINK_DATREF100	;
	MOV.W	@R5+,R0				;H'1234 +0=上位(12)<BIT15~BIT8> +1=下位(34)<BIT7~BIT0>
	SWAP.B	R0,R0				;
	MOV.W	R0,@R6				;=>
	ADD	#2,R6				;
	ADD	#-1,R3				;ｶｳﾝﾀ
	M_BRA	COP1_TLINK_DATREF050		;
COP1_TLINK_DATREF100:


;	_SEQ_448_511_TOP=_CTLINK_OP_C		; T LINK DATA    T-LINK=>OP=>SIT(SEQ_PAR_396~ 32WORD)
	MOV.W	#D'32,R3					;
	MOV.L	#_CTLINK_OP_C,R5				;
	SHLR	R5						;
	SHLL	R5						;
;;;;2013-12-18 MC	MOV.L	#_SEQ_PAR_396,R6		;
	MOV.L	#_SEQAB_DP_TOP+396*2,R6				;MC

COP1_TLINK_DATREF550:
	TST	R3,R3
	TST_BIT_OF  COP1_TLINK_DATREF600	;
	MOV.W	@R5+,R0				;H'3412 +0=上位(12)<BIT15~BIT8> +1=下位(34)<BIT7~BIT0>
	SWAP.B	R0,R0				;
	MOV.W	R0,@R6				;=>
	ADD	#2,R6				;
	ADD	#-1,R3				;ｶｳﾝﾀ
	M_BRA	COP1_TLINK_DATREF550		;
COP1_TLINK_DATREF600:

	POP_ALL
	SUB_END
	M_RTS

	




;	***************************************************
;	***						***
;	***						***
;	***		2013-12-17 COP1			***
;	***						***
;	***						***
;	***						***
;	***************************************************
;	無条件転送 CPUD==>CPUB 
	.IMPORT	_CPUD_COP1_DP_TOP			;DPRAM
__COP1DP	.DEFINE		"-_CLO_TOP+_CPUD_COP1_DP_TOP"

	.IMPORT		_CLO_BLKMV_END01
	
;;;ﾍﾟｱ	.IMPORT		_SEQ_384_447_TOP
	.IMPORT		_CLO_BLKMV_END02

	.IMPORT		_CLO_GAIN_SET1L
	.IMPORT		_CLO_BLKMV_END03

;;;ﾍﾟｱ	.IMPORT		SEQ_372_383_TOP=_CPOS_CONDI
	.IMPORT		_CLO_BLKMV_END04

;	***********************************
;	***	CPUD=>CPUB=>COP1	***
;	***********************************
_CPU_to_DP_SET1
	SUB_START

;; MEM_WORD_BLOCK_MOV1	SRC_ADR=_CLO_TOP+__COP1DP,
;;+			DST_ADR=_CLO_TOP,
;;+			CNT_DAT=(_CLO_BLKMV_END01-_CLO_TOP)/2,DT_REG=R2,CNT_REG=R3

 MEM_WORD_BLOCK_MOV1	SRC_ADR=_CLO_TOP+__COP1DP,
+			DST_ADR=_CLO_TOP,
+			CNT_DAT=(_CCALE_IN-_CLO_TOP)/2,DT_REG=R2,CNT_REG=R3




;;; MEM_WORD_BLOCK_MOV1	SRC_ADR=_SEQ_384_447_TOP+__COP1DP,
;;;+			DST_ADR=_SEQ_384_447_TOP,
;;;+			CNT_DAT=(_CLO_BLKMV_END02-_SEQ_384_447_TOP)/2,DT_REG=R2,CNT_REG=R3

;	-------------------------------------
 MEM_WORD_BLOCK_MOV1	SRC_ADR=_CERROR_C+__COP1DP,
+			DST_ADR=_CERROR_C,
+			CNT_DAT=(_CERROR_OP-_CERROR_C)/2,DT_REG=R2,CNT_REG=R3



	SUB_END
	M_RTS


;	***********************************
;	***	CPUD=>CPUB=>COP1	***
;	***********************************
_CPU_to_DP_SET2
	SUB_START

;	-------- 重要アクセス READ/WRITE-----------
;;; MEM_MOV_TO_MEM		SRC_ADR=_CSTATUS_C+__COP1DP	,L1=W,
;;;			DST_ADR=_CSTATUS_C		,L2=W,
;;;			WKREG1=R1,WKREG2=R2,WKREG3=R3

	SUB_END
	M_RTS

;	***********************************
;	***	CPUB=>COP1		***
;	***********************************
_CPU_to_DP_SET3
	SUB_START

;	-------- 重要アクセス WRITE CPUBから行う-----------
;_CLO_EXT_SMPSIG+__COP1DP,L1=W,
;_CLO_EXT_SMPSIG	,L2=W,

	SUB_END
	M_RTS


;	***********************************
;	***	CPUD<==CPUB<==COP1	***
;	***********************************
_CPU_from_DP_LOAD
	SUB_START

 MEM_WORD_BLOCK_MOV1	SRC_ADR=_CLO_GAIN_SET1L,
+			DST_ADR=_CLO_GAIN_SET1L+__COP1DP,
+			CNT_DAT=(_CLO_BLKMV_END03-_CLO_GAIN_SET1L)/2,DT_REG=R2,CNT_REG=R3

;;;;;SEQ_372_383_TOP=_CPOS_CONDI
 MEM_WORD_BLOCK_MOV1	SRC_ADR=SEQ_372_383_TOP,
+			DST_ADR=SEQ_372_383_TOP+__COP1DP,
+			CNT_DAT=(_CLO_BLKMV_END04-SEQ_372_383_TOP)/2,DT_REG=R2,CNT_REG=R3

;	----------- ﾊﾞｰｼﾞｮﾝとか
 MEM_WORD_BLOCK_MOV1	SRC_ADR=_CERROR_OP,
+			DST_ADR=_CERROR_OP+__COP1DP,
+			CNT_DAT=(_OP_V25_7-_CERROR_OP+1)/2,DT_REG=R2,CNT_REG=R3


;	----------2016-02-26(2016-01-21)　ﾎﾞｼﾞｼｮﾅ位置---------------
	MOV.L	#_CPOS_NOW_MM,R5	;ﾘｱﾙﾎﾞｼﾞｼｮﾅ位置
	MOV.L	#_CPOS_NOW_MM+__COP1DP,R6		;
	MOV.W	@R5+,R0				;
	MOV.W	R0,@R6				;
	ADD	#2,R6				;
	MOV.W	@R5+,R0				;
	MOV.W	R0,@R6				;

	MOV.L	#_CPOS_STD,R5			;現位置登録時ﾊﾞｯｸｱｯﾌﾟ用
	MOV.L	#_CPOS_STD+__COP1DP,R6			;
	MOV.W	@R5+,R0				;
	MOV.W	R0,@R6				;
	ADD	#2,R6				;
	MOV.W	@R5+,R0				;
	MOV.W	R0,@R6				;
	ADD	#2,R6				;

	SUB_END
	M_RTS

;	***********************************
;	***	CPUD=>COP1 設定		***
;	***********************************
;	_CSTATUS_Cの調停
;
;;	.IMPORT	_COP_SET_CLRF		;CPUD=>CPUB 2014-01-05　DPRAM
	.IMPORT	_cop_set_event_flg;

_CPUD_TO_COP1_EVENT_SET
	SUB_START

	MOV.L	#_cop_set_event_flg,R5		;
	MOV.W	@R5,R3				;
	TST	R3,R3				;
	TST_BIT_ON CPUD_TO_COP1_EVNTSET_100	;

	MOV.L	#_COP_SET_CLRF,R1		;
	MOV.W	@R1,R0				;
	TST	R0,R0				;
	TST_BIT_OF CPUD_TO_COP1_EVNTSET_EXT	;


	MOV.L	#_CSTATUS_C+__COP1DP,R1		;偶々偶数だからﾜｰﾄﾞｱｸｾｽ可能
	MOV.W	@R1,R0				;
	SWAP.B	R0,R0				;
	MOV.L	#_CSTATUS_C,R6			;COP1 CODE SET
	MOV.B	R0,@R6				;

	MOV.W	#BIT0,R3			;
	MOV.W	R3,@R5				;FLAG SET
	M_BRA	CPUD_TO_COP1_EVNTSET_EXT	;

CPUD_TO_COP1_EVNTSET_100

	MOV.L	#_CSTATUS_C,R6			;COP1 CODE SET
	MOV.B	@R6,R0				;
	TST	R0,R0				;
	TST_BIT_ON CPUD_TO_COP1_EVNTSET_EXT	;

	XOR	R3,R3
	MOV.W	R3,@R5				;ﾌﾗｸﾞｸﾘｱ

	MOV.L	#_COP_SET_CLRF,R1		;
	MOV.W	R0,@R1				;

CPUD_TO_COP1_EVNTSET_EXT

	SUB_END
	M_RTS


;	*******************************************
;	***					***
;	***	2014-02-05			***
;	***	最小荷重("-")のｻﾝﾌﾟﾘﾝｸﾞ		***
;	***					***
;	*******************************************
;	---------- 2014-02-05-------------
;	CPUBが常に最小荷重をｻﾝﾌﾟﾘﾝｸﾞ
;	CPUAは更新及び必要なﾀｲﾐﾝｸﾞをCPUBに教える
;	H'336
;
;;	.IMPORT	_ATOB_MIN_SMPCLR	;CPUA=>CPUB 1: CPUB=0CLR CPUBは0ｸﾘｱする
;;	.IMPORT	_ATOB_MIN_SMPSTART	;CPUA= 0->1 1->0         CPUBは参照のみ
;;
;	---左荷重が最小時の 合計荷重,左荷重,右荷重----------
;;	.IMPORT	_BTOA_LFTMIN_LFT	;
;;	.IMPORT	_BTOA_LFTMIN_RIH	;
;;	.IMPORT	_BTOA_LFTMIN_TTL	;
;;
;	---右荷重が最小時の 合計荷重,左荷重,右荷重----------
;;	.IMPORT	_BTOA_RIHMIN_LFT	;
;;	.IMPORT	_BTOA_RIHMIN_RIH	;
;;	.IMPORT	_BTOA_RIHMIN_TTL	;
;;
;	---合計荷重が最小時の 合計荷重,左荷重,右荷重----------
;;	.IMPORT	_BTOA_TTLMIN_LFT	;
;;	.IMPORT	_BTOA_TTLMIN_RIH	;
;;	.IMPORT	_BTOA_TTLMIN_TTL	;

;
;;;;[[]]_MIN_KAJYUU_CALC:
;;;;[[]]	SUB_START
;;;;[[]]
;;;;[[]]	MOV.L	#_PVPAB_KAJLIV_LFT,R0	;
;;;;[[]]	MOV.L	@R0,R1			;左生荷重 符号付き
;;;;[[]]	MOV.L	#_PVPAB_KAJLIV_RIH,R0
;;;;[[]]	MOV.L	@R0,R2			;右生荷重 符号付き
;;;;[[]]	MOV.L	#_PVPAB_KAJLIV_TTL,R0
;;;;[[]]	MOV.L	@R0,R3			;合計生荷重 符号付き
;;;;[[]]
;;;;[[]]
;;;;[[]]
;;;;[[]];R1(左),R2(右),R3(合計)
;;;;[[]]
;;;;[[]]	MOV.L	#_ATOB_MIN_SMPCLR,R5	;
;;;;[[]]	MOV.W	@R5,R0			;
;;;;[[]]	TST	R0,R0			;
;;;;[[]]	TST_BIT_OF MIN_KAJYUUCAL_100	;
;;;;[[]]	XOR	R0,R0			;
;;;;[[]]	MOV.W	R0,@R5			;ｺﾏﾝﾄﾞｸﾘｱ
;;;;[[]]
;;;;[[]];	---------------初期化---------------
;;;;[[]]	MOV.L	#_BTOA_LFTMIN_LFT,R7	;
;;;;[[]]	MOV.L	R0,@R7			;0ｸﾘｱがいいか,初期値(現在値がいいか)
;;;;[[]]	ADD	#4,R7			;ﾏｲﾅｽｻﾝﾌﾟﾙだから0ｸﾘｱする
;;;;[[]]	MOV.L	R0,@R7			;
;;;;[[]]	ADD	#4,R7			;
;;;;[[]]	MOV.L	R0,@R7			;
;;;;[[]]
;;;;[[]]	MOV.L	#_BTOA_RIHMIN_LFT,R8	;
;;;;[[]]	MOV.L	R0,@R8			;
;;;;[[]]	ADD	#4,R8			;
;;;;[[]]	MOV.L	R0,@R8			;
;;;;[[]]	ADD	#4,R8			;
;;;;[[]]	MOV.L	R0,@R8			;
;;;;[[]]
;;;;[[]]	MOV.L	#_BTOA_TTLMIN_LFT,R9	;
;;;;[[]]	MOV.L	R0,@R9			;
;;;;[[]]	ADD	#4,R9			;
;;;;[[]]	MOV.L	R0,@R9			;
;;;;[[]]	ADD	#4,R9			;
;;;;[[]]	MOV.L	R0,@R9			;
;;;;[[]]
;;;;[[]]MIN_KAJYUUCAL_100:
;;;;[[]]
;;;;[[]]	MOV.L	#_ATOB_MIN_SMPSTART,R5	;CPUA= 0->1 1->0         CPUBは参照のみ
;;;;[[]]	MOV.W	@R5,R0			;
;;;;[[]]	TST	R0,R0			;
;;;;[[]]	TST_BIT_OF MIN_KAJYUUCAL_END	;
;;;;[[]]
;;;;[[]];	左荷重の最小値
;;;;[[]]	MOV.L	#_BTOA_LFTMIN_LFT,R6	;
;;;;[[]]	MOV.L	@R6,R0			;
;;;;[[]]	CMP/GE	R0,R1			;前回≦生
;;;;[[]]	BT	MIN_KAJYUUCAL_200	;JUMP
;;;;[[]]
;;;;[[]]	MOV.L	#_BTOA_LFTMIN_LFT,R7	;
;;;;[[]]	MOV.L	R1,@R7			;
;;;;[[]]	ADD	#4,R7			;
;;;;[[]]	MOV.L	R2,@R7			;
;;;;[[]]	ADD	#4,R7			;
;;;;[[]]	MOV.L	R3,@R7			;
;;;;[[]]
;;;;[[]]MIN_KAJYUUCAL_200:
;;;;[[]]
;;;;[[]];	右荷重の最小値
;;;;[[]]	MOV.L	#_BTOA_RIHMIN_RIH,R6	;
;;;;[[]]	MOV.L	@R6,R0			;
;;;;[[]]	CMP/GE	R0,R2			;前回≦生
;;;;[[]]	BT	MIN_KAJYUUCAL_300	;JUMP
;;;;[[]]
;;;;[[]]	MOV.L	#_BTOA_RIHMIN_LFT,R8	;
;;;;[[]]	MOV.L	R1,@R8			;
;;;;[[]]	ADD	#4,R8			;
;;;;[[]]	MOV.L	R2,@R8			;
;;;;[[]]	ADD	#4,R8			;
;;;;[[]]	MOV.L	R3,@R8			;
;;;;[[]]
;;;;[[]]MIN_KAJYUUCAL_300:
;;;;[[]]
;;;;[[]];	合計荷重の最小値
;;;;[[]]	MOV.L	#_BTOA_TTLMIN_TTL,R6	;
;;;;[[]]	MOV.L	@R6,R0			;
;;;;[[]]	CMP/GE	R0,R3			;前回≦生
;;;;[[]]	BT	MIN_KAJYUUCAL_END	;JUMP
;;;;[[]]
;;;;[[]]	MOV.L	#_BTOA_TTLMIN_LFT,R9	;
;;;;[[]]	MOV.L	R1,@R9			;
;;;;[[]]	ADD	#4,R9			;
;;;;[[]]	MOV.L	R2,@R9			;
;;;;[[]]	ADD	#4,R9			;
;;;;[[]]	MOV.L	R3,@R9			;
;;;;[[]]
;;;;[[]]MIN_KAJYUUCAL_END:
;;;;[[]]
;;;;[[]]	SUB_END
;;;;[[]]	M_RTS
;;;;[[]]


;	***********************************
;	***				***
;	***	荷重MAX,MIN,幅ｻﾝﾌﾟﾘﾝｸﾞ	***
;	***				***
;	***********************************
	.MACRO	MAX_MIN_SMPREF	MAX,MIN,PV_REG
	MOV.L	#\MIN,R6		;
	MOV.L	@R6,R0			;
	CMP/GE	R0,\PV_REG		;R1(LEFT),R2(RIGHT),R3(TTL)
	BT	JMP_01\@		;
	MOV.L	\PV_REG,@R6		;PV<R0(OLD) THEN REFLASH
JMP_01\@:

	MOV.L	#\MAX,R6		;
	MOV.L	@R6,R0			;
	CMP/GT	R0,\PV_REG		;R1(LEFT),R2(RIGHT),R3(TTL)
	BF	JMP_02\@		;
	MOV.L	\PV_REG,@R6		;R0(OLD)<PV
JMP_02\@:
	.ENDM

	.MACRO	MEM1_SUB_MEM2_SET_MEM3	MEM1,L1,MEM2,L2,MEM3,L3,WKREG1,WKREG2,WKREG3
	MOV.L	#\MEM1,\WKREG1		;
	MOV.\L1	@\WKREG1,\WKREG2	;
	MOV.L	#\MEM2,\WKREG1		;
	MOV.\L2	@\WKREG1,\WKREG3	;
	SUB	\WKREG3,\WKREG2		;MEM1(REG2)-MEM2(REG3)=REG2
	MOV.L	#\MEM3,\WKREG1		;
	MOV.\L3	\WKREG2,@\WKREG1	;
	.ENDM






;	*******************************************
;	***					***
;	***	荷重MAX,MIN,幅ｻﾝﾌﾟﾘﾝｸﾞ		***
;	***	全区間(ｵｰﾊﾞﾛｰﾄﾞ,ﾛｱﾘﾐｯﾄ)		***
;	***	ｵｰﾊﾞﾛｰﾄﾞ,ﾛｱﾘﾐｯﾄの最大値はCOP1Z	***
;	***					***
;	*******************************************
_KAJYUU_MONI_ALL_SMP:
	SUB_START

	MOV.L	#_PVPAB_KAJLIV_LFT,R0	;
	MOV.L	@R0,R1			;左生荷重 符号付き
	MOV.L	#_PVPAB_KAJLIV_RIH,R0
	MOV.L	@R0,R2			;右生荷重 符号付き
	MOV.L	#_PVPAB_KAJLIV_TTL,R0
	MOV.L	@R0,R3			;合計生荷重 符号付き

;	-------R1(左),R2(右),R3(合計)-----------

	MOV.L	#_ATOB_KJYUALL_SMPCLR,R5	;
	MOV.W	@R5,R0			;
	TST	R0,R0			;
	TST_BIT_OF KAJYUUMONI_SMP100	;
	XOR	R0,R0			;
	MOV.W	R0,@R5			;ｺﾏﾝﾄﾞｸﾘｱ

	MOV.L	#_BTOA_LFT_MAX,R7	;左 MAX
	MOV.L	R1,@R7			;
	MOV.L	#_BTOA_LFT_MIN,R7	;   MIN
	MOV.L	R1,@R7			;
	MOV.L	#_BTOA_LFT_HAB,R7	;左 HAB
	MOV.L	R0,@R7			;0CLR

	MOV.L	#_BTOA_RIH_MAX,R7	;右 MAX
	MOV.L	R2,@R7			;
	MOV.L	#_BTOA_RIH_MIN,R7	;    MIN
	MOV.L	R2,@R7			;
	MOV.L	#_BTOA_RIH_HAB,R7	;   HAB
	MOV.L	R0,@R7			;0CLR

	MOV.L	#_BTOA_TTL_MAX,R7	;右 MAX
	MOV.L	R3,@R7			;
	MOV.L	#_BTOA_TTL_MIN,R7	;    MIN
	MOV.L	R3,@R7			;
	MOV.L	#_BTOA_TTL_HAB,R7	;  HAB
	MOV.L	R0,@R7			;0CLR



KAJYUUMONI_SMP100:

	MOV.L	#_ATOB_KJYUALL_SMPSTART,R5	;CPUA= 0->1 1->0         CPUBは参照のみ
	MOV.W	@R5,R0			;
	TST	R0,R0			;
	TST_BIT_OF KAJYUUMONI_SMPEND

;	============= R1,R2,R3保持()==========
;	左荷重
	MAX_MIN_SMPREF	MAX=_BTOA_LFT_MAX,MIN=_BTOA_LFT_MIN,PV_REG=R1

;	右荷重
	MAX_MIN_SMPREF	MAX=_BTOA_RIH_MAX,MIN=_BTOA_RIH_MIN,PV_REG=R2

;	合計荷重の最小値
	MAX_MIN_SMPREF	MAX=_BTOA_TTL_MAX,MIN=_BTOA_TTL_MIN,PV_REG=R3


	MEM1_SUB_MEM2_SET_MEM3	MEM1=_BTOA_LFT_MAX,L1=L,
+				MEM2=_BTOA_LFT_MIN,L2=L,
+				MEM3=_BTOA_LFT_HAB,L3=L,
+				WKREG1=R4,WKREG2=R5,WKREG3=R6


	MEM1_SUB_MEM2_SET_MEM3	MEM1=_BTOA_RIH_MAX,L1=L,
+				MEM2=_BTOA_RIH_MIN,L2=L,
+				MEM3=_BTOA_RIH_HAB,L3=L,
+				WKREG1=R4,WKREG2=R5,WKREG3=R6


	MEM1_SUB_MEM2_SET_MEM3	MEM1=_BTOA_TTL_MAX,L1=L,
+				MEM2=_BTOA_TTL_MIN,L2=L,
+				MEM3=_BTOA_TTL_HAB,L3=L,
+				WKREG1=R4,WKREG2=R5,WKREG3=R6



KAJYUUMONI_SMPEND:

	SUB_END
	M_RTS



_KAJYUU_MONI_TRD_SMP:
	SUB_START

	MOV.L	#_PVPAB_KAJLIV_LFT,R0	;
	MOV.L	@R0,R1			;左生荷重 符号付き
	MOV.L	#_PVPAB_KAJLIV_RIH,R0
	MOV.L	@R0,R2			;右生荷重 符号付き
	MOV.L	#_PVPAB_KAJLIV_TTL,R0
	MOV.L	@R0,R3			;合計生荷重 符号付き

;	-------R1(左),R2(右),R3(合計)-----------

	MOV.L	#_ATOB_KJYUTRD_SMPCLR,R5	;
	MOV.W	@R5,R0			;
	TST	R0,R0			;
	TST_BIT_OF KAJYUUMONI_TRDSMP100	;
	XOR	R0,R0			;
	MOV.W	R0,@R5			;ｺﾏﾝﾄﾞｸﾘｱ

	MOV.L	#_BTOA_LFT_TRDMAX,R7	;左 MAX
	MOV.L	R1,@R7			;
	MOV.L	#_BTOA_LFT_TRDMIN,R7	;   MIN
	MOV.L	R1,@R7			;
	MOV.L	#_BTOA_LFT_TRDHAB,R7	;左 HAB
	MOV.L	R0,@R7			;0CLR

	MOV.L	#_BTOA_RIH_TRDMAX,R7	;右 MAX
	MOV.L	R2,@R7			;
	MOV.L	#_BTOA_RIH_TRDMIN,R7	;    MIN
	MOV.L	R2,@R7			;
	MOV.L	#_BTOA_RIH_TRDHAB,R7	;   HAB
	MOV.L	R0,@R7			;0CLR

	MOV.L	#_BTOA_TTL_TRDMAX,R7	;右 MAX
	MOV.L	R3,@R7			;
	MOV.L	#_BTOA_TTL_TRDMIN,R7	;    MIN
	MOV.L	R3,@R7			;
	MOV.L	#_BTOA_TTL_TRDHAB,R7	;  HAB
	MOV.L	R0,@R7			;0CLR



KAJYUUMONI_TRDSMP100:

	MOV.L	#_ATOB_KJYUTRD_SMPSTART,R5	;CPUA= 0->1 1->0         CPUBは参照のみ
	MOV.W	@R5,R0			;
	TST	R0,R0			;
	TST_BIT_OF KAJYUUMONI_TRDSMPEND

;	============= R1,R2,R3保持()==========
;	左荷重
	MAX_MIN_SMPREF	MAX=_BTOA_LFT_TRDMAX,MIN=_BTOA_LFT_TRDMIN,PV_REG=R1

;	右荷重
	MAX_MIN_SMPREF	MAX=_BTOA_RIH_TRDMAX,MIN=_BTOA_RIH_TRDMIN,PV_REG=R2

;	合計荷重の最小値
	MAX_MIN_SMPREF	MAX=_BTOA_TTL_TRDMAX,MIN=_BTOA_TTL_TRDMIN,PV_REG=R3


	MEM1_SUB_MEM2_SET_MEM3	MEM1=_BTOA_LFT_TRDMAX,L1=L,
+				MEM2=_BTOA_LFT_TRDMIN,L2=L,
+				MEM3=_BTOA_LFT_TRDHAB,L3=L,
+				WKREG1=R4,WKREG2=R5,WKREG3=R6


	MEM1_SUB_MEM2_SET_MEM3	MEM1=_BTOA_RIH_TRDMAX,L1=L,
+				MEM2=_BTOA_RIH_TRDMIN,L2=L,
+				MEM3=_BTOA_RIH_TRDHAB,L3=L,
+				WKREG1=R4,WKREG2=R5,WKREG3=R6


	MEM1_SUB_MEM2_SET_MEM3	MEM1=_BTOA_TTL_TRDMAX,L1=L,
+				MEM2=_BTOA_TTL_TRDMIN,L2=L,
+				MEM3=_BTOA_TTL_TRDHAB,L3=L,
+				WKREG1=R4,WKREG2=R5,WKREG3=R6



KAJYUUMONI_TRDSMPEND:

	SUB_END
	M_RTS
