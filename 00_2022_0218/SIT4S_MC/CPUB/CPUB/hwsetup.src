;------------------------------------------------------------------------
;                                                                       |
;   FILE        :hwsetup.src                                            |
;   DATE        :Tue, Jun 27, 2006                                      |
;   DESCRIPTION :Hardware Setup file                                    |
;   CPU TYPE    :SH7727                                                 |
;                                                                       |
;   This file is generated by Renesas Project Generator (Ver.4.0).      |
;                                                                       |
;------------------------------------------------------------------------
	.LIST	OFF
	.include	"cm_equ1.equ"
	.include	"ssa_ver1.equ"
	.include	"shn_cmd1.mac"
	.include	"CPU_REG.ext"
	.include	"ssa_com1.mac"
	.INCLUDE	"ssa_had1.equ"		;2006-10-19 SAITO WDTﾏｸﾛ変更に伴い追加
	.INCLUDE	"ssa_wrmy.ext"		;2006-10-19 SAITO WDTﾏｸﾛ変更に伴い追加
	.import		_dio_top2		;2006-10-19 SAITO WDTﾏｸﾛ変更に伴い追加
	.LIST	ON


	.IMPORT		_CPUA_WR_CPUB_RD

_SDMR		.EQU		H'FFFFE440	; CASﾚｲﾃﾝｼ＝2／ﾊﾞｰｽﾄﾀｲﾌﾟ＝ｼｰｹﾝｼｬﾙ／ﾊﾞｰｽﾄ長＝1 16bit
;//2013-11-26_SDMR		.EQU		H'FFFFE880	; CASﾚｲﾃﾝｼ＝2／ﾊﾞｰｽﾄﾀｲﾌﾟ＝ｼｰｹﾝｼｬﾙ／ﾊﾞｰｽﾄ長＝1 32bit


	.SECTION	Phwsetup1, CODE			;

	.export		_HardwareSetup1
_HardwareSetup1:
	SUB_START

;ＣＰＧ関係
	MOV.L	#_WTCSR,R1
	MOV.W	#H'A507,R0
	MOV.W	R0,@R1
	MOV.L	#_FRQCR,R1			; 周波数制御レジスタ
	MOV.W	#H'0112,R0			; 入力ｸﾛｯｸ=14.7456MHz  8:4:2  Iφ=117.9648MHz／Bφ=58.9824MHz／Pφ=29.4912MHz
	MOV.W	R0,@R1

;ＢＳＣ関係
	MOV.L	#_BCR1,R1			; バスコントロールレジスタ１
	MOV.W	#H'0008,R0			; ｴﾘｱ3=SDRAM／その他のｴﾘｱ=通常ﾒﾓﾘ
	MOV.W	R0,@R1

	MOV.L	#_BCR2,R1			; バスコントロールレジスタ２
	MOV.W	#H'26A0,R0			; ｴﾘｱ2(未使用)=16ﾋﾞｯﾄ幅／ｴﾘｱ3=16ﾋﾞｯﾄ幅／ｴﾘｱ4=16ﾋﾞｯﾄ幅／ｴﾘｱ5=8ﾋﾞｯﾄ幅／ｴﾘｱ6=16ﾋﾞｯﾄ幅
;//2013-11-26	MOV.W	#H'26D0,R0			; ｴﾘｱ2(未使用)=16ﾋﾞｯﾄ幅／ｴﾘｱ3=32ﾋﾞｯﾄ幅／ｴﾘｱ4=16ﾋﾞｯﾄ幅／ｴﾘｱ5=8ﾋﾞｯﾄ幅／ｴﾘｱ6=16ﾋﾞｯﾄ幅
	MOV.W	R0,@R1

	MOV.L	#_WCR1,R1			; ウェイトコントロールレジスタ１
	MOV.W	#H'BFF3,R0			; とりあえず、ｻｲｸﾙ間のｱｲﾄﾞﾙは、全ｴﾘｱ＝3ｱｲﾄﾞﾙｻｲｸﾙ挿入
	MOV.W	R0,@R1


;---------2021-11-15-----------
;;	MOV.L	#_WCR2,R1			; ウェイトコントロールレジスタ２
;;	MOV.W	#H'B7DD,R0			; ｴﾘｱ0＝6ｳｪｲﾄ／ｴﾘｱ2(未使用)＝10ｳｪｲﾄ／ｴﾘｱ3＝CASﾚｲﾃﾝｼ2／ｴﾘｱ4＝10ｳｪｲﾄ／
;;	MOV.W	R0,@R1				; ｴﾘｱ5＝6ｳｪｲﾄ／ｴﾘｱ6＝6ｳｪｲﾄ

;---------2021-11-15-----------
	MOV.L	#_WCR2,R1			; ウェイトコントロールレジスタ２
	MOV.W	#H'BBDD,R0			; ｴﾘｱ0＝6ｳｪｲﾄ／ｴﾘｱ2(未使用)＝10ｳｪｲﾄ／ｴﾘｱ3＝CASﾚｲﾃﾝｼ2／ｴﾘｱ4＝10ｳｪｲﾄ／
	MOV.W	R0,@R1				; ｴﾘｱ5＝6ｳｪｲﾄ／ｴﾘｱ6＝8ｳｪｲﾄ(2021-09-22 ver B2d)

	MOV.L	#_SDMR,R1			; シンクロナスＤＲＡＭモードレジスタ
	MOV.B	#0,R0				; CASﾚｲﾃﾝｼ＝2／ﾊﾞｰｽﾄﾀｲﾌﾟ＝ｼｰｹﾝｼｬﾙ／ﾊﾞｰｽﾄ長＝1
;//2013-11-26	MOV.B	#2,R0				; CASﾚｲﾃﾝｼ＝2／ﾊﾞｰｽﾄﾀｲﾌﾟ＝ｼｰｹﾝｼｬﾙ／ﾊﾞｰｽﾄ長＝1
	MOV.B	R0,@R1

	MOV.L	#_MCR,R1			; 個別メモリコントロールレジスタ
	MOV.W	#H'5224,R0
	MOV.W	R0,@R1

	MOV.L	#_RTCOR,R1			; リフレッシュタイムコンスタントレジスタ
	MOV.W	#H'A573,R0			; 7.798us（CKIO/4＝14.7456MHz）
	MOV.W	R0,@R1

	MOV.L	#_RTCSR,R1			; リフレッシュタイマコントロール／ステータスレジスタ
	MOV.W	#H'A508,R0			; ｸﾛｯｸｾﾚｸﾄ＝CKIO/4
	MOV.W	R0,@R1

	MOV.W	#8,R2				; ダミーオートリフレッシュ８回
_ARF_WAIT:
	MOV.L	#_RFCR,R1
	MOV.W	@R1,R0				; リフレッシュカウンタ
	CMP/HS	R2,R0
	BF	_ARF_WAIT

;ＰＦＣ関係
	MOV.L	#_PACR,R1			; ポートＡコントロールレジスタ
	MOV.W	#H'5555,R0			; 全出力ポート
	MOV.W	R0,@R1

;	----2006-08-05 PORT "L"OUTPUT --------------
	MOV.L	#_PADR,R1			;
	MOV.W	#0,R0				;
	MOV.B	R0,@R1				;
;	--------------------------------------------

	MOV.L	#_PBCR,R1			; ポートＢコントロールレジスタ
	MOV.W	#H'AAAA,R0			; 全入力ポート
	MOV.W	R0,@R1

	MOV.L	#_PCCR,R1			; ポートＣコントロールレジスタ
	MOV.W	#H'0000,R0			; ＬＣＤＣ関係
	MOV.W	R0,@R1

	MOV.L	#_PDCR,R1			; ポートＤコントロールレジスタ
	MOV.W	#H'2200,R0			; ４と６は入力ポート ／ その他はＬＣＤＣ関係
	MOV.W	R0,@R1

	MOV.L	#_PEDR,R1			; ポートＥデータレジスタ
	MOV.B	#H'10,R0			; 出力ポート４(*LCD_ON)は初期値「High」
	MOV.B	R0,@R1
	MOV.L	#_PECR,R1			; ポートＥコントロールレジスタ
;//2013-11-26	MOV.W	#H'4515,R0			; ０、１、２、４、５、７は出力ポート ／ ３、６はＬＣＤＣ関係
	MOV.W	#H'4514,R0			; ０、１、２、４、５、７は出力ポート ／ ３、６はＬＣＤＣ関係
	MOV.W	R0,@R1

	MOV.L	#_PFCR,R1			; ポートＦコントロールレジスタ
	MOV.W	#H'AAAA,R0			; 全入力ポート
;//2013-11-26	MOV.W	R0,@R1

	MOV.L	#_PGCR,R1			; ポートＧコントロールレジスタ
	MOV.W	#H'AAAA,R0			; 全入力ポート
;//2013-11-26	MOV.W	R0,@R1

	MOV.L	#_PHCR,R1			; ポートＨコントロールレジスタ
	MOV.W	#H'2800,R0			; ０〜４はＩＲＱ ／ ５，６は入力ポート ／ ７はＬＣＤＣ関係
	MOV.W	R0,@R1

	MOV.L	#_PJCR,R1			; ポートＪコントロールレジスタ
	MOV.W	#H'5544,R0			; ０は＊ＲＡＳ３ ／ ２は＊ＣＡＳ ／ その他は出力ポート
	MOV.W	R0,@R1

	MOV.L	#_PKCR,R1			; ポートＫコントロールレジスタ
	MOV.W	#H'5105,R0			; ２は＊ＣＳ４ ／ ３は＊ＣＳ５ ／ ５はＣＫＥ ／ その他は出力ポート
	MOV.W	R0,@R1

	MOV.L	#_PLCR,R1			; ポートＬコントロールレジスタ
	MOV.W	#H'0000,R0			; 全ＡＩ
	MOV.W	R0,@R1

	MOV.L	#_PMCR,R1			; ポートＭコントロールレジスタ
	MOV.W	#H'5500,R0			; ４〜７は入力ポート ／ ０〜３はＬＣＤＣ関係
	MOV.W	R0,@R1

;2009/03/19
;///////	MOV.L	#_SCPDR,R1			; ＳＣポートデータレジスタ
;///////	MOV.B	#H'02,R0			; 出力ポート１(RTS)は初期値「High」
;///////	MOV.B	R0,@R1
;///////	MOV.L	#_SCPCR,R1			; ＳＣポートコントロールレジスタ
;///////;///////	MOV.W	#H'1554,R0			;
;///////	MOV.W	#H'9554,R0			; V05j 2007/12/07
;///////	MOV.W	R0,@R1
	MOV.L	#_SCPDR,R1			; ＳＣポートデータレジスタ
	MOV.B	#H'01,R0			; 出力ポート0(TXD)は初期値「High」, RTSは「Low」(後でHighにする)
	MOV.B	R0,@R1
	MOV.L	#_SCPCR,R1			; ＳＣポートコントロールレジスタ
	MOV.W	#H'9555,R0			; V05j 2007/12/07
	MOV.W	R0,@R1



;ＩＮＴＣ関係
	MOV.L	#_IPRA,R1			; 割り込み優先順位設定レジスタＡ
						; BIT15~12:TMU0		定周期500μs
						; BIT11~ 8:TMU1		定周期1ms
						; BIT 7~ 4:TMU2		定周期5ms
						; BIT 3~ 0:RTC
	MOV.W	#H'8760,R0
	MOV.W	R0,@R1

	MOV.L	#_IPRB,R1			; 割り込み優先順位設定レジスタＢ
						; BIT15~12:WDT
						; BIT11~ 8:REF
						; BIT 7~ 4:SCI
						; BIT 3~ 0:予約
	MOV.W	#H'00E0,R0
	MOV.W	R0,@R1

	MOV.L	#_IPRC,R1			; 割り込み優先順位設定レジスタＣ
						; BIT15~12:IRQ3		ACTB(定周期より低くする 3)
						; BIT11~ 8:IRQ2		DP_INT
						; BIT 7~ 4:IRQ1		ENC_BUSY(高)
						; BIT 3~ 0:IRQ0		EMG(定周期より低くする 3)
	MOV.W	#H'30A3,R0
	MOV.W	R0,@R1

	MOV.L	#_IPRD,R1			; 割り込み優先順位設定レジスタＤ
						; BIT15~12:IRQ7
						; BIT12~ 8:IRQ6
						; BIT 7~ 4:IRQ5		PD
						; BIT 3~ 0:IRQ4		STBX(定周期より低くする 2)
	MOV.W	#H'0002,R0
	MOV.W	R0,@R1

	MOV.L	#_IPRE,R1			; 割り込み優先順位設定レジスタＥ
	MOV.W	#H'0,R0
	MOV.W	R0,@R1

	MOV.L	#_IPRF,R1			; 割り込み優先順位設定レジスタＦ
	MOV.W	#H'0,R0
	MOV.W	R0,@R1

	MOV.L	#_IPRG,R1			; 割り込み優先順位設定レジスタＧ
	MOV.W	#H'0,R0
	MOV.W	R0,@R1

	MOV.L	#_ICR0,R1			; 割り込みコントロールレジスタ０
;	初期値でＯＫ

	MOV.L	#_ICR1,R1			; 割り込みコントロールレジスタ１
	MOV.W	#H'0,R0				; ＩＲＱは独立で全て立ち下がりエッジ
	MOV.W	R0,@R1

	MOV.L	#_ICR2,R1			; 割り込みコントロールレジスタ２
;	初期値でＯＫ（PINTは未使用）

	MOV.L	#_ICR3,R1			; 割り込みコントロールレジスタ３
;	初期値でＯＫ

	MOV.L	#_PINTER,R1			; PINT割り込みイネーブルレジスタ
;	初期値でＯＫ（PINTは未使用）

;ＴＭＵ関係
	MOV.L	#_TCR0,R1
	MOV.W	#H'0001,R0			; Pφ／16でカウント（1.8432MHz）
	MOV.W	R0,@R1
	MOV.L	#_TCOR0,R1
	MOV.L	#921,R0				; 500us
	MOV.L	R0,@R1
	MOV.L	#_TCNT0,R1
	MOV.L	R0,@R1

	MOV.L	#_TCR1,R1
	MOV.W	#H'0001,R0			; Pφ／16でカウント（1.8432MHz）
	MOV.W	R0,@R1
	MOV.L	#_TCOR1,R1
	MOV.L	#1843,R0			; 1ms
	MOV.L	R0,@R1
	MOV.L	#_TCNT1,R1
	MOV.L	R0,@R1

	MOV.L	#_TCR2,R1
	MOV.W	#H'0001,R0			; Pφ／16でカウント（1.8432MHz）
	MOV.W	R0,@R1
	MOV.L	#_TCOR2,R1
	MOV.L	#9216,R0			; 5ms
	MOV.L	R0,@R1
	MOV.L	#_TCNT2,R1
	MOV.L	R0,@R1

	MOV.L	#_TCR0,R1
	MOV.W	@R1,R0
	MOV.W	#H'0020,R2
	OR	R2,R0
;;;;;;;;	MOV.W	R0,@R1				; TMU0 EI

	MOV.L	#_TCR1,R1
	MOV.W	@R1,R0
	OR	R2,R0
	MOV.W	R0,@R1				; TMU1 EI

	MOV.L	#_TCR2,R1
	MOV.W	@R1,R0
	OR	R2,R0
	MOV.W	R0,@R1				; TMU2 EI

	MOV.L	#_TSTR,R1
	MOV.B	#H'07,R0			; 全タイマ動作開始
	MOV.B	R0,@R1

;ＳＣＩ関係
	MOV.L	#_SMR0,R1				; BIT7    : 0=調歩同期式ﾓｰﾄﾞ
							; BIT6    : 0=8ﾋﾞｯﾄﾃﾞｰﾀ
							; BIT5    : 1=ﾊﾟﾘﾃｨ有り
							; BIT4    : 0=偶数ﾊﾟﾘﾃｨ
							; BIT3    : 0=1ｽﾄｯﾌﾟﾋﾞｯﾄ
							; BIT2    : 0=ﾏﾙﾁﾌﾟﾛｾｯｻ機能禁止
							; BIT1〜0 : 0=ｸﾛｯｸｾﾚｸﾄPφ
	MOV.B	#H'20,R0				; 
	MOV.B	R0,@R1

	MOV.L	#_BRR0,R1
	MOV.B	#D'95,R0				; 95=9600bps(SSRのｸﾛｯｸｾﾚｸﾄPφの場合)
	MOV.B	#D'47,R0				; 47=19200bps(SSRのｸﾛｯｸｾﾚｸﾄPφの場合)
	MOV.B	#D'23,R0				; 23=38400bps(SSRのｸﾛｯｸｾﾚｸﾄPφの場合)
	MOV.B	R0,@R1

	MOV.L	#_SCR0,R1				; BIT7    : 0=送信ｴﾝﾌﾟﾃｨ割込み禁止
							; BIT6    : 1=受信ﾃﾞｰﾀ割込み許可
							; BIT5    : 0=送信動作を禁止
							; BIT4    : 1=受信動作を許可
							; BIT3    : 0=ﾏﾙﾁﾌﾟﾛｾｯｻ割込み禁止
							; BIT2    : 0=送信終了割込み禁止
							; BIT1〜0 : 0=内部ｸﾛｯｸ／SCK入出力
	MOV.B	#H'50,R0
	MOV.B	R0,@R1


;2009/03/19
	MOV.L	#_SCPDR,R1			; ＳＣポートデータレジスタ
	MOV.B	#H'03,R0			; 出力ポート0(TXD)は初期値「High」, RTSは「High」
	MOV.B	R0,@R1



;*****	DPRAM割込み初期ｸﾘｱ *****
	MOV.L	#_CPUA_WR_CPUB_RD,R1
	MOV.W	@R1,R0					; DPRAM INT CLEAR


;	--- 2007-01-16 V05-S05a~:D/Aｺﾝﾊﾞｰﾀ　DA0(239Pin)とDA1(238pin)に2.5V固定で出力-----------
;	--- A/Dｺﾝﾊﾞｰﾀの基準電源とする.実際にはDA0を対象とする
	MOV.L	#_DADR0,R1		;DA0
	MOV.W	#D'195,R0		;
	MOV.B	R0,@R1			;2.5V=3.3V*194D/255 or 2.5V=3.3V*193D/256 

	MOV.L	#_DADR1,R1		;DA1
	MOV.W	#D'195,R0		;
	MOV.B	R0,@R1			;2.5V=3.3V*194D/255 or 2.5V=3.3V*193D/256 

	MOV.L	#_DACR1,R1
	MOV.B	#B'00011111+BIT6,R0	;BIT7,BIT6,BIT5=0,1,0(DA1(0),DA0(1),独立時=0)
	MOV.B	R0,@R1			;
;	------- ENB -------------

	MOV.L	#_DADR0,R1		;DA0
	MOV.W	#D'195,R0		;
	MOV.B	R0,@R1			;2.5V=3.3V*194D/255 or 2.5V=3.3V*193D/256 

	MOV.L	#_DADR1,R1		;DA1
	MOV.W	#D'195,R0		;
	MOV.B	R0,@R1			;2.5V=3.3V*194D/255 or 2.5V=3.3V*193D/256 


	SUB_END
	M_RTS


	.SECTION	Pstart1,CODE			;
;******************************************
;***					***
;***	ＳＨ４キャッシュ有効	 	***
;***					***
;******************************************
	.export		_CASH_ENB
_CASH_ENB:
	SUB_START

	MOV.L	#_CCR,R1
	MOV.L	@R1,R2
	MOV.L	#BIT0,R0		; BIT0:
	OR	R2,R0
	MOV.L	R0,@R1

	SUB_END
	M_RTS


	.SECTION	Pstart1,CODE			;
;******************************************
;***					***
;***	Ｐプログラム 			***
;***	Ｐ -> ＰＲＡＭ			***
;***					***
;******************************************
	.IMPORT		__P_BGN
	.IMPORT		__PRAM_BGN
	.IMPORT		__P_END
	.export		_P_TO_PRAM_COPY
_P_TO_PRAM_COPY:
	SUB_START

	MOV.L	#__P_BGN,R0
	MOV.L	@R0,R5				;DATA SORCE
	MOV.L	#__PRAM_BGN,R0
	MOV.L	@R0,R6				;DATA DIST
	MOV.L	#__P_END,R0
	MOV.L	@R0,R4				;
	SUB	R5,R4				;
	SHLR	R4				;

_PTRC_LOOP:
	CMP/PL	R4
	BF	_PTRC_LOOP_END			;ZERO or MINS THEN EXIT

	MOV.W	@R5+,R0		;
	MOV.W	R0,@R6		;
	ADD	#2,R6		;
	ADD	#-1,R4	;
	_WDT_CLR
	M_BRA	_PTRC_LOOP	;

_PTRC_LOOP_END:
	SUB_END
	M_RTS


	.SECTION	Pstart1,CODE			;
;******************************************
;***					***
;***	Ｐcall -> ＰcallＲＡＭ		***
;***					***
;******************************************
	.IMPORT		__Pcall_BGN
	.IMPORT		__PcallRAM_BGN
	.IMPORT		__Pcall_END
	.EXPORT		_PC_TO_PCRAM_COPY
_PC_TO_PCRAM_COPY:
	SUB_START

	MOV.L	#__Pcall_BGN,R0
	MOV.L	@R0,R5				;DATA SORCE
	MOV.L	#__PcallRAM_BGN,R0
	MOV.L	@R0,R6				;DATA DIST
	MOV.L	#__Pcall_END,R0
	MOV.L	@R0,R4				;
	SUB	R5,R4				;
	SHLR	R4				;

_PCTRC_LOOP:
	CMP/PL	R4
	BF	_PCTRC_LOOP_END			;ZERO or MINS THEN EXIT

	MOV.W	@R5+,R0		;
	MOV.W	R0,@R6		;
	ADD	#2,R6		;
	ADD	#-1,R4	;
	_WDT_CLR
	M_BRA	_PCTRC_LOOP	;

_PCTRC_LOOP_END:
	SUB_END
	M_RTS


	.SECTION	Pstart1,CODE			;
;******************************************
;***					***
;***	PHiROM -> PHiRAM	V06b	***
;***					***
;******************************************
	.IMPORT		__PHiROM_BGN
	.IMPORT		__PHiRAM_BGN
	.IMPORT		__PHiROM_END
	.EXPORT		_PH_TO_PHRAM_COPY
_PH_TO_PHRAM_COPY:
	SUB_START

	MOV.L	#__PHiROM_BGN,R0
	MOV.L	@R0,R5				;DATA SORCE
	MOV.L	#__PHiRAM_BGN,R0
	MOV.L	@R0,R6				;DATA DIST
	MOV.L	#__PHiROM_END,R0
	MOV.L	@R0,R4				;
	SUB	R5,R4				;
	SHLR	R4				;

_PHTRC_LOOP:
	CMP/PL	R4
	BF	_PHTRC_LOOP_END			;ZERO or MINS THEN EXIT

	MOV.W	@R5+,R0		;
	MOV.W	R0,@R6		;
	ADD	#2,R6		;
	ADD	#-1,R4	;
	_WDT_CLR
	M_BRA	_PHTRC_LOOP	;

_PHTRC_LOOP_END:
	SUB_END
	M_RTS


	.end
