*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE     1
PROGRAM NAME =

    1                               1     ;****************************************************************************************
    2                               2     ;* File Name    : ssa_CmdProc.src
    3                               3     ;* Function     : シーケンスコード毎実処理
    4                               4     ;* Author       : Designed by T.Akiba, Coded by T.Akiba
    5                               5     ;* Date         : 2009-11-20 Akiba
    6                               6     ;* Update       : 2010-08-11 Y.Kobayashi(コード整理)
    7                               7     ;****************************************************************************************
    8                               8     
    9                               9     ;********************************************************************
   10                              10     ;* INCLUDE
   11                              11     ;********************************************************************
 2237                              19     
 2238 00000000                     20             .SECTION        P,CODE
 2239                              21     
 2240                              22     ;********************************************************************
 2241                              23     ;* EXTERN 宣言 PROGRAM
 2242                              24     ;********************************************************************
 2243                              25             .IMPORT _DIVS_32REG2_32REG1_R4_32REG2_R2
 2244                              26     
 2245                              27     ;********************************************************************
 2246                              28     ;* DEFINE定義
 2247                              29     ;********************************************************************
 2248                              30     ; 実行シーケンス置換用
 2249                              31     _SEQ_KND_T_TOP          .DEFINE         "_SEQ_CARD_RAM+_MKIND_T_ADR"    ;
 2250                              32     _SEQ_KND_TD_TOP         .DEFINE         "_SEQ_CARD_RAM+_MKIND_TD_ADR"   ;
 2251                              33     _SEQ_KND_C_TOP          .DEFINE         "_SEQ_CARD_RAM+_MKIND_C_ADR"    ;
 2252                              34     _SEQ_KND_CD_TOP         .DEFINE         "_SEQ_CARD_RAM+_MKIND_CD_ADR"   ;
 2253                              35     
 2254                              36     ;命令で置き換える対象で数値は最大値を記述してる
 2255          0000007F            37     CHG_SQ_ADR              .EQU            H'7F            ; Xに置き換える WORD-MEM/256=X...Y
 2256          000000FF            38     CHG_SQ_OFS              .EQU            H'FF            ; Yに置き換える WORD-MEM/256=X...Y
 2257          000000FF            39     CHG_SQ_BIT              .EQU            H'FF            ; BIT0~BIT7に置き換える
 2258          0000000F            40     CHG_SQ_BTD              .EQU            H'0F            ; BIT0〜BIT15を"0~F"に置き換える
 2259          000000FF            41     CHG_HHDATA              .EQU            H'FF            ; 数値に置き換える
 2260          000000FF            42     CHG_HLDATA              .EQU            H'FF            ; 数値
 2261          000000FF            43     CHG_LHDATA              .EQU            H'FF            ; 数値
 2262          000000FF            44     CHG_LLDATA              .EQU            H'FF            ; 数値
 2263          0000007F            45     CHG_UNIT_H              .EQU            H'7F            ; ﾀｲﾏ・ｶｳﾝﾀのﾕﾆｯﾄ番号H
 2264          000000FF            46     CHG_UNIT_L              .EQU            H'FF            ; ﾀｲﾏ・ｶｳﾝﾀのﾕﾆｯﾄ番号L
 2265          0000000F            47     CHG_DGT_SL              .EQU            H'0F            ; ﾀｲﾏ変換方法(単位)
 2266                              48     
 2267                              49     ;********************************************************************
 2268                              50     ;* シーケンス関係テーブル
 2269                              51     ;********************************************************************
 2270 00000000                     52             .ALIGN  4
 2271                              53     
 2272 00000000 00000000            54     _BIT_DATA_TBL1          .DATA.L         0
 2273 00000004 00000001            55     _BIT_DATA_TBL2          .DATA.L         BIT0            ; 0
 2274 00000008 00000002            56                             .DATA.L         BIT1            ; 1
 2275 0000000C 00000004            57                             .DATA.L         BIT2            ; 2
 2276 00000010 00000008            58                             .DATA.L         BIT3            ; 3
 2277 00000014 00000010            59                             .DATA.L         BIT4            ; 4
 2278 00000018 00000020            60                             .DATA.L         BIT5            ; 5
 2279 0000001C 00000040            61                             .DATA.L         BIT6            ; 6
 2280 00000020 00000080            62                             .DATA.L         BIT7            ; 7
 2281 00000024 00000100            63                             .DATA.L         BIT8            ; 8
 2282 00000028 00000200            64                             .DATA.L         BIT9            ; 9
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE     2
PROGRAM NAME =

 2283 0000002C 00000400            65                             .DATA.L         BIT10           ; A
 2284 00000030 00000800            66                             .DATA.L         BIT11           ; B
 2285 00000034 00001000            67                             .DATA.L         BIT12           ; C
 2286 00000038 00002000            68                             .DATA.L         BIT13           ; D
 2287 0000003C 00004000            69                             .DATA.L         BIT14           ; E
 2288 00000040 00008000            70                             .DATA.L         BIT15           ; F
 2289                              71     
 2290                              72     ;********************************************************************
 2291                              73     ;* CALLテーブル
 2292                              74     ;*
 2293                              75     ;* 実行側ｿﾌﾄのみ使用
 2294                              76     ;* ラベル参照なので並ぶ順番はどうでもいい
 2295                              77     ;* CTBL_REG = _SEQ_CALL_TBL1
 2296                              78     ;********************************************************************
 2297                              79     
 2298                              80             .EXPORT _SEQ_CALL_TBL1
 2299 00000044                     81             .ALIGN  4
 2300                              82     
 2301 00000044                     83     _SEQ_CALL_TBL1                                          ; CALL TABLEは127個まで
 2302 00000044 00000000            84     DSETLI_CALL             .DATA.L         _DSETLI_SUB     ; 直接数値の4BYTE読出
 2303 00000048 00000000            85     PLS_CALL                .DATA.L         _PLS_SUB        ; ON EDGE 1PLS命令 ｻﾌﾞﾙｰﾁﾝｱﾄﾞﾚｽ 1
 2304 0000004C 00000000            86     PLF_CALL                .DATA.L         _PLF_SUB        ; OF EDGE 1PLS命令 ｻﾌﾞﾙｰﾁﾝｱﾄﾞﾚｽ 2
 2305 00000050 00000000            87     WTMR_CALL               .DATA.L         _WTMR_SUB       ; ﾀｲﾏ命令 ｻﾌﾞﾙｰﾁﾝｱﾄﾞﾚｽ          4
 2306 00000054 00000000            88     WCTR_CALL               .DATA.L         _WCTR_SUB       ; ｶｳﾝﾀ命令 ｻﾌﾞﾙｰﾁﾝｱﾄﾞﾚｽ         5
 2307 00000058 00000000            89     WSC_CALL                .DATA.L         _WSC_SUB        ; ｽﾃｯﾌﾟｺﾝﾄﾛｰﾙ命令 ｻﾌﾞﾙｰﾁﾝｱﾄﾞﾚｽ  6
 2308 0000005C 00000000            90     WSR_CALL                .DATA.L         _WSR_SUB        ; ｼﾌﾄﾚｼﾞｽﾀ命令 ｻﾌﾞﾙｰﾁﾝｱﾄﾞﾚｽ     7
 2309                              91     
 2310                              92     ;********************************************************************
 2311                              93     ;* 特殊データ領域TBL
 2312                              94     ;*
 2313                              95     ;* DTBL_REG = _SEQ_DATA_TBL1
 2314                              96     ;* SR、タイマ、カウンタ
 2315                              97     ;********************************************************************
 2316                              98             .EXPORT _SEQ_DATA_TBL1          ;
 2317 00000060                     99             .ALIGN  4
 2318                             100     
 2319 00000060                    101     _SEQ_DATA_TBL1
 2320 00000060 00000000           102     SR_STCT_TOP     .DATA.L         _SEQ_SR_FLG             ; USED
 2321 00000064 00000000           103     TM_STCT_TOP     .DATA.L         _SEQ_TMR_DATA           ; USED
 2322 00000068 00000000           104     TM_KND_T_TOP    .DATA.L         _SEQ_CARD_RAM+_MKIND_T_ADR              ; USED
 2323 0000006C 00000000           105     TM_KND_TD_TOP   .DATA.L         _SEQ_CARD_RAM+_MKIND_TD_ADR             ; USED
 2324 00000070 00000000           106     TM_LAT_CG_TOP   .DATA.L         _TM_LATE_CHGTOP         ; USED
 2325 00000074 00000000           107     CT_STCT_TOP     .DATA.L         _SEQ_CTR_DATA           ; USED
 2326 00000078 00000000           108     CT_KDN_C_TOP    .DATA.L         _SEQ_CARD_RAM+_MKIND_C_ADR              ; USED
 2327 0000007C 00000000           109     CT_KND_CD_TOP   .DATA.L         _SEQ_CARD_RAM+_MKIND_CD_ADR             ; USED
 2328                             110     
 2329                             111     
 2330                             112     ;********************************************************************
 2331                             113     ;* シーケンス命令用
 2332                             114     ;* マクロ
 2333                             115     ;********************************************************************
 2334                             116     
 2335                             117     ;       *******************************************
 2336                             118     ;       ***                                     ***
 2337                             119     ;       ***     LD命令時のMﾚｼﾞへのｽﾀｯｸ          ***
 2338                             120     ;       ***     [3]                             ***
 2339                             121     ;       *******************************************
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE     3
PROGRAM NAME =

 2340                             122             .MACRO  LD_M_STACK                      ;
 2341                             123                     SHLL    M_REG                           ; MRG ｼﾌﾄ
 2342                             124                     OR      A_REG,M_REG                     ; NEW Mreg SAVE
 2343                             125             .ENDM
 2344                             126     
 2345                             127     ;       *******************************************
 2346                             128     ;       ***                                     ***
 2347                             129     ;       ***     ADR.BIT命令時のADRESS作成       ***
 2348                             130     ;       ***     byteｱﾄﾞﾚｽ･･･+0/+1処理有り       ***
 2349                             131     ;       ***     ANS ADR=R0 USED R1              ***
 2350                             132     ;       ***     [5]                             ***
 2351                             133     ;       *******************************************
 2352                             134             .MACRO  ADR_MAKE1_BIT   LBEL1,LBEL2
 2353                             135     \LBEL1:         MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE(0~7Fま
                                          で)
 2354                             136     \LBEL2:         MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYTE
 2355                             137                     SHLL8   R1
 2356                             138                     EXTU.B  R0,R0                           ;
 2357                             139                     OR      R1,R0                           ; adress
 2358                             140             .ENDM
 2359                             141     
 2360                             142     ;       *******************************************
 2361                             143     ;       ***                                     ***
 2362                             144     ;       ***     WORD命令時のADRESS作成          ***
 2363                             145     ;       ***     byteｱﾄﾞﾚｽ 但し偶数(+0)のみ      ***
 2364                             146     ;       ***     ANS ADR=R0 USED R1              ***
 2365                             147     ;       ***     [5]                             ***
 2366                             148     ;       *******************************************
 2367                             149             .MACRO  ADR_MAKE1_WORD LBEL1,LBEL2
 2368                             150                     ADR_MAKE1_BIT \LBEL1,\LBEL2
 2369                             151             .ENDM
 2370                             152     
 2371                             153     ;       *******************************************
 2372                             154     ;       ***                                     ***
 2373                             155     ;       ***     WORD命令時の直接数値作成        ***
 2374                             156     ;       ***     byteｱﾄﾞﾚｽ 但し偶数(+0)のみ      ***
 2375                             157     ;       ***     ANS data=R2 USED R1,R2          ***
 2376                             158     ;       ***     [5]                             ***
 2377                             159     ;       *******************************************
 2378                             160             .MACRO  IMD_MAKE1_WORD LBEL1,LBEL2              ;
 2379                             161     \LBEL1:         MOV.B   #CHG_LHDATA,R1                  ; H_BYTE
 2380                             162     \LBEL2:         MOV.B   #CHG_LLDATA,R2                  ; L_BYTE
 2381                             163                     SHLL8   R1                              ; 符号をそのまま
 2382                             164                     EXTU.B  R2,R2                           ;
 2383                             165                     OR      R1,R2                           ; data
 2384                             166             .ENDM
 2385                             167     
 2386                             168     ;       *******************************************
 2387                             169     ;       ***                                     ***
 2388                             170     ;       ***     WORD命令時の直接数値作成        ***
 2389                             171     ;       ***     byteｱﾄﾞﾚｽ 但し偶数(+0)のみ      ***
 2390                             172     ;       ***     ANS data=R2 USED R1,R2          ***
 2391                             173     ;       ***     [5]                             ***
 2392                             174     ;       *******************************************
 2393                             175             .MACRO  IMD_MAKE1_LONG LBEL1,LBEL2,LBEL3,LBEL4
 2394                             176     \LBEL1:         MOV.B   #CHG_HHDATA,R3                  ; H_BYTE
 2395                             177     \LBEL2:         MOV.B   #CHG_HLDATA,R4                  ; L_BYTE
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE     4
PROGRAM NAME =

 2396                             178     \LBEL3:         MOV.B   #CHG_LHDATA,R1                  ; H_BYTE
 2397                             179     \LBEL4:         MOV.B   #CHG_LLDATA,R2                  ; L_BYTE
 2398                             180     
 2399                             181                     EXTU.B  R3,R3                           ; 000x
 2400                             182                     SHLL8   R3                              ; 00x0
 2401                             183                     SWAP.W  R3,R3                           ; x000 HH,0,0,0
 2402                             184                                                             ; 16bitｼﾌﾄ+下位WORD0ｸﾘｱ
 2403                             185     
 2404                             186                     EXTU.B  R4,R4                           ; 000x
 2405                             187                     SWAP.W  R4,R4                           ; 0x00 0,HL,0,0
 2406                             188     
 2407                             189                     EXTU.B  R1,R1                           ; 000x
 2408                             190                     SHLL8   R1                              ; 00x0 0,0,LH,0
 2409                             191     
 2410                             192                     EXTU.B  R2,R2                           ; LL
 2411                             193                     OR      R3,R2                           ;
 2412                             194                     OR      R4,R2                           ;
 2413                             195                     OR      R1,R2                           ;
 2414                             196             .ENDM
 2415                             197     
 2416                             198     ;       ***************************************************
 2417                             199     ;       ***                                             ***
 2418                             200     ;       ***     ADR.BIT命令時のBIT→R0作成              ***
 2419                             201     ;       ***     [3]     LD,AND,OR                       ***
 2420                             202     ;       ***************************************************
 2421                             203             .MACRO  BIT_LD_R0 LBEL1
 2422                             204     \LBEL1:         TST.B   #CHG_SQ_BIT,@(R0,GBR)           ; [命令書換用ラベル] BIT=OFFならTB
                                          IT=1
 2423                             205                     MOVT    R0                              ; T-BIT==>R0
 2424                             206                     XOR     #BIT0,R0                        ;
 2425                             207             .ENDM
 2426                             208     
 2427                             209     ;       ***************************************************
 2428                             210     ;       ***                                             ***
 2429                             211     ;       ***     ADR.BIT命令時のBITの反転→R0作成        ***
 2430                             212     ;       ***     [2]     LDN,ANDN,ORN                    ***
 2431                             213     ;       ***************************************************
 2432                             214             .MACRO  BIT_LD_NOT_R0 LBEL1
 2433                             215     \LBEL1:         TST.B   #CHG_SQ_BIT,@(R0,GBR)           ; [命令書換用ラベル];BIT=OFFならTB
                                          IT=1
 2434                             216                     MOVT    R0                              ; T-BIT==>R0
 2435                             217             .ENDM
 2436                             218     
 2437                             219     
 2438                             220     ;********************************************************************
 2439                             221     ;* シーケンス命令
 2440                             222     ;* BIT操作
 2441                             223     ;********************************************************************
 2442                             224     ;         ------------------------------
 2443                             225     ;       +0|       命令CODE      (  )   |
 2444                             226     ;         ------------------------------
 2445                             227     ;       +1|     ﾒﾓﾘ種別/BIT     (  )   |
 2446                             228     ;         ------------------------------
 2447                             229     ;       +2|       MEM_ADR上位   (  )   |
 2448                             230     ;         ------------------------------
 2449                             231     ;       +3|       MEM_ADR下位   (  )   |
 2450                             232     ;         ------------------------------
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE     5
PROGRAM NAME =

 2451                             233     
 2452                             234     ;       *********************************************************************
 2453                             235     ;       *****   常時ON                                  4*2             *****
 2454                             236     ;       *********************************************************************
 2455 00000080                    237             .ALIGN  4
 2456 00000080                    238     _LDON_CODE:
 2457                             239             LD_M_STACK                                      ; A->Mｽﾀｯｸ      ARG and NRGを削除
                                          091105AKIBA
 2458 00000080 4700                   M                   SHLL    M_REG                           ; MRG ｼﾌﾄ
 2459 00000082 275B                   M                   OR      A_REG,M_REG                     ; NEW Mreg SAVE
 2460 00000084 E001               240             MOV.B   #BIT0,R0                                ;
 2461 00000086 6503               241             MOV     R0,A_REG                                ; R0→Areg
 2462 00000088                    242     _LDON_CODE_END:
 2463                             243     ;
 2464                             244     ;       *********************************************************************
 2465                             245     ;       *****   Read command                            11*2            *****
 2466                             246     ;       *********************************************************************
 2467                             247     ;       USED DESTROY REG R0
 2468                             248     ;       USED         R5,R6,R7,GBR
 2469                             249     ;
 2470 00000088                    250             .ALIGN  4
 2471 00000088                    251     _LD_CODE:
 2472                             252             LD_M_STACK                                      ; A->Mｽﾀｯｸ      ARG and NRGを削除
                                          091105AKIBA
 2473 00000088 4700                   M                   SHLL    M_REG                           ; MRG ｼﾌﾄ
 2474 0000008A 275B                   M                   OR      A_REG,M_REG                     ; NEW Mreg SAVE
 2475                             253             ADR_MAKE1_BIT LBEL1=LD_ADR,LBEL2=LD_OFS
 2476 0000008C E17F                   M   LD_ADR:         MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE(0~7Fま
                                          で)
 2477 0000008E E0FF                   M   LD_OFS:         MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYTE
 2478 00000090 4118                   M                   SHLL8   R1
 2479 00000092 600C                   M                   EXTU.B  R0,R0                           ;
 2480 00000094 201B                   M                   OR      R1,R0                           ; adress
 2481                             254             BIT_LD_R0 LBEL1=LD_BIT                          ;
 2482 00000096 CCFF                   M   LD_BIT:         TST.B   #CHG_SQ_BIT,@(R0,GBR)           ; [命令書換用ラベル] BIT=OFFならTB
                                          IT=1
 2483 00000098 0029                   M                   MOVT    R0                              ; T-BIT==>R0
 2484 0000009A CA01                   M                   XOR     #BIT0,R0                        ;
 2485 0000009C 6503               255             MOV     R0,A_REG                                ; R0→Areg
 2486 0000009E                    256     _LD_CODE_END:
 2487                             257     
 2488                             258     ;       *********************************************************************
 2489                             259     ;       *****   Read Not command                        10*2            *****
 2490                             260     ;       *********************************************************************
 2491                             261     ;       USED DESTROY REG R0
 2492                             262     ;       USED         R5,R6,R7,GBR
 2493                             263     ;
 2494 000000A0                    264             .ALIGN  4
 2495 000000A0                    265     _LDN_CODE:
 2496                             266             LD_M_STACK                                      ; A->Mｽﾀｯｸ      ARG and NRGを削除
                                          091105AKIBA
 2497 000000A0 4700                   M                   SHLL    M_REG                           ; MRG ｼﾌﾄ
 2498 000000A2 275B                   M                   OR      A_REG,M_REG                     ; NEW Mreg SAVE
 2499                             267             ADR_MAKE1_BIT LBEL1=LDN_ADR,LBEL2=LDN_OFS
 2500 000000A4 E17F                   M   LDN_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 2501 000000A6 E0FF                   M   LDN_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE     6
PROGRAM NAME =

                                          E
 2502 000000A8 4118                   M                   SHLL8   R1
 2503 000000AA 600C                   M                   EXTU.B  R0,R0                           ;
 2504 000000AC 201B                   M                   OR      R1,R0                           ; adress
 2505                             268             BIT_LD_NOT_R0 LBEL1=LDN_BIT                     ;
 2506 000000AE CCFF                   M   LDN_BIT:                TST.B   #CHG_SQ_BIT,@(R0,GBR)           ; [命令書換用ラベル];BIT=O
                                          FFならTBIT=1
 2507 000000B0 0029                   M                   MOVT    R0                              ; T-BIT==>R0
 2508 000000B2 6503               269             MOV     R0,A_REG                                ;
 2509 000000B4                    270     _LDN_CODE_END:
 2510                             271     
 2511                             272     ;       *********************************************************************
 2512                             273     ;       *****   And command                             9*2             *****
 2513                             274     ;       *********************************************************************
 2514                             275     ;       USED DESTROY REG R0
 2515                             276     ;       USED         R5,R6,R7,GBR
 2516                             277     ;
 2517 000000B4                    278             .ALIGN  4
 2518 000000B4                    279     _AND_CODE:
 2519                             280             ADR_MAKE1_BIT LBEL1=AND_ADR,LBEL2=AND_OFS       ;
 2520 000000B4 E17F                   M   AND_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 2521 000000B6 E0FF                   M   AND_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 2522 000000B8 4118                   M                   SHLL8   R1
 2523 000000BA 600C                   M                   EXTU.B  R0,R0                           ;
 2524 000000BC 201B                   M                   OR      R1,R0                           ; adress
 2525                             281             BIT_LD_R0 LBEL1=AND_BIT                         ;
 2526 000000BE CCFF                   M   AND_BIT:                TST.B   #CHG_SQ_BIT,@(R0,GBR)           ; [命令書換用ラベル] BIT=O
                                          FFならTBIT=1
 2527 000000C0 0029                   M                   MOVT    R0                              ; T-BIT==>R0
 2528 000000C2 CA01                   M                   XOR     #BIT0,R0                        ;
 2529 000000C4 2509               282             AND     R0,A_REG                                ; ARG and DATA(T) -> ARG
 2530 000000C6                    283     _AND_CODE_END:
 2531                             284     
 2532                             285     ;       *********************************************************************
 2533                             286     ;       *****   And Not command                         8*2             *****
 2534                             287     ;       *********************************************************************
 2535                             288     ;       USE REG R0
 2536                             289     ;
 2537 000000C8                    290             .ALIGN  4
 2538 000000C8                    291     _ANDN_CODE:
 2539                             292             ADR_MAKE1_BIT LBEL1=ANDN_ADR,LBEL2=ANDN_OFS     ;
 2540 000000C8 E17F                   M   ANDN_ADR:               MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 2541 000000CA E0FF                   M   ANDN_OFS:               MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 2542 000000CC 4118                   M                   SHLL8   R1
 2543 000000CE 600C                   M                   EXTU.B  R0,R0                           ;
 2544 000000D0 201B                   M                   OR      R1,R0                           ; adress
 2545                             293             BIT_LD_NOT_R0 LBEL1=ANDN_BIT                    ;
 2546 000000D2 CCFF                   M   ANDN_BIT:               TST.B   #CHG_SQ_BIT,@(R0,GBR)           ; [命令書換用ラベル];BIT=O
                                          FFならTBIT=1
 2547 000000D4 0029                   M                   MOVT    R0                              ; T-BIT==>R0
 2548 000000D6 2509               294             AND     R0,A_REG                                ; ARG and DATA(T) -> ARG
 2549 000000D8                    295     _ANDN_CODE_END:
 2550                             296     
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE     7
PROGRAM NAME =

 2551                             297     ;       *********************************************************************
 2552                             298     ;       *****   Or command                               9*2            *****
 2553                             299     ;       *********************************************************************
 2554 000000D8                    300             .ALIGN  4
 2555 000000D8                    301     _OR_CODE:
 2556                             302             ADR_MAKE1_BIT LBEL1=OR_ADR,LBEL2=OR_OFS         ;
 2557 000000D8 E17F                   M   OR_ADR:         MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE(0~7Fま
                                          で)
 2558 000000DA E0FF                   M   OR_OFS:         MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYTE
 2559 000000DC 4118                   M                   SHLL8   R1
 2560 000000DE 600C                   M                   EXTU.B  R0,R0                           ;
 2561 000000E0 201B                   M                   OR      R1,R0                           ; adress
 2562                             303             BIT_LD_R0 LBEL1=OR_BIT                          ;
 2563 000000E2 CCFF                   M   OR_BIT:         TST.B   #CHG_SQ_BIT,@(R0,GBR)           ; [命令書換用ラベル] BIT=OFFならTB
                                          IT=1
 2564 000000E4 0029                   M                   MOVT    R0                              ; T-BIT==>R0
 2565 000000E6 CA01                   M                   XOR     #BIT0,R0                        ;
 2566 000000E8 250B               304             OR      R0,A_REG                                ; ARG or DATA(T) -> ARG
 2567 000000EA                    305     _OR_CODE_END:
 2568                             306     
 2569                             307     ;       *********************************************************************
 2570                             308     ;       *****   Or command                               8*2            *****
 2571                             309     ;       *********************************************************************
 2572 000000EC                    310             .ALIGN  4
 2573 000000EC                    311     _ORN_CODE:
 2574                             312             ADR_MAKE1_BIT LBEL1=ORN_ADR,LBEL2=ORN_OFS       ;
 2575 000000EC E17F                   M   ORN_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 2576 000000EE E0FF                   M   ORN_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 2577 000000F0 4118                   M                   SHLL8   R1
 2578 000000F2 600C                   M                   EXTU.B  R0,R0                           ;
 2579 000000F4 201B                   M                   OR      R1,R0                           ; adress
 2580                             313             BIT_LD_NOT_R0 LBEL1=ORN_BIT                     ;
 2581 000000F6 CCFF                   M   ORN_BIT:                TST.B   #CHG_SQ_BIT,@(R0,GBR)           ; [命令書換用ラベル];BIT=O
                                          FFならTBIT=1
 2582 000000F8 0029                   M                   MOVT    R0                              ; T-BIT==>R0
 2583 000000FA 250B               314             OR      R0,A_REG                                ; ARG or DATA(T) -> ARG
 2584 000000FC                    315     _ORN_CODE_END:
 2585                             316     
 2586                             317     ;       *********************************************************************
 2587                             318     ;       *****   Write command                           9*2             *****
 2588                             319     ;       *********************************************************************
 2589                             320     ;       Areg & Nreg--->Areg-->MEM
 2590 000000FC                    321             .ALIGN  4
 2591 000000FC                    322     _ST_CODE:
 2592                             323             ADR_MAKE1_BIT LBEL1=ST_ADR,LBEL2=ST_OFS ;5
 2593 000000FC E17F                   M   ST_ADR:         MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE(0~7Fま
                                          で)
 2594 000000FE E0FF                   M   ST_OFS:         MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYTE
 2595 00000100 4118                   M                   SHLL8   R1
 2596 00000102 600C                   M                   EXTU.B  R0,R0                           ;
 2597 00000104 201B                   M                   OR      R1,R0                           ; adress
 2598 00000106 2558               324             TST     A_REG,A_REG                             ;
 2599                             325             TST_BIT_OF STCD_CLRBIT                          ;
 2600 00000108 8902                   M           BT      STCD_CLRBIT
 2601                             326     
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE     8
PROGRAM NAME =

 2602 0000010A                    327     STCD_SETBIT:                                            ; [命令書換用ラベル]
 2603 0000010A CFFF               328             OR.B    #CHG_SQ_BIT,@(R0,GBR)                   ; OR-BIT  B'00001000
 2604                             329             M_BRA   _ST_CODE_END                            ;
 2605 0000010C A001                   M           BRA     _ST_CODE_END
 2606 0000010E 0009                   M           NOP
 2607                             330     
 2608 00000110                    331     STCD_CLRBIT:                                            ; [命令書換用ラベル]
 2609 00000110 CDFF               332             AND.B   #CHG_SQ_BIT,@(R0,GBR)                   ; AND-BIT  B'11110111
 2610 00000112                    333     _ST_CODE_END:                                           ;
 2611                             334     
 2612                             335     ;       ***********************************************************
 2613                             336     ;       ***     SET BIT CODE CHANGE ROUTINE             8*2     ***
 2614                             337     ;       ***********************************************************
 2615                             338     ;       Areg & Nreg--->AregがONならMEM:ON
 2616 00000114                    339             .ALIGN  4
 2617 00000114                    340     _SET_CODE:                                              ; 00001110B     E
 2618                             341             ADR_MAKE1_BIT LBEL1=SET_ADR,LBEL2=SET_OFS       ;
 2619 00000114 E17F                   M   SET_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 2620 00000116 E0FF                   M   SET_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 2621 00000118 4118                   M                   SHLL8   R1
 2622 0000011A 600C                   M                   EXTU.B  R0,R0                           ;
 2623 0000011C 201B                   M                   OR      R1,R0                           ; adress
 2624 0000011E 2558               342             TST     A_REG,A_REG                             ;
 2625                             343             TST_BIT_OF _SET_CODE_END                        ;
 2626 00000120 8900                   M           BT      _SET_CODE_END
 2627                             344     
 2628 00000122                    345     SETCD_SETBIT:                                           ; [命令書換用ラベル]
 2629 00000122 CFFF               346             OR.B    #CHG_SQ_BIT,@(R0,GBR)                   ; OR-BIT  B'00001000
 2630 00000124                    347     _SET_CODE_END:
 2631                             348     
 2632                             349     ;       ***********************************************************
 2633                             350     ;       ***     RESET BIT CODE CHANGE ROUTINE           8*2     ***
 2634                             351     ;       ***********************************************************
 2635 00000124                    352             .ALIGN  4
 2636 00000124                    353     _RST_CODE:                                              ; 00001110B     E
 2637                             354             ADR_MAKE1_BIT LBEL1=RST_ADR,LBEL2=RST_OFS       ;
                                                          ;
 2638 00000124 E17F                   M   RST_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 2639 00000126 E0FF                   M   RST_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 2640 00000128 4118                   M                   SHLL8   R1
 2641 0000012A 600C                   M                   EXTU.B  R0,R0                           ;
 2642 0000012C 201B                   M                   OR      R1,R0                           ; adress
 2643 0000012E 2558               355             TST     A_REG,A_REG                             ;
 2644                             356             TST_BIT_OF _RST_CODE_END                        ;
 2645 00000130 8900                   M           BT      _RST_CODE_END
 2646                             357     
 2647 00000132                    358     RSTCD_SETBIT:                                           ; [命令書換用ラベル]
 2648 00000132 CDFF               359             AND.B   #CHG_SQ_BIT,@(R0,GBR)                   ; AND-BIT  B'111101111
 2649 00000134                    360     _RST_CODE_END:
 2650                             361     
 2651                             362     
 2652                             363     ;********************************************************************
 2653                             364     ;* シーケンス命令
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE     9
PROGRAM NAME =

 2654                             365     ;* BIT制御命令
 2655                             366     ;********************************************************************
 2656                             367     ;         ------------------------------
 2657                             368     ;       +0|       命令CODE      (  )   |
 2658                             369     ;         ------------------------------
 2659                             370     ;       +1|                     (  )   |
 2660                             371     ;         ------------------------------
 2661                             372     ;       +2|                     (  )   |
 2662                             373     ;         ------------------------------
 2663                             374     ;       +3|                     (  )   |
 2664                             375     ;         ------------------------------
 2665                             376     
 2666                             377     ;       ***********************************************************
 2667                             378     ;       ***     And MRG command                 2*2             ***
 2668                             379     ;       ***********************************************************
 2669 00000134                    380             .ALIGN  4
 2670 00000134                    381     _AMRG_CODE:
 2671 00000134 2579               382             AND     M_REG,A_REG                             ; ARG and MRG
 2672 00000136 4701               383             SHLR    M_REG                                   ; shift old MRG
 2673 00000138                    384     _AMRG_CODE_END:
 2674                             385     
 2675                             386     ;       ***********************************************************
 2676                             387     ;       ***     Or MRG command                  2*2             ***
 2677                             388     ;       ***********************************************************
 2678 00000138                    389             .ALIGN  4
 2679 00000138                    390     _OMRG_CODE:
 2680 00000138 4701               391             SHLR    M_REG                                   ; shift old MRG(POP M_REG)
 2681 0000013A 0029               392             MOVT    R0                                      ;
 2682 0000013C 250B               393             OR      R0,A_REG                                ; ARG or MRG
 2683 0000013E                    394     _OMRG_CODE_END:
 2684                             395     ;
 2685                             396     ;       ***********************************************************
 2686                             397     ;       ***     Write NRG command               3*2             ***
 2687                             398     ;       ***********************************************************
 2688 00000140                    399             .ALIGN  4
 2689 00000140                    400     _PUSH_CODE:
 2690 00000140 4600               401             SHLL    N_REG                                   ; NRGｽﾀｯｸ
 2691 00000142 265B               402             OR      A_REG,N_REG                             ; ARG store to NRG
 2692 00000144                    403     _PUSH_CODE_END:
 2693                             404     
 2694                             405     ;       ***********************************************************
 2695                             406     ;       ***     Write Not NRG command           1*2             ***
 2696                             407     ;       ***********************************************************
 2697 00000144                    408             .ALIGN  4
 2698 00000144                    409     _POP_CODE:
 2699 00000144 255A               410             XOR     A_REG,A_REG                             ; ARGｸﾘｱ
 2700 00000146 0008               411             CLRT                                            ; Tﾋﾞｯﾄｸﾘｱ
 2701 00000148 4625               412             ROTCR   N_REG                                   ; 右ｼﾌﾄ(Tﾋﾞｯﾄ付)
 2702 0000014A 4524               413             ROTCL   A_REG                                   ; 左ｼﾌﾄ(Tﾋﾞｯﾄ付)
 2703 0000014C                    414     _POP_CODE_END:
 2704                             415     
 2705                             416     ;       ***********************************************************
 2706                             417     ;       ***     LEAD NRG command                3*2             ***
 2707                             418     ;       ***********************************************************
 2708 0000014C                    419             .ALIGN  4
 2709 0000014C                    420     _LDNRG_CODE:
 2710 0000014C 6063               421             MOV     N_REG,R0                                ; N_REG LOAD
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE    10
PROGRAM NAME =

 2711 0000014E C901               422             AND     #H'0001,R0                              ; BIT0以外CLR
 2712 00000150 6503               423             MOV     R0,A_REG                                ;
 2713 00000152                    424     _LDNRG_CODE_END:
 2714                             425     
 2715                             426     ;       ***********************************************************
 2716                             427     ;       ***     END NRG command                 1*2             ***
 2717                             428     ;       ***********************************************************
 2718 00000154                    429             .ALIGN  4
 2719 00000154                    430     _ENDNRG_CODE:
 2720 00000154 E601               431             MOV.B   #BIT0,N_REG                             ; N_REG CLR
 2721 00000156                    432     _ENDNRG_CODE_END:
 2722                             433     
 2723                             434     
 2724                             435     ;********************************************************************
 2725                             436     ;* シーケンス応用命令
 2726                             437     ;*
 2727                             438     ;********************************************************************
 2728                             439     
 2729                             440     ;       ***********************************************************
 2730                             441     ;       ***                                                     ***
 2731                             442     ;       ***     Clear Card command              9*2             ***
 2732                             443     ;       ***     AregがON時に指定されたﾒﾓﾘﾜｰﾄﾞをｸﾘｱする          ***
 2733                             444     ;       ***                                                     ***
 2734                             445     ;       ***********************************************************
 2735 00000158                    446             .ALIGN  4
 2736 00000158                    447     _CLR_CODE:
 2737 00000158 2558               448             TST     A_REG,A_REG                             ;
 2738                             449             TST_BIT_OF _CLR_CODE_END                        ;
 2739 0000015A 8906                   M           BT      _CLR_CODE_END
 2740                             450             ADR_MAKE1_WORD LBEL1=CLR_ADR,LBEL2=CLR_OFS      ; R0=WORDｱﾄﾞﾚｽ
 2741                                 M                   ADR_MAKE1_BIT CLR_ADR,CLR_OFS
 2742 0000015C E17F                   M   CLR_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 2743 0000015E E0FF                   M   CLR_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 2744 00000160 4118                   M                   SHLL8   R1
 2745 00000162 600C                   M                   EXTU.B  R0,R0                           ;
 2746 00000164 201B                   M                   OR      R1,R0                           ; adress
 2747 00000166 222A               451             XOR     R2,R2                                   ;
 2748 00000168 0E25               452             MOV.W   R2,@(R0,TOP_REG)                        ;
 2749 0000016A                    453     _CLR_CODE_END:
 2750                             454     
 2751                             455     ;       ***********************************************************
 2752                             456     ;       ***     ON EDGE 1PULSE ON CODE CHANGE ROUTINE           ***
 2753                             457     ;       ***     AregのONｴｯｼﾞ時に1ｽｷｬﾝAregをonする               ***
 2754                             458     ;       ***     割り込み禁止が必要                              ***
 2755                             459     ;       ***********************************************************
 2756                             460     ;       byte adr
 2757 0000016C                    461             .ALIGN  4
 2758 0000016C                    462     _PLS_CODE:                                                      ;
 2759                             463                     ADR_MAKE1_BIT LBEL1=PLS_ADR,LBEL2=PLS_OFS       ; R0:adr
 2760 0000016C E17F                   M   PLS_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 2761 0000016E E0FF                   M   PLS_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 2762 00000170 4118                   M                   SHLL8   R1
 2763 00000172 600C                   M                   EXTU.B  R0,R0                           ;
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE    11
PROGRAM NAME =

 2764 00000174 201B                   M                   OR      R1,R0                           ; adress
 2765 00000176 E2FF               464     PLS_BIT:        MOV.B   #CHG_SQ_BIT,R2                          ; [命令書換用ラベル]
 2766 00000178 51B1               465                     MOV.L   @(PLS_CALL-_SEQ_CALL_TBL1,CTBL_REG),R1  ;
 2767 0000017A 410B               466                     JSR     @R1                                     ;
 2768 0000017C 0009               467                     NOP                                             ;
 2769 0000017E                    468     _PLS_CODE_END:
 2770                             469     
 2771                             470     ;       ***************************************************
 2772                             471     ;       ***     ON EDGE 1PULSE ON CODE CHANGE SUB       ***
 2773                             472     ;       ***************************************************
 2774                             473     ;       INPUT R2:BIT,R0:ADR
 2775 00000180                    474             .ALIGN  4
 2776 00000180                    475     _PLS_SUB:
 2777                             476             SUB_START
 2778 00000180 4F22                   M           STS.L   PR,@-R15                ;[必要]
 2779                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 2780 00000182 622C               477             EXTU.B  R2,R2                                           ; SET用(BIT7~BIT0)
 2781 00000184 6923               478             MOV     R2,R9                                           ; PUSH
 2782                             479     
 2783 00000186 6327               480             NOT     R2,R3                                           ; AND用
 2784 00000188 2558               481             TST     A_REG,A_REG                                     ;
 2785                             482             TST_BIT_ON PLS_SB100                                    ;
 2786 0000018A 8B00                   M           BF      PLS_SB100
 2787 0000018C 222A               483             XOR     R2,R2                                           ;
 2788                             484     
 2789 0000018E                    485     PLS_SB100:
 2790                             486             DI_PUSH_SR_SH3  WK_REG1=R1,WK_REG2=R4                   ; 割込みマスク
 2791 0000018E 0102                   M           STC     SR,R1                   ;
 2792 00000190 9411                   M           MOV.W   #H'000000F0,R4          ;
 2793 00000192 214B                   M           OR      R4,R1           ;INT15
 2794 00000194 4F03                   M           STC.L   SR,@-R15                        ;PUSH SR
 2795 00000196 410E                   M           LDC     R1,SR                   ;割込禁止（15）
 2796 00000198 01EC               487             MOV.B   @(R0,TOP_REG),R1                                ; OLD情報読出
 2797 0000019A 6413               488             MOV     R1,R4                                           ; old push
 2798 0000019C 2139               489             AND     R3,R1                                           ; OLD BIT情報をCLR
 2799 0000019E 212B               490             OR      R2,R1                                           ; NEW BIT情報SET
 2800 000001A0 0E14               491             MOV.B   R1,@(R0,TOP_REG)                                ; new save
 2801                             492             EI_POP_SR_SH3                                           ; 割込みマスク解除
 2802 000001A2 4F07                   M           LDC.L   @R15+,SR                        ;POP SR
 2803 000001A4 241A               493             XOR     R1,R4                                           ; R1 XOR R4 = R4(変化)
 2804 000001A6 2149               494             AND     R4,R1                                           ; R4 and R1 = ON ｴｯｼﾞ
 2805 000001A8 2198               495             TST     R9,R1                                           ;
 2806 000001AA 0029               496             MOVT    R0                                              ; 0
 2807 000001AC CA01               497             XOR     #BIT0,R0
 2808 000001AE 6503               498             MOV     R0,A_REG                                        ; Tの反転 -> ARG
 2809                             499     
 2810 000001B0                    500     _PLS_SUB_END:
 2811                             501             SUB_END
 2812                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 2813 000001B0 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 2814                             502             M_RTS
 2815 000001B2 000B                   M           RTS                             ;RTSの後ろの
 2816 000001B4 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 2817                             503     
 2818                             504     
 2819                             505     ;--------ﾘﾚﾗﾙﾌﾟｰﾙが存在する FFFFFF00(割込禁止)----
 2820                             506     
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE    12
PROGRAM NAME =

 2821                             507     ;       ***********************************************************
 2822                             508     ;       ***     OFF EDGE 1PULSE ON CODE CHANGE ROUTINE  16byte  ***
 2823                             509     ;       ***     AregのOffｴｯｼﾞ時に1ｽｷｬﾝAregをonする              ***
 2824                             510     ;       ***     割り込み禁止が必要                              ***
 2825                             511     ;       ***********************************************************
 2826                                     ***** BEGIN-POOL *****
 2827 000001B6 00F0                       DATA FOR SOURCE-LINE 486
 2828                                     ***** END-POOL *****
 2829 000001B8                    512             .ALIGN  4
 2830 000001B8                    513     _PLF_CODE:                                                      ;
 2831                             514                     ADR_MAKE1_BIT LBEL1=PLF_ADR,LBEL2=PLF_OFS       ; R0:adr
 2832 000001B8 E17F                   M   PLF_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 2833 000001BA E0FF                   M   PLF_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 2834 000001BC 4118                   M                   SHLL8   R1
 2835 000001BE 600C                   M                   EXTU.B  R0,R0                           ;
 2836 000001C0 201B                   M                   OR      R1,R0                           ; adress
 2837 000001C2 E2FF               515     PLF_BIT:        MOV.B   #CHG_SQ_BIT,R2                          ; [命令書換用ラベル]
 2838                             516                                                                     ;
 2839 000001C4 51B2               517                     MOV.L   @(PLF_CALL-_SEQ_CALL_TBL1,CTBL_REG),R1  ;
 2840 000001C6 410B               518                     JSR     @R1                                     ;
 2841 000001C8 0009               519                     NOP                                             ;
 2842 000001CA                    520     _PLF_CODE_END:
 2843                             521     
 2844                             522     ;       ***************************************************
 2845                             523     ;       ***     OFF EDGE 1PULSE ON CODE CHANGE SUB      ***
 2846                             524     ;       ***************************************************
 2847                             525     ;       INPUT R2:BIT,R3,ADR
 2848                             526     
 2849 000001CC                    527             .ALIGN  4
 2850 000001CC                    528     _PLF_SUB:
 2851                             529             SUB_START
 2852 000001CC 4F22                   M           STS.L   PR,@-R15                ;[必要]
 2853                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 2854 000001CE 622C               530             EXTU.B  R2,R2                                           ; SET用(BIT7~BIT0)
 2855 000001D0 6923               531             MOV     R2,R9                                           ; PUSH
 2856 000001D2 6327               532             NOT     R2,R3                                           ; AND用
 2857 000001D4 2558               533             TST     A_REG,A_REG                                     ;
 2858                             534             TST_BIT_ON PLF_SB100                                    ;
 2859 000001D6 8B00                   M           BF      PLF_SB100
 2860 000001D8 222A               535             XOR     R2,R2                                           ;
 2861 000001DA                    536     PLF_SB100:
 2862                             537             DI_PUSH_SR_SH3  WK_REG1=R1,WK_REG2=R4                   ;
 2863 000001DA 0102                   M           STC     SR,R1                   ;
 2864 000001DC 9411                   M           MOV.W   #H'000000F0,R4          ;
 2865 000001DE 214B                   M           OR      R4,R1           ;INT15
 2866 000001E0 4F03                   M           STC.L   SR,@-R15                        ;PUSH SR
 2867 000001E2 410E                   M           LDC     R1,SR                   ;割込禁止（15）
 2868 000001E4 01EC               538             MOV.B   @(R0,TOP_REG),R1                                ;
 2869 000001E6 6413               539             MOV     R1,R4                                           ; old push
 2870 000001E8 2139               540             AND     R3,R1                                           ;
 2871 000001EA 212B               541             OR      R2,R1                                           ;
 2872 000001EC 0E14               542             MOV.B   R1,@(R0,TOP_REG)                                ; new save
 2873                             543             EI_POP_SR_SH3                                           ;
 2874 000001EE 4F07                   M           LDC.L   @R15+,SR                        ;POP SR
 2875 000001F0 214A               544             XOR     R4,R1                                           ; R1 XOR R4 = R1(変化)
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE    13
PROGRAM NAME =

 2876 000001F2 2419               545             AND     R1,R4                                           ; R1 and R4(前回) = OFF ｴｯ
                                          ｼﾞ
 2877 000001F4 2498               546             TST     R9,R4                                           ;
 2878 000001F6 0029               547             MOVT    R0                                              ; 0
 2879 000001F8 CA01               548             XOR     #BIT0,R0                                        ;
 2880 000001FA 6503               549             MOV     R0,A_REG                                        ; Tの反転 -> ARG
 2881                             550     
 2882 000001FC                    551     _PLF_SUB_END:
 2883                             552             SUB_END
 2884                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 2885 000001FC 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 2886                             553             M_RTS
 2887 000001FE 000B                   M           RTS                             ;RTSの後ろの
 2888 00000200 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 2889                             554     
 2890                             555     ;--------ﾘﾚﾗﾙﾌﾟｰﾙが存在する FFFFFF00(割込禁止)----
 2891                             556     
 2892                             557     ;       ***********************************************************
 2893                             558     ;       *****   Write Skip Controlor command            9*2     ***
 2894                             559     ;       ***     AregのON時に指定されたBITをonし                 ***
 2895                             560     ;       ***     それ以外の15bitはoffする                        ***
 2896                             561     ;       ***     割り込み禁止は不要(禁止と同じ命令を使用)        ***
 2897                             562     ;       ***                                                     ***
 2898                             563     ;       ***********************************************************
 2899                                     ***** BEGIN-POOL *****
 2900 00000202 00F0                       DATA FOR SOURCE-LINE 537
 2901                                     ***** END-POOL *****
 2902 00000204                    564             .ALIGN  4
 2903 00000204                    565     _WSC_CODE:                                                      ;
 2904                             566                     ADR_MAKE1_BIT LBEL1=WSC_ADR,LBEL2=WSC_OFS       ; R0:adr
 2905 00000204 E17F                   M   WSC_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 2906 00000206 E0FF                   M   WSC_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 2907 00000208 4118                   M                   SHLL8   R1
 2908 0000020A 600C                   M                   EXTU.B  R0,R0                           ;
 2909 0000020C 201B                   M                   OR      R1,R0                           ; adress
 2910 0000020E E20F               567     WSC_BTD:        MOV.B   #CHG_SQ_BTD,R2                          ; [命令書換用ラベル]"0~F"
 2911                             568                                                                     ;
 2912 00000210 51B5               569                     MOV.L   @(WSC_CALL-_SEQ_CALL_TBL1,CTBL_REG),R1  ; R0:adr R2:bit
 2913 00000212 410B               570                     JSR     @R1                                     ;
 2914 00000214 0009               571                     NOP                                             ;
 2915 00000216                    572     _WSC_CODE_END:
 2916                             573     
 2917                             574     ;       *************************************************************
 2918                             575     ;       *****   Write Skip Controlor command subroutine         *****
 2919                             576     ;       *************************************************************
 2920                             577     ;       Input R0 ADR ,R2 BITCOD(0~F)注意
 2921 00000218                    578             .ALIGN  4
 2922 00000218                    579     _WSC_SUB:
 2923                             580             SUB_START
 2924 00000218 4F22                   M           STS.L   PR,@-R15                ;[必要]
 2925                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 2926                             581     
 2927 0000021A 2558               582             TST     A_REG,A_REG                                     ;
 2928                             583             TST_BIT_OF WSC_S10                                      ; if ARG = 0  then jump
 2929 0000021C 8904                   M           BT      WSC_S10
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE    14
PROGRAM NAME =

 2930                             584     
 2931 0000021E D104               585             MOV.L   #_BIT_DATA_TBL2,R1                              ;
 2932 00000220 4208               586             SHLL2   R2                                              ; *4
 2933 00000222 312C               587             ADD     R2,R1                                           ;
 2934 00000224 6212               588             MOV.L   @R1,R2                                          ; (R2=BIT0~BIT15)
 2935                             589     
 2936 00000226 0E25               590             MOV.W   R2,@(R0,TOP_REG)                                ; 指定されたBITをON、それ
                                          以外OFF割込み禁止いらなかった
 2937                             591     
 2938 00000228                    592     WSC_S10:
 2939                             593             SUB_END
 2940                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 2941 00000228 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 2942                             594             M_RTS
 2943 0000022A 000B                   M           RTS                             ;RTSの後ろの
 2944 0000022C 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 2945                             595     
 2946                             596     ;       ------ﾘﾃﾗﾙﾌﾟｰﾙあり BIT_DATA_TBL2----
 2947                             597     
 2948                             598     ;       ***********************************************************
 2949                             599     ;       ***     Shift Register commnd                   8*2     ***
 2950                             600     ;       ***     CLK入力 Aregの立ち上がりで　Data(Mreg）でｼﾌﾄ    ***
 2951                             601     ;       ***     全ﾒﾓﾘ領域に相当するWORK-RAMあり                 ***
 2952                             602     ;       ***********************************************************
 2953                             603     ;       Mreg:data
 2954                             604     ;       Areg:clk
 2955                                     ***** BEGIN-POOL *****
 2956 0000022E 0000                       ALIGNMENT CODE
 2957 00000230 00000000                   DATA FOR SOURCE-LINE 585
 2958                                     ***** END-POOL *****
 2959 00000234                    605             .ALIGN  4
 2960 00000234                    606     _WSR_CODE:                                                      ;
 2961                             607             ADR_MAKE1_BIT LBEL1=WSR_ADR,LBEL2=WSR_OFS               ; R0:adr
 2962 00000234 E17F                   M   WSR_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 2963 00000236 E0FF                   M   WSR_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 2964 00000238 4118                   M                   SHLL8   R1
 2965 0000023A 600C                   M                   EXTU.B  R0,R0                           ;
 2966 0000023C 201B                   M                   OR      R1,R0                           ; adress
 2967                             608     
 2968 0000023E 51B6               609             MOV.L   @(WSR_CALL-_SEQ_CALL_TBL1,CTBL_REG),R1          ; R0:adr R2:bit
 2969 00000240 410B               610             JSR     @R1                                             ;
 2970 00000242 0009               611             NOP                                                     ;
 2971 00000244                    612     _WSR_CODE_END:
 2972                             613     
 2973                             614     ;       ***********************************************************
 2974                             615     ;       ***     Shift Register CODE CHANGE ROUTINE              ***
 2975                             616     ;       ***********************************************************
 2976                             617     ;       INPUT   R0 SHIFT CARD ADDRESS
 2977                             618     ;       1word --1bitのﾜｰｸRAMを使用
 2978                             619     ;       Mreg:data
 2979                             620     ;       Areg:clk
 2980 00000244                    621     _WSR_SUB:
 2981                             622             SUB_START
 2982 00000244 4F22                   M           STS.L   PR,@-R15                ;[必要]
 2983                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE    15
PROGRAM NAME =

 2984                             623     
 2985 00000246 5AC0               624             MOV.L   @(SR_STCT_TOP-_SEQ_DATA_TBL1,DTBL_REG),R10      ; R10=_SEQ_SR_FLG
 2986                             625                                                                     ; SHIFT (OLD ARG) CARD ADD
                                          RESS TOP
 2987 00000248 01AD               626             MOV.W   @(R0,R10),R1                                    ; load old ARG
 2988 0000024A 0A55               627             MOV.W   A_REG,@(R0,R10)                                 ; store new ARG 1word 1bit
 2989                             628     
 2990 0000024C 215A               629             XOR     A_REG,R1                                        ; (old ARG) xor (new ARG)
 2991 0000024E 2159               630             AND     A_REG,R1                                        ; and (new ARG)
 2992 00000250 2118               631             TST     R1,R1                                           ; ON EGDE CHECK
 2993                             632             TST_BIT_OF WSR_S10                                      ; if ARG not 0-->1 then ju
                                          mp
 2994 00000252 890A                   M           BT      WSR_S10
 2995                             633     
 2996 00000254 6273               634             MOV     M_REG,R2                                        ;
 2997                             635             DI_PUSH_SR_SH3  WK_REG1=R1,WK_REG2=R4                   ;
 2998 00000256 0102                   M           STC     SR,R1                   ;
 2999 00000258 940A                   M           MOV.W   #H'000000F0,R4          ;
 3000 0000025A 214B                   M           OR      R4,R1           ;INT15
 3001 0000025C 4F03                   M           STC.L   SR,@-R15                        ;PUSH SR
 3002 0000025E 410E                   M           LDC     R1,SR                   ;割込禁止（15）
 3003 00000260 01ED               636             MOV.W   @(R0,TOP_REG),R1                                ;
 3004 00000262 4225               637             ROTCR   R2                                              ; BIT_LOAD
 3005 00000264 4124               638             ROTCL   R1                                              ;
 3006                             639     
 3007 00000266 0E15               640             MOV.W   R1,@(R0,TOP_REG)                                ;
 3008                             641             EI_POP_SR_SH3                                           ;
 3009 00000268 4F07                   M           LDC.L   @R15+,SR                        ;POP SR
 3010                             642     
 3011 0000026A                    643     WSR_S10:
 3012                             644             SUB_END
 3013                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 3014 0000026A 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 3015                             645             M_RTS
 3016 0000026C 000B                   M           RTS                             ;RTSの後ろの
 3017 0000026E 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 3018                             646     
 3019                             647     
 3020                             648     ;********************************************************************
 3021                             649     ;* タイマ、カウンタ
 3022                             650     ;*
 3023                             651     ;********************************************************************
 3024                             652     ;__TMCT_ST_CNT  .EQU    12      ;12byte占有
 3025                             653     ;__TMCT_PV      .EQU    0*4     ;
 3026                             654     ;__TMCT_SV      .EQU    1*4     ;
 3027                             655     ;__TMCT_FLG     .EQU    2*4     ;
 3028                             656     
 3029                             657     ;       ***************************************************
 3030                             658     ;       ***                                             ***
 3031                             659     ;       ***     ﾀｲﾏ・ｶｳﾝﾀ構造                           ***
 3032                             660     ;       ***     *12(3data*4byte)                        ***
 3033                             661     ;       ***************************************************
 3034                             662             .MACRO  TMR_CNT_STRCT_ADR UNIT_REG,WKREG1
 3035                             663                     SHLL2   \UNIT_REG                               ; *4
 3036                             664                     MOV     \UNIT_REG,\WKREG1                       ;
 3037                             665                     SHLL    \UNIT_REG                               ; *8
 3038                             666                     ADD     \UNIT_REG,\WKREG1                       ;
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE    16
PROGRAM NAME =

 3039                             667             .ENDM
 3040                             668     
 3041                             669     ;0: 1ms         =1ms*1
 3042                             670     ;1: 10ms        =10ms*1
 3043                             671     ;2: 100ms       =10ms*10
 3044                             672     ;3: 1000ms      =100ms*10
 3045                             673     ;4: 60s         =1sec*60
 3046                             674     ;5: 3600s       =1sec*3600
 3047                             675     
 3048                             676     ;       *******************************************************************
 3049                             677     ;       ***                                                             ***
 3050                             678     ;       ***                                                             ***
 3051                             679     ;       ***     Write Timmer command                    6*2             ***
 3052                             680     ;       ***                                                             ***
 3053                             681     ;       *******************************************************************
 3054                             682     ;       Mreg:1:ﾀｲﾏﾓｼﾞｭ-ﾙｽﾀｰﾄ　0:停止 0->1設定ﾛｰﾄﾞ
 3055                             683     ;       Areg:1:ﾀｲﾏ計測 0:一旦停止
 3056                             684     ;
 3057                                     ***** BEGIN-POOL *****
 3058 00000270 00F0                       DATA FOR SOURCE-LINE 635
 3059                                     ***** END-POOL *****
 3060 00000274                    685             .ALIGN  4
 3061 00000274                    686     _WTMR_CODE:
 3062 00000274 E27F               687     WTMR_UNH:       MOV.B   #CHG_UNIT_H,R2                          ; TMR-H 番号
 3063 00000276 E0FF               688     WTMR_UNL:       MOV.B   #CHG_UNIT_L,R0                          ; TMR-L 番号
 3064 00000278 E30F               689     WTMR_DGT:       MOV.B   #CHG_DGT_SL,R3                          ; (0~5)ﾀｲﾏ領域より決定
 3065 0000027A 51B3               690             MOV.L   @(WTMR_CALL-_SEQ_CALL_TBL1,CTBL_REG),R1         ; R0:adr R2:bit
 3066 0000027C 410B               691             JSR     @R1                                             ;
 3067 0000027E 0009               692             NOP                                                     ;
 3068 00000280                    693     _WTMR_CODE_END:
 3069                             694     
 3070                             695     ;       *************************************************************
 3071                             696     ;       *****   Write Timmer command subroutine                 *****
 3072                             697     ;       *************************************************************
 3073                             698     ;       Mreg:1:ﾀｲﾏﾓｼﾞｭ-ﾙｽﾀｰﾄ　0:停止 0->1設定ﾛｰﾄﾞ
 3074                             699     ;       Areg:1:ﾀｲﾏ計測 0:一旦停止
 3075                             700     ;
 3076                             701     ;       R2:H
 3077                             702     ;       R0:L
 3078                             703     ;       R3:LATE
 3079                             704     
 3080 00000280                    705             .ALIGN  4
 3081 00000280                    706     _TM_LATE_CHGTOP
 3082 00000280 00000001           707             .DATA.L         1               ; 0:1ms    1MS*1
 3083 00000284 00000001           708             .DATA.L         1               ; 1:10ms   10MS*1
 3084 00000288 0000000A           709             .DATA.L         10              ; 2:100ms  10MS*10
 3085 0000028C 0000000A           710             .DATA.L         10              ; 3:1000   100MS*10
 3086 00000290 0000003C           711             .DATA.L         60              ; 4:1min    60S*1S
 3087 00000294 00000E10           712             .DATA.L         3600            ; 5:1h    3600S*1S
 3088 00000298 00000001           713             .DATA.L         1               ; 6
 3089 0000029C 00000001           714             .DATA.L         1               ; 7
 3090                             715     
 3091 000002A0                    716             .ALIGN  4
 3092 000002A0                    717     _WTMR_SUB:
 3093                             718             SUB_START
 3094 000002A0 4F22                   M           STS.L   PR,@-R15                ;[必要]
 3095                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE    17
PROGRAM NAME =

 3096                             719     ;;;     AND     N_REG,A_REG                                     ; ARG and NRG   ARG and NR
                                          Gを削除 091105AKIBA
 3097                             720     
 3098 000002A2 4218               721             SHLL8   R2                                              ; R2は0か1(ﾀｲﾏは500個　多
                                          くて1000個 3E8)EXTUは不要
 3099 000002A4 600C               722             EXTU.B  R0,R0                                           ;
 3100 000002A6 220B               723             OR      R0,R2                                           ; R2:ﾀｲﾏ番号
 3101 000002A8 6923               724             MOV     R2,R9_REG                                       ; ﾀｲﾏ番号PUSH
 3102                             725     
 3103                             726     ;       ----- ﾀｲﾏ構造体読出 -----
 3104 000002AA 5AC1               727             MOV.L   @(TM_STCT_TOP-_SEQ_DATA_TBL1,DTBL_REG),R10_REG  ; R10=_SEQ_TMR_DATA　ﾀｲﾏ演
                                          算ﾜｰｸram-top
 3105                             728             TMR_CNT_STRCT_ADR UNIT_REG=R2,WKREG1=R1                 ; R2*12=R1
 3106 000002AC 4208                   M                   SHLL2   R2                              ; *4
 3107 000002AE 6123                   M                   MOV     R2,R1                   ;
 3108 000002B0 4200                   M                   SHLL    R2                              ; *8
 3109 000002B2 312C                   M                   ADD     R2,R1                   ;
 3110 000002B4 3A1C               729             ADD     R1,R10                                          ; *12(R1)+TOP//////ﾀｲﾏ構造
                                          TOP
 3111                             730     
 3112                             731     ;       ----- ﾀｲﾏ番号(計測ﾀｲﾏ)選択 -----
 3113 000002B6 E007               732             MOV.B   #(BIT2+BIT1+BIT0),R0                            ;
 3114 000002B8 2309               733             AND     R0,R3                                           ; 変換LATE 0~7
 3115 000002BA 50C4               734             MOV.L   @(TM_LAT_CG_TOP-_SEQ_DATA_TBL1,DTBL_REG),R0     ; R10=_SEQ_TMR_DATA
 3116                             735     ;       MOV.W   @R0,R1_REG                                      ; 演算LATE(1,10,60,3600の
                                          いずれか)
 3117 000002BC 4308               736             SHLL2   R3                                              ; *4 (LONGﾃﾞｰﾀの為)
 3118 000002BE 303C               737             ADD     R3,R0                                           ; TOPｱﾄﾞﾚｽ + LATE
 3119 000002C0 6102               738             MOV.L   @R0,R1_REG                                      ; 演算LATE(1,10,60,3600の
                                          いずれか)
 3120                             739     
 3121                             740     ;       ----- ﾀｲﾑｱｯﾌﾟ,一旦停止,起動情報確認 -----
 3122 000002C2 50A2               741             MOV.L   @(__TMCT_FLG,R10_REG),R0                        ; FLAG領域
 3123 000002C4 C801               742             TST     #BIT0,R0                                        ; ACTIVE?
 3124                             743             TST_BIT_ON WTMR_S30                                     ; YES ACTIVE JUMP
 3125 000002C6 8B0C                   M           BF      WTMR_S30
 3126                             744     
 3127                             745     ;       -------- ILDE -------
 3128 000002C8 6473               746             MOV     M_REG,R4                                        ; Mreg読出
 3129 000002CA 4425               747             ROTCR   R4                                              ; 右ｼﾌﾄ(Tﾋﾞｯﾄ付)
 3130 000002CC 8B5C               748             BF      WTMR_S98                                        ; Mreg(ｽﾀｰﾄ指令OFF)
 3131                             749     
 3132                             750     ;       ----- Mreg ON(有効)-------
 3133 000002CE 200A               751             XOR     R0,R0                                           ; ｸﾘｱ
 3134 000002D0 1A02               752             MOV.L   R0,@(__TMCT_FLG,R10_REG)                        ; FLAG領域ｸﾘｱ BIT0(処理ﾌﾗｸ
                                          ﾞ),1(計測指令),2(up) 計測条件 ****,*011
 3135 000002D2 1A00               753             MOV.L   R0,@(__TMCT_PV,R10_REG)                         ; 実測PV=0
 3136                             754     
 3137                             755     ;       ----- ﾀｲﾏ設定値SET -----
 3138                             756     ;       設定LOAD data*1,10,(100),(1000),60,3600
 3139 000002D4 6283               757             MOV     D_REG,R2                                        ; ﾀｲﾏ設定(R2)*late R1
 3140 000002D6 622D               758             EXTU.W  R2,R2                                           ; 符号なし
 3141 000002D8 321D               759             DMULS.L R1_REG,R2                                       ; R1 * R2 → MACH,MACL
 3142 000002DA 001A               760             STS.L   MACL,R0                                         ; 3600*FFFF 1*FFFF
 3143 000002DC 1A01               761             MOV.L   R0,@(__TMCT_SV,R10_REG)                         ; SV:SET
 3144                             762     
 3145                             763     ;       ----- ﾀｲﾏ起動 -----
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE    18
PROGRAM NAME =

 3146 000002DE E001               764             MOV.B   #BIT0,R0                                        ;
 3147 000002E0 1A02               765             MOV.L   R0,@(__TMCT_FLG,R10_REG)                        ; 起動中SET(ﾀｲﾏ計測指令BIT
                                          1=0のままで起動しない)
 3148                             766     
 3149                             767     ;       ------- 測定中 -----------------
 3150 000002E2                    768     WTMR_S30:
 3151                             769     ;       ----- ﾀｲﾑｱｯﾌﾟ確認 -----
 3152 000002E2 50A2               770             MOV.L   @(__TMCT_FLG,R10_REG),R0                        ; FLAG領域
 3153 000002E4 C804               771             TST     #BIT2,R0                                        ; ﾀｲﾑｱｯﾌﾟ確認
 3154                             772             TST_BIT_ON WTMR_S70                                     ; ﾀｲﾑｱｯﾌﾟでｼﾞｬﾝﾌﾟ
 3155 000002E6 8B2E                   M           BF      WTMR_S70
 3156                             773                                                                     ;
 3157                             774     
 3158                             775     ;       -----ﾀｲﾏ一旦停止CHECK---
 3159 000002E8 50A2               776             MOV.L   @(__TMCT_FLG,R10_REG),R0                        ; FLAG領域
 3160 000002EA 2558               777             TST     A_REG,A_REG                                     ; 一旦停止情報確認
 3161                             778             TST_BIT_ON WTMR_S40                                     ; 継続でｼﾞｬﾝﾌﾟ
 3162 000002EC 8B02                   M           BF      WTMR_S40
 3163 000002EE C9FD               779             AND     #LOW ~BIT1,R0                                   ; 0:一旦停止
 3164                             780             M_BRA   WTMR_S45                                        ;
 3165 000002F0 A001                   M           BRA     WTMR_S45
 3166 000002F2 0009                   M           NOP
 3167 000002F4                    781     WTMR_S40:
 3168 000002F4 CB02               782             OR      #BIT1,R0                                        ; 1:継続
 3169 000002F6                    783     WTMR_S45:
 3170 000002F6 1A02               784             MOV.L   R0,@(__TMCT_FLG,R10_REG)                        ; FLAG領域
 3171                             785     
 3172                             786     ;       -------------実測比較・ﾘﾌﾚｯｼｭ-----------------
 3173 000002F8 50A0               787             MOV.L   @(__TMCT_PV,R10_REG),R0                         ; PV LOAD
 3174 000002FA 6203               788             MOV     R0,R2                                           ; PV=R2
 3175                             789     
 3176 000002FC 50A1               790             MOV.L   @(__TMCT_SV,R10_REG),R0                         ; SV LOAD
 3177 000002FE 3202               791             CMP/HS  R0,R2                                           ; R0=<R2
 3178 00000300 8B15               792             BF      WTMR_S50                                        ; NO R2 < R0 ﾀｲﾏ計測 ﾀｲﾑｱｯ
                                          ﾌﾟで無い時ｼﾞｬﾝﾌﾟ
 3179                             793     
 3180 00000302 6203               794             MOV     R0,R2                                           ; 実測はﾀｲﾑｱｯﾌﾟで設定を表
                                          示する
 3181                             795                                                                     ; 実測は端数,処理時間を表
                                          すものではない
 3182                             796     ;       --------- ﾀｲﾏﾀｲﾑｱｯﾌﾟ-----
 3183 00000304 E005               797             MOV.B   #(BIT2+BIT0),R0                                 ; ﾀｲﾏ停止(ﾀｲﾑｱｯﾌﾟ,起動ﾋﾞｯﾄ
                                          初期化)
 3184 00000306 1A02               798             MOV.L   R0,@(__TMCT_FLG,R10_REG)                        ; FLAG領域
 3185                             799     
 3186                             800             PUSH_REG1 R1_REG
 3187 00000308 2F16                   M           MOV.L   R1_REG,@-R15            ;PUSH=SP-4
 3188                                 M                                           ;REG=>[SP]
 3189                                 M                                           ;"-4" FF,FF,FF,FC
 3190                             801             PUSH_REG1 R2                                            ; ﾀｲﾏPV
 3191 0000030A 2F26                   M           MOV.L   R2,@-R15                ;PUSH=SP-4
 3192                                 M                                           ;REG=>[SP]
 3193                                 M                                           ;"-4" FF,FF,FF,FC
 3194                             802     ;       --------------ﾀｲﾑｱｯﾌﾟﾋﾞﾄｾｯﾄ(ﾀｲﾏ,ｶｳﾝﾀ同じ)-------
 3195 0000030C 50C2               803             MOV.L   @(TM_KND_T_TOP-_SEQ_DATA_TBL1,DTBL_REG),R0      ; ﾒﾓﾘ種別「T」TOPｱﾄﾞﾚｽLOAD
 3196                             804     ;;;     MOV.L   @R0,R1_REG                                      ; R1=_SEQ_CARD_RAM+_MKIND_
                                          T_ADR
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE    19
PROGRAM NAME =

 3197 0000030E 6103               805             MOV.L   R0,R1_REG                                       ; R1=_SEQ_CARD_RAM+_MKIND_
                                          T_ADR 値ではなくｱﾄﾞﾚｽをSET AKIBA
 3198 00000310 6293               806             MOV     R9_REG,R2_REG                                   ; ﾀｲﾏ番号PUSH
 3199                             807             FAR_JSR #_TMR_CNT_ADR_BIT_MAKE,R0                       ; input R1,R2 /ANS=R1:ADR
                                          R0:BIT
 3200 00000312 D012                   M           MOV.L   #_TMR_CNT_ADR_BIT_MAKE,R0               ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 3201 00000314 400B                   M           JSR     @R0                     ;
 3202 00000316 0009                   M           NOP                                     ;
 3203                             808     
 3204                             809             DI_PUSH_SR_SH3  WK_REG1=R2,WK_REG2=R4                   ; 割込ﾏｽｸ
 3205 00000318 0202                   M           STC     SR,R2                   ;
 3206 0000031A 941D                   M           MOV.W   #H'000000F0,R4          ;
 3207 0000031C 224B                   M           OR      R4,R2           ;INT15
 3208 0000031E 4F03                   M           STC.L   SR,@-R15                        ;PUSH SR
 3209 00000320 420E                   M           LDC     R2,SR                   ;割込禁止（15）
 3210 00000322 6310               810             MOV.B   @R1,R3                                          ; ﾒﾓﾘ内情報LOAD
 3211 00000324 230B               811             OR      R0,R3                                           ; BIT-SET
 3212 00000326 2130               812             MOV.B   R3,@R1                                          ; ﾒﾓﾘ情報更新
 3213                             813             EI_POP_SR_SH3                                           ; 割込ﾏｽｸ解除
 3214 00000328 4F07                   M           LDC.L   @R15+,SR                        ;POP SR
 3215                             814     ;       -------------------------------------------------
 3216                             815             POP_REG1 R2                                             ; ﾀｲﾏPV
 3217                                 M                                   ; RE"+4" 00,00,00,04
 3218 0000032A 62F6                   M           MOV.L   @R15+,R2        ;
 3219                             816             POP_REG1 R1_REG
 3220                                 M                                   ; RE"+4" 00,00,00,04
 3221 0000032C 61F6                   M           MOV.L   @R15+,R1_REG        ;
 3222 0000032E                    817     WTMR_S50:
 3223                             818     
 3224 0000032E E402               819             MOV.B   #2,R4                                           ;
 3225 00000330 3412               820             CMP/HS  R1_REG,R4                                       ; R2(2)=< R1
 3226 00000332 8903               821             BT      WTMR_S60                                        ; R1=0,1 =< R4 YES(演算な
                                          い)
 3227 00000334 6413               822             MOV     R1_REG,R4                                       ;
 3228                             823             FAR_JSR #_DIVS_32REG2_32REG1_R4_32REG2_R2,R0            ; R2/R4=R2
 3229 00000336 D00A                   M           MOV.L   #_DIVS_32REG2_32REG1_R4_32REG2_R2,R0            ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 3230 00000338 400B                   M           JSR     @R0                     ;
 3231 0000033A 0009                   M           NOP                                     ;
 3232 0000033C                    824     WTMR_S60:
 3233                             825     ;       --------------実測の転送(ﾀｲﾏ,ｶｳﾝﾀ同じ)-------
 3234 0000033C 50C3               826             MOV.L   @(TM_KND_TD_TOP-_SEQ_DATA_TBL1,DTBL_REG),R0     ; ﾒﾓﾘ種別「Td」TOPｱﾄﾞﾚｽLOA
                                          D
 3235                             827     ;;;     MOV.L   @R0,R1                                          ; R1=_SEQ_CARD_RAM+_MKIND_
                                          TD_ADR
 3236 0000033E 6103               828             MOV.L   R0,R1                                           ; R1=_SEQ_CARD_RAM+_MKIND_
                                          TD_ADR
 3237 00000340 319C               829             ADD     R9_REG,R1                                       ;
 3238 00000342 319C               830             ADD     R9_REG,R1                                       ;
 3239 00000344 2121               831             MOV.W   R2,@R1                                          ; TD_TOP+UNIT*2 PV SAVE
 3240                             832     
 3241 00000346                    833     WTMR_S70:
 3242 00000346 6473               834             MOV     M_REG,R4                                        ; M_REG情報LOAD
 3243 00000348 4425               835             ROTCR   R4                                              ; Mreg[起動指令]
 3244 0000034A 8B0B               836             BF      WTMR_S95                                        ; (終了・中断)
 3245                             837     
 3246 0000034C 50A2               838             MOV.L   @(__TMCT_FLG,R10_REG),R0                        ; FLAG領域
 3247 0000034E C804               839             TST     #BIT2,R0                                        ; 内部ﾀｲﾑｱｯﾌﾟ?
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE    20
PROGRAM NAME =

 3248                             840             TST_BIT_OF WTMR_S98                                     ; NO
 3249 00000350 891A                   M           BT      WTMR_S98
 3250                             841     
 3251                             842     ;       ------ TIME UP -------------------
 3252 00000352                    843     WTMR_S90:
 3253 00000352 E501               844             MOV.B   #BIT0,A_REG                                     ; A_REG ON
 3254                             845             M_BRA   WTMR_SEND                                       ;
 3255 00000354 A019                   M           BRA     WTMR_SEND
 3256 00000356 0009                   M           NOP
 3257                             846     
 3258                             847     
 3259                             848     ;       ------ 中断/ﾀｲﾑｱｯﾌﾟ後の終了 ------
 3260                                     ***** BEGIN-POOL *****
 3261 00000358 00F0                       DATA FOR SOURCE-LINE 809
 3262 0000035A 0000                       ALIGNMENT CODE
 3263 0000035C 00000000                   DATA FOR SOURCE-LINE 807
 3264 00000360 00000000                   DATA FOR SOURCE-LINE 823
 3265                                     ***** END-POOL *****
 3266 00000364                    849     WTMR_S95:
 3267 00000364 200A               850             XOR     R0,R0                                           ; ｸﾘｱ
 3268 00000366 1A02               851             MOV.L   R0,@(__TMCT_FLG,R10_REG)                        ; FLAG領域ｸﾘｱ BIT0(処理ﾌﾗｸ
                                          ﾞ),1(計測指令),2(up)
 3269                             852     
 3270                             853     ;       --------------ﾀｲﾑｱｯﾌﾟﾋﾞﾄｸﾘｱ(ﾀｲﾏ,ｶｳﾝﾀ同じ)-------
 3271 00000368 50C2               854             MOV.L   @(TM_KND_T_TOP-_SEQ_DATA_TBL1,DTBL_REG),R0      ; ﾒﾓﾘ種別「T」 TOPｱﾄﾞﾚｽLOA
                                          D
 3272                             855     ;;;     MOV.L   @R0,R1_REG                                      ; R1=_SEQ_CARD_RAM+_MKIND_
                                          T_ADR
 3273 0000036A 6103               856             MOV.L   R0,R1_REG                                       ; R1=_SEQ_CARD_RAM+_MKIND_
                                          T_ADR 値ではなくｱﾄﾞﾚｽをSET AKIBA
 3274 0000036C 6293               857             MOV     R9_REG,R2_REG                                   ; ﾀｲﾏ番号PUSH
 3275                             858             FAR_JSR #_TMR_CNT_ADR_BIT_MAKE,R0                       ; input R1,R2 /ANS=R1:ADR
                                          R0:BIT
 3276 0000036E D009                   M           MOV.L   #_TMR_CNT_ADR_BIT_MAKE,R0               ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 3277 00000370 400B                   M           JSR     @R0                     ;
 3278 00000372 0009                   M           NOP                                     ;
 3279                             859     
 3280                             860             DI_PUSH_SR_SH3  WK_REG1=R2,WK_REG2=R4                   ; 割込ﾏｽｸ
 3281 00000374 0202                   M           STC     SR,R2                   ;
 3282 00000376 940B                   M           MOV.W   #H'000000F0,R4          ;
 3283 00000378 224B                   M           OR      R4,R2           ;INT15
 3284 0000037A 4F03                   M           STC.L   SR,@-R15                        ;PUSH SR
 3285 0000037C 420E                   M           LDC     R2,SR                   ;割込禁止（15）
 3286 0000037E 6007               861             NOT     R0,R0                                           ; R0反転
 3287 00000380 6310               862             MOV.B   @R1,R3                                          ; ﾒﾓﾘ内情報LOAD
 3288 00000382 2309               863             AND     R0,R3                                           ; BIT--CLR
 3289 00000384 2130               864             MOV.B   R3,@R1                                          ; ﾒﾓﾘ情報更新
 3290                             865             EI_POP_SR_SH3                                           ; 割込ﾏｽｸ解除
 3291 00000386 4F07                   M           LDC.L   @R15+,SR                        ;POP SR
 3292                             866     
 3293                             867     ;       ------ IDEL ------
 3294 00000388                    868     WTMR_S98                                                        ; Mreg(ｽﾀｰﾄ指令OFF)
 3295 00000388 255A               869             XOR     A_REG,A_REG                                     ; A_REGｸﾘｱ
 3296                             870     
 3297 0000038A                    871     WTMR_SEND:
 3298                             872             SUB_END
 3299                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE    21
PROGRAM NAME =

 3300 0000038A 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 3301                             873             M_RTS
 3302 0000038C 000B                   M           RTS                             ;RTSの後ろの
 3303 0000038E 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 3304                             874     
 3305                             875     ;       *************************************************************
 3306                             876     ;       *****   Write Counter command                   5*2     *****
 3307                             877     ;       *************************************************************
 3308                                     ***** BEGIN-POOL *****
 3309 00000390 00F0                       DATA FOR SOURCE-LINE 860
 3310 00000392 0000                       ALIGNMENT CODE
 3311 00000394 00000000                   DATA FOR SOURCE-LINE 858
 3312                                     ***** END-POOL *****
 3313 00000398                    878             .ALIGN  4
 3314 00000398                    879     _WCTR_CODE:
 3315                             880     
 3316 00000398 E27F               881     WCTR_UNH:       MOV.B   #CHG_UNIT_H,R2                          ; CNT-H 番号
 3317 0000039A E0FF               882     WCTR_UNL:       MOV.B   #CHG_UNIT_L,R0                          ; CNT-L 番号
 3318 0000039C 51B4               883             MOV.L   @(WCTR_CALL-_SEQ_CALL_TBL1,CTBL_REG),R1         ; R0:adr R2:bit
 3319 0000039E 410B               884             JSR     @R1                                             ;
 3320 000003A0 0009               885             NOP                                                     ;
 3321 000003A2                    886     _WCTR_CODE_END:
 3322                             887     
 3323                             888     ;       *************************************************************
 3324                             889     ;       *****   Write Counter command subroutine                *****
 3325                             890     ;       *************************************************************
 3326                             891     ;       Mreg ENABLE
 3327                             892     ;       Areg CLK
 3328                             893     ;
 3329 000003A4                    894             .ALIGN  4
 3330 000003A4                    895     _WCTR_SUB:
 3331                             896             SUB_START
 3332 000003A4 4F22                   M           STS.L   PR,@-R15                ;[必要]
 3333                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 3334                             897     
 3335 000003A6 4218               898             SHLL8   R2                                              ; R2は0か1(ﾀｲﾏは500個　多
                                          くて1000個 3E8)EXTUは不要
 3336 000003A8 600C               899             EXTU.B  R0,R0                                           ;
 3337 000003AA 220B               900             OR      R0,R2                                           ; R2:ｶｳﾝﾀ番号
 3338 000003AC 6923               901             MOV     R2,R9_REG                                       ; ｶｳﾝﾀ番号PUSH
 3339                             902     
 3340 000003AE 5AC5               903             MOV.L   @(CT_STCT_TOP-_SEQ_DATA_TBL1,DTBL_REG),R10_REG  ; R10=_SEQ_CTR_DATA ｶｳﾝﾀ演
                                          算ﾜｰｸram-top
 3341                             904             TMR_CNT_STRCT_ADR UNIT_REG=R2,WKREG1=R1                 ; R2*12=R1
 3342 000003B0 4208                   M                   SHLL2   R2                              ; *4
 3343 000003B2 6123                   M                   MOV     R2,R1                   ;
 3344 000003B4 4200                   M                   SHLL    R2                              ; *8
 3345 000003B6 312C                   M                   ADD     R2,R1                   ;
 3346 000003B8 3A1C               905             ADD     R1,R10                                          ; *12(R1)+TOP//////ｶｳﾝﾀ構
                                          造TOP
 3347                             906     
 3348                             907     ;       ========= 内部的には前回値のリフレッシュとカウントを常時行う====
 3349                             908     ;       ---------- CLK(A_REG) REFLASH ------
 3350 000003BA 211A               909             XOR     R1,R1                                           ; 前回値格納ﾚｼﾞｽﾀｸﾘｱ
 3351 000003BC 2558               910             TST     A_REG,A_REG                                     ; 今回値確認
 3352                             911             TST_BIT_OF WCTR_S10                                     ;
 3353 000003BE 8900                   M           BT      WCTR_S10
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE    22
PROGRAM NAME =

 3354 000003C0 E102               912             MOV     #BIT1,R1                                        ; CLK(今回値格納)
 3355 000003C2                    913     WCTR_S10:
 3356 000003C2 50A2               914             MOV.L   @(__TMCT_FLG,R10_REG),R0                        ; FLAG領域ｸﾘｱ BIT0(処理ﾌﾗｸ
                                          ﾞ),BIT1:CLK-前回値
 3357 000003C4 6303               915             MOV     R0,R3                                           ; OLD
 3358 000003C6 C9FD               916             AND     #LOW ~BIT1,R0                                   ; BIT1ｸﾘｱ
 3359 000003C8 201B               917             OR      R1,R0                                           ; NEW A_REG SAVE
 3360 000003CA 1A02               918             MOV.L   R0,@(__TMCT_FLG,R10_REG)                        ; FLAG領域更新
 3361                             919     
 3362                             920     ;       -------- ON-EDGE なら+1 0000,FFFFでﾘﾐｯﾄ-----
 3363 000003CC 230A               921             XOR     R0,R3                                           ; NEW XOR OLD->R3
 3364 000003CE 2039               922             AND     R3,R0                                           ; EDGE(R3) AND R0 ->R0
 3365 000003D0 C802               923             TST     #BIT1,R0                                        ;
 3366                             924             TST_BIT_OF WCTR_S20                                     ;
 3367 000003D2 8905                   M           BT      WCTR_S20
 3368                             925     
 3369 000003D4 50A0               926             MOV.L   @(__TMCT_PV,R10_REG),R0                         ; PV LOAD
 3370 000003D6 7001               927             ADD     #1,R0                                           ;
 3371 000003D8 D417               928             MOV.L   #H'FFFF0000,R4                                  ; PV=0000,FFFFまで
 3372 000003DA 2048               929             TST     R4,R0                                           ;
 3373                             930             TST_BIT_ON WCTR_S20                                     ;
 3374 000003DC 8B00                   M           BF      WCTR_S20
 3375 000003DE 1A00               931             MOV.L   R0,@(__TMCT_PV,R10_REG)                         ;
 3376 000003E0                    932     WCTR_S20:
 3377                             933     
 3378                             934     ;       =========処理開始==============
 3379 000003E0 50A2               935             MOV.L   @(__TMCT_FLG,R10_REG),R0                        ; FLAG領域
 3380 000003E2 C801               936             TST     #BIT0,R0                                        ; ACTIVE?
 3381                             937             TST_BIT_ON WCTR_S30                                     ; YES ACTIVE JUMP
 3382 000003E4 8B09                   M           BF      WCTR_S30
 3383                             938     
 3384                             939     ;       -------- ILDE -------
 3385 000003E6 6473               940             MOV     M_REG,R4
 3386 000003E8 4425               941             ROTCR   R4                                              ;
 3387 000003EA 8B3C               942             BF      WCTR_S98                                        ; Mreg(ｽﾀｰﾄ指令OFF)
 3388                             943     
 3389                             944     ;       ----- Mreg ON(有効)-------
 3390 000003EC 50A2               945             MOV.L   @(__TMCT_FLG,R10_REG),R0                        ; FLAG領域ｸﾘｱ BIT0(処理ﾌﾗｸ
                                          ﾞ),BIT1:CLK-前回値
 3391 000003EE C9FE               946             AND     #LOW ~BIT0,R0
 3392 000003F0 1A02               947             MOV.L   R0,@(__TMCT_FLG,R10_REG)                        ; FLAG領域ｸﾘｱ BIT0(処理ﾌﾗｸ
                                          ﾞ),BIT1:CLK-前回値
 3393                             948     
 3394 000003F2 200A               949             XOR     R0,R0
 3395 000003F4 1A00               950             MOV.L   R0,@(__TMCT_PV,R10_REG)                         ; 実測PV=0
 3396                             951     
 3397                             952     ;       ----- ｶｳﾝﾀ起動 -----
 3398 000003F6 E001               953             MOV.B   #BIT0,R0                                        ;
 3399 000003F8 1A02               954             MOV.L   R0,@(__TMCT_FLG,R10_REG)                        ; 起動中SET(ﾀｲﾏ計測指令BIT
                                          1=0のままで起動しない)
 3400                             955     
 3401                             956     ;       ------- 測定中 -----------------
 3402 000003FA                    957     WCTR_S30:
 3403 000003FA 6473               958             MOV     M_REG,R4
 3404 000003FC 4425               959             ROTCR   R4                                              ;
 3405 000003FE 8B1F               960             BF      WCTR_S95                                        ; Mreg(ｽﾀｰﾄ指令OFF)
 3406                             961     
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE    23
PROGRAM NAME =

 3407                             962     ;       ---------- 実測転送------------
 3408 00000400 50A0               963             MOV.L   @(__TMCT_PV,R10_REG),R0                         ; PV LOAD
 3409 00000402 6203               964             MOV     R0,R2
 3410                             965     
 3411 00000404 50C7               966             MOV.L   @(CT_KND_CD_TOP-_SEQ_DATA_TBL1,DTBL_REG),R0     ;
 3412                             967     ;;;     MOV.L   @R0,R1                                          ; R1=_SEQ_CARD_RAM+_MKIND_
                                          CD_ADR
 3413 00000406 6103               968             MOV.L   R0,R1                                           ; R1=_SEQ_CARD_RAM+_MKIND_
                                          CD_ADR
 3414 00000408 319C               969             ADD     R9_REG,R1                                       ;
 3415 0000040A 319C               970             ADD     R9_REG,R1                                       ;
 3416 0000040C 2121               971             MOV.W   R2,@R1                                          ; TD_TOP+UNIT*2 PV SAVE
 3417                             972     
 3418                             973     ;       --------- 比較--------------
 3419 0000040E 3282               974             CMP/HS  D_REG,R2                                        ; SV =< PV?
 3420 00000410 8B19               975             BF      WCTR_S97                                        ; NO PV < SV
 3421                             976     
 3422 00000412                    977     WCTR_S90:
 3423                             978     ;       --------------ｶｳﾝﾄｱｯﾌﾟﾋﾞﾄｾｯﾄ(ﾀｲﾏ,ｶｳﾝﾀ同じ)-------
 3424 00000412 50C6               979             MOV.L   @(CT_KDN_C_TOP-_SEQ_DATA_TBL1,DTBL_REG),R0      ;
 3425                             980     ;;;     MOV.L   @R0,R1_REG                                      ; R1=_SEQ_CARD_RAM+_MKIND_
                                          T_ADR
 3426 00000414 6103               981             MOV.L   R0,R1_REG                                       ; R1=_SEQ_CARD_RAM+_MKIND_
                                          T_ADR
 3427 00000416 6293               982             MOV     R9_REG,R2_REG                                   ; ｶｳﾝﾀ番号PUSH
 3428                             983             FAR_JSR #_TMR_CNT_ADR_BIT_MAKE,R0                       ; input R1,R2 /ANS=R1:ADR
                                          R0:BIT
 3429 00000418 D008                   M           MOV.L   #_TMR_CNT_ADR_BIT_MAKE,R0               ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 3430 0000041A 400B                   M           JSR     @R0                     ;
 3431 0000041C 0009                   M           NOP                                     ;
 3432                             984     
 3433                             985             DI_PUSH_SR_SH3  WK_REG1=R2,WK_REG2=R4                   ;
 3434 0000041E 0202                   M           STC     SR,R2                   ;
 3435 00000420 9409                   M           MOV.W   #H'000000F0,R4          ;
 3436 00000422 224B                   M           OR      R4,R2           ;INT15
 3437 00000424 4F03                   M           STC.L   SR,@-R15                        ;PUSH SR
 3438 00000426 420E                   M           LDC     R2,SR                   ;割込禁止（15）
 3439 00000428 6310               986             MOV.B   @R1,R3                                          ;
 3440 0000042A 230B               987             OR      R0,R3                                           ; BIT-SET
 3441 0000042C 2130               988             MOV.B   R3,@R1                                          ;
 3442                             989             EI_POP_SR_SH3                                           ;
 3443 0000042E 4F07                   M           LDC.L   @R15+,SR                        ;POP SR
 3444                             990     ;       -------------------------------------------------
 3445 00000430 E501               991             MOV.B   #BIT0,A_REG                                     ;
 3446                             992             M_BRA   WCTR_SEND                                       ;
 3447 00000432 A019                   M           BRA     WCTR_SEND
 3448 00000434 0009                   M           NOP
 3449                             993     
 3450                             994     ;       ==== ﾀｲﾏﾕﾆｯﾄ中断/終了===
 3451                                     ***** BEGIN-POOL *****
 3452 00000436 00F0                       DATA FOR SOURCE-LINE 985
 3453 00000438 FFFF0000                   DATA FOR SOURCE-LINE 928
 3454 0000043C 00000000                   DATA FOR SOURCE-LINE 983
 3455                                     ***** END-POOL *****
 3456 00000440                    995     WCTR_S95:
 3457 00000440 50A2               996             MOV.L   @(__TMCT_FLG,R10_REG),R0                        ; FLAG領域ｸﾘｱ BIT0(処理ﾌﾗｸ
                                          ﾞ),BIT1:CLK-前回値
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE    24
PROGRAM NAME =

 3458 00000442 C9FE               997             AND     #LOW ~BIT0,R0
 3459 00000444 1A02               998             MOV.L   R0,@(__TMCT_FLG,R10_REG)                        ; FLAG領域ｸﾘｱ BIT0(処理ﾌﾗｸ
                                          ﾞ),BIT1:CLK-前回値
 3460                             999     
 3461 00000446                   1000     WCTR_S97:
 3462                            1001     ;       --------------ﾀｲﾑｱｯﾌﾟﾋﾞﾄｸﾘｱ(ﾀｲﾏ,ｶｳﾝﾀ同じ)-------
 3463 00000446 50C6              1002             MOV.L   @(CT_KDN_C_TOP-_SEQ_DATA_TBL1,DTBL_REG),R0      ;
 3464                            1003     ;;;     MOV.L   @R0,R1_REG                                      ; R1=_SEQ_CARD_RAM+_MKIND_
                                          T_ADR
 3465 00000448 6103              1004             MOV.L   R0,R1_REG                                       ; R1=_SEQ_CARD_RAM+_MKIND_
                                          T_ADR
 3466 0000044A 6293              1005             MOV     R9_REG,R2_REG                                   ; ﾀｲﾏ番号PUSH
 3467                            1006             FAR_JSR #_TMR_CNT_ADR_BIT_MAKE,R0                       ; input R1,R2 /ANS=R1:ADR
                                          R0:BIT
 3468 0000044C D008                   M           MOV.L   #_TMR_CNT_ADR_BIT_MAKE,R0               ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 3469 0000044E 400B                   M           JSR     @R0                     ;
 3470 00000450 0009                   M           NOP                                     ;
 3471                            1007     
 3472                            1008             DI_PUSH_SR_SH3  WK_REG1=R2,WK_REG2=R4                   ;
 3473 00000452 0202                   M           STC     SR,R2                   ;
 3474 00000454 940B                   M           MOV.W   #H'000000F0,R4          ;
 3475 00000456 224B                   M           OR      R4,R2           ;INT15
 3476 00000458 4F03                   M           STC.L   SR,@-R15                        ;PUSH SR
 3477 0000045A 420E                   M           LDC     R2,SR                   ;割込禁止（15）
 3478 0000045C 6007              1009             NOT     R0,R0                                           ;
 3479 0000045E 6310              1010             MOV.B   @R1,R3                                          ;
 3480 00000460 2309              1011             AND     R0,R3                                           ; BIT--CLR
 3481 00000462 2130              1012             MOV.B   R3,@R1                                          ;
 3482                            1013             EI_POP_SR_SH3                                           ;
 3483 00000464 4F07                   M           LDC.L   @R15+,SR                        ;POP SR
 3484                            1014     
 3485                            1015     ;       ------ IDEL ------
 3486 00000466                   1016     WCTR_S98                                                        ; Mreg(ｽﾀｰﾄ指令OFF)
 3487 00000466 255A              1017             XOR     A_REG,A_REG
 3488                            1018     
 3489 00000468                   1019     WCTR_SEND:
 3490                            1020             SUB_END
 3491                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 3492 00000468 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 3493                            1021             M_RTS
 3494 0000046A 000B                   M           RTS                             ;RTSの後ろの
 3495 0000046C 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 3496                            1022     
 3497                            1023     ;       ***************************************************
 3498                            1024     ;       ***                                             ***
 3499                            1025     ;       ***     ﾀｲﾏ,ｶｳﾝﾀ番号からのｱﾄﾞﾚｽ,ﾋﾞｯﾄ作成        ***
 3500                            1026     ;       ***                                             ***
 3501                            1027     ;       ***************************************************
 3502                            1028     ;       MOV.L   @(TM_KND_T_TOP-_SEQ_DATA_TBL1,DTBL_REG),R0      ;
 3503                            1029     ;       MOV.L   @R0,R1                                          ; R1=_SEQ_CARD_RAM+_MKIND_
                                          T_ADR
 3504                            1030     ;       MOV     R9,R2                                           ; ﾀｲﾏ番号PUSH
 3505                            1031     ;       Input R1(TOP_ADR),R2(ﾀｲﾏ番号)
 3506                            1032     ;       ANS R1:byte adr
 3507                            1033     ;       ANS R0:bit0~7
 3508                            1034     ;
 3509                            1035     ;       USED R0,R1,R2,R4
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE    25
PROGRAM NAME =

 3510                            1036     ;
 3511                                     ***** BEGIN-POOL *****
 3512 0000046E 00F0                       DATA FOR SOURCE-LINE 1008
 3513 00000470 00000000                   DATA FOR SOURCE-LINE 1006
 3514                                     ***** END-POOL *****
 3515 00000474                   1037     _TMR_CNT_ADR_BIT_MAKE
 3516                            1038             SUB_START
 3517 00000474 4F22                   M           STS.L   PR,@-R15                ;[必要]
 3518                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 3519                            1039     
 3520 00000476 6023              1040             MOV     R2_REG,R0                                       ;
 3521                            1041     
 3522                            1042     ;       ---- R0 NO.-->BIT0~7変換----
 3523 00000478 C90F              1043             AND     #(BIT3+BIT2+BIT1+BIT0),R0                       ; ADD 100112 AKIBA
 3524 0000047A D405              1044             MOV.L   #_BIT_DATA_TBL2,R4                              ;
 3525 0000047C 4008              1045             SHLL2   R0                                              ;
 3526 0000047E 340C              1046             ADD     R0,R4                                           ;
 3527 00000480 6042              1047             MOV.L   @R4,R0_REG                                      ; (R0=BIT0~BIT7)
 3528                            1048     
 3529 00000482 D404              1049             MOV.L   #H'00FF,R4                                      ; ADD 100112 AKIBA
 3530 00000484 3403              1050             CMP/GE  R0,R4                                           ; BIT DATAﾁｪｯｸ IF OVER THE
                                          N ERR R4 >= R0
 3531 00000486 8907              1051             BT      _TMR_CNT_ADR_BIT_L                              ; R4>=R0 JUMP
 3532 00000488 4019              1052             SHLR8   R0                                              ;
 3533                            1053             M_BRA   _TMR_CNT_ADR_BIT_H                              ;
 3534 0000048A A007                   M           BRA     _TMR_CNT_ADR_BIT_H
 3535 0000048C 0009                   M           NOP
 3536                            1054     
 3537                                     ***** BEGIN-POOL *****
 3538 0000048E 0000                       ALIGNMENT CODE
 3539 00000490 00000000                   DATA FOR SOURCE-LINE 1044
 3540 00000494 000000FF                   DATA FOR SOURCE-LINE 1049
 3541                                     ***** END-POOL *****
 3542 00000498                   1055     _TMR_CNT_ADR_BIT_L
 3543 00000498 D404              1056             MOV.L   #H'0001,R4                                      ;
 3544 0000049A 314C              1057             ADD     R4,R1                                           ; MEM ADR L + 1
 3545                            1058     
 3546 0000049C                   1059     _TMR_CNT_ADR_BIT_H
 3547 0000049C 4209              1060             SHLR2   R2                                              ; ﾀｲﾏ番号/8
 3548 0000049E 4209              1061             SHLR2   R2                                              ; ﾀｲﾏ番号/16 X(R2)...Y(R0)
 3549 000004A0 4200              1062             SHLL    R2                                              ; ﾀｲﾏ番号/8 X(R2)...Y(R0)
                                          ADD 100112 AKIBA
 3550 000004A2 312C              1063             ADD     R2,R1_REG                                       ; TOP+ adr
 3551                            1064     
 3552                            1065             SUB_END
 3553                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 3554 000004A4 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 3555                            1066             M_RTS
 3556 000004A6 000B                   M           RTS                             ;RTSの後ろの
 3557 000004A8 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 3558                            1067     
 3559                            1068     ;********************************************************************
 3560                            1069     ;* シーケンス応用命令
 3561                            1070     ;* データ命令
 3562                            1071     ;********************************************************************
 3563                            1072     ;         ------------------------------
 3564                            1073     ;       +0|       命令CODE      (  )   |
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE    26
PROGRAM NAME =

 3565                            1074     ;         ------------------------------
 3566                            1075     ;       +1|         空き        (  )   |
 3567                            1076     ;         ------------------------------
 3568                            1077     ;       +2|       ﾃﾞｰﾀ上位LH    (  )   |
 3569                            1078     ;         ------------------------------
 3570                            1079     ;       +3|       ﾃﾞｰﾀ下位LL    (  )   |
 3571                            1080     ;         ------------------------------
 3572                            1081     
 3573                            1082     ;         ------------------------------
 3574                            1083     ;       +0|       命令CODE      (  )   |
 3575                            1084     ;         ------------------------------
 3576                            1085     ;       +1|         空き        (  )   |
 3577                            1086     ;         ------------------------------
 3578                            1087     ;       +2|         空き        (  )   |
 3579                            1088     ;         ------------------------------
 3580                            1089     ;       +3|         空き        (  )   |
 3581                            1090     ;         ------------------------------
 3582                            1091     ;       +4|       ﾃﾞｰﾀHH        (  )   |
 3583                            1092     ;         ------------------------------
 3584                            1093     ;       +5|       ﾃﾞｰﾀHL        (  )   |
 3585                            1094     ;         ------------------------------
 3586                            1095     ;       +6|       ﾃﾞｰﾀLH        (  )   |
 3587                            1096     ;         ------------------------------
 3588                            1097     ;       +7|       ﾃﾞｰﾀLL        (  )   |
 3589                            1098     ;         ------------------------------
 3590                            1099     ;
 3591                            1100     ;         ------------------------------
 3592                            1101     ;       +0|       命令CODE      (  )   |
 3593                            1102     ;         ------------------------------
 3594                            1103     ;       +1|      ﾒﾓﾘ種別        (  )   |
 3595                            1104     ;         ------------------------------
 3596                            1105     ;       +2|       ｱﾄﾞﾚｽ上位     (  )   |
 3597                            1106     ;         ------------------------------
 3598                            1107     ;       +3|       ｱﾄﾞﾚｽ下位     (  )   |
 3599                            1108     ;         ------------------------------
 3600                            1109     ;
 3601                            1110     ;       *********************************************************************
 3602                            1111     ;       *****   Data Set command                        8*2             *****
 3603                            1112     ;       *********************************************************************
 3604                                     ***** BEGIN-POOL *****
 3605 000004AA 0000                       ALIGNMENT CODE
 3606 000004AC 00000001                   DATA FOR SOURCE-LINE 1056
 3607                                     ***** END-POOL *****
 3608 000004B0                   1113             .ALIGN  4
 3609 000004B0                   1114     _DSETWI_CODE:
 3610 000004B0 2558              1115             TST     A_REG,A_REG                                     ; 変更 091105AKIBA
 3611                            1116             TST_BIT_OF _DSETWI_CODE_END                             ; Areg=OFF
 3612 000004B2 8905                   M           BT      _DSETWI_CODE_END
 3613                            1117     
 3614                            1118             IMD_MAKE1_WORD LBEL1=DSETWI_DT_LH,LBEL2=DSETWI_DT_LL    ; ANS.R2
 3615 000004B4 E1FF                   M   DSETWI_DT_LH:           MOV.B   #CHG_LHDATA,R1                  ; H_BYTE
 3616 000004B6 E2FF                   M   DSETWI_DT_LL:           MOV.B   #CHG_LLDATA,R2                  ; L_BYTE
 3617 000004B8 4118                   M                   SHLL8   R1                              ; 符号をそのまま
 3618 000004BA 622C                   M                   EXTU.B  R2,R2                           ;
 3619 000004BC 221B                   M                   OR      R1,R2                           ; data
 3620 000004BE 6823              1119             MOV     R2,D_REG
 3621 000004C0                   1120     _DSETWI_CODE_END:
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE    27
PROGRAM NAME =

 3622                            1121     
 3623                            1122     ;       *********************************************************************
 3624                            1123     ;       *****   Data Set command                        9*2             *****
 3625                            1124     ;       *********************************************************************
 3626 000004C0                   1125             .ALIGN  4
 3627 000004C0                   1126     _DSETLI_CODE:
 3628 000004C0 2558              1127             TST     A_REG,A_REG                                     ; 変更 091105AKIBA
 3629                            1128             TST_BIT_OF _DSETLI_CODE_END                             ; Areg=OFF ADD 100114 AKIB
                                          A
 3630 000004C2 8906                   M           BT      _DSETLI_CODE_END
 3631                            1129     
 3632 000004C4 E3FF              1130     DSETLI_DT_HH:   MOV.B   #CHG_HHDATA,R3                          ; HH_BYTE
 3633 000004C6 E4FF              1131     DSETLI_DT_HL:   MOV.B   #CHG_HLDATA,R4                          ; HL_BYTE
 3634 000004C8 E1FF              1132     DSETLI_DT_LH:   MOV.B   #CHG_LHDATA,R1                          ; LH_BYTE
 3635 000004CA E2FF              1133     DSETLI_DT_LL:   MOV.B   #CHG_LLDATA,R2                          ; LL_BYTE
 3636                            1134     
 3637 000004CC 50B0              1135             MOV.L   @(DSETLI_CALL-_SEQ_CALL_TBL1,CTBL_REG),R0       ;
 3638 000004CE 400B              1136             JSR     @R0                                             ;
 3639 000004D0 0009              1137             NOP                                                     ;
 3640 000004D2                   1138     _DSETLI_CODE_END:
 3641                            1139     
 3642                            1140     ;       ------------------------------------
 3643                            1141     ;       ----    DSETLI ｻﾌﾞﾙｰﾁﾝ          ----
 3644                            1142     ;       ------------------------------------
 3645                            1143     ;       ----------- Input　R3,R4,R1,R2:4byte　data　----------
 3646 000004D4                   1144             .ALIGN  4
 3647 000004D4                   1145     _DSETLI_SUB:
 3648                            1146             SUB_START
 3649 000004D4 4F22                   M           STS.L   PR,@-R15                ;[必要]
 3650                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 3651                            1147     
 3652 000004D6 633C              1148             EXTU.B  R3,R3                                           ; 000x
 3653 000004D8 4318              1149             SHLL8   R3                                              ; 00x0
 3654 000004DA 6339              1150             SWAP.W  R3,R3                                           ; x000 HHﾃﾞｰﾀ抽出
 3655                            1151                                                                     ; 16bitｼﾌﾄ+下位WORD0ｸﾘｱ
 3656 000004DC 644C              1152             EXTU.B  R4,R4                                           ; 000x
 3657 000004DE 6449              1153             SWAP.W  R4,R4                                           ; 0x00 HLﾃﾞｰﾀ抽出
 3658                            1154     
 3659 000004E0 611C              1155             EXTU.B  R1,R1                                           ; 000x
 3660 000004E2 4118              1156             SHLL8   R1                                              ; 00x0 LHﾃﾞｰﾀ抽出
 3661                            1157     
 3662 000004E4 622C              1158             EXTU.B  R2,R2                                           ; 000x          LLﾃﾞｰﾀ抽出
 3663 000004E6 223B              1159             OR      R3,R2                                           ; HH,0,0,LL     HHﾃﾞｰﾀ格納
 3664 000004E8 224B              1160             OR      R4,R2                                           ; HH,HL,0,LL    HLﾃﾞｰﾀ格納
 3665 000004EA 221B              1161             OR      R1,R2                                           ; HH,HL,LH,LL   LLﾃﾞｰﾀ格納
 3666                            1162     
 3667 000004EC 6823              1163             MOV.L   R2,D_REG                                        ; ----4byteALIGN-----
 3668                            1164     
 3669                            1165             SUB_END
 3670                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 3671 000004EE 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 3672                            1166             M_RTS
 3673 000004F0 000B                   M           RTS                             ;RTSの後ろの
 3674 000004F2 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 3675                            1167     
 3676                            1168     ;       *********************************************************************
 3677                            1169     ;       *****   LDW command                             8*2             *****
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE    28
PROGRAM NAME =

 3678                            1170     ;       *********************************************************************
 3679 000004F4                   1171             .ALIGN  4
 3680 000004F4                   1172     _LDW_CODE:
 3681 000004F4 2558              1173             TST     A_REG,A_REG                                     ; 変更 091105AKIBA
 3682                            1174             TST_BIT_OF _LDW_CODE_END                                ;
 3683 000004F6 8905                   M           BT      _LDW_CODE_END
 3684                            1175     
 3685                            1176             ADR_MAKE1_WORD LBEL1=LDW_ADR,LBEL2=LDW_OFS              ; R0=WORDｱﾄﾞﾚｽ
 3686                                 M                   ADR_MAKE1_BIT LDW_ADR,LDW_OFS
 3687 000004F8 E17F                   M   LDW_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 3688 000004FA E0FF                   M   LDW_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 3689 000004FC 4118                   M                   SHLL8   R1
 3690 000004FE 600C                   M                   EXTU.B  R0,R0                           ;
 3691 00000500 201B                   M                   OR      R1,R0                           ; adress
 3692 00000502 08ED              1177             MOV.W   @(R0,TOP_REG),D_REG                             ;
 3693                            1178     
 3694 00000504                   1179     _LDW_CODE_END:
 3695                            1180     
 3696                            1181     ;       *********************************************************************
 3697                            1182     ;       *****   LDL command                             8*2             *****
 3698                            1183     ;       *********************************************************************
 3699 00000504                   1184             .ALIGN  4
 3700 00000504                   1185     _LDL_CODE:
 3701 00000504 2558              1186             TST     A_REG,A_REG                                     ; 変更 091105AKIBA
 3702                            1187             TST_BIT_OF _LDL_CODE_END                                ;
 3703 00000506 8905                   M           BT      _LDL_CODE_END
 3704                            1188     
 3705                            1189             ADR_MAKE1_WORD LBEL1=LDL_ADR,LBEL2=LDL_OFS              ; R0=4byte　ALIGNｱﾄﾞﾚｽ
 3706                                 M                   ADR_MAKE1_BIT LDL_ADR,LDL_OFS
 3707 00000508 E17F                   M   LDL_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 3708 0000050A E0FF                   M   LDL_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 3709 0000050C 4118                   M                   SHLL8   R1
 3710 0000050E 600C                   M                   EXTU.B  R0,R0                           ;
 3711 00000510 201B                   M                   OR      R1,R0                           ; adress
 3712                            1190     
 3713 00000512 08EE              1191             MOV.L   @(R0,TOP_REG),D_REG                             ; ----4byteALIGN-----
 3714                            1192     
 3715 00000514                   1193     _LDL_CODE_END:
 3716                            1194     
 3717                            1195     ;       *********************************************************************
 3718                            1196     ;       *****   STW command                             8*2             *****
 3719                            1197     ;       *********************************************************************
 3720 00000514                   1198             .ALIGN  4
 3721 00000514                   1199     _STW_CODE:
 3722 00000514 2558              1200             TST     A_REG,A_REG                                     ; 変更 091105AKIBA
 3723                            1201             TST_BIT_OF _STW_CODE_END                                ;
 3724 00000516 8905                   M           BT      _STW_CODE_END
 3725                            1202     
 3726                            1203             ADR_MAKE1_WORD LBEL1=STW_ADR,LBEL2=STW_OFS              ; R0=WORDｱﾄﾞﾚｽ
 3727                                 M                   ADR_MAKE1_BIT STW_ADR,STW_OFS
 3728 00000518 E17F                   M   STW_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 3729 0000051A E0FF                   M   STW_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE    29
PROGRAM NAME =

                                          E
 3730 0000051C 4118                   M                   SHLL8   R1
 3731 0000051E 600C                   M                   EXTU.B  R0,R0                           ;
 3732 00000520 201B                   M                   OR      R1,R0                           ; adress
 3733 00000522 0E85              1204             MOV.W   D_REG,@(R0,TOP_REG)                             ;
 3734 00000524                   1205     _STW_CODE_END:
 3735                            1206     
 3736                            1207     ;       *********************************************************************
 3737                            1208     ;       *****   STL command                             8*2             *****
 3738                            1209     ;       *********************************************************************
 3739 00000524                   1210             .ALIGN  4
 3740 00000524                   1211     _STL_CODE:
 3741 00000524 2558              1212             TST     A_REG,A_REG                                     ; 変更 091105AKIBA
 3742                            1213             TST_BIT_OF _STL_CODE_END                                ; 誤記修正 091105AKIBA
 3743 00000526 8905                   M           BT      _STL_CODE_END
 3744                            1214     
 3745                            1215             ADR_MAKE1_WORD LBEL1=STL_ADR,LBEL2=STL_OFS              ; R0=WORDｱﾄﾞﾚｽ
 3746                                 M                   ADR_MAKE1_BIT STL_ADR,STL_OFS
 3747 00000528 E17F                   M   STL_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 3748 0000052A E0FF                   M   STL_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 3749 0000052C 4118                   M                   SHLL8   R1
 3750 0000052E 600C                   M                   EXTU.B  R0,R0                           ;
 3751 00000530 201B                   M                   OR      R1,R0                           ; adress
 3752 00000532 0E86              1216             MOV.L   D_REG,@(R0,TOP_REG)                             ; ----4byteALIGN-----
 3753 00000534                   1217     _STL_CODE_END:
 3754                            1218     
 3755                            1219     
 3756                            1220     ;********************************************************************
 3757                            1221     ;* シーケンス応用命令
 3758                            1222     ;* データ演算命令
 3759                            1223     ;********************************************************************
 3760                            1224     
 3761                            1225     ;       *******************************************************************
 3762                            1226     ;       ***                                                             ***
 3763                            1227     ;       ***                                                             ***
 3764                            1228     ;       ***             CMP/GT,GE,EQ  Dreg,(MEMword,MEMlong,IMIword )   ***
 3765                            1229     ;       ***                                                             ***
 3766                            1230     ;       ***             [MEM11,IMI10]                                   ***
 3767                            1231     ;       *******************************************************************
 3768                            1232     ;       --------- メモリ------
 3769                            1233             .MACRO  CMPCMD_MEM1 EXIT,LBEL1,LBEL2,LG,CMPCMD,OP1,OP2
 3770                            1234                     TST     A_REG,A_REG                             ;
 3771                            1235                     TST_BIT_OF \EXIT                                ; Areg=0 jump(比較しないと
                                          きはAreg=0を返す)
 3772                            1236     
 3773                            1237                     ADR_MAKE1_WORD LBEL1=\LBEL1,LBEL2=\LBEL2        ; R0=WORDｱﾄﾞﾚｽ
 3774                            1238                     MOV.\LG @(R0,TOP_REG),R2                        ; [[W/L]]
 3775                            1239                     CMP/\CMPCMD     \OP1,\OP2                       ; R2 < D_REG THEN T=1
 3776                            1240                     MOVT    A_REG                                   ; Areg<= T
 3777                            1241             .ENDM
 3778                            1242     
 3779                            1243     ;       --------- 直接数値----
 3780                            1244             .MACRO  CMPCMD_IMI1 EXIT,LBEL1,LBEL2,LG,CMPCMD,OP1,OP2
 3781                            1245                     TST     A_REG,A_REG                             ;
 3782                            1246                     TST_BIT_OF \EXIT                                ; Areg=0 jump(比較しないと
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE    30
PROGRAM NAME =

                                          きはAreg=0を返す)
 3783                            1247     
 3784                            1248                     IMD_MAKE1_WORD LBEL1=\LBEL1,LBEL2=\LBEL2        ; R2
 3785                            1249                     CMP/\CMPCMD     \OP1,\OP2                       ; R2 < D_REG THEN T=1
 3786                            1250                     MOVT    A_REG                                   ; Areg<= T
 3787                            1251             .ENDM
 3788                            1252     
 3789                            1253     ;       *******************************************************************
 3790                            1254     ;       ***                                                             ***
 3791                            1255     ;       ***                                                             ***
 3792                            1256     ;       ***             NE  Dreg,(MEMword,MEMlong,IMIword )             ***
 3793                            1257     ;       ***             (SHの持つ命令の論理が反対)                      ***
 3794                            1258     ;       ***             [MEM13,IMI12]                                   ***
 3795                            1259     ;       *******************************************************************
 3796                            1260     ;       --------- メモリ------
 3797                            1261             .MACRO  CMPCMD_MEM2 EXIT,LBEL1,LBEL2,LG,CMPCMD,OP1,OP2
 3798                            1262                     TST     A_REG,A_REG                             ;
 3799                            1263                     TST_BIT_OF \EXIT                                ; Areg=0 jump(比較しないと
                                          きはAreg=0を返す)
 3800                            1264     
 3801                            1265                     ADR_MAKE1_WORD LBEL1=\LBEL1,LBEL2=\LBEL2        ; R0=WORDｱﾄﾞﾚｽ
 3802                            1266                     MOV.\LG @(R0,TOP_REG),R2                        ; [[W/L]]
 3803                            1267                     CMP/\CMPCMD     \OP1,\OP2                       ; R2 < D_REG THEN T=1
 3804                            1268                     MOVT    R0                                      ;
 3805                            1269                     XOR     #BIT0,R0
 3806                            1270                     MOV     R0,A_REG                                ; Areg<= T
 3807                            1271             .ENDM
 3808                            1272     
 3809                            1273     ;       --------- 直接数値----
 3810                            1274             .MACRO  CMPCMD_IMI2 EXIT,LBEL1,LBEL2,LG,CMPCMD,OP1,OP2
 3811                            1275                     TST     A_REG,A_REG                             ;
 3812                            1276                     TST_BIT_OF \EXIT                                ; Areg=0 jump(比較しないと
                                          きはAreg=0を返す)
 3813                            1277     
 3814                            1278                     IMD_MAKE1_WORD LBEL1=\LBEL1,LBEL2=\LBEL2        ; R2
 3815                            1279                     CMP/\CMPCMD     \OP1,\OP2                       ; R2 < D_REG THEN T=1
 3816                            1280                     MOVT    R0                                      ;
 3817                            1281                     XOR     #BIT0,R0
 3818                            1282                     MOV     R0,A_REG                                ; Areg<= T
 3819                            1283             .ENDM
 3820                            1284     
 3821                            1285     ;       *******************************************************************
 3822                            1286     ;       ***                                                             ***
 3823                            1287     ;       ***                                                             ***
 3824                            1288     ;       ***     ADD,SUB,ANDL,ORL,XORL  (MEMword,MEMlong,IMIword ),Dreg  ***
 3825                            1289     ;       ***                                                             ***
 3826                            1290     ;       ***             [MEM9,IMI8]                                     ***
 3827                            1291     ;       *******************************************************************
 3828                            1292     ;       --------- メモリ------
 3829                            1293             .MACRO  CALCMD_MEM1 EXIT,LBEL1,LBEL2,LG,CALCMD
 3830                            1294                     TST     A_REG,A_REG                             ; 変更 091105AKIBA
 3831                            1295                     TST_BIT_OF \EXIT                                ; Areg=0 jump(比較しないと
                                          きはAreg=0を返す)
 3832                            1296     
 3833                            1297                     ADR_MAKE1_WORD LBEL1=\LBEL1,LBEL2=\LBEL2        ; R0=WORDｱﾄﾞﾚｽ
 3834                            1298                     MOV.\LG @(R0,TOP_REG),R2                        ; [[W/L]]
 3835                            1299                     \CALCMD R2,D_REG                                ; D_REG-R2=D_REG
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE    31
PROGRAM NAME =

 3836                            1300             .ENDM
 3837                            1301     
 3838                            1302     ;       --------- 直接数値----
 3839                            1303             .MACRO  CALCMD_IMI1 EXIT,LBEL1,LBEL2,LG,CALCMD
 3840                            1304                     TST     A_REG,A_REG                             ; 変更 091105AKIBA
 3841                            1305                     TST_BIT_OF \EXIT                                ; Areg=0 jump(比較しないと
                                          きはAreg=0を返す)
 3842                            1306     
 3843                            1307                     IMD_MAKE1_WORD LBEL1=\LBEL1,LBEL2=\LBEL2        ; R2
 3844                            1308                     \CALCMD R2,D_REG                                ; D_REG-R2=D_REG
 3845                            1309             .ENDM
 3846                            1310     
 3847                            1311     ;       *******************************************************************
 3848                            1312     ;       ***                                                             ***
 3849                            1313     ;       ***                                                             ***
 3850                            1314     ;       ***     AND,XOR,ORのWORD  (MEMword,MEMlong,IMIword ),Dreg       ***
 3851                            1315     ;       ***                                                             ***
 3852                            1316     ;       ***             [MEM10,IMI9]                                    ***
 3853                            1317     ;       *******************************************************************
 3854                            1318     ;       --------- メモリ------
 3855                            1319             .MACRO  CALCMD_MEM1_U EXIT,LBEL1,LBEL2,LG,CALCMD
 3856                            1320                     TST     A_REG,A_REG                             ; 変更 091105AKIBA
 3857                            1321                     TST_BIT_OF \EXIT                                ; Areg=0 jump(比較しないと
                                          きはAreg=0を返す)
 3858                            1322     
 3859                            1323                     ADR_MAKE1_WORD LBEL1=\LBEL1,LBEL2=\LBEL2        ; R0=WORDｱﾄﾞﾚｽ
 3860                            1324                     MOV.\LG @(R0,TOP_REG),R2                        ; [[W/L]]
 3861                            1325                     EXTU.W  R2,R2
 3862                            1326                     \CALCMD R2,D_REG                                ; D_REG-R2=D_REG
 3863                            1327             .ENDM
 3864                            1328     
 3865                            1329     ;       --------- 直接数値----
 3866                            1330             .MACRO  CALCMD_IMI1_U EXIT,LBEL1,LBEL2,LG,CALCMD
 3867                            1331                     TST     A_REG,A_REG                             ; 変更 091105AKIBA
 3868                            1332                     TST_BIT_OF \EXIT                                ; Areg=0 jump(比較しないと
                                          きはAreg=0を返す)
 3869                            1333     
 3870                            1334                     IMD_MAKE1_WORD LBEL1=\LBEL1,LBEL2=\LBEL2        ; R2
 3871                            1335                     EXTU.W  R2,R2
 3872                            1336                     \CALCMD R2,D_REG                                ; D_REG-R2=D_REG
 3873                            1337             .ENDM
 3874                            1338     
 3875                            1339     ;       *******************************************************************
 3876                            1340     ;       ***                                                             ***
 3877                            1341     ;       ***                                                             ***
 3878                            1342     ;       ***             CMP/EQ Dreg,(MEMword,MEMlong,IMIword )          ***
 3879                            1343     ;       ***                                                             ***
 3880                            1344     ;       ***                                                             ***
 3881                            1345     ;       *******************************************************************
 3882                            1346     
 3883                            1347     ;       *********************************************************************
 3884                            1348     ;       *****   CMP EQW command                         10*2            *****
 3885                            1349     ;       *********************************************************************
 3886 00000534                   1350             .ALIGN  4
 3887 00000534                   1351     _EQW_CODE:
 3888                            1352             CMPCMD_MEM1 EXIT=_EQW_CODE_END,LBEL1=EQW_ADR,LBEL2=EQW_OFS,LG=W,CMPCMD=EQ,OP1=R2,O
                                          P2=D_REG
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE    32
PROGRAM NAME =

 3889 00000534 2558                   M                   TST     A_REG,A_REG                             ;
 3890                                 M                   TST_BIT_OF _EQW_CODE_END                                ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 3891 00000536 8907                   M           BT      _EQW_CODE_END
 3892                                 M   
 3893                                 M                   ADR_MAKE1_WORD LBEL1=EQW_ADR,LBEL2=EQW_OFS      ; R0=WORDｱﾄﾞﾚｽ
 3894                                 M                   ADR_MAKE1_BIT EQW_ADR,EQW_OFS
 3895 00000538 E17F                   M   EQW_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 3896 0000053A E0FF                   M   EQW_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 3897 0000053C 4118                   M                   SHLL8   R1
 3898 0000053E 600C                   M                   EXTU.B  R0,R0                           ;
 3899 00000540 201B                   M                   OR      R1,R0                           ; adress
 3900 00000542 02ED                   M                   MOV.W   @(R0,TOP_REG),R2                        ; [[W/L]]
 3901 00000544 3820                   M                   CMP/EQ  R2,D_REG                        ; R2 < D_REG THEN T=1
 3902 00000546 0529                   M                   MOVT    A_REG                                   ; Areg<= T
 3903 00000548                   1353     _EQW_CODE_END:
 3904                            1354     
 3905                            1355     ;       *********************************************************************
 3906                            1356     ;       *****   CMP EQL command                         10*2            *****
 3907                            1357     ;       *********************************************************************
 3908 00000548                   1358             .ALIGN  4
 3909 00000548                   1359     _EQL_CODE:
 3910                            1360             CMPCMD_MEM1 EXIT=_EQL_CODE_END,LBEL1=EQL_ADR,LBEL2=EQL_OFS,LG=L,CMPCMD=EQ,OP1=R2,O
                                          P2=D_REG
 3911 00000548 2558                   M                   TST     A_REG,A_REG                             ;
 3912                                 M                   TST_BIT_OF _EQL_CODE_END                                ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 3913 0000054A 8907                   M           BT      _EQL_CODE_END
 3914                                 M   
 3915                                 M                   ADR_MAKE1_WORD LBEL1=EQL_ADR,LBEL2=EQL_OFS      ; R0=WORDｱﾄﾞﾚｽ
 3916                                 M                   ADR_MAKE1_BIT EQL_ADR,EQL_OFS
 3917 0000054C E17F                   M   EQL_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 3918 0000054E E0FF                   M   EQL_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 3919 00000550 4118                   M                   SHLL8   R1
 3920 00000552 600C                   M                   EXTU.B  R0,R0                           ;
 3921 00000554 201B                   M                   OR      R1,R0                           ; adress
 3922 00000556 02EE                   M                   MOV.L   @(R0,TOP_REG),R2                        ; [[W/L]]
 3923 00000558 3820                   M                   CMP/EQ  R2,D_REG                        ; R2 < D_REG THEN T=1
 3924 0000055A 0529                   M                   MOVT    A_REG                                   ; Areg<= T
 3925 0000055C                   1361     _EQL_CODE_END:
 3926                            1362     
 3927                            1363     ;       *********************************************************************
 3928                            1364     ;       *****   CMP EQI command                         9*2             *****
 3929                            1365     ;       *********************************************************************
 3930 0000055C                   1366             .ALIGN  4
 3931 0000055C                   1367     _EQWI_CODE:
 3932                            1368             CMPCMD_IMI1 EXIT=_EQWI_CODE_END,LBEL1=EQWI_DT_LH,LBEL2=EQWI_DT_LL,LG=NOUSE,CMPCMD=
                                          EQ,OP1=R2,OP2=D_REG
 3933 0000055C 2558                   M                   TST     A_REG,A_REG                             ;
 3934                                 M                   TST_BIT_OF _EQWI_CODE_END                               ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 3935 0000055E 8906                   M           BT      _EQWI_CODE_END
 3936                                 M   
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE    33
PROGRAM NAME =

 3937                                 M                   IMD_MAKE1_WORD LBEL1=EQWI_DT_LH,LBEL2=EQWI_DT_LL        ; R2
 3938 00000560 E1FF                   M   EQWI_DT_LH:             MOV.B   #CHG_LHDATA,R1                  ; H_BYTE
 3939 00000562 E2FF                   M   EQWI_DT_LL:             MOV.B   #CHG_LLDATA,R2                  ; L_BYTE
 3940 00000564 4118                   M                   SHLL8   R1                              ; 符号をそのまま
 3941 00000566 622C                   M                   EXTU.B  R2,R2                           ;
 3942 00000568 221B                   M                   OR      R1,R2                           ; data
 3943 0000056A 3820                   M                   CMP/EQ  R2,D_REG                        ; R2 < D_REG THEN T=1
 3944 0000056C 0529                   M                   MOVT    A_REG                                   ; Areg<= T
 3945                            1369     
 3946 0000056E                   1370     _EQWI_CODE_END:
 3947                            1371     
 3948                            1372     ;       *******************************************************************
 3949                            1373     ;       ***                                                             ***
 3950                            1374     ;       ***                                                             ***
 3951                            1375     ;       ***             CMP/EQの反転 Dreg,(MEMword,MEMlong,IMIword )    ***
 3952                            1376     ;       ***                                                             ***
 3953                            1377     ;       ***                                                             ***
 3954                            1378     ;       *******************************************************************
 3955                            1379     ;       *********************************************************************
 3956                            1380     ;       *****   CMP NEW command                         12*2            *****
 3957                            1381     ;       *********************************************************************
 3958 00000570                   1382             .ALIGN  4
 3959 00000570                   1383     _NEW_CODE:
 3960                            1384             CMPCMD_MEM2 EXIT=_NEW_CODE_END,LBEL1=NEW_ADR,LBEL2=NEW_OFS,LG=W,CMPCMD=EQ,OP1=R2,O
                                          P2=D_REG
 3961 00000570 2558                   M                   TST     A_REG,A_REG                             ;
 3962                                 M                   TST_BIT_OF _NEW_CODE_END                                ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 3963 00000572 8909                   M           BT      _NEW_CODE_END
 3964                                 M   
 3965                                 M                   ADR_MAKE1_WORD LBEL1=NEW_ADR,LBEL2=NEW_OFS      ; R0=WORDｱﾄﾞﾚｽ
 3966                                 M                   ADR_MAKE1_BIT NEW_ADR,NEW_OFS
 3967 00000574 E17F                   M   NEW_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 3968 00000576 E0FF                   M   NEW_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 3969 00000578 4118                   M                   SHLL8   R1
 3970 0000057A 600C                   M                   EXTU.B  R0,R0                           ;
 3971 0000057C 201B                   M                   OR      R1,R0                           ; adress
 3972 0000057E 02ED                   M                   MOV.W   @(R0,TOP_REG),R2                        ; [[W/L]]
 3973 00000580 3820                   M                   CMP/EQ  R2,D_REG                        ; R2 < D_REG THEN T=1
 3974 00000582 0029                   M                   MOVT    R0                                      ;
 3975 00000584 CA01                   M                   XOR     #BIT0,R0
 3976 00000586 6503                   M                   MOV     R0,A_REG                                ; Areg<= T
 3977 00000588                   1385     _NEW_CODE_END:
 3978                            1386     
 3979                            1387     ;       *********************************************************************
 3980                            1388     ;       *****   CMP NEL command                         12*2            *****
 3981                            1389     ;       *********************************************************************
 3982 00000588                   1390             .ALIGN  4
 3983 00000588                   1391     _NEL_CODE:
 3984                            1392             CMPCMD_MEM2 EXIT=_NEL_CODE_END,LBEL1=NEL_ADR,LBEL2=NEL_OFS,LG=L,CMPCMD=EQ,OP1=R2,O
                                          P2=D_REG
 3985 00000588 2558                   M                   TST     A_REG,A_REG                             ;
 3986                                 M                   TST_BIT_OF _NEL_CODE_END                                ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 3987 0000058A 8909                   M           BT      _NEL_CODE_END
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE    34
PROGRAM NAME =

 3988                                 M   
 3989                                 M                   ADR_MAKE1_WORD LBEL1=NEL_ADR,LBEL2=NEL_OFS      ; R0=WORDｱﾄﾞﾚｽ
 3990                                 M                   ADR_MAKE1_BIT NEL_ADR,NEL_OFS
 3991 0000058C E17F                   M   NEL_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 3992 0000058E E0FF                   M   NEL_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 3993 00000590 4118                   M                   SHLL8   R1
 3994 00000592 600C                   M                   EXTU.B  R0,R0                           ;
 3995 00000594 201B                   M                   OR      R1,R0                           ; adress
 3996 00000596 02EE                   M                   MOV.L   @(R0,TOP_REG),R2                        ; [[W/L]]
 3997 00000598 3820                   M                   CMP/EQ  R2,D_REG                        ; R2 < D_REG THEN T=1
 3998 0000059A 0029                   M                   MOVT    R0                                      ;
 3999 0000059C CA01                   M                   XOR     #BIT0,R0
 4000 0000059E 6503                   M                   MOV     R0,A_REG                                ; Areg<= T
 4001 000005A0                   1393     _NEL_CODE_END:
 4002                            1394     
 4003                            1395     ;       *********************************************************************
 4004                            1396     ;       *****   CMP NEI command                         11*2            *****
 4005                            1397     ;       *********************************************************************
 4006 000005A0                   1398             .ALIGN  4
 4007 000005A0                   1399     _NEWI_CODE:
 4008                            1400             CMPCMD_IMI2 EXIT=_NEWI_CODE_END,LBEL1=NEWI_DT_LH,LBEL2=NEWI_DT_LL,LG=NOUSE,CMPCMD=
                                          EQ,OP1=R2,OP2=D_REG
 4009 000005A0 2558                   M                   TST     A_REG,A_REG                             ;
 4010                                 M                   TST_BIT_OF _NEWI_CODE_END                               ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4011 000005A2 8908                   M           BT      _NEWI_CODE_END
 4012                                 M   
 4013                                 M                   IMD_MAKE1_WORD LBEL1=NEWI_DT_LH,LBEL2=NEWI_DT_LL        ; R2
 4014 000005A4 E1FF                   M   NEWI_DT_LH:             MOV.B   #CHG_LHDATA,R1                  ; H_BYTE
 4015 000005A6 E2FF                   M   NEWI_DT_LL:             MOV.B   #CHG_LLDATA,R2                  ; L_BYTE
 4016 000005A8 4118                   M                   SHLL8   R1                              ; 符号をそのまま
 4017 000005AA 622C                   M                   EXTU.B  R2,R2                           ;
 4018 000005AC 221B                   M                   OR      R1,R2                           ; data
 4019 000005AE 3820                   M                   CMP/EQ  R2,D_REG                        ; R2 < D_REG THEN T=1
 4020 000005B0 0029                   M                   MOVT    R0                                      ;
 4021 000005B2 CA01                   M                   XOR     #BIT0,R0
 4022 000005B4 6503                   M                   MOV     R0,A_REG                                ; Areg<= T
 4023 000005B6                   1401     _NEWI_CODE_END:
 4024                            1402     
 4025                            1403     ;       *******************************************************************
 4026                            1404     ;       ***                                                             ***
 4027                            1405     ;       ***                                                             ***
 4028                            1406     ;       ***             CMP/GT  Dreg,(MEMword,MEMlong,IMIword )         ***
 4029                            1407     ;       ***                                                             ***
 4030                            1408     ;       ***                                                             ***
 4031                            1409     ;       *******************************************************************
 4032                            1410     ;       *********************************************************************
 4033                            1411     ;       *****   CMP GTW command                         10*2            *****
 4034                            1412     ;       *********************************************************************
 4035 000005B8                   1413             .ALIGN  4
 4036 000005B8                   1414     _GTW_CODE:
 4037                            1415             CMPCMD_MEM1 EXIT=_GTW_CODE_END,LBEL1=GTW_ADR,LBEL2=GTW_OFS,LG=W,CMPCMD=GT,OP1=R2,O
                                          P2=D_REG
 4038 000005B8 2558                   M                   TST     A_REG,A_REG                             ;
 4039                                 M                   TST_BIT_OF _GTW_CODE_END                                ; Areg=0 jump(比較
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE    35
PROGRAM NAME =

                                          しないときはAreg=0を返す)
 4040 000005BA 8907                   M           BT      _GTW_CODE_END
 4041                                 M   
 4042                                 M                   ADR_MAKE1_WORD LBEL1=GTW_ADR,LBEL2=GTW_OFS      ; R0=WORDｱﾄﾞﾚｽ
 4043                                 M                   ADR_MAKE1_BIT GTW_ADR,GTW_OFS
 4044 000005BC E17F                   M   GTW_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 4045 000005BE E0FF                   M   GTW_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 4046 000005C0 4118                   M                   SHLL8   R1
 4047 000005C2 600C                   M                   EXTU.B  R0,R0                           ;
 4048 000005C4 201B                   M                   OR      R1,R0                           ; adress
 4049 000005C6 02ED                   M                   MOV.W   @(R0,TOP_REG),R2                        ; [[W/L]]
 4050 000005C8 3827                   M                   CMP/GT  R2,D_REG                        ; R2 < D_REG THEN T=1
 4051 000005CA 0529                   M                   MOVT    A_REG                                   ; Areg<= T
 4052 000005CC                   1416     _GTW_CODE_END:
 4053                            1417     
 4054                            1418     ;;      ﾏｸﾛ展開の結果
 4055                            1419     ;;_GTW_CODE:
 4056                            1420     ;;      AND     N_REG,A_REG                                     ; ARG and NRG
 4057                            1421     ;;      TST     A_REG,A_REG                                     ;
 4058                            1422     ;;      TST_BIT_OF _GTW_CODE_END                                ; Areg=0 jump(比較しないと
                                          きはAreg=0を返す)
 4059                            1423     ;;
 4060                            1424     ;;      ADR_MAKE1_WORD LBEL1=GTW_ADR,LBEL2=GTW_OFS              ; R0=WORDｱﾄﾞﾚｽ
 4061                            1425     ;;      MOV.W   @(R0,TOP_REG),R2                                ; [[W]]
 4062                            1426     ;;      CMP/GT  R2,D_REG                                        ; R2 < D_REG THEN T=1
 4063                            1427     ;;      MOVT    A_REG                                           ; Areg<= T
 4064                            1428     ;;
 4065                            1429     ;;_GTW_CODE_END:
 4066                            1430     
 4067                            1431     ;       *********************************************************************
 4068                            1432     ;       *****   CMP GTL command                         10*2            *****
 4069                            1433     ;       *********************************************************************
 4070 000005CC                   1434             .ALIGN  4
 4071 000005CC                   1435     _GTL_CODE:
 4072                            1436             CMPCMD_MEM1 EXIT=_GTL_CODE_END,LBEL1=GTL_ADR,LBEL2=GTL_OFS,LG=L,CMPCMD=GT,OP1=R2,O
                                          P2=D_REG
 4073 000005CC 2558                   M                   TST     A_REG,A_REG                             ;
 4074                                 M                   TST_BIT_OF _GTL_CODE_END                                ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4075 000005CE 8907                   M           BT      _GTL_CODE_END
 4076                                 M   
 4077                                 M                   ADR_MAKE1_WORD LBEL1=GTL_ADR,LBEL2=GTL_OFS      ; R0=WORDｱﾄﾞﾚｽ
 4078                                 M                   ADR_MAKE1_BIT GTL_ADR,GTL_OFS
 4079 000005D0 E17F                   M   GTL_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 4080 000005D2 E0FF                   M   GTL_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 4081 000005D4 4118                   M                   SHLL8   R1
 4082 000005D6 600C                   M                   EXTU.B  R0,R0                           ;
 4083 000005D8 201B                   M                   OR      R1,R0                           ; adress
 4084 000005DA 02EE                   M                   MOV.L   @(R0,TOP_REG),R2                        ; [[W/L]]
 4085 000005DC 3827                   M                   CMP/GT  R2,D_REG                        ; R2 < D_REG THEN T=1
 4086 000005DE 0529                   M                   MOVT    A_REG                                   ; Areg<= T
 4087 000005E0                   1437     _GTL_CODE_END:
 4088                            1438     
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE    36
PROGRAM NAME =

 4089                            1439     ;       *********************************************************************
 4090                            1440     ;       *****   CMP GTWI command                        9*2             *****
 4091                            1441     ;       *********************************************************************
 4092 000005E0                   1442             .ALIGN  4
 4093 000005E0                   1443     _GTWI_CODE:
 4094                            1444             CMPCMD_IMI1 EXIT=_GTWI_CODE_END,LBEL1=GTWI_DT_LH,LBEL2=GTWI_DT_LL,LG=NOUSE,CMPCMD=
                                          GT,OP1=R2,OP2=D_REG
 4095 000005E0 2558                   M                   TST     A_REG,A_REG                             ;
 4096                                 M                   TST_BIT_OF _GTWI_CODE_END                               ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4097 000005E2 8906                   M           BT      _GTWI_CODE_END
 4098                                 M   
 4099                                 M                   IMD_MAKE1_WORD LBEL1=GTWI_DT_LH,LBEL2=GTWI_DT_LL        ; R2
 4100 000005E4 E1FF                   M   GTWI_DT_LH:             MOV.B   #CHG_LHDATA,R1                  ; H_BYTE
 4101 000005E6 E2FF                   M   GTWI_DT_LL:             MOV.B   #CHG_LLDATA,R2                  ; L_BYTE
 4102 000005E8 4118                   M                   SHLL8   R1                              ; 符号をそのまま
 4103 000005EA 622C                   M                   EXTU.B  R2,R2                           ;
 4104 000005EC 221B                   M                   OR      R1,R2                           ; data
 4105 000005EE 3827                   M                   CMP/GT  R2,D_REG                        ; R2 < D_REG THEN T=1
 4106 000005F0 0529                   M                   MOVT    A_REG                                   ; Areg<= T
 4107 000005F2                   1445     _GTWI_CODE_END:
 4108                            1446     
 4109                            1447     ;       *******************************************************************
 4110                            1448     ;       ***                                                             ***
 4111                            1449     ;       ***                                                             ***
 4112                            1450     ;       ***             CMP/GE  Dreg,(MEMword,MEMlong,IMIword )         ***
 4113                            1451     ;       ***                                                             ***
 4114                            1452     ;       ***                                                             ***
 4115                            1453     ;       *******************************************************************
 4116                            1454     ;       *********************************************************************
 4117                            1455     ;       *****   CMP GEW command                         10*2            *****
 4118                            1456     ;       *********************************************************************
 4119 000005F4                   1457             .ALIGN  4
 4120 000005F4                   1458     _GEW_CODE:
 4121                            1459             CMPCMD_MEM1 EXIT=_GEW_CODE_END,LBEL1=GEW_ADR,LBEL2=GEW_OFS,LG=W,CMPCMD=GE,OP1=R2,O
                                          P2=D_REG
 4122 000005F4 2558                   M                   TST     A_REG,A_REG                             ;
 4123                                 M                   TST_BIT_OF _GEW_CODE_END                                ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4124 000005F6 8907                   M           BT      _GEW_CODE_END
 4125                                 M   
 4126                                 M                   ADR_MAKE1_WORD LBEL1=GEW_ADR,LBEL2=GEW_OFS      ; R0=WORDｱﾄﾞﾚｽ
 4127                                 M                   ADR_MAKE1_BIT GEW_ADR,GEW_OFS
 4128 000005F8 E17F                   M   GEW_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 4129 000005FA E0FF                   M   GEW_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 4130 000005FC 4118                   M                   SHLL8   R1
 4131 000005FE 600C                   M                   EXTU.B  R0,R0                           ;
 4132 00000600 201B                   M                   OR      R1,R0                           ; adress
 4133 00000602 02ED                   M                   MOV.W   @(R0,TOP_REG),R2                        ; [[W/L]]
 4134 00000604 3823                   M                   CMP/GE  R2,D_REG                        ; R2 < D_REG THEN T=1
 4135 00000606 0529                   M                   MOVT    A_REG                                   ; Areg<= T
 4136 00000608                   1460     _GEW_CODE_END:
 4137                            1461     
 4138                            1462     ;       *********************************************************************
 4139                            1463     ;       *****   CMP GEL command                         10*2            *****
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE    37
PROGRAM NAME =

 4140                            1464     ;       *********************************************************************
 4141 00000608                   1465             .ALIGN  4
 4142 00000608                   1466     _GEL_CODE:
 4143                            1467             CMPCMD_MEM1 EXIT=_GEL_CODE_END,LBEL1=GEL_ADR,LBEL2=GEL_OFS,LG=L,CMPCMD=GE,OP1=R2,O
                                          P2=D_REG
 4144 00000608 2558                   M                   TST     A_REG,A_REG                             ;
 4145                                 M                   TST_BIT_OF _GEL_CODE_END                                ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4146 0000060A 8907                   M           BT      _GEL_CODE_END
 4147                                 M   
 4148                                 M                   ADR_MAKE1_WORD LBEL1=GEL_ADR,LBEL2=GEL_OFS      ; R0=WORDｱﾄﾞﾚｽ
 4149                                 M                   ADR_MAKE1_BIT GEL_ADR,GEL_OFS
 4150 0000060C E17F                   M   GEL_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 4151 0000060E E0FF                   M   GEL_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 4152 00000610 4118                   M                   SHLL8   R1
 4153 00000612 600C                   M                   EXTU.B  R0,R0                           ;
 4154 00000614 201B                   M                   OR      R1,R0                           ; adress
 4155 00000616 02EE                   M                   MOV.L   @(R0,TOP_REG),R2                        ; [[W/L]]
 4156 00000618 3823                   M                   CMP/GE  R2,D_REG                        ; R2 < D_REG THEN T=1
 4157 0000061A 0529                   M                   MOVT    A_REG                                   ; Areg<= T
 4158 0000061C                   1468     _GEL_CODE_END:
 4159                            1469     
 4160                            1470     ;       *********************************************************************
 4161                            1471     ;       *****   CMP GEWI command                        9*2             *****
 4162                            1472     ;       *********************************************************************
 4163 0000061C                   1473             .ALIGN  4
 4164 0000061C                   1474     _GEWI_CODE:
 4165                            1475             CMPCMD_IMI1 EXIT=_GEWI_CODE_END,LBEL1=GEWI_DT_LH,LBEL2=GEWI_DT_LL,LG=NOUSE,CMPCMD=
                                          GE,OP1=R2,OP2=D_REG
 4166 0000061C 2558                   M                   TST     A_REG,A_REG                             ;
 4167                                 M                   TST_BIT_OF _GEWI_CODE_END                               ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4168 0000061E 8906                   M           BT      _GEWI_CODE_END
 4169                                 M   
 4170                                 M                   IMD_MAKE1_WORD LBEL1=GEWI_DT_LH,LBEL2=GEWI_DT_LL        ; R2
 4171 00000620 E1FF                   M   GEWI_DT_LH:             MOV.B   #CHG_LHDATA,R1                  ; H_BYTE
 4172 00000622 E2FF                   M   GEWI_DT_LL:             MOV.B   #CHG_LLDATA,R2                  ; L_BYTE
 4173 00000624 4118                   M                   SHLL8   R1                              ; 符号をそのまま
 4174 00000626 622C                   M                   EXTU.B  R2,R2                           ;
 4175 00000628 221B                   M                   OR      R1,R2                           ; data
 4176 0000062A 3823                   M                   CMP/GE  R2,D_REG                        ; R2 < D_REG THEN T=1
 4177 0000062C 0529                   M                   MOVT    A_REG                                   ; Areg<= T
 4178 0000062E                   1476     _GEWI_CODE_END:
 4179                            1477     
 4180                            1478     ;       *******************************************************************
 4181                            1479     ;       ***                                                             ***
 4182                            1480     ;       ***                                                             ***
 4183                            1481     ;       ***             CMP/LT  Dreg,(MEMword,MEMlong,IMIword )         ***
 4184                            1482     ;       ***             =>CMP/GE MEM,DREGで結果BIT反転                  ***
 4185                            1483     ;       ***                                                             ***
 4186                            1484     ;       *******************************************************************
 4187                            1485     ;       *********************************************************************
 4188                            1486     ;       *****   CMP LTW command                         10*2            *****
 4189                            1487     ;       *********************************************************************
 4190 00000630                   1488             .ALIGN  4
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE    38
PROGRAM NAME =

 4191 00000630                   1489     _LTW_CODE:
 4192                            1490             CMPCMD_MEM1 EXIT=_LTW_CODE_END,LBEL1=LTW_ADR,LBEL2=LTW_OFS,LG=W,CMPCMD=GT,OP1=D_RE
                                          G,OP2=R2        ; add akiba
 4193 00000630 2558                   M                   TST     A_REG,A_REG                             ;
 4194                                 M                   TST_BIT_OF _LTW_CODE_END                                ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4195 00000632 8907                   M           BT      _LTW_CODE_END
 4196                                 M   
 4197                                 M                   ADR_MAKE1_WORD LBEL1=LTW_ADR,LBEL2=LTW_OFS      ; R0=WORDｱﾄﾞﾚｽ
 4198                                 M                   ADR_MAKE1_BIT LTW_ADR,LTW_OFS
 4199 00000634 E17F                   M   LTW_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 4200 00000636 E0FF                   M   LTW_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 4201 00000638 4118                   M                   SHLL8   R1
 4202 0000063A 600C                   M                   EXTU.B  R0,R0                           ;
 4203 0000063C 201B                   M                   OR      R1,R0                           ; adress
 4204 0000063E 02ED                   M                   MOV.W   @(R0,TOP_REG),R2                        ; [[W/L]]
 4205 00000640 3287                   M                   CMP/GT  D_REG,R2                        ; R2 < D_REG THEN T=1
 4206 00000642 0529                   M                   MOVT    A_REG                                   ; Areg<= T
 4207 00000644                   1491     _LTW_CODE_END:
 4208                            1492     
 4209                            1493     ;       *********************************************************************
 4210                            1494     ;       *****   CMP LTL command                         10*2            *****
 4211                            1495     ;       *********************************************************************
 4212 00000644                   1496             .ALIGN  4
 4213 00000644                   1497     _LTL_CODE:
 4214                            1498             CMPCMD_MEM1 EXIT=_LTL_CODE_END,LBEL1=LTL_ADR,LBEL2=LTL_OFS,LG=L,CMPCMD=GT,OP1=D_RE
                                          G,OP2=R2        ; add akiba
 4215 00000644 2558                   M                   TST     A_REG,A_REG                             ;
 4216                                 M                   TST_BIT_OF _LTL_CODE_END                                ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4217 00000646 8907                   M           BT      _LTL_CODE_END
 4218                                 M   
 4219                                 M                   ADR_MAKE1_WORD LBEL1=LTL_ADR,LBEL2=LTL_OFS      ; R0=WORDｱﾄﾞﾚｽ
 4220                                 M                   ADR_MAKE1_BIT LTL_ADR,LTL_OFS
 4221 00000648 E17F                   M   LTL_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 4222 0000064A E0FF                   M   LTL_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 4223 0000064C 4118                   M                   SHLL8   R1
 4224 0000064E 600C                   M                   EXTU.B  R0,R0                           ;
 4225 00000650 201B                   M                   OR      R1,R0                           ; adress
 4226 00000652 02EE                   M                   MOV.L   @(R0,TOP_REG),R2                        ; [[W/L]]
 4227 00000654 3287                   M                   CMP/GT  D_REG,R2                        ; R2 < D_REG THEN T=1
 4228 00000656 0529                   M                   MOVT    A_REG                                   ; Areg<= T
 4229 00000658                   1499     _LTL_CODE_END:
 4230                            1500     
 4231                            1501     ;       *********************************************************************
 4232                            1502     ;       *****   CMP LTWI command                        9*2             *****
 4233                            1503     ;       *********************************************************************
 4234 00000658                   1504             .ALIGN  4
 4235 00000658                   1505     _LTWI_CODE:
 4236                            1506             CMPCMD_IMI1 EXIT=_LTWI_CODE_END,LBEL1=LTWI_DT_LH,LBEL2=LTWI_DT_LL,LG=NOUSE,CMPCMD=
                                          GT,OP1=D_REG,OP2=R2     ; add akiba
 4237 00000658 2558                   M                   TST     A_REG,A_REG                             ;
 4238                                 M                   TST_BIT_OF _LTWI_CODE_END                               ; Areg=0 jump(比較
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE    39
PROGRAM NAME =

                                          しないときはAreg=0を返す)
 4239 0000065A 8906                   M           BT      _LTWI_CODE_END
 4240                                 M   
 4241                                 M                   IMD_MAKE1_WORD LBEL1=LTWI_DT_LH,LBEL2=LTWI_DT_LL        ; R2
 4242 0000065C E1FF                   M   LTWI_DT_LH:             MOV.B   #CHG_LHDATA,R1                  ; H_BYTE
 4243 0000065E E2FF                   M   LTWI_DT_LL:             MOV.B   #CHG_LLDATA,R2                  ; L_BYTE
 4244 00000660 4118                   M                   SHLL8   R1                              ; 符号をそのまま
 4245 00000662 622C                   M                   EXTU.B  R2,R2                           ;
 4246 00000664 221B                   M                   OR      R1,R2                           ; data
 4247 00000666 3287                   M                   CMP/GT  D_REG,R2                        ; R2 < D_REG THEN T=1
 4248 00000668 0529                   M                   MOVT    A_REG                                   ; Areg<= T
 4249 0000066A                   1507     _LTWI_CODE_END:
 4250                            1508     
 4251                            1509     ;       *******************************************************************
 4252                            1510     ;       ***                                                             ***
 4253                            1511     ;       ***                                                             ***
 4254                            1512     ;       ***             CMP/LE  Dreg,(MEMword,MEMlong,IMIword )         ***
 4255                            1513     ;       ***             =>CMP/GT MEM,DREGで結果BIT反転                  ***
 4256                            1514     ;       ***                                                             ***
 4257                            1515     ;       *******************************************************************
 4258                            1516     ;       *********************************************************************
 4259                            1517     ;       *****   CMP LEW command                         10*2            *****
 4260                            1518     ;       *********************************************************************
 4261 0000066C                   1519             .ALIGN  4
 4262 0000066C                   1520     _LEW_CODE:
 4263                            1521             CMPCMD_MEM1 EXIT=_LEW_CODE_END,LBEL1=LEW_ADR,LBEL2=LEW_OFS,LG=W,CMPCMD=GE,OP1=D_RE
                                          G,OP2=R2        ; add akiba
 4264 0000066C 2558                   M                   TST     A_REG,A_REG                             ;
 4265                                 M                   TST_BIT_OF _LEW_CODE_END                                ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4266 0000066E 8907                   M           BT      _LEW_CODE_END
 4267                                 M   
 4268                                 M                   ADR_MAKE1_WORD LBEL1=LEW_ADR,LBEL2=LEW_OFS      ; R0=WORDｱﾄﾞﾚｽ
 4269                                 M                   ADR_MAKE1_BIT LEW_ADR,LEW_OFS
 4270 00000670 E17F                   M   LEW_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 4271 00000672 E0FF                   M   LEW_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 4272 00000674 4118                   M                   SHLL8   R1
 4273 00000676 600C                   M                   EXTU.B  R0,R0                           ;
 4274 00000678 201B                   M                   OR      R1,R0                           ; adress
 4275 0000067A 02ED                   M                   MOV.W   @(R0,TOP_REG),R2                        ; [[W/L]]
 4276 0000067C 3283                   M                   CMP/GE  D_REG,R2                        ; R2 < D_REG THEN T=1
 4277 0000067E 0529                   M                   MOVT    A_REG                                   ; Areg<= T
 4278 00000680                   1522     _LEW_CODE_END:
 4279                            1523     
 4280                            1524     ;       *********************************************************************
 4281                            1525     ;       *****   CMP LEL command                         10*2            *****
 4282                            1526     ;       *********************************************************************
 4283 00000680                   1527             .ALIGN  4
 4284 00000680                   1528     _LEL_CODE:
 4285                            1529             CMPCMD_MEM1 EXIT=_LEL_CODE_END,LBEL1=LEL_ADR,LBEL2=LEL_OFS,LG=L,CMPCMD=GE,OP1=D_RE
                                          G,OP2=R2        ; add akiba
 4286 00000680 2558                   M                   TST     A_REG,A_REG                             ;
 4287                                 M                   TST_BIT_OF _LEL_CODE_END                                ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4288 00000682 8907                   M           BT      _LEL_CODE_END
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE    40
PROGRAM NAME =

 4289                                 M   
 4290                                 M                   ADR_MAKE1_WORD LBEL1=LEL_ADR,LBEL2=LEL_OFS      ; R0=WORDｱﾄﾞﾚｽ
 4291                                 M                   ADR_MAKE1_BIT LEL_ADR,LEL_OFS
 4292 00000684 E17F                   M   LEL_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 4293 00000686 E0FF                   M   LEL_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 4294 00000688 4118                   M                   SHLL8   R1
 4295 0000068A 600C                   M                   EXTU.B  R0,R0                           ;
 4296 0000068C 201B                   M                   OR      R1,R0                           ; adress
 4297 0000068E 02EE                   M                   MOV.L   @(R0,TOP_REG),R2                        ; [[W/L]]
 4298 00000690 3283                   M                   CMP/GE  D_REG,R2                        ; R2 < D_REG THEN T=1
 4299 00000692 0529                   M                   MOVT    A_REG                                   ; Areg<= T
 4300 00000694                   1530     _LEL_CODE_END:
 4301                            1531     
 4302                            1532     ;       *********************************************************************
 4303                            1533     ;       *****   CMP LEWI command                        9*2             *****
 4304                            1534     ;       *********************************************************************
 4305 00000694                   1535             .ALIGN  4
 4306 00000694                   1536     _LEWI_CODE:
 4307                            1537             CMPCMD_IMI1 EXIT=_LEWI_CODE_END,LBEL1=LEWI_DT_LH,LBEL2=LEWI_DT_LL,LG=NOUSE,CMPCMD=
                                          GE,OP1=D_REG,OP2=R2     ; add akiba
 4308 00000694 2558                   M                   TST     A_REG,A_REG                             ;
 4309                                 M                   TST_BIT_OF _LEWI_CODE_END                               ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4310 00000696 8906                   M           BT      _LEWI_CODE_END
 4311                                 M   
 4312                                 M                   IMD_MAKE1_WORD LBEL1=LEWI_DT_LH,LBEL2=LEWI_DT_LL        ; R2
 4313 00000698 E1FF                   M   LEWI_DT_LH:             MOV.B   #CHG_LHDATA,R1                  ; H_BYTE
 4314 0000069A E2FF                   M   LEWI_DT_LL:             MOV.B   #CHG_LLDATA,R2                  ; L_BYTE
 4315 0000069C 4118                   M                   SHLL8   R1                              ; 符号をそのまま
 4316 0000069E 622C                   M                   EXTU.B  R2,R2                           ;
 4317 000006A0 221B                   M                   OR      R1,R2                           ; data
 4318 000006A2 3283                   M                   CMP/GE  D_REG,R2                        ; R2 < D_REG THEN T=1
 4319 000006A4 0529                   M                   MOVT    A_REG                                   ; Areg<= T
 4320 000006A6                   1538     _LEWI_CODE_END:
 4321                            1539     
 4322                            1540     ;       *******************************************************************
 4323                            1541     ;       ***                                                             ***
 4324                            1542     ;       ***                                                             ***
 4325                            1543     ;       ***     AND  (MEMword,MEMlong,IMIword ),Dreg=>Dreg              ***
 4326                            1544     ;       ***                                                             ***
 4327                            1545     ;       *******************************************************************
 4328                            1546     ;       *********************************************************************
 4329                            1547     ;       *****   ANDW command                            10*2            *****
 4330                            1548     ;       *********************************************************************
 4331 000006A8                   1549             .ALIGN  4
 4332 000006A8                   1550     _ANDW_CODE:
 4333                            1551             CALCMD_MEM1_U EXIT=_ANDW_CODE_END,LBEL1=ANDW_ADR,LBEL2=ANDW_OFS,LG=W,CALCMD=AND
 4334 000006A8 2558                   M                   TST     A_REG,A_REG                             ; 変更 091105AKIBA
 4335                                 M                   TST_BIT_OF _ANDW_CODE_END                               ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4336 000006AA 8907                   M           BT      _ANDW_CODE_END
 4337                                 M   
 4338                                 M                   ADR_MAKE1_WORD LBEL1=ANDW_ADR,LBEL2=ANDW_OFS    ; R0=WORDｱﾄﾞﾚｽ
 4339                                 M                   ADR_MAKE1_BIT ANDW_ADR,ANDW_OFS
 4340 000006AC E17F                   M   ANDW_ADR:               MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE    41
PROGRAM NAME =

                                          (0~7Fまで)
 4341 000006AE E0FF                   M   ANDW_OFS:               MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 4342 000006B0 4118                   M                   SHLL8   R1
 4343 000006B2 600C                   M                   EXTU.B  R0,R0                           ;
 4344 000006B4 201B                   M                   OR      R1,R0                           ; adress
 4345 000006B6 02ED                   M                   MOV.W   @(R0,TOP_REG),R2                        ; [[W/L]]
 4346 000006B8 622D                   M                   EXTU.W  R2,R2
 4347 000006BA 2829                   M                   AND     R2,D_REG                                ; D_REG-R2=D_REG
 4348 000006BC                   1552     _ANDW_CODE_END:
 4349                            1553     
 4350                            1554     ;       *********************************************************************
 4351                            1555     ;       *****   ANDL command                            10*2            *****
 4352                            1556     ;       *********************************************************************
 4353 000006BC                   1557             .ALIGN  4
 4354 000006BC                   1558     _ANDL_CODE:
 4355                            1559             CALCMD_MEM1 EXIT=_ANDL_CODE_END,LBEL1=ANDL_ADR,LBEL2=ANDL_OFS,LG=L,CALCMD=AND
 4356 000006BC 2558                   M                   TST     A_REG,A_REG                             ; 変更 091105AKIBA
 4357                                 M                   TST_BIT_OF _ANDL_CODE_END                               ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4358 000006BE 8906                   M           BT      _ANDL_CODE_END
 4359                                 M   
 4360                                 M                   ADR_MAKE1_WORD LBEL1=ANDL_ADR,LBEL2=ANDL_OFS    ; R0=WORDｱﾄﾞﾚｽ
 4361                                 M                   ADR_MAKE1_BIT ANDL_ADR,ANDL_OFS
 4362 000006C0 E17F                   M   ANDL_ADR:               MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 4363 000006C2 E0FF                   M   ANDL_OFS:               MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 4364 000006C4 4118                   M                   SHLL8   R1
 4365 000006C6 600C                   M                   EXTU.B  R0,R0                           ;
 4366 000006C8 201B                   M                   OR      R1,R0                           ; adress
 4367 000006CA 02EE                   M                   MOV.L   @(R0,TOP_REG),R2                        ; [[W/L]]
 4368 000006CC 2829                   M                   AND     R2,D_REG                                ; D_REG-R2=D_REG
 4369 000006CE                   1560     _ANDL_CODE_END:
 4370                            1561     
 4371                            1562     ;       *********************************************************************
 4372                            1563     ;       *****   ANDWI command                           9*2             *****
 4373                            1564     ;       *********************************************************************
 4374 000006D0                   1565             .ALIGN  4
 4375 000006D0                   1566     _ANDWI_CODE:
 4376                            1567             CALCMD_IMI1_U EXIT=_ANDWI_CODE_END,LBEL1=ANDWI_DT_LH,LBEL2=ANDWI_DT_LL,LG=NOUSE,CA
                                          LCMD=AND
 4377 000006D0 2558                   M                   TST     A_REG,A_REG                             ; 変更 091105AKIBA
 4378                                 M                   TST_BIT_OF _ANDWI_CODE_END                              ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4379 000006D2 8906                   M           BT      _ANDWI_CODE_END
 4380                                 M   
 4381                                 M                   IMD_MAKE1_WORD LBEL1=ANDWI_DT_LH,LBEL2=ANDWI_DT_LL      ; R2
 4382 000006D4 E1FF                   M   ANDWI_DT_LH:            MOV.B   #CHG_LHDATA,R1                  ; H_BYTE
 4383 000006D6 E2FF                   M   ANDWI_DT_LL:            MOV.B   #CHG_LLDATA,R2                  ; L_BYTE
 4384 000006D8 4118                   M                   SHLL8   R1                              ; 符号をそのまま
 4385 000006DA 622C                   M                   EXTU.B  R2,R2                           ;
 4386 000006DC 221B                   M                   OR      R1,R2                           ; data
 4387 000006DE 622D                   M                   EXTU.W  R2,R2
 4388 000006E0 2829                   M                   AND     R2,D_REG                                ; D_REG-R2=D_REG
 4389 000006E2                   1568     _ANDWI_CODE_END:
 4390                            1569     
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE    42
PROGRAM NAME =

 4391                            1570     ;       *******************************************************************
 4392                            1571     ;       ***                                                             ***
 4393                            1572     ;       ***                                                             ***
 4394                            1573     ;       ***     OR  (MEMword,MEMlong,IMIword ),Dreg=>Dreg               ***
 4395                            1574     ;       ***                                                             ***
 4396                            1575     ;       *******************************************************************
 4397                            1576     ;       *********************************************************************
 4398                            1577     ;       *****   ORW command                             10*2            *****
 4399                            1578     ;       *********************************************************************
 4400 000006E4                   1579             .ALIGN  4
 4401 000006E4                   1580     _ORW_CODE:
 4402                            1581             CALCMD_MEM1_U EXIT=_ORW_CODE_END,LBEL1=ORW_ADR,LBEL2=ORW_OFS,LG=W,CALCMD=OR
 4403 000006E4 2558                   M                   TST     A_REG,A_REG                             ; 変更 091105AKIBA
 4404                                 M                   TST_BIT_OF _ORW_CODE_END                                ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4405 000006E6 8907                   M           BT      _ORW_CODE_END
 4406                                 M   
 4407                                 M                   ADR_MAKE1_WORD LBEL1=ORW_ADR,LBEL2=ORW_OFS      ; R0=WORDｱﾄﾞﾚｽ
 4408                                 M                   ADR_MAKE1_BIT ORW_ADR,ORW_OFS
 4409 000006E8 E17F                   M   ORW_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 4410 000006EA E0FF                   M   ORW_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 4411 000006EC 4118                   M                   SHLL8   R1
 4412 000006EE 600C                   M                   EXTU.B  R0,R0                           ;
 4413 000006F0 201B                   M                   OR      R1,R0                           ; adress
 4414 000006F2 02ED                   M                   MOV.W   @(R0,TOP_REG),R2                        ; [[W/L]]
 4415 000006F4 622D                   M                   EXTU.W  R2,R2
 4416 000006F6 282B                   M                   OR      R2,D_REG                                ; D_REG-R2=D_REG
 4417 000006F8                   1582     _ORW_CODE_END:
 4418                            1583     
 4419                            1584     ;       *********************************************************************
 4420                            1585     ;       ***     ORL command                             10*2            *****
 4421                            1586     ;       *********************************************************************
 4422 000006F8                   1587             .ALIGN  4
 4423 000006F8                   1588     _ORL_CODE:
 4424                            1589             CALCMD_MEM1 EXIT=_ORL_CODE_END,LBEL1=ORL_ADR,LBEL2=ORL_OFS,LG=L,CALCMD=OR
 4425 000006F8 2558                   M                   TST     A_REG,A_REG                             ; 変更 091105AKIBA
 4426                                 M                   TST_BIT_OF _ORL_CODE_END                                ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4427 000006FA 8906                   M           BT      _ORL_CODE_END
 4428                                 M   
 4429                                 M                   ADR_MAKE1_WORD LBEL1=ORL_ADR,LBEL2=ORL_OFS      ; R0=WORDｱﾄﾞﾚｽ
 4430                                 M                   ADR_MAKE1_BIT ORL_ADR,ORL_OFS
 4431 000006FC E17F                   M   ORL_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 4432 000006FE E0FF                   M   ORL_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 4433 00000700 4118                   M                   SHLL8   R1
 4434 00000702 600C                   M                   EXTU.B  R0,R0                           ;
 4435 00000704 201B                   M                   OR      R1,R0                           ; adress
 4436 00000706 02EE                   M                   MOV.L   @(R0,TOP_REG),R2                        ; [[W/L]]
 4437 00000708 282B                   M                   OR      R2,D_REG                                ; D_REG-R2=D_REG
 4438 0000070A                   1590     _ORL_CODE_END:
 4439                            1591     
 4440                            1592     ;       *********************************************************************
 4441                            1593     ;       *****   ORWI command                            9*2             *****
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE    43
PROGRAM NAME =

 4442                            1594     ;       *********************************************************************
 4443 0000070C                   1595             .ALIGN  4
 4444 0000070C                   1596     _ORWI_CODE:
 4445                            1597             CALCMD_IMI1_U EXIT=_ORWI_CODE_END,LBEL1=ORWI_DT_LH,LBEL2=ORWI_DT_LL,LG=NOUSE,CALCM
                                          D=OR
 4446 0000070C 2558                   M                   TST     A_REG,A_REG                             ; 変更 091105AKIBA
 4447                                 M                   TST_BIT_OF _ORWI_CODE_END                               ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4448 0000070E 8906                   M           BT      _ORWI_CODE_END
 4449                                 M   
 4450                                 M                   IMD_MAKE1_WORD LBEL1=ORWI_DT_LH,LBEL2=ORWI_DT_LL        ; R2
 4451 00000710 E1FF                   M   ORWI_DT_LH:             MOV.B   #CHG_LHDATA,R1                  ; H_BYTE
 4452 00000712 E2FF                   M   ORWI_DT_LL:             MOV.B   #CHG_LLDATA,R2                  ; L_BYTE
 4453 00000714 4118                   M                   SHLL8   R1                              ; 符号をそのまま
 4454 00000716 622C                   M                   EXTU.B  R2,R2                           ;
 4455 00000718 221B                   M                   OR      R1,R2                           ; data
 4456 0000071A 622D                   M                   EXTU.W  R2,R2
 4457 0000071C 282B                   M                   OR      R2,D_REG                                ; D_REG-R2=D_REG
 4458 0000071E                   1598     _ORWI_CODE_END:
 4459                            1599     
 4460                            1600     ;       *******************************************************************
 4461                            1601     ;       ***                                                             ***
 4462                            1602     ;       ***                                                             ***
 4463                            1603     ;       ***     XOR  (MEMword,MEMlong,IMIword ),Dreg=>Dreg              ***
 4464                            1604     ;       ***                                                             ***
 4465                            1605     ;       *******************************************************************
 4466                            1606     ;       *********************************************************************
 4467                            1607     ;       *****   XORW command                            10*2            *****
 4468                            1608     ;       *********************************************************************
 4469 00000720                   1609             .ALIGN  4
 4470 00000720                   1610     _XORW_CODE:
 4471                            1611             CALCMD_MEM1_U EXIT=_XORW_CODE_END,LBEL1=XORW_ADR,LBEL2=XORW_OFS,LG=W,CALCMD=XOR
 4472 00000720 2558                   M                   TST     A_REG,A_REG                             ; 変更 091105AKIBA
 4473                                 M                   TST_BIT_OF _XORW_CODE_END                               ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4474 00000722 8907                   M           BT      _XORW_CODE_END
 4475                                 M   
 4476                                 M                   ADR_MAKE1_WORD LBEL1=XORW_ADR,LBEL2=XORW_OFS    ; R0=WORDｱﾄﾞﾚｽ
 4477                                 M                   ADR_MAKE1_BIT XORW_ADR,XORW_OFS
 4478 00000724 E17F                   M   XORW_ADR:               MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 4479 00000726 E0FF                   M   XORW_OFS:               MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 4480 00000728 4118                   M                   SHLL8   R1
 4481 0000072A 600C                   M                   EXTU.B  R0,R0                           ;
 4482 0000072C 201B                   M                   OR      R1,R0                           ; adress
 4483 0000072E 02ED                   M                   MOV.W   @(R0,TOP_REG),R2                        ; [[W/L]]
 4484 00000730 622D                   M                   EXTU.W  R2,R2
 4485 00000732 282A                   M                   XOR     R2,D_REG                                ; D_REG-R2=D_REG
 4486 00000734                   1612     _XORW_CODE_END:
 4487                            1613     
 4488                            1614     ;       *********************************************************************
 4489                            1615     ;       ***     XORL command                            10*2            *****
 4490                            1616     ;       *********************************************************************
 4491 00000734                   1617             .ALIGN  4
 4492 00000734                   1618     _XORL_CODE:
 4493                            1619             CALCMD_MEM1 EXIT=_XORL_CODE_END,LBEL1=XORL_ADR,LBEL2=XORL_OFS,LG=L,CALCMD=XOR
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE    44
PROGRAM NAME =

 4494 00000734 2558                   M                   TST     A_REG,A_REG                             ; 変更 091105AKIBA
 4495                                 M                   TST_BIT_OF _XORL_CODE_END                               ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4496 00000736 8906                   M           BT      _XORL_CODE_END
 4497                                 M   
 4498                                 M                   ADR_MAKE1_WORD LBEL1=XORL_ADR,LBEL2=XORL_OFS    ; R0=WORDｱﾄﾞﾚｽ
 4499                                 M                   ADR_MAKE1_BIT XORL_ADR,XORL_OFS
 4500 00000738 E17F                   M   XORL_ADR:               MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 4501 0000073A E0FF                   M   XORL_OFS:               MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 4502 0000073C 4118                   M                   SHLL8   R1
 4503 0000073E 600C                   M                   EXTU.B  R0,R0                           ;
 4504 00000740 201B                   M                   OR      R1,R0                           ; adress
 4505 00000742 02EE                   M                   MOV.L   @(R0,TOP_REG),R2                        ; [[W/L]]
 4506 00000744 282A                   M                   XOR     R2,D_REG                                ; D_REG-R2=D_REG
 4507 00000746                   1620     _XORL_CODE_END:
 4508                            1621     
 4509                            1622     ;       *********************************************************************
 4510                            1623     ;       *****   XORWI command                           9*2             *****
 4511                            1624     ;       *********************************************************************
 4512 00000748                   1625             .ALIGN  4
 4513 00000748                   1626     _XORWI_CODE:
 4514                            1627             CALCMD_IMI1_U EXIT=_XORWI_CODE_END,LBEL1=XORWI_DT_LH,LBEL2=XORWI_DT_LL,LG=NOUSE,CA
                                          LCMD=XOR
 4515 00000748 2558                   M                   TST     A_REG,A_REG                             ; 変更 091105AKIBA
 4516                                 M                   TST_BIT_OF _XORWI_CODE_END                              ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4517 0000074A 8906                   M           BT      _XORWI_CODE_END
 4518                                 M   
 4519                                 M                   IMD_MAKE1_WORD LBEL1=XORWI_DT_LH,LBEL2=XORWI_DT_LL      ; R2
 4520 0000074C E1FF                   M   XORWI_DT_LH:            MOV.B   #CHG_LHDATA,R1                  ; H_BYTE
 4521 0000074E E2FF                   M   XORWI_DT_LL:            MOV.B   #CHG_LLDATA,R2                  ; L_BYTE
 4522 00000750 4118                   M                   SHLL8   R1                              ; 符号をそのまま
 4523 00000752 622C                   M                   EXTU.B  R2,R2                           ;
 4524 00000754 221B                   M                   OR      R1,R2                           ; data
 4525 00000756 622D                   M                   EXTU.W  R2,R2
 4526 00000758 282A                   M                   XOR     R2,D_REG                                ; D_REG-R2=D_REG
 4527 0000075A                   1628     _XORWI_CODE_END:
 4528                            1629     
 4529                            1630     ;       *******************************************************************
 4530                            1631     ;       ***                                                             ***
 4531                            1632     ;       ***                                                             ***
 4532                            1633     ;       ***     ADD  (MEMword,MEMlong,IMIword ),Dreg=>Dreg              ***
 4533                            1634     ;       ***                                                             ***
 4534                            1635     ;       *******************************************************************
 4535                            1636     ;       *********************************************************************
 4536                            1637     ;       *****   ADDW command                            9*2             *****
 4537                            1638     ;       *********************************************************************
 4538 0000075C                   1639             .ALIGN  4
 4539 0000075C                   1640     _ADDW_CODE:
 4540                            1641             CALCMD_MEM1 EXIT=_ADDW_CODE_END,LBEL1=ADDW_ADR,LBEL2=ADDW_OFS,LG=W,CALCMD=ADD
 4541 0000075C 2558                   M                   TST     A_REG,A_REG                             ; 変更 091105AKIBA
 4542                                 M                   TST_BIT_OF _ADDW_CODE_END                               ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4543 0000075E 8906                   M           BT      _ADDW_CODE_END
 4544                                 M   
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE    45
PROGRAM NAME =

 4545                                 M                   ADR_MAKE1_WORD LBEL1=ADDW_ADR,LBEL2=ADDW_OFS    ; R0=WORDｱﾄﾞﾚｽ
 4546                                 M                   ADR_MAKE1_BIT ADDW_ADR,ADDW_OFS
 4547 00000760 E17F                   M   ADDW_ADR:               MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 4548 00000762 E0FF                   M   ADDW_OFS:               MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 4549 00000764 4118                   M                   SHLL8   R1
 4550 00000766 600C                   M                   EXTU.B  R0,R0                           ;
 4551 00000768 201B                   M                   OR      R1,R0                           ; adress
 4552 0000076A 02ED                   M                   MOV.W   @(R0,TOP_REG),R2                        ; [[W/L]]
 4553 0000076C 382C                   M                   ADD     R2,D_REG                                ; D_REG-R2=D_REG
 4554 0000076E                   1642     _ADDW_CODE_END:
 4555                            1643     
 4556                            1644     ;       *********************************************************************
 4557                            1645     ;       *****   ADDL command                            10*2            *****
 4558                            1646     ;       *********************************************************************
 4559 00000770                   1647             .ALIGN  4
 4560 00000770                   1648     _ADDL_CODE:
 4561                            1649             CALCMD_MEM1 EXIT=_ADDL_CODE_END,LBEL1=ADDL_ADR,LBEL2=ADDL_OFS,LG=L,CALCMD=ADD
 4562 00000770 2558                   M                   TST     A_REG,A_REG                             ; 変更 091105AKIBA
 4563                                 M                   TST_BIT_OF _ADDL_CODE_END                               ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4564 00000772 8906                   M           BT      _ADDL_CODE_END
 4565                                 M   
 4566                                 M                   ADR_MAKE1_WORD LBEL1=ADDL_ADR,LBEL2=ADDL_OFS    ; R0=WORDｱﾄﾞﾚｽ
 4567                                 M                   ADR_MAKE1_BIT ADDL_ADR,ADDL_OFS
 4568 00000774 E17F                   M   ADDL_ADR:               MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 4569 00000776 E0FF                   M   ADDL_OFS:               MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 4570 00000778 4118                   M                   SHLL8   R1
 4571 0000077A 600C                   M                   EXTU.B  R0,R0                           ;
 4572 0000077C 201B                   M                   OR      R1,R0                           ; adress
 4573 0000077E 02EE                   M                   MOV.L   @(R0,TOP_REG),R2                        ; [[W/L]]
 4574 00000780 382C                   M                   ADD     R2,D_REG                                ; D_REG-R2=D_REG
 4575 00000782                   1650     _ADDL_CODE_END:
 4576                            1651     
 4577                            1652     ;       *********************************************************************
 4578                            1653     ;       *****   ADDWI command                           8*2             *****
 4579                            1654     ;       *********************************************************************
 4580 00000784                   1655             .ALIGN  4
 4581 00000784                   1656     _ADDWI_CODE:
 4582                            1657             CALCMD_IMI1 EXIT=_ADDWI_CODE_END,LBEL1=ADDWI_DT_LH,LBEL2=ADDWI_DT_LL,LG=NOUSE,CALC
                                          MD=ADD
 4583 00000784 2558                   M                   TST     A_REG,A_REG                             ; 変更 091105AKIBA
 4584                                 M                   TST_BIT_OF _ADDWI_CODE_END                              ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4585 00000786 8905                   M           BT      _ADDWI_CODE_END
 4586                                 M   
 4587                                 M                   IMD_MAKE1_WORD LBEL1=ADDWI_DT_LH,LBEL2=ADDWI_DT_LL      ; R2
 4588 00000788 E1FF                   M   ADDWI_DT_LH:            MOV.B   #CHG_LHDATA,R1                  ; H_BYTE
 4589 0000078A E2FF                   M   ADDWI_DT_LL:            MOV.B   #CHG_LLDATA,R2                  ; L_BYTE
 4590 0000078C 4118                   M                   SHLL8   R1                              ; 符号をそのまま
 4591 0000078E 622C                   M                   EXTU.B  R2,R2                           ;
 4592 00000790 221B                   M                   OR      R1,R2                           ; data
 4593 00000792 382C                   M                   ADD     R2,D_REG                                ; D_REG-R2=D_REG
 4594 00000794                   1658     _ADDWI_CODE_END:
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE    46
PROGRAM NAME =

 4595                            1659     
 4596                            1660     ;       *******************************************************************
 4597                            1661     ;       ***                                                             ***
 4598                            1662     ;       ***                                                             ***
 4599                            1663     ;       ***     SUB  (MEMword,MEMlong,IMIword ),Dreg=>Dreg              ***
 4600                            1664     ;       ***                                                             ***
 4601                            1665     ;       *******************************************************************
 4602                            1666     ;       *********************************************************************
 4603                            1667     ;       *****   SUBW command                            9*2             *****
 4604                            1668     ;       *********************************************************************
 4605 00000794                   1669             .ALIGN  4
 4606 00000794                   1670     _SUBW_CODE:
 4607                            1671             CALCMD_MEM1 EXIT=_SUBW_CODE_END,LBEL1=SUBW_ADR,LBEL2=SUBW_OFS,LG=W,CALCMD=SUB
 4608 00000794 2558                   M                   TST     A_REG,A_REG                             ; 変更 091105AKIBA
 4609                                 M                   TST_BIT_OF _SUBW_CODE_END                               ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4610 00000796 8906                   M           BT      _SUBW_CODE_END
 4611                                 M   
 4612                                 M                   ADR_MAKE1_WORD LBEL1=SUBW_ADR,LBEL2=SUBW_OFS    ; R0=WORDｱﾄﾞﾚｽ
 4613                                 M                   ADR_MAKE1_BIT SUBW_ADR,SUBW_OFS
 4614 00000798 E17F                   M   SUBW_ADR:               MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 4615 0000079A E0FF                   M   SUBW_OFS:               MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 4616 0000079C 4118                   M                   SHLL8   R1
 4617 0000079E 600C                   M                   EXTU.B  R0,R0                           ;
 4618 000007A0 201B                   M                   OR      R1,R0                           ; adress
 4619 000007A2 02ED                   M                   MOV.W   @(R0,TOP_REG),R2                        ; [[W/L]]
 4620 000007A4 3828                   M                   SUB     R2,D_REG                                ; D_REG-R2=D_REG
 4621 000007A6                   1672     _SUBW_CODE_END:
 4622                            1673     
 4623                            1674     ;       *********************************************************************
 4624                            1675     ;       *****   SUBL command                            10*2            *****
 4625                            1676     ;       *********************************************************************
 4626 000007A8                   1677             .ALIGN  4
 4627 000007A8                   1678     _SUBL_CODE:
 4628                            1679             CALCMD_MEM1 EXIT=_SUBL_CODE_END,LBEL1=SUBL_ADR,LBEL2=SUBL_OFS,LG=L,CALCMD=SUB
 4629 000007A8 2558                   M                   TST     A_REG,A_REG                             ; 変更 091105AKIBA
 4630                                 M                   TST_BIT_OF _SUBL_CODE_END                               ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4631 000007AA 8906                   M           BT      _SUBL_CODE_END
 4632                                 M   
 4633                                 M                   ADR_MAKE1_WORD LBEL1=SUBL_ADR,LBEL2=SUBL_OFS    ; R0=WORDｱﾄﾞﾚｽ
 4634                                 M                   ADR_MAKE1_BIT SUBL_ADR,SUBL_OFS
 4635 000007AC E17F                   M   SUBL_ADR:               MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 4636 000007AE E0FF                   M   SUBL_OFS:               MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 4637 000007B0 4118                   M                   SHLL8   R1
 4638 000007B2 600C                   M                   EXTU.B  R0,R0                           ;
 4639 000007B4 201B                   M                   OR      R1,R0                           ; adress
 4640 000007B6 02EE                   M                   MOV.L   @(R0,TOP_REG),R2                        ; [[W/L]]
 4641 000007B8 3828                   M                   SUB     R2,D_REG                                ; D_REG-R2=D_REG
 4642 000007BA                   1680     _SUBL_CODE_END:
 4643                            1681     
 4644                            1682     ;       *********************************************************************
 4645                            1683     ;       *****   SUBWI command                           8*2             *****
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE    47
PROGRAM NAME =

 4646                            1684     ;       *********************************************************************
 4647 000007BC                   1685             .ALIGN  4
 4648 000007BC                   1686     _SUBWI_CODE:
 4649                            1687             CALCMD_IMI1 EXIT=_SUBWI_CODE_END,LBEL1=SUBWI_DT_LH,LBEL2=SUBWI_DT_LL,LG=NOUSE,CALC
                                          MD=SUB
 4650 000007BC 2558                   M                   TST     A_REG,A_REG                             ; 変更 091105AKIBA
 4651                                 M                   TST_BIT_OF _SUBWI_CODE_END                              ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4652 000007BE 8905                   M           BT      _SUBWI_CODE_END
 4653                                 M   
 4654                                 M                   IMD_MAKE1_WORD LBEL1=SUBWI_DT_LH,LBEL2=SUBWI_DT_LL      ; R2
 4655 000007C0 E1FF                   M   SUBWI_DT_LH:            MOV.B   #CHG_LHDATA,R1                  ; H_BYTE
 4656 000007C2 E2FF                   M   SUBWI_DT_LL:            MOV.B   #CHG_LLDATA,R2                  ; L_BYTE
 4657 000007C4 4118                   M                   SHLL8   R1                              ; 符号をそのまま
 4658 000007C6 622C                   M                   EXTU.B  R2,R2                           ;
 4659 000007C8 221B                   M                   OR      R1,R2                           ; data
 4660 000007CA 3828                   M                   SUB     R2,D_REG                                ; D_REG-R2=D_REG
 4661 000007CC                   1688     _SUBWI_CODE_END:
 4662                            1689     
 4663                            1690     ;       *********************************************************************
 4664                            1691     ;       *****   End command                             8byte           *****
 4665                            1692     ;       *********************************************************************
 4666 000007CC                   1693             .ALIGN  4
 4667 000007CC                   1694     _END_CODE:
 4668                            1695             SUB_END                                 ; END命令の中身
 4669                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 4670 000007CC 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 4671                            1696             M_RTS                                   ;
 4672 000007CE 000B                   M           RTS                             ;RTSの後ろの
 4673 000007D0 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 4674 000007D2                   1697     _END_CODE_END:
 4675                            1698     
 4676                            1699     ;       *********************************************************************
 4677                            1700     ;       *****   No Operation command            1step    4clocks        *****
 4678                            1701     ;       *********************************************************************
 4679 000007D4                   1702             .ALIGN  4
 4680 000007D4                   1703     _NOP_CODE:
 4681 000007D4 0009              1704             NOP                                     ; no operation
 4682 000007D6                   1705     _NOP_CODE_END:
 4683                            1706     
 4684                            1707             .END
  *****TOTAL ERRORS       0
  *****TOTAL WARNINGS     0
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE    48

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

ADDL_ADR                         P        EXPT 00000774   1895  4568*
ADDL_OFS                         P        EXPT 00000776   1896  4569*
ADDWI_DT_LH                      P        EXPT 00000788   1900  4588*
ADDWI_DT_LL                      P        EXPT 0000078A   1901  4589*
ADDW_ADR                         P        EXPT 00000760   1890  4547*
ADDW_OFS                         P        EXPT 00000762   1891  4548*
ANDL_ADR                         P        EXPT 000006C0   1925  4362*
ANDL_OFS                         P        EXPT 000006C2   1926  4363*
ANDN_ADR                         P        EXPT 000000C8   1681  2540*
ANDN_BIT                         P        EXPT 000000D2   1683  2546*
ANDN_OFS                         P        EXPT 000000CA   1682  2541*
ANDWI_DT_LH                      P        EXPT 000006D4   1930  4382*
ANDWI_DT_LL                      P        EXPT 000006D6   1931  4383*
ANDW_ADR                         P        EXPT 000006AC   1920  4340*
ANDW_OFS                         P        EXPT 000006AE   1921  4341*
AND_ADR                          P        EXPT 000000B4   1675  2520*
AND_BIT                          P        EXPT 000000BE   1677  2526*
AND_OFS                          P        EXPT 000000B6   1676  2521*
A_REG                                     REG             2219* 2459  2461  2474  2485  2498  2508  2529  2548  2566  2583  2598 
                                                          2598  2624  2624  2643  2643  2671  2682  2691  2699  2699  2702  2712 
                                                          2737  2737  2784  2784  2808  2857  2857  2880  2927  2927  2988  2990 
                                                          2991  3160  3160  3253  3295  3295  3351  3351  3445  3487  3487  3610 
                                                          3610  3628  3628  3681  3681  3701  3701  3722  3722  3741  3741  3889 
                                                          3889  3902  3911  3911  3924  3933  3933  3944  3961  3961  3976  3985 
                                                          3985  4000  4009  4009  4022  4038  4038  4051  4073  4073  4086  4095 
                                                          4095  4106  4122  4122  4135  4144  4144  4157  4166  4166  4177  4193 
                                                          4193  4206  4215  4215  4228  4237  4237  4248  4264  4264  4277  4286 
                                                          4286  4299  4308  4308  4319  4334  4334  4356  4356  4377  4377  4403 
                                                          4403  4425  4425  4446  4446  4472  4472  4494  4494  4515  4515  4541 
                                                          4541  4562  4562  4583  4583  4608  4608  4629  4629  4650  4650 
BIT0                                      EQU  00000001     19* 2273  2460  2484  2528  2565  2720  2807  2879  3113  3123  3146 
                                                          3183  3253  3380  3391  3398  3445  3458  3523  3975  3999  4021 
BIT1                                      EQU  00000002     20* 2274  3113  3163  3168  3354  3358  3365  3523 
BIT10                                     EQU  00000400     29* 2283 
BIT11                                     EQU  00000800     30* 2284 
BIT12                                     EQU  00001000     31* 2285 
BIT13                                     EQU  00002000     32* 2286 
BIT14                                     EQU  00004000     33* 2287 
BIT15                                     EQU  00008000     34* 2288 
BIT16                                     EQU  00010000     35*
BIT17                                     EQU  00020000     36*
BIT18                                     EQU  00040000     37*
BIT19                                     EQU  00080000     38*
BIT2                                      EQU  00000004     21* 2275  3113  3153  3183  3247  3523 
BIT20                                     EQU  00100000     39*
BIT21                                     EQU  00200000     40*
BIT22                                     EQU  00400000     41*
BIT23                                     EQU  00800000     42*
BIT24                                     EQU  01000000     43*
BIT25                                     EQU  02000000     44*
BIT26                                     EQU  04000000     45*
BIT27                                     EQU  08000000     46*
BIT28                                     EQU  10000000     47*
BIT29                                     EQU  20000000     48*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE    49

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

BIT3                                      EQU  00000008     22* 2276  3523 
BIT30                                     EQU  40000000     49*
BIT31                                     EQU  80000000     50*
BIT4                                      EQU  00000010     23* 2277 
BIT5                                      EQU  00000020     24* 2278 
BIT6                                      EQU  00000040     25* 2279 
BIT7                                      EQU  00000080     26* 2280 
BIT8                                      EQU  00000100     27* 2281 
BIT9                                      EQU  00000200     28* 2282 
CHG_DGT_SL                                EQU  0000000F   2265* 3064 
CHG_HHDATA                                EQU  000000FF   2259* 3632 
CHG_HLDATA                                EQU  000000FF   2260* 3633 
CHG_LHDATA                                EQU  000000FF   2261* 3615  3634  3938  4014  4100  4171  4242  4313  4382  4451  4520 
                                                          4588  4655 
CHG_LLDATA                                EQU  000000FF   2262* 3616  3635  3939  4015  4101  4172  4243  4314  4383  4452  4521 
                                                          4589  4656 
CHG_SQ_ADR                                EQU  0000007F   2255* 2476  2500  2520  2540  2557  2575  2593  2619  2638  2742  2760 
                                                          2832  2905  2962  3687  3707  3728  3747  3895  3917  3967  3991  4044 
                                                          4079  4128  4150  4199  4221  4270  4292  4340  4362  4409  4431  4478 
                                                          4500  4547  4568  4614  4635 
CHG_SQ_BIT                                EQU  000000FF   2257* 2482  2506  2526  2546  2563  2581  2603  2609  2629  2648  2765 
                                                          2837 
CHG_SQ_BTD                                EQU  0000000F   2258* 2910 
CHG_SQ_OFS                                EQU  000000FF   2256* 2477  2501  2521  2541  2558  2576  2594  2620  2639  2743  2761 
                                                          2833  2906  2963  3688  3708  3729  3748  3896  3918  3968  3992  4045 
                                                          4080  4129  4151  4200  4222  4271  4293  4341  4363  4410  4432  4479 
                                                          4501  4548  4569  4615  4636 
CHG_UNIT_H                                EQU  0000007F   2263* 3062  3316 
CHG_UNIT_L                                EQU  000000FF   2264* 3063  3317 
CLR_ADR                          P        EXPT 0000015C   1753  2742*
CLR_OFS                          P        EXPT 0000015E   1754  2743*
CTBL_REG                                  REG             2223* 2766  2839  2912  2968  3065  3318  3637 
CT_KDN_C_TOP                     P             00000078   2326* 3424  3463 
CT_KND_CD_TOP                    P             0000007C   2327* 3411 
CT_STCT_TOP                      P             00000074   2325* 3340 
DSETLI_CALL                      P             00000044   2302* 3637 
DSETLI_DT_HH                     P        EXPT 000004C4   1974  3632*
DSETLI_DT_HL                     P        EXPT 000004C6   1975  3633*
DSETLI_DT_LH                     P        EXPT 000004C8   1976  3634*
DSETLI_DT_LL                     P        EXPT 000004CA   1977  3635*
DSETWI_DT_LH                     P        EXPT 000004B4   1748  3615*
DSETWI_DT_LL                     P        EXPT 000004B6   1749  3616*
DTBL_REG                                  REG             2224* 2985  3104  3115  3195  3234  3271  3340  3411  3424  3463 
D_REG                                     REG             2222* 3139  3419  3620  3667  3692  3713  3733  3752  3901  3923  3943 
                                                          3973  3997  4019  4050  4085  4105  4134  4156  4176  4205  4227  4247 
                                                          4276  4298  4318  4347  4368  4388  4416  4437  4457  4485  4506  4526 
                                                          4553  4574  4593  4620  4641  4660 
EQL_ADR                          P        EXPT 0000054C   1805  3917*
EQL_OFS                          P        EXPT 0000054E   1806  3918*
EQWI_DT_LH                       P        EXPT 00000560   1810  3938*
EQWI_DT_LL                       P        EXPT 00000562   1811  3939*
EQW_ADR                          P        EXPT 00000538   1800  3895*
EQW_OFS                          P        EXPT 0000053A   1801  3896*
GEL_ADR                          P        EXPT 0000060C   1850  4150*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE    50

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

GEL_OFS                          P        EXPT 0000060E   1851  4151*
GEWI_DT_LH                       P        EXPT 00000620   1855  4171*
GEWI_DT_LL                       P        EXPT 00000622   1856  4172*
GEW_ADR                          P        EXPT 000005F8   1845  4128*
GEW_OFS                          P        EXPT 000005FA   1846  4129*
GTL_ADR                          P        EXPT 000005D0   1835  4079*
GTL_OFS                          P        EXPT 000005D2   1836  4080*
GTWI_DT_LH                       P        EXPT 000005E4   1840  4100*
GTWI_DT_LL                       P        EXPT 000005E6   1841  4101*
GTW_ADR                          P        EXPT 000005BC   1830  4044*
GTW_OFS                          P        EXPT 000005BE   1831  4045*
H_BYTE                                    EQU  00000000     86*
LDL_ADR                          P        EXPT 00000508   1785  3707*
LDL_OFS                          P        EXPT 0000050A   1786  3708*
LDN_ADR                          P        EXPT 000000A4   1669  2500*
LDN_BIT                          P        EXPT 000000AE   1671  2506*
LDN_OFS                          P        EXPT 000000A6   1670  2501*
LDW_ADR                          P        EXPT 000004F8   1780  3687*
LDW_OFS                          P        EXPT 000004FA   1781  3688*
LD_ADR                           P        EXPT 0000008C   1663  2476*
LD_BIT                           P        EXPT 00000096   1665  2482*
LD_OFS                           P        EXPT 0000008E   1664  2477*
LEL_ADR                          P        EXPT 00000684   1880  4292*
LEL_OFS                          P        EXPT 00000686   1881  4293*
LEWI_DT_LH                       P        EXPT 00000698   1885  4313*
LEWI_DT_LL                       P        EXPT 0000069A   1886  4314*
LEW_ADR                          P        EXPT 00000670   1875  4270*
LEW_OFS                          P        EXPT 00000672   1876  4271*
LTL_ADR                          P        EXPT 00000648   1865  4221*
LTL_OFS                          P        EXPT 0000064A   1866  4222*
LTWI_DT_LH                       P        EXPT 0000065C   1870  4242*
LTWI_DT_LL                       P        EXPT 0000065E   1871  4243*
LTW_ADR                          P        EXPT 00000634   1860  4199*
LTW_OFS                          P        EXPT 00000636   1861  4200*
L_BYTE                                    EQU  00000001     85*
M_REG                                     REG             2221* 2458  2459  2473  2474  2497  2498  2671  2672  2680  2996  3128 
                                                          3242  3385  3403 
NBIT0                                     EQU  000000FE     53*
NBIT1                                     EQU  000000FD     54*
NBIT10                                    EQU  0000FBFF     64*
NBIT11                                    EQU  0000F7FF     65*
NBIT12                                    EQU  0000EFFF     66*
NBIT13                                    EQU  0000DFFF     67*
NBIT14                                    EQU  0000BFFF     68*
NBIT15                                    EQU  00007FFF     69*
NBIT2                                     EQU  000000FB     55*
NBIT3                                     EQU  000000F7     56*
NBIT4                                     EQU  000000EF     57*
NBIT5                                     EQU  000000DF     58*
NBIT6                                     EQU  000000BF     59*
NBIT7                                     EQU  0000007F     60*
NBIT8                                     EQU  0000FEFF     62*
NBIT9                                     EQU  0000FDFF     63*
NEL_ADR                          P        EXPT 0000058C   1820  3991*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE    51

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

NEL_OFS                          P        EXPT 0000058E   1821  3992*
NEWI_DT_LH                       P        EXPT 000005A4   1825  4014*
NEWI_DT_LL                       P        EXPT 000005A6   1826  4015*
NEW_ADR                          P        EXPT 00000574   1815  3967*
NEW_OFS                          P        EXPT 00000576   1816  3968*
N_REG                                     REG             2220* 2690  2691  2701  2710  2720 
ORL_ADR                          P        EXPT 000006FC   1940  4431*
ORL_OFS                          P        EXPT 000006FE   1941  4432*
ORN_ADR                          P        EXPT 000000EC   1693  2575*
ORN_BIT                          P        EXPT 000000F6   1695  2581*
ORN_OFS                          P        EXPT 000000EE   1694  2576*
ORWI_DT_LH                       P        EXPT 00000710   1945  4451*
ORWI_DT_LL                       P        EXPT 00000712   1946  4452*
ORW_ADR                          P        EXPT 000006E8   1935  4409*
ORW_OFS                          P        EXPT 000006EA   1936  4410*
OR_ADR                           P        EXPT 000000D8   1687  2557*
OR_BIT                           P        EXPT 000000E2   1689  2563*
OR_OFS                           P        EXPT 000000DA   1688  2558*
P                                P        SCT  00000000   2238*
PLF_ADR                          P        EXPT 000001B8   1724  2832*
PLF_BIT                          P        EXPT 000001C2   1726  2837*
PLF_CALL                         P             0000004C   2304* 2839 
PLF_OFS                          P        EXPT 000001BA   1725  2833*
PLF_SB100                        P             000001DA   2859  2861*
PLS_ADR                          P        EXPT 0000016C   1718  2760*
PLS_BIT                          P        EXPT 00000176   1720  2765*
PLS_CALL                         P             00000048   2303* 2766 
PLS_OFS                          P        EXPT 0000016E   1719  2761*
PLS_SB100                        P             0000018E   2786  2789*
R0_REG                                    REG             2228* 3527 
R10_REG                                   REG             2234* 3104  3122  3134  3135  3143  3147  3152  3159  3170  3173  3176 
                                                          3184  3246  3268  3340  3356  3360  3369  3375  3379  3390  3392  3395 
                                                          3399  3408  3457  3459 
R1_REG                                    REG             2229* 3119  3141  3187  3197  3221  3225  3227  3273  3426  3465  3550 
R2_REG                                    REG             2230* 3198  3274  3427  3466  3520 
R3_REG                                    REG             2231*
R4_REG                                    REG             2232*
R9_REG                                    REG             2233* 3101  3198  3237  3238  3274  3338  3414  3415  3427  3466 
RSTCD_SETBIT                     P        EXPT 00000132   1714  2647*
RST_ADR                          P        EXPT 00000124   1712  2638*
RST_OFS                          P        EXPT 00000126   1713  2639*
SETCD_SETBIT                     P        EXPT 00000122   1708  2628*
SET_ADR                          P        EXPT 00000114   1706  2619*
SET_OFS                          P        EXPT 00000116   1707  2620*
SR_STCT_TOP                      P             00000060   2320* 2985 
STCD_CLRBIT                      P        EXPT 00000110   1702  2600  2608*
STCD_SETBIT                      P        EXPT 0000010A   1701  2602*
STL_ADR                          P        EXPT 00000528   1795  3747*
STL_OFS                          P        EXPT 0000052A   1796  3748*
STW_ADR                          P        EXPT 00000518   1790  3728*
STW_OFS                          P        EXPT 0000051A   1791  3729*
ST_ADR                           P        EXPT 000000FC   1699  2593*
ST_OFS                           P        EXPT 000000FE   1700  2594*
SUBL_ADR                         P        EXPT 000007AC   1910  4635*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE    52

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

SUBL_OFS                         P        EXPT 000007AE   1911  4636*
SUBWI_DT_LH                      P        EXPT 000007C0   1915  4655*
SUBWI_DT_LL                      P        EXPT 000007C2   1916  4656*
SUBW_ADR                         P        EXPT 00000798   1905  4614*
SUBW_OFS                         P        EXPT 0000079A   1906  4615*
TM_KND_TD_TOP                    P             0000006C   2323* 3234 
TM_KND_T_TOP                     P             00000068   2322* 3195  3271 
TM_LAT_CG_TOP                    P             00000070   2324* 3115 
TM_STCT_TOP                      P             00000064   2321* 3104 
TOP_REG                                   REG             2225* 2748  2796  2800  2868  2872  2936  3003  3007  3692  3713  3733 
                                                          3752  3900  3922  3972  3996  4049  4084  4133  4155  4204  4226  4275 
                                                          4297  4345  4367  4414  4436  4483  4505  4552  4573  4619  4640 
WCTR_CALL                        P             00000054   2306* 3318 
WCTR_S10                         P             000003C2   3353  3355*
WCTR_S20                         P             000003E0   3367  3374  3376*
WCTR_S30                         P             000003FA   3382  3402*
WCTR_S90                         P             00000412   3422*
WCTR_S95                         P             00000440   3405  3456*
WCTR_S97                         P             00000446   3420  3461*
WCTR_S98                         P             00000466   3387  3486*
WCTR_SEND                        P             00000468   3447  3489*
WCTR_UNH                         P        EXPT 00000398   1764  3316*
WCTR_UNL                         P        EXPT 0000039A   1765  3317*
WSC_ADR                          P        EXPT 00000204   1769  2905*
WSC_BTD                          P        EXPT 0000020E   1771  2910*
WSC_CALL                         P             00000058   2307* 2912 
WSC_OFS                          P        EXPT 00000206   1770  2906*
WSC_S10                          P             00000228   2929  2938*
WSR_ADR                          P        EXPT 00000234   1775  2962*
WSR_CALL                         P             0000005C   2308* 2968 
WSR_OFS                          P        EXPT 00000236   1776  2963*
WSR_S10                          P             0000026A   2994  3011*
WTMR_CALL                        P             00000050   2305* 3065 
WTMR_DGT                         P        EXPT 00000278   1760  3064*
WTMR_S30                         P             000002E2   3125  3150*
WTMR_S40                         P             000002F4   3162  3167*
WTMR_S45                         P             000002F6   3165  3169*
WTMR_S50                         P             0000032E   3178  3222*
WTMR_S60                         P             0000033C   3226  3232*
WTMR_S70                         P             00000346   3155  3241*
WTMR_S90                         P             00000352   3252*
WTMR_S95                         P             00000364   3244  3266*
WTMR_S98                         P             00000388   3130  3249  3294*
WTMR_SEND                        P             0000038A   3255  3297*
WTMR_UNH                         P        EXPT 00000274   1758  3062*
WTMR_UNL                         P        EXPT 00000276   1759  3063*
XBIT0                                     EQU  00000000     72*
XBIT1                                     EQU  00000001     73*
XBIT2                                     EQU  00000002     74*
XBIT3                                     EQU  00000003     75*
XBIT4                                     EQU  00000004     76*
XBIT5                                     EQU  00000005     77*
XBIT6                                     EQU  00000006     78*
XBIT7                                     EQU  00000007     79*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE    53

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

XORL_ADR                         P        EXPT 00000738   1955  4500*
XORL_OFS                         P        EXPT 0000073A   1956  4501*
XORWI_DT_LH                      P        EXPT 0000074C   1960  4520*
XORWI_DT_LL                      P        EXPT 0000074E   1961  4521*
XORW_ADR                         P        EXPT 00000724   1950  4478*
XORW_OFS                         P        EXPT 00000726   1951  4479*
_ADDL_CHG                                 IMPT 00000000   2037 
_ADDL_CODE                       P        EXPT 00000770   1894  4560*
_ADDL_CODE_END                   P        EXPT 00000782   1897  4564  4575*
_ADDWI_CHG                                IMPT 00000000   2038 
_ADDWI_CODE                      P        EXPT 00000784   1899  4581*
_ADDWI_CODE_END                  P        EXPT 00000794   1902  4585  4594*
_ADDW_CHG                                 IMPT 00000000   2036 
_ADDW_CODE                       P        EXPT 0000075C   1889  4539*
_ADDW_CODE_END                   P        EXPT 0000076E   1892  4543  4554*
_ADD_CODE                                 IMPT 00000000   1964 
_ADD_CODE_END                             IMPT 00000000   1965 
_ADD_SUB                                  IMPT 00000000   1648 
_AMRG_CHG                                 IMPT 00000000   2004 
_AMRG_CODE                       P        EXPT 00000134   1729  2670*
_AMRG_CODE_END                   P        EXPT 00000138   1730  2673*
_ANDL_CHG                                 IMPT 00000000   2045 
_ANDL_CODE                       P        EXPT 000006BC   1924  4354*
_ANDL_CODE_END                   P        EXPT 000006CE   1927  4358  4369*
_ANDN_CHG                                 IMPT 00000000   1989 
_ANDN_CODE                       P        EXPT 000000C8   1680  2538*
_ANDN_CODE_END                   P        EXPT 000000D8   1684  2549*
_ANDWI_CHG                                IMPT 00000000   2046 
_ANDWI_CODE                      P        EXPT 000006D0   1929  4375*
_ANDWI_CODE_END                  P        EXPT 000006E2   1932  4379  4389*
_ANDW_CHG                                 IMPT 00000000   2044 
_ANDW_CODE                       P        EXPT 000006A8   1919  4332*
_ANDW_CODE_END                   P        EXPT 000006BC   1922  4336  4348*
_ANDW_SUB                                 IMPT 00000000   1645 
_AND_CHG                                  IMPT 00000000   1988 
_AND_CODE                        P        EXPT 000000B4   1674  2518*
_AND_CODE_END                    P        EXPT 000000C6   1678  2530*
_BIT_DATA_TBL1                   P             00000000   2272*
_BIT_DATA_TBL2                   P             00000004   2273* 2931  3524 
_CB_BAKUP_CMD1                            EQU  00005678    118*
_CB_BAKUP_CMD2                            EQU  00001234    119*
_CB_BAK_SUM_COD1                          EQU  5AA51234    116*
_CB_BAK_SUM_COD2                          EQU  A55A4321    117*
_CB_ERR_INFO_MEM                          EQU  00000040    141*
_CB_STS_BUF_1BLK                          EQU  00000040    121*  123 
_CB_STS_BUF_BLKMAX                        EQU  00000008    122*  123 
_CB_STS_BUF_MAX                           EQU  00000200    123*
_CB_TRD_BEFORE                            EQU  00000060    131*
_CB_TRD_BUF_DP_MAX                        EQU  00000080    135*
_CB_TRD_BUF_MAX                           EQU  00000800    132*
_CB_TRD_DP_1CNT                           EQU  00000008    134*
_CB_TRD_DP_CH                             EQU  00000004    127*
_CB_TRD_SMP_CNT                           EQU  00000080    130*
_CLR_CHG                                  IMPT 00000000   2002 
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE    54

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_CLR_CODE                        P        EXPT 00000158   1752  2736*
_CLR_CODE_END                    P        EXPT 0000016A   1755  2739  2749*
_CLR_SUB                                  IMPT 00000000   1634 
_DIVS_32REG2_32REG1_R4_32REG2_R2          IMPT 00000000   2243  3229 
_DI_X_TOP1                                IMPT 00000000   1599 
_DI_X_TOP2                                IMPT 00000000   1600 
_DO_Y_TOP1                                IMPT 00000000   1601 
_DO_Y_TOP2                                IMPT 00000000   1602 
_DSETLI_CHG                               IMPT 00000000   2054 
_DSETLI_CODE                     P        EXPT 000004C0   1973  3627*
_DSETLI_CODE_END                 P        EXPT 000004D2   1978  3630  3640*
_DSETLI_SUB                      P             000004D4   2302  3647*
_DSETWI_CHG                               IMPT 00000000   2003 
_DSETWI_CODE                     P        EXPT 000004B0   1747  3609*
_DSETWI_CODE_END                 P        EXPT 000004C0   1750  3612  3621*
_DUMMY_SUM_CODE                           EQU  5AA53CC3    109*
_ENDNRG_CHG                               IMPT 00000000   2009 
_ENDNRG_CODE                     P        EXPT 00000154   1744  2719*
_ENDNRG_CODE_END                 P        EXPT 00000156   1745  2721*
_END_CHG                                  IMPT 00000000   2010 
_END_CODE                        P        EXPT 000007CC   1970  4667*
_END_CODE_END                    P        EXPT 000007D2   1971  4674*
_END_SUB                                  IMPT 00000000   1650 
_EQL_CHG                                  IMPT 00000000   2018 
_EQL_CODE                        P        EXPT 00000548   1804  3909*
_EQL_CODE_END                    P        EXPT 0000055C   1807  3913  3925*
_EQWI_CHG                                 IMPT 00000000   2019 
_EQWI_CODE                       P        EXPT 0000055C   1809  3931*
_EQWI_CODE_END                   P        EXPT 0000056E   1812  3935  3946*
_EQW_CHG                                  IMPT 00000000   2017 
_EQW_CODE                        P        EXPT 00000534   1799  3887*
_EQW_CODE_END                    P        EXPT 00000548   1802  3891  3903*
_EQ_SUB                                   IMPT 00000000   1641 
_GEL_CHG                                  IMPT 00000000   2027 
_GEL_CODE                        P        EXPT 00000608   1849  4142*
_GEL_CODE_END                    P        EXPT 0000061C   1852  4146  4158*
_GEWI_CHG                                 IMPT 00000000   2028 
_GEWI_CODE                       P        EXPT 0000061C   1854  4164*
_GEWI_CODE_END                   P        EXPT 0000062E   1857  4168  4178*
_GEW_CHG                                  IMPT 00000000   2026 
_GEW_CODE                        P        EXPT 000005F4   1844  4120*
_GEW_CODE_END                    P        EXPT 00000608   1847  4124  4136*
_GTL_CHG                                  IMPT 00000000   2024 
_GTL_CODE                        P        EXPT 000005CC   1834  4071*
_GTL_CODE_END                    P        EXPT 000005E0   1837  4075  4087*
_GTWI_CHG                                 IMPT 00000000   2025 
_GTWI_CODE                       P        EXPT 000005E0   1839  4093*
_GTWI_CODE_END                   P        EXPT 000005F2   1842  4097  4107*
_GTW_CHG                                  IMPT 00000000   2023 
_GTW_CODE                        P        EXPT 000005B8   1829  4036*
_GTW_CODE_END                    P        EXPT 000005CC   1832  4040  4052*
_GT_SUB                                   IMPT 00000000   1643 
_LDL_CHG                                  IMPT 00000000   2013 
_LDL_CODE                        P        EXPT 00000504   1784  3700*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE    55

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_LDL_CODE_END                    P        EXPT 00000514   1787  3703  3715*
_LDNRG_CHG                                IMPT 00000000   2008 
_LDNRG_CODE                      P        EXPT 0000014C   1741  2709*
_LDNRG_CODE_END                  P        EXPT 00000152   1742  2713*
_LDN_CHG                                  IMPT 00000000   1987 
_LDN_CODE                        P        EXPT 000000A0   1668  2495*
_LDN_CODE_END                    P        EXPT 000000B4   1672  2509*
_LDON_CHG                                 IMPT 00000000   1985 
_LDON_CODE                       P        EXPT 00000080   1659  2456*
_LDON_CODE_END                   P        EXPT 00000088   1660  2462*
_LDW_CHG                                  IMPT 00000000   2012 
_LDW_CODE                        P        EXPT 000004F4   1779  3680*
_LDW_CODE_END                    P        EXPT 00000504   1782  3683  3694*
_LDW_SUB                                  IMPT 00000000   1639 
_LD_CHG                                   IMPT 00000000   1986 
_LD_CODE                         P        EXPT 00000088   1662  2471*
_LD_CODE_END                     P        EXPT 0000009E   1666  2486*
_LEL_CHG                                  IMPT 00000000   2034 
_LEL_CODE                        P        EXPT 00000680   1879  4284*
_LEL_CODE_END                    P        EXPT 00000694   1882  4288  4300*
_LEWI_CHG                                 IMPT 00000000   2035 
_LEWI_CODE                       P        EXPT 00000694   1884  4306*
_LEWI_CODE_END                   P        EXPT 000006A6   1887  4310  4320*
_LEW_CHG                                  IMPT 00000000   2033 
_LEW_CODE                        P        EXPT 0000066C   1874  4262*
_LEW_CODE_END                    P        EXPT 00000680   1877  4266  4278*
_LE_SUB                                   IMPT 00000000   1644 
_LTL_CHG                                  IMPT 00000000   2031 
_LTL_CODE                        P        EXPT 00000644   1864  4213*
_LTL_CODE_END                    P        EXPT 00000658   1867  4217  4229*
_LTWI_CHG                                 IMPT 00000000   2032 
_LTWI_CODE                       P        EXPT 00000658   1869  4235*
_LTWI_CODE_END                   P        EXPT 0000066A   1872  4239  4249*
_LTW_CHG                                  IMPT 00000000   2030 
_LTW_CODE                        P        EXPT 00000630   1859  4191*
_LTW_CODE_END                    P        EXPT 00000644   1862  4195  4207*
_MKIND_A                                  EQU  00000040   2195*
_MKIND_A_ADR                              EQU  00001610   2194*
_MKIND_C                                  EQU  00000040   2177* 2178 
_MKIND_CD                                 EQU  00000400   2181* 2182 
_MKIND_CD_ADR                             EQU  00000900   2180* 2182  2327 
_MKIND_C_ADR                              EQU  000004C0   2176* 2178  2326 
_MKIND_F                                  EQU  00000110   2191* 2192 
_MKIND_F_ADR                              EQU  00000D00   2190* 2192 
_MKIND_L                                  EQU  00000040   2173* 2174 
_MKIND_L_ADR                              EQU  00000440   2172* 2174 
_MKIND_M                                  EQU  00000400   2171* 2172 
_MKIND_M_ADR                              EQU  00000040   2170* 2172 
_MKIND_S                                  EQU  00000800   2193* 2194 
_MKIND_S_ADR                              EQU  00000E10   2192* 2194 
_MKIND_T                                  EQU  00000040   2175* 2176 
_MKIND_TBL                                IMPT 00000000   2084 
_MKIND_TBL_TOP                            IMPT 00000000   2085 
_MKIND_TD                                 EQU  00000400   2179* 2180 
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE    56

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_MKIND_TD_ADR                             EQU  00000500   2178* 2180  2323 
_MKIND_T_ADR                              EQU  00000480   2174* 2176  2322 
_MKIND_W0                                 EQU  00000000   2165* 2166 
_MKIND_W0_ADR                             EQU  00000000   2164*
_MKIND_W1                                 EQU  00000000   2183* 2184 
_MKIND_W1_ADR                             EQU  00000D00   2182* 2184 
_MKIND_W2                                 EQU  00000000   2185* 2186 
_MKIND_W2_ADR                             EQU  00000D00   2184* 2186 
_MKIND_W3                                 EQU  00000000   2187* 2188 
_MKIND_W3_ADR                             EQU  00000D00   2186* 2188 
_MKIND_W4                                 EQU  00000000   2189* 2190 
_MKIND_W4_ADR                             EQU  00000D00   2188* 2190 
_MKIND_X                                  EQU  00000020   2167* 2168 
_MKIND_X_ADR                              EQU  00000000   2166* 2168 
_MKIND_Y                                  EQU  00000020   2169* 2170 
_MKIND_Y_ADR                              EQU  00000020   2168* 2170 
_NEL_CHG                                  IMPT 00000000   2021 
_NEL_CODE                        P        EXPT 00000588   1819  3983*
_NEL_CODE_END                    P        EXPT 000005A0   1822  3987  4001*
_NEWI_CHG                                 IMPT 00000000   2022 
_NEWI_CODE                       P        EXPT 000005A0   1824  4007*
_NEWI_CODE_END                   P        EXPT 000005B6   1827  4011  4023*
_NEW_CHG                                  IMPT 00000000   2020 
_NEW_CODE                        P        EXPT 00000570   1814  3959*
_NEW_CODE_END                    P        EXPT 00000588   1817  3963  3977*
_NE_SUB                                   IMPT 00000000   1642 
_NOP_CHG                                  IMPT 00000000   1984 
_NOP_CODE                        P        EXPT 000007D4   1656  4680*
_NOP_CODE_END                    P        EXPT 000007D6   1657  4682*
_OMRG_CHG                                 IMPT 00000000   2005 
_OMRG_CODE                       P        EXPT 00000138   1732  2679*
_OMRG_CODE_END                   P        EXPT 0000013E   1733  2683*
_ORL_CHG                                  IMPT 00000000   2048 
_ORL_CODE                        P        EXPT 000006F8   1939  4423*
_ORL_CODE_END                    P        EXPT 0000070A   1942  4427  4438*
_ORN_CHG                                  IMPT 00000000   1991 
_ORN_CODE                        P        EXPT 000000EC   1692  2573*
_ORN_CODE_END                    P        EXPT 000000FC   1696  2584*
_ORWI_CHG                                 IMPT 00000000   2049 
_ORWI_CODE                       P        EXPT 0000070C   1944  4444*
_ORWI_CODE_END                   P        EXPT 0000071E   1947  4448  4458*
_ORW_CHG                                  IMPT 00000000   2047 
_ORW_CODE                        P        EXPT 000006E4   1934  4401*
_ORW_CODE_END                    P        EXPT 000006F8   1937  4405  4417*
_ORW_SUB                                  IMPT 00000000   1646 
_OR_CHG                                   IMPT 00000000   1990 
_OR_CODE                         P        EXPT 000000D8   1686  2555*
_OR_CODE_END                     P        EXPT 000000EA   1690  2567*
_PLF_CHG                                  IMPT 00000000   1993 
_PLF_CODE                        P        EXPT 000001B8   1723  2830*
_PLF_CODE_END                    P        EXPT 000001CA   1727  2842*
_PLF_SUB                         P        EXPT 000001CC   1633  2304  2850*
_PLF_SUB_END                     P             000001FC   2882*
_PLS_CHG                                  IMPT 00000000   1992 
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE    57

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_PLS_CODE                        P        EXPT 0000016C   1717  2758*
_PLS_CODE_END                    P        EXPT 0000017E   1721  2769*
_PLS_SUB                         P        EXPT 00000180   1632  2303  2776*
_PLS_SUB_END                     P             000001B0   2810*
_POP_CHG                                  IMPT 00000000   2007 
_POP_CODE                        P        EXPT 00000144   1738  2698*
_POP_CODE_END                    P        EXPT 0000014C   1739  2703*
_PUSH_CHG                                 IMPT 00000000   2006 
_PUSH_CODE                       P        EXPT 00000140   1735  2689*
_PUSH_CODE_END                   P        EXPT 00000144   1736  2692*
_RST_CHG                                  IMPT 00000000   1997 
_RST_CODE                        P        EXPT 00000124   1711  2636*
_RST_CODE_END                    P        EXPT 00000134   1715  2645  2649*
_SEQ_ARG1_DATA                            IMPT 00000000   1580 
_SEQ_ARG2_DATA                            IMPT 00000000   1587 
_SEQ_ARG3_DATA                            IMPT 00000000   1594 
_SEQ_ASM_RAM_TOP                          IMPT 00000000   1558 
_SEQ_A_SET                                EQU  00000020   2134* 2195 
_SEQ_BBIT_CHG_TBL                         IMPT 00000000   2065 
_SEQ_CALL_TBL1                   P        EXPT 00000044   2298  2301* 2766  2839  2912  2968  3065  3318  3637 
_SEQ_CARD_MAX                             EQU  00000C00   2135*
_SEQ_CARD_RAM                             IMPT 00000000   1572  2322  2323  2326  2327 
_SEQ_CD_SET                               EQU  00000200   2127* 2181 
_SEQ_CHG_TBL0                             IMPT 00000000   2061 
_SEQ_CMP_ERR1                             IMPT 00000000   1578 
_SEQ_CMP_ERR2                             IMPT 00000000   1585 
_SEQ_CMP_ERR3                             IMPT 00000000   1592 
_SEQ_CMP_ERR_ADR1                         IMPT 00000000   1579 
_SEQ_CMP_ERR_ADR2                         IMPT 00000000   1586 
_SEQ_CMP_ERR_ADR3                         IMPT 00000000   1593 
_SEQ_CMP_START                            IMPT 00000000   1606 
_SEQ_CTR_DATA                             IMPT 00000000   1575  2325 
_SEQ_C_SET                                EQU  00000020   2125* 2127  2177 
_SEQ_DATA_TBL1                   P        EXPT 00000060   2316  2319* 2985  3104  3115  3195  3234  3271  3340  3411  3424  3463 
_SEQ_DRG1_DATA                            IMPT 00000000   1583 
_SEQ_DRG2_DATA                            IMPT 00000000   1590 
_SEQ_DRG3_DATA                            IMPT 00000000   1597 
_SEQ_F_SET                                EQU  00000088   2132* 2191 
_SEQ_LD_TIMOUT                            IMPT 00000000   1614 
_SEQ_L_SET                                EQU  00000020   2123* 2173 
_SEQ_MAX_BYTE                             EQU  0000001E   2158*
_SEQ_MRG1_DATA                            IMPT 00000000   1581 
_SEQ_MRG2_DATA                            IMPT 00000000   1588 
_SEQ_MRG3_DATA                            IMPT 00000000   1595 
_SEQ_M_SET                                EQU  00000200   2122* 2171 
_SEQ_NRG1_DATA                            IMPT 00000000   1582 
_SEQ_NRG2_DATA                            IMPT 00000000   1589 
_SEQ_NRG3_DATA                            IMPT 00000000   1596 
_SEQ_POU_SET                              EQU  00004000   2159*
_SEQ_RUN1                                 IMPT 00000000   1561 
_SEQ_RUN1_END                             IMPT 00000000   1562 
_SEQ_RUN1_TOP                             IMPT 00000000   1560 
_SEQ_RUN2                                 IMPT 00000000   1565 
_SEQ_RUN2_END                             IMPT 00000000   1566 
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE    58

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_SEQ_RUN2_TOP                             IMPT 00000000   1564 
_SEQ_RUN3                                 IMPT 00000000   1569 
_SEQ_RUN3_END                             IMPT 00000000   1570 
_SEQ_RUN3_TOP                             IMPT 00000000   1568 
_SEQ_RUN_CHG1_ERR_END                     IMPT 00000000   2042 
_SEQ_SR_FLG                               IMPT 00000000   1576  2320 
_SEQ_S_SET                                EQU  00000400   2133* 2193 
_SEQ_TD_SET                               EQU  00000200   2126* 2179 
_SEQ_TIM_WK1000M                          IMPT 00000000   1617 
_SEQ_TIM_WK100M                           IMPT 00000000   1616 
_SEQ_TMR_DATA                             IMPT 00000000   1574  2321 
_SEQ_T_SET                                EQU  00000020   2124* 2126  2175 
_SEQ_W0_SET                               EQU  00000000   2119* 2165 
_SEQ_W1_SET                               EQU  00000000   2128* 2183 
_SEQ_W2_SET                               EQU  00000000   2129* 2185 
_SEQ_W3_SET                               EQU  00000000   2130* 2187 
_SEQ_W4_SET                               EQU  00000000   2131* 2189 
_SEQ_X_SET                                EQU  00000010   2120* 2167 
_SEQ_Y_SET                                EQU  00000010   2121* 2169 
_SET_CHG                                  IMPT 00000000   1996 
_SET_CODE                        P        EXPT 00000114   1705  2617*
_SET_CODE_END                    P        EXPT 00000124   1709  2626  2630*
_SQ_ERR_END                               EQU  0000FF00   2112*
_SQ_NML_COD                               EQU  00000000   2110*
_SQ_NML_END                               EQU  00000055   2111*
_START_ACK_COD                            EQU  00004321    215*
_START_REQ_COD                            EQU  00009876    214*
_STL_CHG                                  IMPT 00000000   2015 
_STL_CODE                        P        EXPT 00000524   1794  3740*
_STL_CODE_END                    P        EXPT 00000534   1797  3743  3753*
_STW_CHG                                  IMPT 00000000   2014 
_STW_CODE                        P        EXPT 00000514   1789  3721*
_STW_CODE_END                    P        EXPT 00000524   1792  3724  3734*
_STW_SUB                                  IMPT 00000000   1640 
_ST_CHG                                   IMPT 00000000   1994 
_ST_CODE                         P        EXPT 000000FC   1698  2591*
_ST_CODE_END                     P        EXPT 00000112   1703  2605  2610*
_SUBL_CHG                                 IMPT 00000000   2040 
_SUBL_CODE                       P        EXPT 000007A8   1909  4627*
_SUBL_CODE_END                   P        EXPT 000007BA   1912  4631  4642*
_SUBWI_CHG                                IMPT 00000000   2041 
_SUBWI_CODE                      P        EXPT 000007BC   1914  4648*
_SUBWI_CODE_END                  P        EXPT 000007CC   1917  4652  4661*
_SUBW_CHG                                 IMPT 00000000   2039 
_SUBW_CODE                       P        EXPT 00000794   1904  4606*
_SUBW_CODE_END                   P        EXPT 000007A6   1907  4610  4621*
_SUB_CODE                                 IMPT 00000000   1967 
_SUB_CODE_END                             IMPT 00000000   1968 
_SUB_SUB                                  IMPT 00000000   1649 
_SeqLd_MKIND_TBL_TOP                      IMPT 00000000   2086 
_SeqSysStat                               IMPT 00000000   1608 
_TMR_CNT_ADR_BIT_H               P             0000049C   3534  3546*
_TMR_CNT_ADR_BIT_L               P             00000498   3531  3542*
_TMR_CNT_ADR_BIT_MAKE            P             00000474   3200  3276  3429  3468  3515*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE    59

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_TM_LATE_CHGTOP                  P             00000280   2324  3081*
_T_0001HR_CNT                             EQU  00000020   2214*
_T_0001HR_TOP                             EQU  000001E0   2213*
_T_0001MS_CNT                             EQU  00000040   2212* 2213 
_T_0001MS_TOP                             EQU  000001A0   2211* 2213 
_T_0010MS_CNT                             EQU  00000100   2206* 2207 
_T_0010MS_TOP                             EQU  00000000   2205* 2207 
_T_0100MS_CNT                             EQU  00000080   2208* 2209 
_T_0100MS_TOP                             EQU  00000100   2207* 2209 
_T_1000MS_CNT                             EQU  00000020   2210* 2211 
_T_1000MS_TOP                             EQU  00000180   2209* 2211 
_VUPCHECK_EQU                             EQU  11AB3739    102*
_WCTR_CHG                                 IMPT 00000000   2000 
_WCTR_CODE                       P        EXPT 00000398   1763  3314*
_WCTR_CODE_END                   P        EXPT 000003A2   1766  3321*
_WCTR_SUB                        P        EXPT 000003A4   1636  2306  3330*
_WSC_CHG                                  IMPT 00000000   1995 
_WSC_CODE                        P        EXPT 00000204   1768  2903*
_WSC_CODE_END                    P        EXPT 00000216   1772  2915*
_WSC_SUB                         P        EXPT 00000218   1637  2307  2922*
_WSR_CHG                                  IMPT 00000000   2001 
_WSR_CODE                        P        EXPT 00000234   1774  2960*
_WSR_CODE_END                    P        EXPT 00000244   1777  2971*
_WSR_SUB                         P        EXPT 00000244   1638  2308  2980*
_WTMR_CHG                                 IMPT 00000000   1999 
_WTMR_CODE                       P        EXPT 00000274   1757  3061*
_WTMR_CODE_END                   P        EXPT 00000280   1761  3068*
_WTMR_SUB                        P        EXPT 000002A0   1635  2305  3092*
_XORL_CHG                                 IMPT 00000000   2051 
_XORL_CODE                       P        EXPT 00000734   1954  4492*
_XORL_CODE_END                   P        EXPT 00000746   1957  4496  4507*
_XORWI_CHG                                IMPT 00000000   2052 
_XORWI_CODE                      P        EXPT 00000748   1959  4513*
_XORWI_CODE_END                  P        EXPT 0000075A   1962  4517  4527*
_XORW_CHG                                 IMPT 00000000   2050 
_XORW_CODE                       P        EXPT 00000720   1949  4470*
_XORW_CODE_END                   P        EXPT 00000734   1952  4474  4486*
_XORW_SUB                                 IMPT 00000000   1647 
_X_PUSH_TOP1                              IMPT 00000000   1603 
_X_PUSH_TOP2                              IMPT 00000000   1604 
__TMCT_FLG                                EQU  00000008   2203* 3122  3134  3147  3152  3159  3170  3184  3246  3268  3356  3360 
                                                          3379  3390  3392  3399  3457  3459 
__TMCT_PV                                 EQU  00000000   2201* 3135  3173  3369  3375  3395  3408 
__TMCT_ST_CNT                             EQU  0000000C   2200*
__TMCT_SV                                 EQU  00000004   2202* 3143  3176 
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/15/15 05:47:31                                                  PAGE    60

*** SECTION DATA LIST

SECTION                          ATTRIBUTE    SIZE             START

P                                REL-CODE    0000007D6        
