;------------------------------------------------------------------------
;                                                                       |
;   FILE        :resetprg.src                                           |
;   DATE        :Sun, Jul 16, 2006                                      |
;   DESCRIPTION :Reset Program                                          |
;   CPU TYPE    :Other                                                  |
;                                                                       |
;   This file is generated by Hitachi Project Generator (Ver.1.1).      |
;                                                                       |
;------------------------------------------------------------------------
	.include	"vect.inc"
	.include	"cm_equ1.equ"
	.INCLUDE	"shn_cmd1.MAC"		; 
	.INCLUDE	"CPU_REG.ext"		; 
	.include	"ssa_ver1.equ"
	.include	"ssa_com1.mac"
	.include	"ssa_had1.equ"
	.include	"ssa_wrmy.ext"


;;_ROM_SUM_SEL	.DEFINE		"_CMPILE_YES"		; 出荷時
_ROM_SUM_SEL	.DEFINE		"_CMPILE_NO"		; ﾃﾞﾊﾞｯｸﾞ時


	.import	_PowerON_Reset_SP
	.import	_INTHandlerPRG
	.import	__INITSCT
	.import _main

;	.import __INIT_IOLIB		; Remove the comment when you use SIM I/O
;	.import __CLOSEALL
	
;	.import __INIT_OTHERLIB		; Remove the comment when you use rand(),strtok()

;	.import	_HardwareSetup		; Remove the comment when you use Hardware Setup

;	.import	__call_init			; Remove the comment when you use __call_init
;	.import	__call_end			; Remove the comment when you use __call_end


	.import 	_HardwareSetup1;
	.import 	_HardwareSetup2;
	.import 	_IRAM_CLEAR;
	.import 	_WORK_MEM_CHK2;
	.import 	_DP_MEM_CHK			;cpud-a間
	.import 	_DP2_MEM_CHK			;cpud-b間
	
	.import 	_ROM_SUM_CHK;
	.import		_SCI_VUP_MAIN;
	.import		_SCI0_PRO_ROM_TO_RAM;
	.import		_INTHdlr_TO_RAM;
	.import		_init_LCD;
	.import		_init_DISP;
	.import		_vup_mesG_disp;

	.import		_VUPCHECK_DATA;
	.import		_CASH_ENB
	.import		_P_TO_PRAM_COPY			; P -> PRAM
	.import		_PC_TO_PCRAM_COPY		; Pcall -> PcallRAM
	.import		_PH_TO_PHRAM_COPY		; Pcall -> PcallRAM
	.import		_INTDI_SCI_EXCEPT

	.import		_GAM_INF_TBL
	.import		_GAM_INF_TBL2			; V06

	.import		_dio_top1			; 2006-10-19 SAITO
	.import		_dio_top2			; 2006-10-19 SAITO

	.IMPORT		_KJ_CHK_CNT0


		.section ResetPRG,code
_PowerON_Reset:
_Manual_Reset:
		mov.l   #_PowerON_Reset_SP, R15  ; Initialize SP
		mov.l	#_INTHandlerPRG,r0 
		mov.l	#H'100,r1
		sub.l	r1,r0
		ldc		r0,vbr			; VBR addr set 

;//		mov.l	#__INITSCT,r1
;//		jsr     @r1
;//		nop

;		mov.l	#__INIT_IOLIB,r1		; Remove the comment when you use SIM I/O
;		jsr     @r1
;		nop
			
;		mov.l	#__INIT_OTHERLIB,r1		; Remove the comment when you use rand(),strtok()
;		jsr     @r1
;		nop

;		mov.l	#_HardwareSetup,r1		; Remove the comment when you use Hardware Setup
;		jsr     @r1
;		nop

;		mov.l	#__call_init,r1			; Remove the comment when you use global class object
;		jsr     @r1						; See initsct.c and dbsct.src
;		nop

;//		mov.l	#SR_Init,r0
;//		mov.l	#_main,r8
;//		ldc		r0,sr					; SR set (User AP mode)
;//		jsr		@r8
;//		nop

;		mov.l	#__call_end,r1			; Remove the comment when you use global class object
;		jsr     @r1						; See initsct.c and dbsct.src
;		nop

;		mov.l	#__CLOSEALL,r1			; Remove the comment when you use SIM I/O
;		jsr     @r1
;		nop
			

	mov.l	#_HardwareSetup1,r1	; Use Hardware Setup
	jsr     @r1
	nop

	mov.l	#_IRAM_CLEAR,r1				; 内臓RAMｸﾘｱ	2006/12/26 V05
	jsr     @r1
	nop

;	=========== WDT CLEARのために立花LSIをイニシャルする 2006-10-19 SAITO ============
	MOV.L	#_dio_top2+_IOGA_PDIR5,R1		; IC7 IC21 PORT5
	MOV.W	#H'00FF,R0				;
	MOV.W	R0,@R1					; BIT0~7 OUTPUT
;	==================================================================================

	_WDT_CLR

	mov.l	#_init_LCD,r1				; ＬＣＤシステムシニシャライズ
	jsr     @r1
	nop

	mov.l	#_init_DISP,r1				; ｲﾆｼｬﾙ中画面表示
	jsr	@r1
	nop

	_WDT_CLR

	mov.l	#_WORK_MEM_CHK2,r1			; SRAMｸﾘｱ
	jsr	@r1
	nop

	mov.l	#_DP_MEM_CHK,r1				;cpud-a間
	jsr	@r1
	nop

	mov.l	#_DP2_MEM_CHK,r1			;cpud-b間
	jsr	@r1
	nop



	.AIF	_ROM_SUM_SEL EQ _CMPILE_YES
	mov.l	#_ROM_SUM_CHK,r1			; ROM SUM CHECK		2006/12/26 V05
	jsr	@r1
	nop
	.AENDI

	mov.l	#_INTHdlr_TO_RAM,r1		;
	jsr	@r1
	nop

	mov.l	#_SCI0_PRO_ROM_TO_RAM,r1		;
	jsr	@r1
	nop



;//	*********************************************************************
;//	*****	最終ｾｸｼｮﾝに固定ﾃﾞｰﾀが入っているかどうか確認		*****
;//	*****	入っていなければﾊﾞｰｼﾞｮﾝUP待ち状態にする。		*****
;//	*****	ﾊﾞｰｼﾞｮﾝUPする時は、必ず最初に最終ｾｸｼｮﾝを消去		*****
;//	*********************************************************************
;//SIT4-MC  2014/04/17
	MOV.L	#_PFDR,R10
	MOV.B	@R10,R0
	NOT	R0,R0
	MOV.L	#H'0F,R2
	AND	R2,R0
	MOV.L	#_PMDR,R10
	MOV.B	@R10,R1
	NOT	R1,R1
	MOV.L	#H'0F0,R2
	AND	R2,R1
	OR	R1,R0

	EXTU.B	R0,R0
	MOV.B	#H'81,R2
	EXTU.B	R2,R2
	CMP/EQ	R2,R0
	BF	_PONR_000				; 
	M_BRA	_PONR_030				; SW-1,8だけONならﾊﾞｰｼﾞｮﾝUPへ

_PONR_000:
	MOV.L	#_VUPCHECK_DATA,R1
	MOV.L	@R1,R0
	MOV.L	#_VUPCHECK_EQU,R1
	CMP/EQ	R1,R0					; 前回のﾌﾟﾛｸﾞﾗﾑﾊﾞｰｼﾞｮﾝUPは正常？
	BT	_PONR_002
	M_BRA	_PONR_030				; いいえ	ﾊﾞｰｼﾞｮﾝUPへ

_PONR_002:

;	================================================================ V06 画面データ新領域対応
	MOV.L	#_GAM_INF_TBL2+512,R1			; V06
	MOV.W	@R1,R0
	MOV.L	#H'0FF00,R2
	AND	R2,R0
	MOV.L	#H'05A00,R2
	CMP/EQ	R2,R0
	BT	_PONR_004				; 画面ﾃﾞｰﾀの最後に5Aが入っていればOK
;//V06m	M_BRA	_PONR_008
	FAR_JSR	#_vup_mesG_disp,R1			; 「ﾊﾞｰｼﾞｮﾝUPしてね」ﾒｯｾｰｼﾞ表示
	M_BRA	_PONR_030

_PONR_004:
	MOV.L	#_GAM_INF_TBL2+(3-1)*4,R1		;
	MOV.L	@R1,R0
	CMP/EQ	#0,R0					; 画面No.3にﾃﾞｰﾀある？  あるならｻｰﾎﾞ用の画面ﾃﾞｰﾀ！
	BF	_PONR_006				; ある
	FAR_JSR	#_vup_mesG_disp,R1			; 「ﾊﾞｰｼﾞｮﾝUPしてね」ﾒｯｾｰｼﾞ表示
	M_BRA	_PONR_030				; ﾊﾞｰｼﾞｮﾝUPへ

_PONR_006:
	M_BRA	_PONR_020
;	==================================================================


_PONR_008:
	MOV.L	#_GAM_INF_TBL+512,R1
	MOV.W	@R1,R0
	MOV.L	#H'0FF00,R2
	AND	R2,R0
	MOV.L	#H'05A00,R2
	CMP/EQ	R2,R0
	BT	_PONR_010				; 画面ﾃﾞｰﾀの最後に5Aが入っていればOK
	FAR_JSR	#_vup_mesG_disp,R1			; 「ﾊﾞｰｼﾞｮﾝUPしてね」ﾒｯｾｰｼﾞ表示
	M_BRA	_PONR_030				; ﾊﾞｰｼﾞｮﾝUPへ

_PONR_010:
	MOV.L	#_GAM_INF_TBL+(3-1)*4,R1		; V05i
	MOV.L	@R1,R0
	CMP/EQ	#0,R0					; 画面No.3にﾃﾞｰﾀある？  あるならｻｰﾎﾞ用の画面ﾃﾞｰﾀ！
	BF	_PONR_020				; ある
	FAR_JSR	#_vup_mesG_disp,R1			; 「ﾊﾞｰｼﾞｮﾝUPしてね」ﾒｯｾｰｼﾞ表示
	M_BRA	_PONR_030				; ﾊﾞｰｼﾞｮﾝUPへ

_PONR_020:
	M_BRA	_PONR_100



_PONR_030:
	mov.l	#SR_Init_SCIEI,r0
	ldc	r0,sr					; SR set (SCI割込み(E)だけ許可)
	NOP

_PONR_050:
	FAR_JSR	#_SCI_VUP_MAIN,R0
	M_BRA	_PONR_050



_PONR_100:
	MOV.L	#_PRG_start,R1
	JSR	@R1
	NOP


		sleep
		nop
		.pool


	.section	Pstart,code
_PRG_start:
	SUB_START

	mov.l	#__INITSCT,r1
	jsr     @r1
	nop

;//debug060716	mov.l	#_HardwareSetup2,r1			; Use Hardware Setup
;//debug060716	jsr     @r1
;//debug060716	nop

;//SHIMA	mov.l	#__INIT_IOLIB,r1	; Use SIM I/O
;//SHIMA	jsr     @r1
;//SHIMA	nop


	MOV.L	#_CASH_ENB,R1			;
	jsr     @r1
	nop

	mov.l	#_P_TO_PRAM_COPY,r1		; P -> PRAM
	jsr     @r1
	nop

	mov.l	#_PC_TO_PCRAM_COPY,r1		; Pcall -> PcallRAM
	jsr     @r1
	nop

	mov.l	#_PH_TO_PHRAM_COPY,r1		; PHiROM -> PHiRAM	V06b
	jsr     @r1
	nop

;	mov.l	#__call_init,r1		; Remove the comment when you use global class object
;	jsr     @r1					; See initsct.c and dbsct.src
;	nop

_start000:
	mov.l	#_main,r8
	jsr	@r8
	nop

;	mov.l	#__call_end,r1		; Remove the comment when you use global class object
;	jsr     @r1					; See initsct.c and dbsct.src
;	nop

;//SHIMA	mov.l	#__CLOSEALL,r1		; Use SIM I/O
;//SHIMA	jsr     @r1
;//SHIMA	nop
	
	sleep
	nop
	.pool


VUP_TEST:
	.DATA.L		H'12345678, H'87654321, H'5A5AA5A5, H'A5A55A5A
	.DATA.L		H'00000000, H'FFFFFFFF, H'55555555, H'AAAAAAAA
	.DATA.L		H'12345678, H'87654321, H'5A5AA5A5, H'A5A55A5A

		.end
