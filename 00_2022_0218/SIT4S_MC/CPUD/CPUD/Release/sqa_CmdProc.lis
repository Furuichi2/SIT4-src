*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE     1
PROGRAM NAME =

    1                               1     ;****************************************************************************************
    2                               2     ;* File Name    : ssa_CmdProc.src
    3                               3     ;* Function     : シーケンスコード毎実処理
    4                               4     ;* Author       : Designed by T.Akiba, Coded by T.Akiba
    5                               5     ;* Date         : 2009-11-20 Akiba
    6                               6     ;* Update       : 2010-08-11 Y.Kobayashi(コード整理)
    7                               7     ;****************************************************************************************
    8                               8     
    9                               9     ;********************************************************************
   10                              10     ;* INCLUDE
   11                              11     ;********************************************************************
 2285                              19     
 2286 00000000                     20             .SECTION        P,CODE
 2287                              21     
 2288                              22     ;********************************************************************
 2289                              23     ;* EXTERN 宣言 PROGRAM
 2290                              24     ;********************************************************************
 2291                              25             .IMPORT _DIVS_32REG2_32REG1_R4_32REG2_R2
 2292                              26     
 2293                              27     ;********************************************************************
 2294                              28     ;* DEFINE定義
 2295                              29     ;********************************************************************
 2296                              30     ; 実行シーケンス置換用
 2297                              31     _SEQ_KND_T_TOP          .DEFINE         "_SEQ_CARD_RAM+_MKIND_T_ADR"    ;
 2298                              32     _SEQ_KND_TD_TOP         .DEFINE         "_SEQ_CARD_RAM+_MKIND_TD_ADR"   ;
 2299                              33     _SEQ_KND_C_TOP          .DEFINE         "_SEQ_CARD_RAM+_MKIND_C_ADR"    ;
 2300                              34     _SEQ_KND_CD_TOP         .DEFINE         "_SEQ_CARD_RAM+_MKIND_CD_ADR"   ;
 2301                              35     
 2302                              36     ;命令で置き換える対象で数値は最大値を記述してる
 2303          0000007F            37     CHG_SQ_ADR              .EQU            H'7F            ; Xに置き換える WORD-MEM/256=X...Y
 2304          000000FF            38     CHG_SQ_OFS              .EQU            H'FF            ; Yに置き換える WORD-MEM/256=X...Y
 2305          000000FF            39     CHG_SQ_BIT              .EQU            H'FF            ; BIT0~BIT7に置き換える
 2306          0000000F            40     CHG_SQ_BTD              .EQU            H'0F            ; BIT0〜BIT15を"0~F"に置き換える
 2307          000000FF            41     CHG_HHDATA              .EQU            H'FF            ; 数値に置き換える
 2308          000000FF            42     CHG_HLDATA              .EQU            H'FF            ; 数値
 2309          000000FF            43     CHG_LHDATA              .EQU            H'FF            ; 数値
 2310          000000FF            44     CHG_LLDATA              .EQU            H'FF            ; 数値
 2311          0000007F            45     CHG_UNIT_H              .EQU            H'7F            ; ﾀｲﾏ・ｶｳﾝﾀのﾕﾆｯﾄ番号H
 2312          000000FF            46     CHG_UNIT_L              .EQU            H'FF            ; ﾀｲﾏ・ｶｳﾝﾀのﾕﾆｯﾄ番号L
 2313          0000000F            47     CHG_DGT_SL              .EQU            H'0F            ; ﾀｲﾏ変換方法(単位)
 2314                              48     
 2315                              49     ;********************************************************************
 2316                              50     ;* シーケンス関係テーブル
 2317                              51     ;********************************************************************
 2318 00000000                     52             .ALIGN  4
 2319                              53     
 2320 00000000 00000000            54     _BIT_DATA_TBL1          .DATA.L         0
 2321 00000004 00000001            55     _BIT_DATA_TBL2          .DATA.L         BIT0            ; 0
 2322 00000008 00000002            56                             .DATA.L         BIT1            ; 1
 2323 0000000C 00000004            57                             .DATA.L         BIT2            ; 2
 2324 00000010 00000008            58                             .DATA.L         BIT3            ; 3
 2325 00000014 00000010            59                             .DATA.L         BIT4            ; 4
 2326 00000018 00000020            60                             .DATA.L         BIT5            ; 5
 2327 0000001C 00000040            61                             .DATA.L         BIT6            ; 6
 2328 00000020 00000080            62                             .DATA.L         BIT7            ; 7
 2329 00000024 00000100            63                             .DATA.L         BIT8            ; 8
 2330 00000028 00000200            64                             .DATA.L         BIT9            ; 9
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE     2
PROGRAM NAME =

 2331 0000002C 00000400            65                             .DATA.L         BIT10           ; A
 2332 00000030 00000800            66                             .DATA.L         BIT11           ; B
 2333 00000034 00001000            67                             .DATA.L         BIT12           ; C
 2334 00000038 00002000            68                             .DATA.L         BIT13           ; D
 2335 0000003C 00004000            69                             .DATA.L         BIT14           ; E
 2336 00000040 00008000            70                             .DATA.L         BIT15           ; F
 2337                              71     
 2338                              72     ;********************************************************************
 2339                              73     ;* CALLテーブル
 2340                              74     ;*
 2341                              75     ;* 実行側ｿﾌﾄのみ使用
 2342                              76     ;* ラベル参照なので並ぶ順番はどうでもいい
 2343                              77     ;* CTBL_REG = _SEQ_CALL_TBL1
 2344                              78     ;********************************************************************
 2345                              79     
 2346                              80             .EXPORT _SEQ_CALL_TBL1
 2347 00000044                     81             .ALIGN  4
 2348                              82     
 2349 00000044                     83     _SEQ_CALL_TBL1                                          ; CALL TABLEは127個まで
 2350 00000044 00000000            84     DSETLI_CALL             .DATA.L         _DSETLI_SUB     ; 直接数値の4BYTE読出
 2351 00000048 00000000            85     PLS_CALL                .DATA.L         _PLS_SUB        ; ON EDGE 1PLS命令 ｻﾌﾞﾙｰﾁﾝｱﾄﾞﾚｽ 1
 2352 0000004C 00000000            86     PLF_CALL                .DATA.L         _PLF_SUB        ; OF EDGE 1PLS命令 ｻﾌﾞﾙｰﾁﾝｱﾄﾞﾚｽ 2
 2353 00000050 00000000            87     WTMR_CALL               .DATA.L         _WTMR_SUB       ; ﾀｲﾏ命令 ｻﾌﾞﾙｰﾁﾝｱﾄﾞﾚｽ          4
 2354 00000054 00000000            88     WCTR_CALL               .DATA.L         _WCTR_SUB       ; ｶｳﾝﾀ命令 ｻﾌﾞﾙｰﾁﾝｱﾄﾞﾚｽ         5
 2355 00000058 00000000            89     WSC_CALL                .DATA.L         _WSC_SUB        ; ｽﾃｯﾌﾟｺﾝﾄﾛｰﾙ命令 ｻﾌﾞﾙｰﾁﾝｱﾄﾞﾚｽ  6
 2356 0000005C 00000000            90     WSR_CALL                .DATA.L         _WSR_SUB        ; ｼﾌﾄﾚｼﾞｽﾀ命令 ｻﾌﾞﾙｰﾁﾝｱﾄﾞﾚｽ     7
 2357                              91     
 2358                              92     ;********************************************************************
 2359                              93     ;* 特殊データ領域TBL
 2360                              94     ;*
 2361                              95     ;* DTBL_REG = _SEQ_DATA_TBL1
 2362                              96     ;* SR、タイマ、カウンタ
 2363                              97     ;********************************************************************
 2364                              98             .EXPORT _SEQ_DATA_TBL1          ;
 2365 00000060                     99             .ALIGN  4
 2366                             100     
 2367 00000060                    101     _SEQ_DATA_TBL1
 2368 00000060 00000000           102     SR_STCT_TOP     .DATA.L         _SEQ_SR_FLG             ; USED
 2369 00000064 00000000           103     TM_STCT_TOP     .DATA.L         _SEQ_TMR_DATA           ; USED
 2370 00000068 00000000           104     TM_KND_T_TOP    .DATA.L         _SEQ_CARD_RAM+_MKIND_T_ADR              ; USED
 2371 0000006C 00000000           105     TM_KND_TD_TOP   .DATA.L         _SEQ_CARD_RAM+_MKIND_TD_ADR             ; USED
 2372 00000070 00000000           106     TM_LAT_CG_TOP   .DATA.L         _TM_LATE_CHGTOP         ; USED
 2373 00000074 00000000           107     CT_STCT_TOP     .DATA.L         _SEQ_CTR_DATA           ; USED
 2374 00000078 00000000           108     CT_KDN_C_TOP    .DATA.L         _SEQ_CARD_RAM+_MKIND_C_ADR              ; USED
 2375 0000007C 00000000           109     CT_KND_CD_TOP   .DATA.L         _SEQ_CARD_RAM+_MKIND_CD_ADR             ; USED
 2376                             110     
 2377                             111     
 2378                             112     ;********************************************************************
 2379                             113     ;* シーケンス命令用
 2380                             114     ;* マクロ
 2381                             115     ;********************************************************************
 2382                             116     
 2383                             117     ;       *******************************************
 2384                             118     ;       ***                                     ***
 2385                             119     ;       ***     LD命令時のMﾚｼﾞへのｽﾀｯｸ          ***
 2386                             120     ;       ***     [3]                             ***
 2387                             121     ;       *******************************************
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE     3
PROGRAM NAME =

 2388                             122             .MACRO  LD_M_STACK                      ;
 2389                             123                     SHLL    M_REG                           ; MRG ｼﾌﾄ
 2390                             124                     OR      A_REG,M_REG                     ; NEW Mreg SAVE
 2391                             125             .ENDM
 2392                             126     
 2393                             127     ;       *******************************************
 2394                             128     ;       ***                                     ***
 2395                             129     ;       ***     ADR.BIT命令時のADRESS作成       ***
 2396                             130     ;       ***     byteｱﾄﾞﾚｽ･･･+0/+1処理有り       ***
 2397                             131     ;       ***     ANS ADR=R0 USED R1              ***
 2398                             132     ;       ***     [5]                             ***
 2399                             133     ;       *******************************************
 2400                             134             .MACRO  ADR_MAKE1_BIT   LBEL1,LBEL2
 2401                             135     \LBEL1:         MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE(0~7Fま
                                          で)
 2402                             136     \LBEL2:         MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYTE
 2403                             137                     SHLL8   R1
 2404                             138                     EXTU.B  R0,R0                           ;
 2405                             139                     OR      R1,R0                           ; adress
 2406                             140             .ENDM
 2407                             141     
 2408                             142     ;       *******************************************
 2409                             143     ;       ***                                     ***
 2410                             144     ;       ***     WORD命令時のADRESS作成          ***
 2411                             145     ;       ***     byteｱﾄﾞﾚｽ 但し偶数(+0)のみ      ***
 2412                             146     ;       ***     ANS ADR=R0 USED R1              ***
 2413                             147     ;       ***     [5]                             ***
 2414                             148     ;       *******************************************
 2415                             149             .MACRO  ADR_MAKE1_WORD LBEL1,LBEL2
 2416                             150                     ADR_MAKE1_BIT \LBEL1,\LBEL2
 2417                             151             .ENDM
 2418                             152     
 2419                             153     ;       *******************************************
 2420                             154     ;       ***                                     ***
 2421                             155     ;       ***     WORD命令時の直接数値作成        ***
 2422                             156     ;       ***     byteｱﾄﾞﾚｽ 但し偶数(+0)のみ      ***
 2423                             157     ;       ***     ANS data=R2 USED R1,R2          ***
 2424                             158     ;       ***     [5]                             ***
 2425                             159     ;       *******************************************
 2426                             160             .MACRO  IMD_MAKE1_WORD LBEL1,LBEL2              ;
 2427                             161     \LBEL1:         MOV.B   #CHG_LHDATA,R1                  ; H_BYTE
 2428                             162     \LBEL2:         MOV.B   #CHG_LLDATA,R2                  ; L_BYTE
 2429                             163                     SHLL8   R1                              ; 符号をそのまま
 2430                             164                     EXTU.B  R2,R2                           ;
 2431                             165                     OR      R1,R2                           ; data
 2432                             166             .ENDM
 2433                             167     
 2434                             168     ;       *******************************************
 2435                             169     ;       ***                                     ***
 2436                             170     ;       ***     WORD命令時の直接数値作成        ***
 2437                             171     ;       ***     byteｱﾄﾞﾚｽ 但し偶数(+0)のみ      ***
 2438                             172     ;       ***     ANS data=R2 USED R1,R2          ***
 2439                             173     ;       ***     [5]                             ***
 2440                             174     ;       *******************************************
 2441                             175             .MACRO  IMD_MAKE1_LONG LBEL1,LBEL2,LBEL3,LBEL4
 2442                             176     \LBEL1:         MOV.B   #CHG_HHDATA,R3                  ; H_BYTE
 2443                             177     \LBEL2:         MOV.B   #CHG_HLDATA,R4                  ; L_BYTE
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE     4
PROGRAM NAME =

 2444                             178     \LBEL3:         MOV.B   #CHG_LHDATA,R1                  ; H_BYTE
 2445                             179     \LBEL4:         MOV.B   #CHG_LLDATA,R2                  ; L_BYTE
 2446                             180     
 2447                             181                     EXTU.B  R3,R3                           ; 000x
 2448                             182                     SHLL8   R3                              ; 00x0
 2449                             183                     SWAP.W  R3,R3                           ; x000 HH,0,0,0
 2450                             184                                                             ; 16bitｼﾌﾄ+下位WORD0ｸﾘｱ
 2451                             185     
 2452                             186                     EXTU.B  R4,R4                           ; 000x
 2453                             187                     SWAP.W  R4,R4                           ; 0x00 0,HL,0,0
 2454                             188     
 2455                             189                     EXTU.B  R1,R1                           ; 000x
 2456                             190                     SHLL8   R1                              ; 00x0 0,0,LH,0
 2457                             191     
 2458                             192                     EXTU.B  R2,R2                           ; LL
 2459                             193                     OR      R3,R2                           ;
 2460                             194                     OR      R4,R2                           ;
 2461                             195                     OR      R1,R2                           ;
 2462                             196             .ENDM
 2463                             197     
 2464                             198     ;       ***************************************************
 2465                             199     ;       ***                                             ***
 2466                             200     ;       ***     ADR.BIT命令時のBIT→R0作成              ***
 2467                             201     ;       ***     [3]     LD,AND,OR                       ***
 2468                             202     ;       ***************************************************
 2469                             203             .MACRO  BIT_LD_R0 LBEL1
 2470                             204     \LBEL1:         TST.B   #CHG_SQ_BIT,@(R0,GBR)           ; [命令書換用ラベル] BIT=OFFならTB
                                          IT=1
 2471                             205                     MOVT    R0                              ; T-BIT==>R0
 2472                             206                     XOR     #BIT0,R0                        ;
 2473                             207             .ENDM
 2474                             208     
 2475                             209     ;       ***************************************************
 2476                             210     ;       ***                                             ***
 2477                             211     ;       ***     ADR.BIT命令時のBITの反転→R0作成        ***
 2478                             212     ;       ***     [2]     LDN,ANDN,ORN                    ***
 2479                             213     ;       ***************************************************
 2480                             214             .MACRO  BIT_LD_NOT_R0 LBEL1
 2481                             215     \LBEL1:         TST.B   #CHG_SQ_BIT,@(R0,GBR)           ; [命令書換用ラベル];BIT=OFFならTB
                                          IT=1
 2482                             216                     MOVT    R0                              ; T-BIT==>R0
 2483                             217             .ENDM
 2484                             218     
 2485                             219     
 2486                             220     ;********************************************************************
 2487                             221     ;* シーケンス命令
 2488                             222     ;* BIT操作
 2489                             223     ;********************************************************************
 2490                             224     ;         ------------------------------
 2491                             225     ;       +0|       命令CODE      (  )   |
 2492                             226     ;         ------------------------------
 2493                             227     ;       +1|     ﾒﾓﾘ種別/BIT     (  )   |
 2494                             228     ;         ------------------------------
 2495                             229     ;       +2|       MEM_ADR上位   (  )   |
 2496                             230     ;         ------------------------------
 2497                             231     ;       +3|       MEM_ADR下位   (  )   |
 2498                             232     ;         ------------------------------
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE     5
PROGRAM NAME =

 2499                             233     
 2500                             234     ;       *********************************************************************
 2501                             235     ;       *****   常時ON                                  4*2             *****
 2502                             236     ;       *********************************************************************
 2503 00000080                    237             .ALIGN  4
 2504 00000080                    238     _LDON_CODE:
 2505                             239             LD_M_STACK                                      ; A->Mｽﾀｯｸ      ARG and NRGを削除
                                          091105AKIBA
 2506 00000080 4700                   M                   SHLL    M_REG                           ; MRG ｼﾌﾄ
 2507 00000082 275B                   M                   OR      A_REG,M_REG                     ; NEW Mreg SAVE
 2508 00000084 E001               240             MOV.B   #BIT0,R0                                ;
 2509 00000086 6503               241             MOV     R0,A_REG                                ; R0→Areg
 2510 00000088                    242     _LDON_CODE_END:
 2511                             243     ;
 2512                             244     ;       *********************************************************************
 2513                             245     ;       *****   Read command                            11*2            *****
 2514                             246     ;       *********************************************************************
 2515                             247     ;       USED DESTROY REG R0
 2516                             248     ;       USED         R5,R6,R7,GBR
 2517                             249     ;
 2518 00000088                    250             .ALIGN  4
 2519 00000088                    251     _LD_CODE:
 2520                             252             LD_M_STACK                                      ; A->Mｽﾀｯｸ      ARG and NRGを削除
                                          091105AKIBA
 2521 00000088 4700                   M                   SHLL    M_REG                           ; MRG ｼﾌﾄ
 2522 0000008A 275B                   M                   OR      A_REG,M_REG                     ; NEW Mreg SAVE
 2523                             253             ADR_MAKE1_BIT LBEL1=LD_ADR,LBEL2=LD_OFS
 2524 0000008C E17F                   M   LD_ADR:         MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE(0~7Fま
                                          で)
 2525 0000008E E0FF                   M   LD_OFS:         MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYTE
 2526 00000090 4118                   M                   SHLL8   R1
 2527 00000092 600C                   M                   EXTU.B  R0,R0                           ;
 2528 00000094 201B                   M                   OR      R1,R0                           ; adress
 2529                             254             BIT_LD_R0 LBEL1=LD_BIT                          ;
 2530 00000096 CCFF                   M   LD_BIT:         TST.B   #CHG_SQ_BIT,@(R0,GBR)           ; [命令書換用ラベル] BIT=OFFならTB
                                          IT=1
 2531 00000098 0029                   M                   MOVT    R0                              ; T-BIT==>R0
 2532 0000009A CA01                   M                   XOR     #BIT0,R0                        ;
 2533 0000009C 6503               255             MOV     R0,A_REG                                ; R0→Areg
 2534 0000009E                    256     _LD_CODE_END:
 2535                             257     
 2536                             258     ;       *********************************************************************
 2537                             259     ;       *****   Read Not command                        10*2            *****
 2538                             260     ;       *********************************************************************
 2539                             261     ;       USED DESTROY REG R0
 2540                             262     ;       USED         R5,R6,R7,GBR
 2541                             263     ;
 2542 000000A0                    264             .ALIGN  4
 2543 000000A0                    265     _LDN_CODE:
 2544                             266             LD_M_STACK                                      ; A->Mｽﾀｯｸ      ARG and NRGを削除
                                          091105AKIBA
 2545 000000A0 4700                   M                   SHLL    M_REG                           ; MRG ｼﾌﾄ
 2546 000000A2 275B                   M                   OR      A_REG,M_REG                     ; NEW Mreg SAVE
 2547                             267             ADR_MAKE1_BIT LBEL1=LDN_ADR,LBEL2=LDN_OFS
 2548 000000A4 E17F                   M   LDN_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 2549 000000A6 E0FF                   M   LDN_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE     6
PROGRAM NAME =

                                          E
 2550 000000A8 4118                   M                   SHLL8   R1
 2551 000000AA 600C                   M                   EXTU.B  R0,R0                           ;
 2552 000000AC 201B                   M                   OR      R1,R0                           ; adress
 2553                             268             BIT_LD_NOT_R0 LBEL1=LDN_BIT                     ;
 2554 000000AE CCFF                   M   LDN_BIT:                TST.B   #CHG_SQ_BIT,@(R0,GBR)           ; [命令書換用ラベル];BIT=O
                                          FFならTBIT=1
 2555 000000B0 0029                   M                   MOVT    R0                              ; T-BIT==>R0
 2556 000000B2 6503               269             MOV     R0,A_REG                                ;
 2557 000000B4                    270     _LDN_CODE_END:
 2558                             271     
 2559                             272     ;       *********************************************************************
 2560                             273     ;       *****   And command                             9*2             *****
 2561                             274     ;       *********************************************************************
 2562                             275     ;       USED DESTROY REG R0
 2563                             276     ;       USED         R5,R6,R7,GBR
 2564                             277     ;
 2565 000000B4                    278             .ALIGN  4
 2566 000000B4                    279     _AND_CODE:
 2567                             280             ADR_MAKE1_BIT LBEL1=AND_ADR,LBEL2=AND_OFS       ;
 2568 000000B4 E17F                   M   AND_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 2569 000000B6 E0FF                   M   AND_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 2570 000000B8 4118                   M                   SHLL8   R1
 2571 000000BA 600C                   M                   EXTU.B  R0,R0                           ;
 2572 000000BC 201B                   M                   OR      R1,R0                           ; adress
 2573                             281             BIT_LD_R0 LBEL1=AND_BIT                         ;
 2574 000000BE CCFF                   M   AND_BIT:                TST.B   #CHG_SQ_BIT,@(R0,GBR)           ; [命令書換用ラベル] BIT=O
                                          FFならTBIT=1
 2575 000000C0 0029                   M                   MOVT    R0                              ; T-BIT==>R0
 2576 000000C2 CA01                   M                   XOR     #BIT0,R0                        ;
 2577 000000C4 2509               282             AND     R0,A_REG                                ; ARG and DATA(T) -> ARG
 2578 000000C6                    283     _AND_CODE_END:
 2579                             284     
 2580                             285     ;       *********************************************************************
 2581                             286     ;       *****   And Not command                         8*2             *****
 2582                             287     ;       *********************************************************************
 2583                             288     ;       USE REG R0
 2584                             289     ;
 2585 000000C8                    290             .ALIGN  4
 2586 000000C8                    291     _ANDN_CODE:
 2587                             292             ADR_MAKE1_BIT LBEL1=ANDN_ADR,LBEL2=ANDN_OFS     ;
 2588 000000C8 E17F                   M   ANDN_ADR:               MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 2589 000000CA E0FF                   M   ANDN_OFS:               MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 2590 000000CC 4118                   M                   SHLL8   R1
 2591 000000CE 600C                   M                   EXTU.B  R0,R0                           ;
 2592 000000D0 201B                   M                   OR      R1,R0                           ; adress
 2593                             293             BIT_LD_NOT_R0 LBEL1=ANDN_BIT                    ;
 2594 000000D2 CCFF                   M   ANDN_BIT:               TST.B   #CHG_SQ_BIT,@(R0,GBR)           ; [命令書換用ラベル];BIT=O
                                          FFならTBIT=1
 2595 000000D4 0029                   M                   MOVT    R0                              ; T-BIT==>R0
 2596 000000D6 2509               294             AND     R0,A_REG                                ; ARG and DATA(T) -> ARG
 2597 000000D8                    295     _ANDN_CODE_END:
 2598                             296     
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE     7
PROGRAM NAME =

 2599                             297     ;       *********************************************************************
 2600                             298     ;       *****   Or command                               9*2            *****
 2601                             299     ;       *********************************************************************
 2602 000000D8                    300             .ALIGN  4
 2603 000000D8                    301     _OR_CODE:
 2604                             302             ADR_MAKE1_BIT LBEL1=OR_ADR,LBEL2=OR_OFS         ;
 2605 000000D8 E17F                   M   OR_ADR:         MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE(0~7Fま
                                          で)
 2606 000000DA E0FF                   M   OR_OFS:         MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYTE
 2607 000000DC 4118                   M                   SHLL8   R1
 2608 000000DE 600C                   M                   EXTU.B  R0,R0                           ;
 2609 000000E0 201B                   M                   OR      R1,R0                           ; adress
 2610                             303             BIT_LD_R0 LBEL1=OR_BIT                          ;
 2611 000000E2 CCFF                   M   OR_BIT:         TST.B   #CHG_SQ_BIT,@(R0,GBR)           ; [命令書換用ラベル] BIT=OFFならTB
                                          IT=1
 2612 000000E4 0029                   M                   MOVT    R0                              ; T-BIT==>R0
 2613 000000E6 CA01                   M                   XOR     #BIT0,R0                        ;
 2614 000000E8 250B               304             OR      R0,A_REG                                ; ARG or DATA(T) -> ARG
 2615 000000EA                    305     _OR_CODE_END:
 2616                             306     
 2617                             307     ;       *********************************************************************
 2618                             308     ;       *****   Or command                               8*2            *****
 2619                             309     ;       *********************************************************************
 2620 000000EC                    310             .ALIGN  4
 2621 000000EC                    311     _ORN_CODE:
 2622                             312             ADR_MAKE1_BIT LBEL1=ORN_ADR,LBEL2=ORN_OFS       ;
 2623 000000EC E17F                   M   ORN_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 2624 000000EE E0FF                   M   ORN_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 2625 000000F0 4118                   M                   SHLL8   R1
 2626 000000F2 600C                   M                   EXTU.B  R0,R0                           ;
 2627 000000F4 201B                   M                   OR      R1,R0                           ; adress
 2628                             313             BIT_LD_NOT_R0 LBEL1=ORN_BIT                     ;
 2629 000000F6 CCFF                   M   ORN_BIT:                TST.B   #CHG_SQ_BIT,@(R0,GBR)           ; [命令書換用ラベル];BIT=O
                                          FFならTBIT=1
 2630 000000F8 0029                   M                   MOVT    R0                              ; T-BIT==>R0
 2631 000000FA 250B               314             OR      R0,A_REG                                ; ARG or DATA(T) -> ARG
 2632 000000FC                    315     _ORN_CODE_END:
 2633                             316     
 2634                             317     ;       *********************************************************************
 2635                             318     ;       *****   Write command                           9*2             *****
 2636                             319     ;       *********************************************************************
 2637                             320     ;       Areg & Nreg--->Areg-->MEM
 2638 000000FC                    321             .ALIGN  4
 2639 000000FC                    322     _ST_CODE:
 2640                             323             ADR_MAKE1_BIT LBEL1=ST_ADR,LBEL2=ST_OFS ;5
 2641 000000FC E17F                   M   ST_ADR:         MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE(0~7Fま
                                          で)
 2642 000000FE E0FF                   M   ST_OFS:         MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYTE
 2643 00000100 4118                   M                   SHLL8   R1
 2644 00000102 600C                   M                   EXTU.B  R0,R0                           ;
 2645 00000104 201B                   M                   OR      R1,R0                           ; adress
 2646 00000106 2558               324             TST     A_REG,A_REG                             ;
 2647                             325             TST_BIT_OF STCD_CLRBIT                          ;
 2648 00000108 8902                   M           BT      STCD_CLRBIT
 2649                             326     
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE     8
PROGRAM NAME =

 2650 0000010A                    327     STCD_SETBIT:                                            ; [命令書換用ラベル]
 2651 0000010A CFFF               328             OR.B    #CHG_SQ_BIT,@(R0,GBR)                   ; OR-BIT  B'00001000
 2652                             329             M_BRA   _ST_CODE_END                            ;
 2653 0000010C A001                   M           BRA     _ST_CODE_END
 2654 0000010E 0009                   M           NOP
 2655                             330     
 2656 00000110                    331     STCD_CLRBIT:                                            ; [命令書換用ラベル]
 2657 00000110 CDFF               332             AND.B   #CHG_SQ_BIT,@(R0,GBR)                   ; AND-BIT  B'11110111
 2658 00000112                    333     _ST_CODE_END:                                           ;
 2659                             334     
 2660                             335     ;       ***********************************************************
 2661                             336     ;       ***     SET BIT CODE CHANGE ROUTINE             8*2     ***
 2662                             337     ;       ***********************************************************
 2663                             338     ;       Areg & Nreg--->AregがONならMEM:ON
 2664 00000114                    339             .ALIGN  4
 2665 00000114                    340     _SET_CODE:                                              ; 00001110B     E
 2666                             341             ADR_MAKE1_BIT LBEL1=SET_ADR,LBEL2=SET_OFS       ;
 2667 00000114 E17F                   M   SET_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 2668 00000116 E0FF                   M   SET_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 2669 00000118 4118                   M                   SHLL8   R1
 2670 0000011A 600C                   M                   EXTU.B  R0,R0                           ;
 2671 0000011C 201B                   M                   OR      R1,R0                           ; adress
 2672 0000011E 2558               342             TST     A_REG,A_REG                             ;
 2673                             343             TST_BIT_OF _SET_CODE_END                        ;
 2674 00000120 8900                   M           BT      _SET_CODE_END
 2675                             344     
 2676 00000122                    345     SETCD_SETBIT:                                           ; [命令書換用ラベル]
 2677 00000122 CFFF               346             OR.B    #CHG_SQ_BIT,@(R0,GBR)                   ; OR-BIT  B'00001000
 2678 00000124                    347     _SET_CODE_END:
 2679                             348     
 2680                             349     ;       ***********************************************************
 2681                             350     ;       ***     RESET BIT CODE CHANGE ROUTINE           8*2     ***
 2682                             351     ;       ***********************************************************
 2683 00000124                    352             .ALIGN  4
 2684 00000124                    353     _RST_CODE:                                              ; 00001110B     E
 2685                             354             ADR_MAKE1_BIT LBEL1=RST_ADR,LBEL2=RST_OFS       ;
                                                          ;
 2686 00000124 E17F                   M   RST_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 2687 00000126 E0FF                   M   RST_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 2688 00000128 4118                   M                   SHLL8   R1
 2689 0000012A 600C                   M                   EXTU.B  R0,R0                           ;
 2690 0000012C 201B                   M                   OR      R1,R0                           ; adress
 2691 0000012E 2558               355             TST     A_REG,A_REG                             ;
 2692                             356             TST_BIT_OF _RST_CODE_END                        ;
 2693 00000130 8900                   M           BT      _RST_CODE_END
 2694                             357     
 2695 00000132                    358     RSTCD_SETBIT:                                           ; [命令書換用ラベル]
 2696 00000132 CDFF               359             AND.B   #CHG_SQ_BIT,@(R0,GBR)                   ; AND-BIT  B'111101111
 2697 00000134                    360     _RST_CODE_END:
 2698                             361     
 2699                             362     
 2700                             363     ;********************************************************************
 2701                             364     ;* シーケンス命令
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE     9
PROGRAM NAME =

 2702                             365     ;* BIT制御命令
 2703                             366     ;********************************************************************
 2704                             367     ;         ------------------------------
 2705                             368     ;       +0|       命令CODE      (  )   |
 2706                             369     ;         ------------------------------
 2707                             370     ;       +1|                     (  )   |
 2708                             371     ;         ------------------------------
 2709                             372     ;       +2|                     (  )   |
 2710                             373     ;         ------------------------------
 2711                             374     ;       +3|                     (  )   |
 2712                             375     ;         ------------------------------
 2713                             376     
 2714                             377     ;       ***********************************************************
 2715                             378     ;       ***     And MRG command                 2*2             ***
 2716                             379     ;       ***********************************************************
 2717 00000134                    380             .ALIGN  4
 2718 00000134                    381     _AMRG_CODE:
 2719 00000134 2579               382             AND     M_REG,A_REG                             ; ARG and MRG
 2720 00000136 4701               383             SHLR    M_REG                                   ; shift old MRG
 2721 00000138                    384     _AMRG_CODE_END:
 2722                             385     
 2723                             386     ;       ***********************************************************
 2724                             387     ;       ***     Or MRG command                  2*2             ***
 2725                             388     ;       ***********************************************************
 2726 00000138                    389             .ALIGN  4
 2727 00000138                    390     _OMRG_CODE:
 2728 00000138 4701               391             SHLR    M_REG                                   ; shift old MRG(POP M_REG)
 2729 0000013A 0029               392             MOVT    R0                                      ;
 2730 0000013C 250B               393             OR      R0,A_REG                                ; ARG or MRG
 2731 0000013E                    394     _OMRG_CODE_END:
 2732                             395     ;
 2733                             396     ;       ***********************************************************
 2734                             397     ;       ***     Write NRG command               3*2             ***
 2735                             398     ;       ***********************************************************
 2736 00000140                    399             .ALIGN  4
 2737 00000140                    400     _PUSH_CODE:
 2738 00000140 4600               401             SHLL    N_REG                                   ; NRGｽﾀｯｸ
 2739 00000142 265B               402             OR      A_REG,N_REG                             ; ARG store to NRG
 2740 00000144                    403     _PUSH_CODE_END:
 2741                             404     
 2742                             405     ;       ***********************************************************
 2743                             406     ;       ***     Write Not NRG command           1*2             ***
 2744                             407     ;       ***********************************************************
 2745 00000144                    408             .ALIGN  4
 2746 00000144                    409     _POP_CODE:
 2747 00000144 255A               410             XOR     A_REG,A_REG                             ; ARGｸﾘｱ
 2748 00000146 0008               411             CLRT                                            ; Tﾋﾞｯﾄｸﾘｱ
 2749 00000148 4625               412             ROTCR   N_REG                                   ; 右ｼﾌﾄ(Tﾋﾞｯﾄ付)
 2750 0000014A 4524               413             ROTCL   A_REG                                   ; 左ｼﾌﾄ(Tﾋﾞｯﾄ付)
 2751 0000014C                    414     _POP_CODE_END:
 2752                             415     
 2753                             416     ;       ***********************************************************
 2754                             417     ;       ***     LEAD NRG command                3*2             ***
 2755                             418     ;       ***********************************************************
 2756 0000014C                    419             .ALIGN  4
 2757 0000014C                    420     _LDNRG_CODE:
 2758 0000014C 6063               421             MOV     N_REG,R0                                ; N_REG LOAD
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE    10
PROGRAM NAME =

 2759 0000014E C901               422             AND     #H'0001,R0                              ; BIT0以外CLR
 2760 00000150 6503               423             MOV     R0,A_REG                                ;
 2761 00000152                    424     _LDNRG_CODE_END:
 2762                             425     
 2763                             426     ;       ***********************************************************
 2764                             427     ;       ***     END NRG command                 1*2             ***
 2765                             428     ;       ***********************************************************
 2766 00000154                    429             .ALIGN  4
 2767 00000154                    430     _ENDNRG_CODE:
 2768 00000154 E601               431             MOV.B   #BIT0,N_REG                             ; N_REG CLR
 2769 00000156                    432     _ENDNRG_CODE_END:
 2770                             433     
 2771                             434     
 2772                             435     ;********************************************************************
 2773                             436     ;* シーケンス応用命令
 2774                             437     ;*
 2775                             438     ;********************************************************************
 2776                             439     
 2777                             440     ;       ***********************************************************
 2778                             441     ;       ***                                                     ***
 2779                             442     ;       ***     Clear Card command              9*2             ***
 2780                             443     ;       ***     AregがON時に指定されたﾒﾓﾘﾜｰﾄﾞをｸﾘｱする          ***
 2781                             444     ;       ***                                                     ***
 2782                             445     ;       ***********************************************************
 2783 00000158                    446             .ALIGN  4
 2784 00000158                    447     _CLR_CODE:
 2785 00000158 2558               448             TST     A_REG,A_REG                             ;
 2786                             449             TST_BIT_OF _CLR_CODE_END                        ;
 2787 0000015A 8906                   M           BT      _CLR_CODE_END
 2788                             450             ADR_MAKE1_WORD LBEL1=CLR_ADR,LBEL2=CLR_OFS      ; R0=WORDｱﾄﾞﾚｽ
 2789                                 M                   ADR_MAKE1_BIT CLR_ADR,CLR_OFS
 2790 0000015C E17F                   M   CLR_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 2791 0000015E E0FF                   M   CLR_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 2792 00000160 4118                   M                   SHLL8   R1
 2793 00000162 600C                   M                   EXTU.B  R0,R0                           ;
 2794 00000164 201B                   M                   OR      R1,R0                           ; adress
 2795 00000166 222A               451             XOR     R2,R2                                   ;
 2796 00000168 0E25               452             MOV.W   R2,@(R0,TOP_REG)                        ;
 2797 0000016A                    453     _CLR_CODE_END:
 2798                             454     
 2799                             455     ;       ***********************************************************
 2800                             456     ;       ***     ON EDGE 1PULSE ON CODE CHANGE ROUTINE           ***
 2801                             457     ;       ***     AregのONｴｯｼﾞ時に1ｽｷｬﾝAregをonする               ***
 2802                             458     ;       ***     割り込み禁止が必要                              ***
 2803                             459     ;       ***********************************************************
 2804                             460     ;       byte adr
 2805 0000016C                    461             .ALIGN  4
 2806 0000016C                    462     _PLS_CODE:                                                      ;
 2807                             463                     ADR_MAKE1_BIT LBEL1=PLS_ADR,LBEL2=PLS_OFS       ; R0:adr
 2808 0000016C E17F                   M   PLS_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 2809 0000016E E0FF                   M   PLS_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 2810 00000170 4118                   M                   SHLL8   R1
 2811 00000172 600C                   M                   EXTU.B  R0,R0                           ;
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE    11
PROGRAM NAME =

 2812 00000174 201B                   M                   OR      R1,R0                           ; adress
 2813 00000176 E2FF               464     PLS_BIT:        MOV.B   #CHG_SQ_BIT,R2                          ; [命令書換用ラベル]
 2814 00000178 51B1               465                     MOV.L   @(PLS_CALL-_SEQ_CALL_TBL1,CTBL_REG),R1  ;
 2815 0000017A 410B               466                     JSR     @R1                                     ;
 2816 0000017C 0009               467                     NOP                                             ;
 2817 0000017E                    468     _PLS_CODE_END:
 2818                             469     
 2819                             470     ;       ***************************************************
 2820                             471     ;       ***     ON EDGE 1PULSE ON CODE CHANGE SUB       ***
 2821                             472     ;       ***************************************************
 2822                             473     ;       INPUT R2:BIT,R0:ADR
 2823 00000180                    474             .ALIGN  4
 2824 00000180                    475     _PLS_SUB:
 2825                             476             SUB_START
 2826 00000180 4F22                   M           STS.L   PR,@-R15                ;[必要]
 2827                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 2828 00000182 622C               477             EXTU.B  R2,R2                                           ; SET用(BIT7~BIT0)
 2829 00000184 6923               478             MOV     R2,R9                                           ; PUSH
 2830                             479     
 2831 00000186 6327               480             NOT     R2,R3                                           ; AND用
 2832 00000188 2558               481             TST     A_REG,A_REG                                     ;
 2833                             482             TST_BIT_ON PLS_SB100                                    ;
 2834 0000018A 8B00                   M           BF      PLS_SB100
 2835 0000018C 222A               483             XOR     R2,R2                                           ;
 2836                             484     
 2837 0000018E                    485     PLS_SB100:
 2838                             486             DI_PUSH_SR_SH3  WK_REG1=R1,WK_REG2=R4                   ; 割込みマスク
 2839 0000018E 0102                   M           STC     SR,R1                   ;
 2840 00000190 9411                   M           MOV.W   #H'000000F0,R4          ;
 2841 00000192 214B                   M           OR      R4,R1           ;INT15
 2842 00000194 4F03                   M           STC.L   SR,@-R15                        ;PUSH SR
 2843 00000196 410E                   M           LDC     R1,SR                   ;割込禁止（15）
 2844 00000198 01EC               487             MOV.B   @(R0,TOP_REG),R1                                ; OLD情報読出
 2845 0000019A 6413               488             MOV     R1,R4                                           ; old push
 2846 0000019C 2139               489             AND     R3,R1                                           ; OLD BIT情報をCLR
 2847 0000019E 212B               490             OR      R2,R1                                           ; NEW BIT情報SET
 2848 000001A0 0E14               491             MOV.B   R1,@(R0,TOP_REG)                                ; new save
 2849                             492             EI_POP_SR_SH3                                           ; 割込みマスク解除
 2850 000001A2 4F07                   M           LDC.L   @R15+,SR                        ;POP SR
 2851 000001A4 241A               493             XOR     R1,R4                                           ; R1 XOR R4 = R4(変化)
 2852 000001A6 2149               494             AND     R4,R1                                           ; R4 and R1 = ON ｴｯｼﾞ
 2853 000001A8 2198               495             TST     R9,R1                                           ;
 2854 000001AA 0029               496             MOVT    R0                                              ; 0
 2855 000001AC CA01               497             XOR     #BIT0,R0
 2856 000001AE 6503               498             MOV     R0,A_REG                                        ; Tの反転 -> ARG
 2857                             499     
 2858 000001B0                    500     _PLS_SUB_END:
 2859                             501             SUB_END
 2860                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 2861 000001B0 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 2862                             502             M_RTS
 2863 000001B2 000B                   M           RTS                             ;RTSの後ろの
 2864 000001B4 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 2865                             503     
 2866                             504     
 2867                             505     ;--------ﾘﾚﾗﾙﾌﾟｰﾙが存在する FFFFFF00(割込禁止)----
 2868                             506     
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE    12
PROGRAM NAME =

 2869                             507     ;       ***********************************************************
 2870                             508     ;       ***     OFF EDGE 1PULSE ON CODE CHANGE ROUTINE  16byte  ***
 2871                             509     ;       ***     AregのOffｴｯｼﾞ時に1ｽｷｬﾝAregをonする              ***
 2872                             510     ;       ***     割り込み禁止が必要                              ***
 2873                             511     ;       ***********************************************************
 2874                                     ***** BEGIN-POOL *****
 2875 000001B6 00F0                       DATA FOR SOURCE-LINE 486
 2876                                     ***** END-POOL *****
 2877 000001B8                    512             .ALIGN  4
 2878 000001B8                    513     _PLF_CODE:                                                      ;
 2879                             514                     ADR_MAKE1_BIT LBEL1=PLF_ADR,LBEL2=PLF_OFS       ; R0:adr
 2880 000001B8 E17F                   M   PLF_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 2881 000001BA E0FF                   M   PLF_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 2882 000001BC 4118                   M                   SHLL8   R1
 2883 000001BE 600C                   M                   EXTU.B  R0,R0                           ;
 2884 000001C0 201B                   M                   OR      R1,R0                           ; adress
 2885 000001C2 E2FF               515     PLF_BIT:        MOV.B   #CHG_SQ_BIT,R2                          ; [命令書換用ラベル]
 2886                             516                                                                     ;
 2887 000001C4 51B2               517                     MOV.L   @(PLF_CALL-_SEQ_CALL_TBL1,CTBL_REG),R1  ;
 2888 000001C6 410B               518                     JSR     @R1                                     ;
 2889 000001C8 0009               519                     NOP                                             ;
 2890 000001CA                    520     _PLF_CODE_END:
 2891                             521     
 2892                             522     ;       ***************************************************
 2893                             523     ;       ***     OFF EDGE 1PULSE ON CODE CHANGE SUB      ***
 2894                             524     ;       ***************************************************
 2895                             525     ;       INPUT R2:BIT,R3,ADR
 2896                             526     
 2897 000001CC                    527             .ALIGN  4
 2898 000001CC                    528     _PLF_SUB:
 2899                             529             SUB_START
 2900 000001CC 4F22                   M           STS.L   PR,@-R15                ;[必要]
 2901                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 2902 000001CE 622C               530             EXTU.B  R2,R2                                           ; SET用(BIT7~BIT0)
 2903 000001D0 6923               531             MOV     R2,R9                                           ; PUSH
 2904 000001D2 6327               532             NOT     R2,R3                                           ; AND用
 2905 000001D4 2558               533             TST     A_REG,A_REG                                     ;
 2906                             534             TST_BIT_ON PLF_SB100                                    ;
 2907 000001D6 8B00                   M           BF      PLF_SB100
 2908 000001D8 222A               535             XOR     R2,R2                                           ;
 2909 000001DA                    536     PLF_SB100:
 2910                             537             DI_PUSH_SR_SH3  WK_REG1=R1,WK_REG2=R4                   ;
 2911 000001DA 0102                   M           STC     SR,R1                   ;
 2912 000001DC 9411                   M           MOV.W   #H'000000F0,R4          ;
 2913 000001DE 214B                   M           OR      R4,R1           ;INT15
 2914 000001E0 4F03                   M           STC.L   SR,@-R15                        ;PUSH SR
 2915 000001E2 410E                   M           LDC     R1,SR                   ;割込禁止（15）
 2916 000001E4 01EC               538             MOV.B   @(R0,TOP_REG),R1                                ;
 2917 000001E6 6413               539             MOV     R1,R4                                           ; old push
 2918 000001E8 2139               540             AND     R3,R1                                           ;
 2919 000001EA 212B               541             OR      R2,R1                                           ;
 2920 000001EC 0E14               542             MOV.B   R1,@(R0,TOP_REG)                                ; new save
 2921                             543             EI_POP_SR_SH3                                           ;
 2922 000001EE 4F07                   M           LDC.L   @R15+,SR                        ;POP SR
 2923 000001F0 214A               544             XOR     R4,R1                                           ; R1 XOR R4 = R1(変化)
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE    13
PROGRAM NAME =

 2924 000001F2 2419               545             AND     R1,R4                                           ; R1 and R4(前回) = OFF ｴｯ
                                          ｼﾞ
 2925 000001F4 2498               546             TST     R9,R4                                           ;
 2926 000001F6 0029               547             MOVT    R0                                              ; 0
 2927 000001F8 CA01               548             XOR     #BIT0,R0                                        ;
 2928 000001FA 6503               549             MOV     R0,A_REG                                        ; Tの反転 -> ARG
 2929                             550     
 2930 000001FC                    551     _PLF_SUB_END:
 2931                             552             SUB_END
 2932                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 2933 000001FC 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 2934                             553             M_RTS
 2935 000001FE 000B                   M           RTS                             ;RTSの後ろの
 2936 00000200 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 2937                             554     
 2938                             555     ;--------ﾘﾚﾗﾙﾌﾟｰﾙが存在する FFFFFF00(割込禁止)----
 2939                             556     
 2940                             557     ;       ***********************************************************
 2941                             558     ;       *****   Write Skip Controlor command            9*2     ***
 2942                             559     ;       ***     AregのON時に指定されたBITをonし                 ***
 2943                             560     ;       ***     それ以外の15bitはoffする                        ***
 2944                             561     ;       ***     割り込み禁止は不要(禁止と同じ命令を使用)        ***
 2945                             562     ;       ***                                                     ***
 2946                             563     ;       ***********************************************************
 2947                                     ***** BEGIN-POOL *****
 2948 00000202 00F0                       DATA FOR SOURCE-LINE 537
 2949                                     ***** END-POOL *****
 2950 00000204                    564             .ALIGN  4
 2951 00000204                    565     _WSC_CODE:                                                      ;
 2952                             566                     ADR_MAKE1_BIT LBEL1=WSC_ADR,LBEL2=WSC_OFS       ; R0:adr
 2953 00000204 E17F                   M   WSC_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 2954 00000206 E0FF                   M   WSC_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 2955 00000208 4118                   M                   SHLL8   R1
 2956 0000020A 600C                   M                   EXTU.B  R0,R0                           ;
 2957 0000020C 201B                   M                   OR      R1,R0                           ; adress
 2958 0000020E E20F               567     WSC_BTD:        MOV.B   #CHG_SQ_BTD,R2                          ; [命令書換用ラベル]"0~F"
 2959                             568                                                                     ;
 2960 00000210 51B5               569                     MOV.L   @(WSC_CALL-_SEQ_CALL_TBL1,CTBL_REG),R1  ; R0:adr R2:bit
 2961 00000212 410B               570                     JSR     @R1                                     ;
 2962 00000214 0009               571                     NOP                                             ;
 2963 00000216                    572     _WSC_CODE_END:
 2964                             573     
 2965                             574     ;       *************************************************************
 2966                             575     ;       *****   Write Skip Controlor command subroutine         *****
 2967                             576     ;       *************************************************************
 2968                             577     ;       Input R0 ADR ,R2 BITCOD(0~F)注意
 2969 00000218                    578             .ALIGN  4
 2970 00000218                    579     _WSC_SUB:
 2971                             580             SUB_START
 2972 00000218 4F22                   M           STS.L   PR,@-R15                ;[必要]
 2973                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 2974                             581     
 2975 0000021A 2558               582             TST     A_REG,A_REG                                     ;
 2976                             583             TST_BIT_OF WSC_S10                                      ; if ARG = 0  then jump
 2977 0000021C 8904                   M           BT      WSC_S10
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE    14
PROGRAM NAME =

 2978                             584     
 2979 0000021E D104               585             MOV.L   #_BIT_DATA_TBL2,R1                              ;
 2980 00000220 4208               586             SHLL2   R2                                              ; *4
 2981 00000222 312C               587             ADD     R2,R1                                           ;
 2982 00000224 6212               588             MOV.L   @R1,R2                                          ; (R2=BIT0~BIT15)
 2983                             589     
 2984 00000226 0E25               590             MOV.W   R2,@(R0,TOP_REG)                                ; 指定されたBITをON、それ
                                          以外OFF割込み禁止いらなかった
 2985                             591     
 2986 00000228                    592     WSC_S10:
 2987                             593             SUB_END
 2988                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 2989 00000228 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 2990                             594             M_RTS
 2991 0000022A 000B                   M           RTS                             ;RTSの後ろの
 2992 0000022C 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 2993                             595     
 2994                             596     ;       ------ﾘﾃﾗﾙﾌﾟｰﾙあり BIT_DATA_TBL2----
 2995                             597     
 2996                             598     ;       ***********************************************************
 2997                             599     ;       ***     Shift Register commnd                   8*2     ***
 2998                             600     ;       ***     CLK入力 Aregの立ち上がりで　Data(Mreg）でｼﾌﾄ    ***
 2999                             601     ;       ***     全ﾒﾓﾘ領域に相当するWORK-RAMあり                 ***
 3000                             602     ;       ***********************************************************
 3001                             603     ;       Mreg:data
 3002                             604     ;       Areg:clk
 3003                                     ***** BEGIN-POOL *****
 3004 0000022E 0000                       ALIGNMENT CODE
 3005 00000230 00000000                   DATA FOR SOURCE-LINE 585
 3006                                     ***** END-POOL *****
 3007 00000234                    605             .ALIGN  4
 3008 00000234                    606     _WSR_CODE:                                                      ;
 3009                             607             ADR_MAKE1_BIT LBEL1=WSR_ADR,LBEL2=WSR_OFS               ; R0:adr
 3010 00000234 E17F                   M   WSR_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 3011 00000236 E0FF                   M   WSR_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 3012 00000238 4118                   M                   SHLL8   R1
 3013 0000023A 600C                   M                   EXTU.B  R0,R0                           ;
 3014 0000023C 201B                   M                   OR      R1,R0                           ; adress
 3015                             608     
 3016 0000023E 51B6               609             MOV.L   @(WSR_CALL-_SEQ_CALL_TBL1,CTBL_REG),R1          ; R0:adr R2:bit
 3017 00000240 410B               610             JSR     @R1                                             ;
 3018 00000242 0009               611             NOP                                                     ;
 3019 00000244                    612     _WSR_CODE_END:
 3020                             613     
 3021                             614     ;       ***********************************************************
 3022                             615     ;       ***     Shift Register CODE CHANGE ROUTINE              ***
 3023                             616     ;       ***********************************************************
 3024                             617     ;       INPUT   R0 SHIFT CARD ADDRESS
 3025                             618     ;       1word --1bitのﾜｰｸRAMを使用
 3026                             619     ;       Mreg:data
 3027                             620     ;       Areg:clk
 3028 00000244                    621     _WSR_SUB:
 3029                             622             SUB_START
 3030 00000244 4F22                   M           STS.L   PR,@-R15                ;[必要]
 3031                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE    15
PROGRAM NAME =

 3032                             623     
 3033 00000246 5AC0               624             MOV.L   @(SR_STCT_TOP-_SEQ_DATA_TBL1,DTBL_REG),R10      ; R10=_SEQ_SR_FLG
 3034                             625                                                                     ; SHIFT (OLD ARG) CARD ADD
                                          RESS TOP
 3035 00000248 01AD               626             MOV.W   @(R0,R10),R1                                    ; load old ARG
 3036 0000024A 0A55               627             MOV.W   A_REG,@(R0,R10)                                 ; store new ARG 1word 1bit
 3037                             628     
 3038 0000024C 215A               629             XOR     A_REG,R1                                        ; (old ARG) xor (new ARG)
 3039 0000024E 2159               630             AND     A_REG,R1                                        ; and (new ARG)
 3040 00000250 2118               631             TST     R1,R1                                           ; ON EGDE CHECK
 3041                             632             TST_BIT_OF WSR_S10                                      ; if ARG not 0-->1 then ju
                                          mp
 3042 00000252 890A                   M           BT      WSR_S10
 3043                             633     
 3044 00000254 6273               634             MOV     M_REG,R2                                        ;
 3045                             635             DI_PUSH_SR_SH3  WK_REG1=R1,WK_REG2=R4                   ;
 3046 00000256 0102                   M           STC     SR,R1                   ;
 3047 00000258 940A                   M           MOV.W   #H'000000F0,R4          ;
 3048 0000025A 214B                   M           OR      R4,R1           ;INT15
 3049 0000025C 4F03                   M           STC.L   SR,@-R15                        ;PUSH SR
 3050 0000025E 410E                   M           LDC     R1,SR                   ;割込禁止（15）
 3051 00000260 01ED               636             MOV.W   @(R0,TOP_REG),R1                                ;
 3052 00000262 4225               637             ROTCR   R2                                              ; BIT_LOAD
 3053 00000264 4124               638             ROTCL   R1                                              ;
 3054                             639     
 3055 00000266 0E15               640             MOV.W   R1,@(R0,TOP_REG)                                ;
 3056                             641             EI_POP_SR_SH3                                           ;
 3057 00000268 4F07                   M           LDC.L   @R15+,SR                        ;POP SR
 3058                             642     
 3059 0000026A                    643     WSR_S10:
 3060                             644             SUB_END
 3061                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 3062 0000026A 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 3063                             645             M_RTS
 3064 0000026C 000B                   M           RTS                             ;RTSの後ろの
 3065 0000026E 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 3066                             646     
 3067                             647     
 3068                             648     ;********************************************************************
 3069                             649     ;* タイマ、カウンタ
 3070                             650     ;*
 3071                             651     ;********************************************************************
 3072                             652     ;__TMCT_ST_CNT  .EQU    12      ;12byte占有
 3073                             653     ;__TMCT_PV      .EQU    0*4     ;
 3074                             654     ;__TMCT_SV      .EQU    1*4     ;
 3075                             655     ;__TMCT_FLG     .EQU    2*4     ;
 3076                             656     
 3077                             657     ;       ***************************************************
 3078                             658     ;       ***                                             ***
 3079                             659     ;       ***     ﾀｲﾏ・ｶｳﾝﾀ構造                           ***
 3080                             660     ;       ***     *12(3data*4byte)                        ***
 3081                             661     ;       ***************************************************
 3082                             662             .MACRO  TMR_CNT_STRCT_ADR UNIT_REG,WKREG1
 3083                             663                     SHLL2   \UNIT_REG                               ; *4
 3084                             664                     MOV     \UNIT_REG,\WKREG1                       ;
 3085                             665                     SHLL    \UNIT_REG                               ; *8
 3086                             666                     ADD     \UNIT_REG,\WKREG1                       ;
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE    16
PROGRAM NAME =

 3087                             667             .ENDM
 3088                             668     
 3089                             669     ;0: 1ms         =1ms*1
 3090                             670     ;1: 10ms        =10ms*1
 3091                             671     ;2: 100ms       =10ms*10
 3092                             672     ;3: 1000ms      =100ms*10
 3093                             673     ;4: 60s         =1sec*60
 3094                             674     ;5: 3600s       =1sec*3600
 3095                             675     
 3096                             676     ;       *******************************************************************
 3097                             677     ;       ***                                                             ***
 3098                             678     ;       ***                                                             ***
 3099                             679     ;       ***     Write Timmer command                    6*2             ***
 3100                             680     ;       ***                                                             ***
 3101                             681     ;       *******************************************************************
 3102                             682     ;       Mreg:1:ﾀｲﾏﾓｼﾞｭ-ﾙｽﾀｰﾄ　0:停止 0->1設定ﾛｰﾄﾞ
 3103                             683     ;       Areg:1:ﾀｲﾏ計測 0:一旦停止
 3104                             684     ;
 3105                                     ***** BEGIN-POOL *****
 3106 00000270 00F0                       DATA FOR SOURCE-LINE 635
 3107                                     ***** END-POOL *****
 3108 00000274                    685             .ALIGN  4
 3109 00000274                    686     _WTMR_CODE:
 3110 00000274 E27F               687     WTMR_UNH:       MOV.B   #CHG_UNIT_H,R2                          ; TMR-H 番号
 3111 00000276 E0FF               688     WTMR_UNL:       MOV.B   #CHG_UNIT_L,R0                          ; TMR-L 番号
 3112 00000278 E30F               689     WTMR_DGT:       MOV.B   #CHG_DGT_SL,R3                          ; (0~5)ﾀｲﾏ領域より決定
 3113 0000027A 51B3               690             MOV.L   @(WTMR_CALL-_SEQ_CALL_TBL1,CTBL_REG),R1         ; R0:adr R2:bit
 3114 0000027C 410B               691             JSR     @R1                                             ;
 3115 0000027E 0009               692             NOP                                                     ;
 3116 00000280                    693     _WTMR_CODE_END:
 3117                             694     
 3118                             695     ;       *************************************************************
 3119                             696     ;       *****   Write Timmer command subroutine                 *****
 3120                             697     ;       *************************************************************
 3121                             698     ;       Mreg:1:ﾀｲﾏﾓｼﾞｭ-ﾙｽﾀｰﾄ　0:停止 0->1設定ﾛｰﾄﾞ
 3122                             699     ;       Areg:1:ﾀｲﾏ計測 0:一旦停止
 3123                             700     ;
 3124                             701     ;       R2:H
 3125                             702     ;       R0:L
 3126                             703     ;       R3:LATE
 3127                             704     
 3128 00000280                    705             .ALIGN  4
 3129 00000280                    706     _TM_LATE_CHGTOP
 3130 00000280 00000001           707             .DATA.L         1               ; 0:1ms    1MS*1
 3131 00000284 00000001           708             .DATA.L         1               ; 1:10ms   10MS*1
 3132 00000288 0000000A           709             .DATA.L         10              ; 2:100ms  10MS*10
 3133 0000028C 0000000A           710             .DATA.L         10              ; 3:1000   100MS*10
 3134 00000290 0000003C           711             .DATA.L         60              ; 4:1min    60S*1S
 3135 00000294 00000E10           712             .DATA.L         3600            ; 5:1h    3600S*1S
 3136 00000298 00000001           713             .DATA.L         1               ; 6
 3137 0000029C 00000001           714             .DATA.L         1               ; 7
 3138                             715     
 3139 000002A0                    716             .ALIGN  4
 3140 000002A0                    717     _WTMR_SUB:
 3141                             718             SUB_START
 3142 000002A0 4F22                   M           STS.L   PR,@-R15                ;[必要]
 3143                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE    17
PROGRAM NAME =

 3144                             719     ;;;     AND     N_REG,A_REG                                     ; ARG and NRG   ARG and NR
                                          Gを削除 091105AKIBA
 3145                             720     
 3146 000002A2 4218               721             SHLL8   R2                                              ; R2は0か1(ﾀｲﾏは500個　多
                                          くて1000個 3E8)EXTUは不要
 3147 000002A4 600C               722             EXTU.B  R0,R0                                           ;
 3148 000002A6 220B               723             OR      R0,R2                                           ; R2:ﾀｲﾏ番号
 3149 000002A8 6923               724             MOV     R2,R9_REG                                       ; ﾀｲﾏ番号PUSH
 3150                             725     
 3151                             726     ;       ----- ﾀｲﾏ構造体読出 -----
 3152 000002AA 5AC1               727             MOV.L   @(TM_STCT_TOP-_SEQ_DATA_TBL1,DTBL_REG),R10_REG  ; R10=_SEQ_TMR_DATA　ﾀｲﾏ演
                                          算ﾜｰｸram-top
 3153                             728             TMR_CNT_STRCT_ADR UNIT_REG=R2,WKREG1=R1                 ; R2*12=R1
 3154 000002AC 4208                   M                   SHLL2   R2                              ; *4
 3155 000002AE 6123                   M                   MOV     R2,R1                   ;
 3156 000002B0 4200                   M                   SHLL    R2                              ; *8
 3157 000002B2 312C                   M                   ADD     R2,R1                   ;
 3158 000002B4 3A1C               729             ADD     R1,R10                                          ; *12(R1)+TOP//////ﾀｲﾏ構造
                                          TOP
 3159                             730     
 3160                             731     ;       ----- ﾀｲﾏ番号(計測ﾀｲﾏ)選択 -----
 3161 000002B6 E007               732             MOV.B   #(BIT2+BIT1+BIT0),R0                            ;
 3162 000002B8 2309               733             AND     R0,R3                                           ; 変換LATE 0~7
 3163 000002BA 50C4               734             MOV.L   @(TM_LAT_CG_TOP-_SEQ_DATA_TBL1,DTBL_REG),R0     ; R10=_SEQ_TMR_DATA
 3164                             735     ;       MOV.W   @R0,R1_REG                                      ; 演算LATE(1,10,60,3600の
                                          いずれか)
 3165 000002BC 4308               736             SHLL2   R3                                              ; *4 (LONGﾃﾞｰﾀの為)
 3166 000002BE 303C               737             ADD     R3,R0                                           ; TOPｱﾄﾞﾚｽ + LATE
 3167 000002C0 6102               738             MOV.L   @R0,R1_REG                                      ; 演算LATE(1,10,60,3600の
                                          いずれか)
 3168                             739     
 3169                             740     ;       ----- ﾀｲﾑｱｯﾌﾟ,一旦停止,起動情報確認 -----
 3170 000002C2 50A2               741             MOV.L   @(__TMCT_FLG,R10_REG),R0                        ; FLAG領域
 3171 000002C4 C801               742             TST     #BIT0,R0                                        ; ACTIVE?
 3172                             743             TST_BIT_ON WTMR_S30                                     ; YES ACTIVE JUMP
 3173 000002C6 8B0C                   M           BF      WTMR_S30
 3174                             744     
 3175                             745     ;       -------- ILDE -------
 3176 000002C8 6473               746             MOV     M_REG,R4                                        ; Mreg読出
 3177 000002CA 4425               747             ROTCR   R4                                              ; 右ｼﾌﾄ(Tﾋﾞｯﾄ付)
 3178 000002CC 8B5C               748             BF      WTMR_S98                                        ; Mreg(ｽﾀｰﾄ指令OFF)
 3179                             749     
 3180                             750     ;       ----- Mreg ON(有効)-------
 3181 000002CE 200A               751             XOR     R0,R0                                           ; ｸﾘｱ
 3182 000002D0 1A02               752             MOV.L   R0,@(__TMCT_FLG,R10_REG)                        ; FLAG領域ｸﾘｱ BIT0(処理ﾌﾗｸ
                                          ﾞ),1(計測指令),2(up) 計測条件 ****,*011
 3183 000002D2 1A00               753             MOV.L   R0,@(__TMCT_PV,R10_REG)                         ; 実測PV=0
 3184                             754     
 3185                             755     ;       ----- ﾀｲﾏ設定値SET -----
 3186                             756     ;       設定LOAD data*1,10,(100),(1000),60,3600
 3187 000002D4 6283               757             MOV     D_REG,R2                                        ; ﾀｲﾏ設定(R2)*late R1
 3188 000002D6 622D               758             EXTU.W  R2,R2                                           ; 符号なし
 3189 000002D8 321D               759             DMULS.L R1_REG,R2                                       ; R1 * R2 → MACH,MACL
 3190 000002DA 001A               760             STS.L   MACL,R0                                         ; 3600*FFFF 1*FFFF
 3191 000002DC 1A01               761             MOV.L   R0,@(__TMCT_SV,R10_REG)                         ; SV:SET
 3192                             762     
 3193                             763     ;       ----- ﾀｲﾏ起動 -----
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE    18
PROGRAM NAME =

 3194 000002DE E001               764             MOV.B   #BIT0,R0                                        ;
 3195 000002E0 1A02               765             MOV.L   R0,@(__TMCT_FLG,R10_REG)                        ; 起動中SET(ﾀｲﾏ計測指令BIT
                                          1=0のままで起動しない)
 3196                             766     
 3197                             767     ;       ------- 測定中 -----------------
 3198 000002E2                    768     WTMR_S30:
 3199                             769     ;       ----- ﾀｲﾑｱｯﾌﾟ確認 -----
 3200 000002E2 50A2               770             MOV.L   @(__TMCT_FLG,R10_REG),R0                        ; FLAG領域
 3201 000002E4 C804               771             TST     #BIT2,R0                                        ; ﾀｲﾑｱｯﾌﾟ確認
 3202                             772             TST_BIT_ON WTMR_S70                                     ; ﾀｲﾑｱｯﾌﾟでｼﾞｬﾝﾌﾟ
 3203 000002E6 8B2E                   M           BF      WTMR_S70
 3204                             773                                                                     ;
 3205                             774     
 3206                             775     ;       -----ﾀｲﾏ一旦停止CHECK---
 3207 000002E8 50A2               776             MOV.L   @(__TMCT_FLG,R10_REG),R0                        ; FLAG領域
 3208 000002EA 2558               777             TST     A_REG,A_REG                                     ; 一旦停止情報確認
 3209                             778             TST_BIT_ON WTMR_S40                                     ; 継続でｼﾞｬﾝﾌﾟ
 3210 000002EC 8B02                   M           BF      WTMR_S40
 3211 000002EE C9FD               779             AND     #LOW ~BIT1,R0                                   ; 0:一旦停止
 3212                             780             M_BRA   WTMR_S45                                        ;
 3213 000002F0 A001                   M           BRA     WTMR_S45
 3214 000002F2 0009                   M           NOP
 3215 000002F4                    781     WTMR_S40:
 3216 000002F4 CB02               782             OR      #BIT1,R0                                        ; 1:継続
 3217 000002F6                    783     WTMR_S45:
 3218 000002F6 1A02               784             MOV.L   R0,@(__TMCT_FLG,R10_REG)                        ; FLAG領域
 3219                             785     
 3220                             786     ;       -------------実測比較・ﾘﾌﾚｯｼｭ-----------------
 3221 000002F8 50A0               787             MOV.L   @(__TMCT_PV,R10_REG),R0                         ; PV LOAD
 3222 000002FA 6203               788             MOV     R0,R2                                           ; PV=R2
 3223                             789     
 3224 000002FC 50A1               790             MOV.L   @(__TMCT_SV,R10_REG),R0                         ; SV LOAD
 3225 000002FE 3202               791             CMP/HS  R0,R2                                           ; R0=<R2
 3226 00000300 8B15               792             BF      WTMR_S50                                        ; NO R2 < R0 ﾀｲﾏ計測 ﾀｲﾑｱｯ
                                          ﾌﾟで無い時ｼﾞｬﾝﾌﾟ
 3227                             793     
 3228 00000302 6203               794             MOV     R0,R2                                           ; 実測はﾀｲﾑｱｯﾌﾟで設定を表
                                          示する
 3229                             795                                                                     ; 実測は端数,処理時間を表
                                          すものではない
 3230                             796     ;       --------- ﾀｲﾏﾀｲﾑｱｯﾌﾟ-----
 3231 00000304 E005               797             MOV.B   #(BIT2+BIT0),R0                                 ; ﾀｲﾏ停止(ﾀｲﾑｱｯﾌﾟ,起動ﾋﾞｯﾄ
                                          初期化)
 3232 00000306 1A02               798             MOV.L   R0,@(__TMCT_FLG,R10_REG)                        ; FLAG領域
 3233                             799     
 3234                             800             PUSH_REG1 R1_REG
 3235 00000308 2F16                   M           MOV.L   R1_REG,@-R15            ;PUSH=SP-4
 3236                                 M                                           ;REG=>[SP]
 3237                                 M                                           ;"-4" FF,FF,FF,FC
 3238                             801             PUSH_REG1 R2                                            ; ﾀｲﾏPV
 3239 0000030A 2F26                   M           MOV.L   R2,@-R15                ;PUSH=SP-4
 3240                                 M                                           ;REG=>[SP]
 3241                                 M                                           ;"-4" FF,FF,FF,FC
 3242                             802     ;       --------------ﾀｲﾑｱｯﾌﾟﾋﾞﾄｾｯﾄ(ﾀｲﾏ,ｶｳﾝﾀ同じ)-------
 3243 0000030C 50C2               803             MOV.L   @(TM_KND_T_TOP-_SEQ_DATA_TBL1,DTBL_REG),R0      ; ﾒﾓﾘ種別「T」TOPｱﾄﾞﾚｽLOAD
 3244                             804     ;;;     MOV.L   @R0,R1_REG                                      ; R1=_SEQ_CARD_RAM+_MKIND_
                                          T_ADR
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE    19
PROGRAM NAME =

 3245 0000030E 6103               805             MOV.L   R0,R1_REG                                       ; R1=_SEQ_CARD_RAM+_MKIND_
                                          T_ADR 値ではなくｱﾄﾞﾚｽをSET AKIBA
 3246 00000310 6293               806             MOV     R9_REG,R2_REG                                   ; ﾀｲﾏ番号PUSH
 3247                             807             FAR_JSR #_TMR_CNT_ADR_BIT_MAKE,R0                       ; input R1,R2 /ANS=R1:ADR
                                          R0:BIT
 3248 00000312 D012                   M           MOV.L   #_TMR_CNT_ADR_BIT_MAKE,R0               ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 3249 00000314 400B                   M           JSR     @R0                     ;
 3250 00000316 0009                   M           NOP                                     ;
 3251                             808     
 3252                             809             DI_PUSH_SR_SH3  WK_REG1=R2,WK_REG2=R4                   ; 割込ﾏｽｸ
 3253 00000318 0202                   M           STC     SR,R2                   ;
 3254 0000031A 941D                   M           MOV.W   #H'000000F0,R4          ;
 3255 0000031C 224B                   M           OR      R4,R2           ;INT15
 3256 0000031E 4F03                   M           STC.L   SR,@-R15                        ;PUSH SR
 3257 00000320 420E                   M           LDC     R2,SR                   ;割込禁止（15）
 3258 00000322 6310               810             MOV.B   @R1,R3                                          ; ﾒﾓﾘ内情報LOAD
 3259 00000324 230B               811             OR      R0,R3                                           ; BIT-SET
 3260 00000326 2130               812             MOV.B   R3,@R1                                          ; ﾒﾓﾘ情報更新
 3261                             813             EI_POP_SR_SH3                                           ; 割込ﾏｽｸ解除
 3262 00000328 4F07                   M           LDC.L   @R15+,SR                        ;POP SR
 3263                             814     ;       -------------------------------------------------
 3264                             815             POP_REG1 R2                                             ; ﾀｲﾏPV
 3265                                 M                                   ; RE"+4" 00,00,00,04
 3266 0000032A 62F6                   M           MOV.L   @R15+,R2        ;
 3267                             816             POP_REG1 R1_REG
 3268                                 M                                   ; RE"+4" 00,00,00,04
 3269 0000032C 61F6                   M           MOV.L   @R15+,R1_REG        ;
 3270 0000032E                    817     WTMR_S50:
 3271                             818     
 3272 0000032E E402               819             MOV.B   #2,R4                                           ;
 3273 00000330 3412               820             CMP/HS  R1_REG,R4                                       ; R2(2)=< R1
 3274 00000332 8903               821             BT      WTMR_S60                                        ; R1=0,1 =< R4 YES(演算な
                                          い)
 3275 00000334 6413               822             MOV     R1_REG,R4                                       ;
 3276                             823             FAR_JSR #_DIVS_32REG2_32REG1_R4_32REG2_R2,R0            ; R2/R4=R2
 3277 00000336 D00A                   M           MOV.L   #_DIVS_32REG2_32REG1_R4_32REG2_R2,R0            ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 3278 00000338 400B                   M           JSR     @R0                     ;
 3279 0000033A 0009                   M           NOP                                     ;
 3280 0000033C                    824     WTMR_S60:
 3281                             825     ;       --------------実測の転送(ﾀｲﾏ,ｶｳﾝﾀ同じ)-------
 3282 0000033C 50C3               826             MOV.L   @(TM_KND_TD_TOP-_SEQ_DATA_TBL1,DTBL_REG),R0     ; ﾒﾓﾘ種別「Td」TOPｱﾄﾞﾚｽLOA
                                          D
 3283                             827     ;;;     MOV.L   @R0,R1                                          ; R1=_SEQ_CARD_RAM+_MKIND_
                                          TD_ADR
 3284 0000033E 6103               828             MOV.L   R0,R1                                           ; R1=_SEQ_CARD_RAM+_MKIND_
                                          TD_ADR
 3285 00000340 319C               829             ADD     R9_REG,R1                                       ;
 3286 00000342 319C               830             ADD     R9_REG,R1                                       ;
 3287 00000344 2121               831             MOV.W   R2,@R1                                          ; TD_TOP+UNIT*2 PV SAVE
 3288                             832     
 3289 00000346                    833     WTMR_S70:
 3290 00000346 6473               834             MOV     M_REG,R4                                        ; M_REG情報LOAD
 3291 00000348 4425               835             ROTCR   R4                                              ; Mreg[起動指令]
 3292 0000034A 8B0B               836             BF      WTMR_S95                                        ; (終了・中断)
 3293                             837     
 3294 0000034C 50A2               838             MOV.L   @(__TMCT_FLG,R10_REG),R0                        ; FLAG領域
 3295 0000034E C804               839             TST     #BIT2,R0                                        ; 内部ﾀｲﾑｱｯﾌﾟ?
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE    20
PROGRAM NAME =

 3296                             840             TST_BIT_OF WTMR_S98                                     ; NO
 3297 00000350 891A                   M           BT      WTMR_S98
 3298                             841     
 3299                             842     ;       ------ TIME UP -------------------
 3300 00000352                    843     WTMR_S90:
 3301 00000352 E501               844             MOV.B   #BIT0,A_REG                                     ; A_REG ON
 3302                             845             M_BRA   WTMR_SEND                                       ;
 3303 00000354 A019                   M           BRA     WTMR_SEND
 3304 00000356 0009                   M           NOP
 3305                             846     
 3306                             847     
 3307                             848     ;       ------ 中断/ﾀｲﾑｱｯﾌﾟ後の終了 ------
 3308                                     ***** BEGIN-POOL *****
 3309 00000358 00F0                       DATA FOR SOURCE-LINE 809
 3310 0000035A 0000                       ALIGNMENT CODE
 3311 0000035C 00000000                   DATA FOR SOURCE-LINE 807
 3312 00000360 00000000                   DATA FOR SOURCE-LINE 823
 3313                                     ***** END-POOL *****
 3314 00000364                    849     WTMR_S95:
 3315 00000364 200A               850             XOR     R0,R0                                           ; ｸﾘｱ
 3316 00000366 1A02               851             MOV.L   R0,@(__TMCT_FLG,R10_REG)                        ; FLAG領域ｸﾘｱ BIT0(処理ﾌﾗｸ
                                          ﾞ),1(計測指令),2(up)
 3317                             852     
 3318                             853     ;       --------------ﾀｲﾑｱｯﾌﾟﾋﾞﾄｸﾘｱ(ﾀｲﾏ,ｶｳﾝﾀ同じ)-------
 3319 00000368 50C2               854             MOV.L   @(TM_KND_T_TOP-_SEQ_DATA_TBL1,DTBL_REG),R0      ; ﾒﾓﾘ種別「T」 TOPｱﾄﾞﾚｽLOA
                                          D
 3320                             855     ;;;     MOV.L   @R0,R1_REG                                      ; R1=_SEQ_CARD_RAM+_MKIND_
                                          T_ADR
 3321 0000036A 6103               856             MOV.L   R0,R1_REG                                       ; R1=_SEQ_CARD_RAM+_MKIND_
                                          T_ADR 値ではなくｱﾄﾞﾚｽをSET AKIBA
 3322 0000036C 6293               857             MOV     R9_REG,R2_REG                                   ; ﾀｲﾏ番号PUSH
 3323                             858             FAR_JSR #_TMR_CNT_ADR_BIT_MAKE,R0                       ; input R1,R2 /ANS=R1:ADR
                                          R0:BIT
 3324 0000036E D009                   M           MOV.L   #_TMR_CNT_ADR_BIT_MAKE,R0               ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 3325 00000370 400B                   M           JSR     @R0                     ;
 3326 00000372 0009                   M           NOP                                     ;
 3327                             859     
 3328                             860             DI_PUSH_SR_SH3  WK_REG1=R2,WK_REG2=R4                   ; 割込ﾏｽｸ
 3329 00000374 0202                   M           STC     SR,R2                   ;
 3330 00000376 940B                   M           MOV.W   #H'000000F0,R4          ;
 3331 00000378 224B                   M           OR      R4,R2           ;INT15
 3332 0000037A 4F03                   M           STC.L   SR,@-R15                        ;PUSH SR
 3333 0000037C 420E                   M           LDC     R2,SR                   ;割込禁止（15）
 3334 0000037E 6007               861             NOT     R0,R0                                           ; R0反転
 3335 00000380 6310               862             MOV.B   @R1,R3                                          ; ﾒﾓﾘ内情報LOAD
 3336 00000382 2309               863             AND     R0,R3                                           ; BIT--CLR
 3337 00000384 2130               864             MOV.B   R3,@R1                                          ; ﾒﾓﾘ情報更新
 3338                             865             EI_POP_SR_SH3                                           ; 割込ﾏｽｸ解除
 3339 00000386 4F07                   M           LDC.L   @R15+,SR                        ;POP SR
 3340                             866     
 3341                             867     ;       ------ IDEL ------
 3342 00000388                    868     WTMR_S98                                                        ; Mreg(ｽﾀｰﾄ指令OFF)
 3343 00000388 255A               869             XOR     A_REG,A_REG                                     ; A_REGｸﾘｱ
 3344                             870     
 3345 0000038A                    871     WTMR_SEND:
 3346                             872             SUB_END
 3347                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE    21
PROGRAM NAME =

 3348 0000038A 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 3349                             873             M_RTS
 3350 0000038C 000B                   M           RTS                             ;RTSの後ろの
 3351 0000038E 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 3352                             874     
 3353                             875     ;       *************************************************************
 3354                             876     ;       *****   Write Counter command                   5*2     *****
 3355                             877     ;       *************************************************************
 3356                                     ***** BEGIN-POOL *****
 3357 00000390 00F0                       DATA FOR SOURCE-LINE 860
 3358 00000392 0000                       ALIGNMENT CODE
 3359 00000394 00000000                   DATA FOR SOURCE-LINE 858
 3360                                     ***** END-POOL *****
 3361 00000398                    878             .ALIGN  4
 3362 00000398                    879     _WCTR_CODE:
 3363                             880     
 3364 00000398 E27F               881     WCTR_UNH:       MOV.B   #CHG_UNIT_H,R2                          ; CNT-H 番号
 3365 0000039A E0FF               882     WCTR_UNL:       MOV.B   #CHG_UNIT_L,R0                          ; CNT-L 番号
 3366 0000039C 51B4               883             MOV.L   @(WCTR_CALL-_SEQ_CALL_TBL1,CTBL_REG),R1         ; R0:adr R2:bit
 3367 0000039E 410B               884             JSR     @R1                                             ;
 3368 000003A0 0009               885             NOP                                                     ;
 3369 000003A2                    886     _WCTR_CODE_END:
 3370                             887     
 3371                             888     ;       *************************************************************
 3372                             889     ;       *****   Write Counter command subroutine                *****
 3373                             890     ;       *************************************************************
 3374                             891     ;       Mreg ENABLE
 3375                             892     ;       Areg CLK
 3376                             893     ;
 3377 000003A4                    894             .ALIGN  4
 3378 000003A4                    895     _WCTR_SUB:
 3379                             896             SUB_START
 3380 000003A4 4F22                   M           STS.L   PR,@-R15                ;[必要]
 3381                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 3382                             897     
 3383 000003A6 4218               898             SHLL8   R2                                              ; R2は0か1(ﾀｲﾏは500個　多
                                          くて1000個 3E8)EXTUは不要
 3384 000003A8 600C               899             EXTU.B  R0,R0                                           ;
 3385 000003AA 220B               900             OR      R0,R2                                           ; R2:ｶｳﾝﾀ番号
 3386 000003AC 6923               901             MOV     R2,R9_REG                                       ; ｶｳﾝﾀ番号PUSH
 3387                             902     
 3388 000003AE 5AC5               903             MOV.L   @(CT_STCT_TOP-_SEQ_DATA_TBL1,DTBL_REG),R10_REG  ; R10=_SEQ_CTR_DATA ｶｳﾝﾀ演
                                          算ﾜｰｸram-top
 3389                             904             TMR_CNT_STRCT_ADR UNIT_REG=R2,WKREG1=R1                 ; R2*12=R1
 3390 000003B0 4208                   M                   SHLL2   R2                              ; *4
 3391 000003B2 6123                   M                   MOV     R2,R1                   ;
 3392 000003B4 4200                   M                   SHLL    R2                              ; *8
 3393 000003B6 312C                   M                   ADD     R2,R1                   ;
 3394 000003B8 3A1C               905             ADD     R1,R10                                          ; *12(R1)+TOP//////ｶｳﾝﾀ構
                                          造TOP
 3395                             906     
 3396                             907     ;       ========= 内部的には前回値のリフレッシュとカウントを常時行う====
 3397                             908     ;       ---------- CLK(A_REG) REFLASH ------
 3398 000003BA 211A               909             XOR     R1,R1                                           ; 前回値格納ﾚｼﾞｽﾀｸﾘｱ
 3399 000003BC 2558               910             TST     A_REG,A_REG                                     ; 今回値確認
 3400                             911             TST_BIT_OF WCTR_S10                                     ;
 3401 000003BE 8900                   M           BT      WCTR_S10
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE    22
PROGRAM NAME =

 3402 000003C0 E102               912             MOV     #BIT1,R1                                        ; CLK(今回値格納)
 3403 000003C2                    913     WCTR_S10:
 3404 000003C2 50A2               914             MOV.L   @(__TMCT_FLG,R10_REG),R0                        ; FLAG領域ｸﾘｱ BIT0(処理ﾌﾗｸ
                                          ﾞ),BIT1:CLK-前回値
 3405 000003C4 6303               915             MOV     R0,R3                                           ; OLD
 3406 000003C6 C9FD               916             AND     #LOW ~BIT1,R0                                   ; BIT1ｸﾘｱ
 3407 000003C8 201B               917             OR      R1,R0                                           ; NEW A_REG SAVE
 3408 000003CA 1A02               918             MOV.L   R0,@(__TMCT_FLG,R10_REG)                        ; FLAG領域更新
 3409                             919     
 3410                             920     ;       -------- ON-EDGE なら+1 0000,FFFFでﾘﾐｯﾄ-----
 3411 000003CC 230A               921             XOR     R0,R3                                           ; NEW XOR OLD->R3
 3412 000003CE 2039               922             AND     R3,R0                                           ; EDGE(R3) AND R0 ->R0
 3413 000003D0 C802               923             TST     #BIT1,R0                                        ;
 3414                             924             TST_BIT_OF WCTR_S20                                     ;
 3415 000003D2 8905                   M           BT      WCTR_S20
 3416                             925     
 3417 000003D4 50A0               926             MOV.L   @(__TMCT_PV,R10_REG),R0                         ; PV LOAD
 3418 000003D6 7001               927             ADD     #1,R0                                           ;
 3419 000003D8 D417               928             MOV.L   #H'FFFF0000,R4                                  ; PV=0000,FFFFまで
 3420 000003DA 2048               929             TST     R4,R0                                           ;
 3421                             930             TST_BIT_ON WCTR_S20                                     ;
 3422 000003DC 8B00                   M           BF      WCTR_S20
 3423 000003DE 1A00               931             MOV.L   R0,@(__TMCT_PV,R10_REG)                         ;
 3424 000003E0                    932     WCTR_S20:
 3425                             933     
 3426                             934     ;       =========処理開始==============
 3427 000003E0 50A2               935             MOV.L   @(__TMCT_FLG,R10_REG),R0                        ; FLAG領域
 3428 000003E2 C801               936             TST     #BIT0,R0                                        ; ACTIVE?
 3429                             937             TST_BIT_ON WCTR_S30                                     ; YES ACTIVE JUMP
 3430 000003E4 8B09                   M           BF      WCTR_S30
 3431                             938     
 3432                             939     ;       -------- ILDE -------
 3433 000003E6 6473               940             MOV     M_REG,R4
 3434 000003E8 4425               941             ROTCR   R4                                              ;
 3435 000003EA 8B3C               942             BF      WCTR_S98                                        ; Mreg(ｽﾀｰﾄ指令OFF)
 3436                             943     
 3437                             944     ;       ----- Mreg ON(有効)-------
 3438 000003EC 50A2               945             MOV.L   @(__TMCT_FLG,R10_REG),R0                        ; FLAG領域ｸﾘｱ BIT0(処理ﾌﾗｸ
                                          ﾞ),BIT1:CLK-前回値
 3439 000003EE C9FE               946             AND     #LOW ~BIT0,R0
 3440 000003F0 1A02               947             MOV.L   R0,@(__TMCT_FLG,R10_REG)                        ; FLAG領域ｸﾘｱ BIT0(処理ﾌﾗｸ
                                          ﾞ),BIT1:CLK-前回値
 3441                             948     
 3442 000003F2 200A               949             XOR     R0,R0
 3443 000003F4 1A00               950             MOV.L   R0,@(__TMCT_PV,R10_REG)                         ; 実測PV=0
 3444                             951     
 3445                             952     ;       ----- ｶｳﾝﾀ起動 -----
 3446 000003F6 E001               953             MOV.B   #BIT0,R0                                        ;
 3447 000003F8 1A02               954             MOV.L   R0,@(__TMCT_FLG,R10_REG)                        ; 起動中SET(ﾀｲﾏ計測指令BIT
                                          1=0のままで起動しない)
 3448                             955     
 3449                             956     ;       ------- 測定中 -----------------
 3450 000003FA                    957     WCTR_S30:
 3451 000003FA 6473               958             MOV     M_REG,R4
 3452 000003FC 4425               959             ROTCR   R4                                              ;
 3453 000003FE 8B1F               960             BF      WCTR_S95                                        ; Mreg(ｽﾀｰﾄ指令OFF)
 3454                             961     
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE    23
PROGRAM NAME =

 3455                             962     ;       ---------- 実測転送------------
 3456 00000400 50A0               963             MOV.L   @(__TMCT_PV,R10_REG),R0                         ; PV LOAD
 3457 00000402 6203               964             MOV     R0,R2
 3458                             965     
 3459 00000404 50C7               966             MOV.L   @(CT_KND_CD_TOP-_SEQ_DATA_TBL1,DTBL_REG),R0     ;
 3460                             967     ;;;     MOV.L   @R0,R1                                          ; R1=_SEQ_CARD_RAM+_MKIND_
                                          CD_ADR
 3461 00000406 6103               968             MOV.L   R0,R1                                           ; R1=_SEQ_CARD_RAM+_MKIND_
                                          CD_ADR
 3462 00000408 319C               969             ADD     R9_REG,R1                                       ;
 3463 0000040A 319C               970             ADD     R9_REG,R1                                       ;
 3464 0000040C 2121               971             MOV.W   R2,@R1                                          ; TD_TOP+UNIT*2 PV SAVE
 3465                             972     
 3466                             973     ;       --------- 比較--------------
 3467 0000040E 3282               974             CMP/HS  D_REG,R2                                        ; SV =< PV?
 3468 00000410 8B19               975             BF      WCTR_S97                                        ; NO PV < SV
 3469                             976     
 3470 00000412                    977     WCTR_S90:
 3471                             978     ;       --------------ｶｳﾝﾄｱｯﾌﾟﾋﾞﾄｾｯﾄ(ﾀｲﾏ,ｶｳﾝﾀ同じ)-------
 3472 00000412 50C6               979             MOV.L   @(CT_KDN_C_TOP-_SEQ_DATA_TBL1,DTBL_REG),R0      ;
 3473                             980     ;;;     MOV.L   @R0,R1_REG                                      ; R1=_SEQ_CARD_RAM+_MKIND_
                                          T_ADR
 3474 00000414 6103               981             MOV.L   R0,R1_REG                                       ; R1=_SEQ_CARD_RAM+_MKIND_
                                          T_ADR
 3475 00000416 6293               982             MOV     R9_REG,R2_REG                                   ; ｶｳﾝﾀ番号PUSH
 3476                             983             FAR_JSR #_TMR_CNT_ADR_BIT_MAKE,R0                       ; input R1,R2 /ANS=R1:ADR
                                          R0:BIT
 3477 00000418 D008                   M           MOV.L   #_TMR_CNT_ADR_BIT_MAKE,R0               ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 3478 0000041A 400B                   M           JSR     @R0                     ;
 3479 0000041C 0009                   M           NOP                                     ;
 3480                             984     
 3481                             985             DI_PUSH_SR_SH3  WK_REG1=R2,WK_REG2=R4                   ;
 3482 0000041E 0202                   M           STC     SR,R2                   ;
 3483 00000420 9409                   M           MOV.W   #H'000000F0,R4          ;
 3484 00000422 224B                   M           OR      R4,R2           ;INT15
 3485 00000424 4F03                   M           STC.L   SR,@-R15                        ;PUSH SR
 3486 00000426 420E                   M           LDC     R2,SR                   ;割込禁止（15）
 3487 00000428 6310               986             MOV.B   @R1,R3                                          ;
 3488 0000042A 230B               987             OR      R0,R3                                           ; BIT-SET
 3489 0000042C 2130               988             MOV.B   R3,@R1                                          ;
 3490                             989             EI_POP_SR_SH3                                           ;
 3491 0000042E 4F07                   M           LDC.L   @R15+,SR                        ;POP SR
 3492                             990     ;       -------------------------------------------------
 3493 00000430 E501               991             MOV.B   #BIT0,A_REG                                     ;
 3494                             992             M_BRA   WCTR_SEND                                       ;
 3495 00000432 A019                   M           BRA     WCTR_SEND
 3496 00000434 0009                   M           NOP
 3497                             993     
 3498                             994     ;       ==== ﾀｲﾏﾕﾆｯﾄ中断/終了===
 3499                                     ***** BEGIN-POOL *****
 3500 00000436 00F0                       DATA FOR SOURCE-LINE 985
 3501 00000438 FFFF0000                   DATA FOR SOURCE-LINE 928
 3502 0000043C 00000000                   DATA FOR SOURCE-LINE 983
 3503                                     ***** END-POOL *****
 3504 00000440                    995     WCTR_S95:
 3505 00000440 50A2               996             MOV.L   @(__TMCT_FLG,R10_REG),R0                        ; FLAG領域ｸﾘｱ BIT0(処理ﾌﾗｸ
                                          ﾞ),BIT1:CLK-前回値
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE    24
PROGRAM NAME =

 3506 00000442 C9FE               997             AND     #LOW ~BIT0,R0
 3507 00000444 1A02               998             MOV.L   R0,@(__TMCT_FLG,R10_REG)                        ; FLAG領域ｸﾘｱ BIT0(処理ﾌﾗｸ
                                          ﾞ),BIT1:CLK-前回値
 3508                             999     
 3509 00000446                   1000     WCTR_S97:
 3510                            1001     ;       --------------ﾀｲﾑｱｯﾌﾟﾋﾞﾄｸﾘｱ(ﾀｲﾏ,ｶｳﾝﾀ同じ)-------
 3511 00000446 50C6              1002             MOV.L   @(CT_KDN_C_TOP-_SEQ_DATA_TBL1,DTBL_REG),R0      ;
 3512                            1003     ;;;     MOV.L   @R0,R1_REG                                      ; R1=_SEQ_CARD_RAM+_MKIND_
                                          T_ADR
 3513 00000448 6103              1004             MOV.L   R0,R1_REG                                       ; R1=_SEQ_CARD_RAM+_MKIND_
                                          T_ADR
 3514 0000044A 6293              1005             MOV     R9_REG,R2_REG                                   ; ﾀｲﾏ番号PUSH
 3515                            1006             FAR_JSR #_TMR_CNT_ADR_BIT_MAKE,R0                       ; input R1,R2 /ANS=R1:ADR
                                          R0:BIT
 3516 0000044C D008                   M           MOV.L   #_TMR_CNT_ADR_BIT_MAKE,R0               ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 3517 0000044E 400B                   M           JSR     @R0                     ;
 3518 00000450 0009                   M           NOP                                     ;
 3519                            1007     
 3520                            1008             DI_PUSH_SR_SH3  WK_REG1=R2,WK_REG2=R4                   ;
 3521 00000452 0202                   M           STC     SR,R2                   ;
 3522 00000454 940B                   M           MOV.W   #H'000000F0,R4          ;
 3523 00000456 224B                   M           OR      R4,R2           ;INT15
 3524 00000458 4F03                   M           STC.L   SR,@-R15                        ;PUSH SR
 3525 0000045A 420E                   M           LDC     R2,SR                   ;割込禁止（15）
 3526 0000045C 6007              1009             NOT     R0,R0                                           ;
 3527 0000045E 6310              1010             MOV.B   @R1,R3                                          ;
 3528 00000460 2309              1011             AND     R0,R3                                           ; BIT--CLR
 3529 00000462 2130              1012             MOV.B   R3,@R1                                          ;
 3530                            1013             EI_POP_SR_SH3                                           ;
 3531 00000464 4F07                   M           LDC.L   @R15+,SR                        ;POP SR
 3532                            1014     
 3533                            1015     ;       ------ IDEL ------
 3534 00000466                   1016     WCTR_S98                                                        ; Mreg(ｽﾀｰﾄ指令OFF)
 3535 00000466 255A              1017             XOR     A_REG,A_REG
 3536                            1018     
 3537 00000468                   1019     WCTR_SEND:
 3538                            1020             SUB_END
 3539                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 3540 00000468 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 3541                            1021             M_RTS
 3542 0000046A 000B                   M           RTS                             ;RTSの後ろの
 3543 0000046C 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 3544                            1022     
 3545                            1023     ;       ***************************************************
 3546                            1024     ;       ***                                             ***
 3547                            1025     ;       ***     ﾀｲﾏ,ｶｳﾝﾀ番号からのｱﾄﾞﾚｽ,ﾋﾞｯﾄ作成        ***
 3548                            1026     ;       ***                                             ***
 3549                            1027     ;       ***************************************************
 3550                            1028     ;       MOV.L   @(TM_KND_T_TOP-_SEQ_DATA_TBL1,DTBL_REG),R0      ;
 3551                            1029     ;       MOV.L   @R0,R1                                          ; R1=_SEQ_CARD_RAM+_MKIND_
                                          T_ADR
 3552                            1030     ;       MOV     R9,R2                                           ; ﾀｲﾏ番号PUSH
 3553                            1031     ;       Input R1(TOP_ADR),R2(ﾀｲﾏ番号)
 3554                            1032     ;       ANS R1:byte adr
 3555                            1033     ;       ANS R0:bit0~7
 3556                            1034     ;
 3557                            1035     ;       USED R0,R1,R2,R4
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE    25
PROGRAM NAME =

 3558                            1036     ;
 3559                                     ***** BEGIN-POOL *****
 3560 0000046E 00F0                       DATA FOR SOURCE-LINE 1008
 3561 00000470 00000000                   DATA FOR SOURCE-LINE 1006
 3562                                     ***** END-POOL *****
 3563 00000474                   1037     _TMR_CNT_ADR_BIT_MAKE
 3564                            1038             SUB_START
 3565 00000474 4F22                   M           STS.L   PR,@-R15                ;[必要]
 3566                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 3567                            1039     
 3568 00000476 6023              1040             MOV     R2_REG,R0                                       ;
 3569                            1041     
 3570                            1042     ;       ---- R0 NO.-->BIT0~7変換----
 3571 00000478 C90F              1043             AND     #(BIT3+BIT2+BIT1+BIT0),R0                       ; ADD 100112 AKIBA
 3572 0000047A D405              1044             MOV.L   #_BIT_DATA_TBL2,R4                              ;
 3573 0000047C 4008              1045             SHLL2   R0                                              ;
 3574 0000047E 340C              1046             ADD     R0,R4                                           ;
 3575 00000480 6042              1047             MOV.L   @R4,R0_REG                                      ; (R0=BIT0~BIT7)
 3576                            1048     
 3577 00000482 D404              1049             MOV.L   #H'00FF,R4                                      ; ADD 100112 AKIBA
 3578 00000484 3403              1050             CMP/GE  R0,R4                                           ; BIT DATAﾁｪｯｸ IF OVER THE
                                          N ERR R4 >= R0
 3579 00000486 8907              1051             BT      _TMR_CNT_ADR_BIT_L                              ; R4>=R0 JUMP
 3580 00000488 4019              1052             SHLR8   R0                                              ;
 3581                            1053             M_BRA   _TMR_CNT_ADR_BIT_H                              ;
 3582 0000048A A007                   M           BRA     _TMR_CNT_ADR_BIT_H
 3583 0000048C 0009                   M           NOP
 3584                            1054     
 3585                                     ***** BEGIN-POOL *****
 3586 0000048E 0000                       ALIGNMENT CODE
 3587 00000490 00000000                   DATA FOR SOURCE-LINE 1044
 3588 00000494 000000FF                   DATA FOR SOURCE-LINE 1049
 3589                                     ***** END-POOL *****
 3590 00000498                   1055     _TMR_CNT_ADR_BIT_L
 3591 00000498 D404              1056             MOV.L   #H'0001,R4                                      ;
 3592 0000049A 314C              1057             ADD     R4,R1                                           ; MEM ADR L + 1
 3593                            1058     
 3594 0000049C                   1059     _TMR_CNT_ADR_BIT_H
 3595 0000049C 4209              1060             SHLR2   R2                                              ; ﾀｲﾏ番号/8
 3596 0000049E 4209              1061             SHLR2   R2                                              ; ﾀｲﾏ番号/16 X(R2)...Y(R0)
 3597 000004A0 4200              1062             SHLL    R2                                              ; ﾀｲﾏ番号/8 X(R2)...Y(R0)
                                          ADD 100112 AKIBA
 3598 000004A2 312C              1063             ADD     R2,R1_REG                                       ; TOP+ adr
 3599                            1064     
 3600                            1065             SUB_END
 3601                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 3602 000004A4 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 3603                            1066             M_RTS
 3604 000004A6 000B                   M           RTS                             ;RTSの後ろの
 3605 000004A8 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 3606                            1067     
 3607                            1068     ;********************************************************************
 3608                            1069     ;* シーケンス応用命令
 3609                            1070     ;* データ命令
 3610                            1071     ;********************************************************************
 3611                            1072     ;         ------------------------------
 3612                            1073     ;       +0|       命令CODE      (  )   |
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE    26
PROGRAM NAME =

 3613                            1074     ;         ------------------------------
 3614                            1075     ;       +1|         空き        (  )   |
 3615                            1076     ;         ------------------------------
 3616                            1077     ;       +2|       ﾃﾞｰﾀ上位LH    (  )   |
 3617                            1078     ;         ------------------------------
 3618                            1079     ;       +3|       ﾃﾞｰﾀ下位LL    (  )   |
 3619                            1080     ;         ------------------------------
 3620                            1081     
 3621                            1082     ;         ------------------------------
 3622                            1083     ;       +0|       命令CODE      (  )   |
 3623                            1084     ;         ------------------------------
 3624                            1085     ;       +1|         空き        (  )   |
 3625                            1086     ;         ------------------------------
 3626                            1087     ;       +2|         空き        (  )   |
 3627                            1088     ;         ------------------------------
 3628                            1089     ;       +3|         空き        (  )   |
 3629                            1090     ;         ------------------------------
 3630                            1091     ;       +4|       ﾃﾞｰﾀHH        (  )   |
 3631                            1092     ;         ------------------------------
 3632                            1093     ;       +5|       ﾃﾞｰﾀHL        (  )   |
 3633                            1094     ;         ------------------------------
 3634                            1095     ;       +6|       ﾃﾞｰﾀLH        (  )   |
 3635                            1096     ;         ------------------------------
 3636                            1097     ;       +7|       ﾃﾞｰﾀLL        (  )   |
 3637                            1098     ;         ------------------------------
 3638                            1099     ;
 3639                            1100     ;         ------------------------------
 3640                            1101     ;       +0|       命令CODE      (  )   |
 3641                            1102     ;         ------------------------------
 3642                            1103     ;       +1|      ﾒﾓﾘ種別        (  )   |
 3643                            1104     ;         ------------------------------
 3644                            1105     ;       +2|       ｱﾄﾞﾚｽ上位     (  )   |
 3645                            1106     ;         ------------------------------
 3646                            1107     ;       +3|       ｱﾄﾞﾚｽ下位     (  )   |
 3647                            1108     ;         ------------------------------
 3648                            1109     ;
 3649                            1110     ;       *********************************************************************
 3650                            1111     ;       *****   Data Set command                        8*2             *****
 3651                            1112     ;       *********************************************************************
 3652                                     ***** BEGIN-POOL *****
 3653 000004AA 0000                       ALIGNMENT CODE
 3654 000004AC 00000001                   DATA FOR SOURCE-LINE 1056
 3655                                     ***** END-POOL *****
 3656 000004B0                   1113             .ALIGN  4
 3657 000004B0                   1114     _DSETWI_CODE:
 3658 000004B0 2558              1115             TST     A_REG,A_REG                                     ; 変更 091105AKIBA
 3659                            1116             TST_BIT_OF _DSETWI_CODE_END                             ; Areg=OFF
 3660 000004B2 8905                   M           BT      _DSETWI_CODE_END
 3661                            1117     
 3662                            1118             IMD_MAKE1_WORD LBEL1=DSETWI_DT_LH,LBEL2=DSETWI_DT_LL    ; ANS.R2
 3663 000004B4 E1FF                   M   DSETWI_DT_LH:           MOV.B   #CHG_LHDATA,R1                  ; H_BYTE
 3664 000004B6 E2FF                   M   DSETWI_DT_LL:           MOV.B   #CHG_LLDATA,R2                  ; L_BYTE
 3665 000004B8 4118                   M                   SHLL8   R1                              ; 符号をそのまま
 3666 000004BA 622C                   M                   EXTU.B  R2,R2                           ;
 3667 000004BC 221B                   M                   OR      R1,R2                           ; data
 3668 000004BE 6823              1119             MOV     R2,D_REG
 3669 000004C0                   1120     _DSETWI_CODE_END:
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE    27
PROGRAM NAME =

 3670                            1121     
 3671                            1122     ;       *********************************************************************
 3672                            1123     ;       *****   Data Set command                        9*2             *****
 3673                            1124     ;       *********************************************************************
 3674 000004C0                   1125             .ALIGN  4
 3675 000004C0                   1126     _DSETLI_CODE:
 3676 000004C0 2558              1127             TST     A_REG,A_REG                                     ; 変更 091105AKIBA
 3677                            1128             TST_BIT_OF _DSETLI_CODE_END                             ; Areg=OFF ADD 100114 AKIB
                                          A
 3678 000004C2 8906                   M           BT      _DSETLI_CODE_END
 3679                            1129     
 3680 000004C4 E3FF              1130     DSETLI_DT_HH:   MOV.B   #CHG_HHDATA,R3                          ; HH_BYTE
 3681 000004C6 E4FF              1131     DSETLI_DT_HL:   MOV.B   #CHG_HLDATA,R4                          ; HL_BYTE
 3682 000004C8 E1FF              1132     DSETLI_DT_LH:   MOV.B   #CHG_LHDATA,R1                          ; LH_BYTE
 3683 000004CA E2FF              1133     DSETLI_DT_LL:   MOV.B   #CHG_LLDATA,R2                          ; LL_BYTE
 3684                            1134     
 3685 000004CC 50B0              1135             MOV.L   @(DSETLI_CALL-_SEQ_CALL_TBL1,CTBL_REG),R0       ;
 3686 000004CE 400B              1136             JSR     @R0                                             ;
 3687 000004D0 0009              1137             NOP                                                     ;
 3688 000004D2                   1138     _DSETLI_CODE_END:
 3689                            1139     
 3690                            1140     ;       ------------------------------------
 3691                            1141     ;       ----    DSETLI ｻﾌﾞﾙｰﾁﾝ          ----
 3692                            1142     ;       ------------------------------------
 3693                            1143     ;       ----------- Input　R3,R4,R1,R2:4byte　data　----------
 3694 000004D4                   1144             .ALIGN  4
 3695 000004D4                   1145     _DSETLI_SUB:
 3696                            1146             SUB_START
 3697 000004D4 4F22                   M           STS.L   PR,@-R15                ;[必要]
 3698                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 3699                            1147     
 3700 000004D6 633C              1148             EXTU.B  R3,R3                                           ; 000x
 3701 000004D8 4318              1149             SHLL8   R3                                              ; 00x0
 3702 000004DA 6339              1150             SWAP.W  R3,R3                                           ; x000 HHﾃﾞｰﾀ抽出
 3703                            1151                                                                     ; 16bitｼﾌﾄ+下位WORD0ｸﾘｱ
 3704 000004DC 644C              1152             EXTU.B  R4,R4                                           ; 000x
 3705 000004DE 6449              1153             SWAP.W  R4,R4                                           ; 0x00 HLﾃﾞｰﾀ抽出
 3706                            1154     
 3707 000004E0 611C              1155             EXTU.B  R1,R1                                           ; 000x
 3708 000004E2 4118              1156             SHLL8   R1                                              ; 00x0 LHﾃﾞｰﾀ抽出
 3709                            1157     
 3710 000004E4 622C              1158             EXTU.B  R2,R2                                           ; 000x          LLﾃﾞｰﾀ抽出
 3711 000004E6 223B              1159             OR      R3,R2                                           ; HH,0,0,LL     HHﾃﾞｰﾀ格納
 3712 000004E8 224B              1160             OR      R4,R2                                           ; HH,HL,0,LL    HLﾃﾞｰﾀ格納
 3713 000004EA 221B              1161             OR      R1,R2                                           ; HH,HL,LH,LL   LLﾃﾞｰﾀ格納
 3714                            1162     
 3715 000004EC 6823              1163             MOV.L   R2,D_REG                                        ; ----4byteALIGN-----
 3716                            1164     
 3717                            1165             SUB_END
 3718                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 3719 000004EE 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 3720                            1166             M_RTS
 3721 000004F0 000B                   M           RTS                             ;RTSの後ろの
 3722 000004F2 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 3723                            1167     
 3724                            1168     ;       *********************************************************************
 3725                            1169     ;       *****   LDW command                             8*2             *****
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE    28
PROGRAM NAME =

 3726                            1170     ;       *********************************************************************
 3727 000004F4                   1171             .ALIGN  4
 3728 000004F4                   1172     _LDW_CODE:
 3729 000004F4 2558              1173             TST     A_REG,A_REG                                     ; 変更 091105AKIBA
 3730                            1174             TST_BIT_OF _LDW_CODE_END                                ;
 3731 000004F6 8905                   M           BT      _LDW_CODE_END
 3732                            1175     
 3733                            1176             ADR_MAKE1_WORD LBEL1=LDW_ADR,LBEL2=LDW_OFS              ; R0=WORDｱﾄﾞﾚｽ
 3734                                 M                   ADR_MAKE1_BIT LDW_ADR,LDW_OFS
 3735 000004F8 E17F                   M   LDW_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 3736 000004FA E0FF                   M   LDW_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 3737 000004FC 4118                   M                   SHLL8   R1
 3738 000004FE 600C                   M                   EXTU.B  R0,R0                           ;
 3739 00000500 201B                   M                   OR      R1,R0                           ; adress
 3740 00000502 08ED              1177             MOV.W   @(R0,TOP_REG),D_REG                             ;
 3741                            1178     
 3742 00000504                   1179     _LDW_CODE_END:
 3743                            1180     
 3744                            1181     ;       *********************************************************************
 3745                            1182     ;       *****   LDL command                             8*2             *****
 3746                            1183     ;       *********************************************************************
 3747 00000504                   1184             .ALIGN  4
 3748 00000504                   1185     _LDL_CODE:
 3749 00000504 2558              1186             TST     A_REG,A_REG                                     ; 変更 091105AKIBA
 3750                            1187             TST_BIT_OF _LDL_CODE_END                                ;
 3751 00000506 8905                   M           BT      _LDL_CODE_END
 3752                            1188     
 3753                            1189             ADR_MAKE1_WORD LBEL1=LDL_ADR,LBEL2=LDL_OFS              ; R0=4byte　ALIGNｱﾄﾞﾚｽ
 3754                                 M                   ADR_MAKE1_BIT LDL_ADR,LDL_OFS
 3755 00000508 E17F                   M   LDL_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 3756 0000050A E0FF                   M   LDL_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 3757 0000050C 4118                   M                   SHLL8   R1
 3758 0000050E 600C                   M                   EXTU.B  R0,R0                           ;
 3759 00000510 201B                   M                   OR      R1,R0                           ; adress
 3760                            1190     
 3761 00000512 08EE              1191             MOV.L   @(R0,TOP_REG),D_REG                             ; ----4byteALIGN-----
 3762                            1192     
 3763 00000514                   1193     _LDL_CODE_END:
 3764                            1194     
 3765                            1195     ;       *********************************************************************
 3766                            1196     ;       *****   STW command                             8*2             *****
 3767                            1197     ;       *********************************************************************
 3768 00000514                   1198             .ALIGN  4
 3769 00000514                   1199     _STW_CODE:
 3770 00000514 2558              1200             TST     A_REG,A_REG                                     ; 変更 091105AKIBA
 3771                            1201             TST_BIT_OF _STW_CODE_END                                ;
 3772 00000516 8905                   M           BT      _STW_CODE_END
 3773                            1202     
 3774                            1203             ADR_MAKE1_WORD LBEL1=STW_ADR,LBEL2=STW_OFS              ; R0=WORDｱﾄﾞﾚｽ
 3775                                 M                   ADR_MAKE1_BIT STW_ADR,STW_OFS
 3776 00000518 E17F                   M   STW_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 3777 0000051A E0FF                   M   STW_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE    29
PROGRAM NAME =

                                          E
 3778 0000051C 4118                   M                   SHLL8   R1
 3779 0000051E 600C                   M                   EXTU.B  R0,R0                           ;
 3780 00000520 201B                   M                   OR      R1,R0                           ; adress
 3781 00000522 0E85              1204             MOV.W   D_REG,@(R0,TOP_REG)                             ;
 3782 00000524                   1205     _STW_CODE_END:
 3783                            1206     
 3784                            1207     ;       *********************************************************************
 3785                            1208     ;       *****   STL command                             8*2             *****
 3786                            1209     ;       *********************************************************************
 3787 00000524                   1210             .ALIGN  4
 3788 00000524                   1211     _STL_CODE:
 3789 00000524 2558              1212             TST     A_REG,A_REG                                     ; 変更 091105AKIBA
 3790                            1213             TST_BIT_OF _STL_CODE_END                                ; 誤記修正 091105AKIBA
 3791 00000526 8905                   M           BT      _STL_CODE_END
 3792                            1214     
 3793                            1215             ADR_MAKE1_WORD LBEL1=STL_ADR,LBEL2=STL_OFS              ; R0=WORDｱﾄﾞﾚｽ
 3794                                 M                   ADR_MAKE1_BIT STL_ADR,STL_OFS
 3795 00000528 E17F                   M   STL_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 3796 0000052A E0FF                   M   STL_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 3797 0000052C 4118                   M                   SHLL8   R1
 3798 0000052E 600C                   M                   EXTU.B  R0,R0                           ;
 3799 00000530 201B                   M                   OR      R1,R0                           ; adress
 3800 00000532 0E86              1216             MOV.L   D_REG,@(R0,TOP_REG)                             ; ----4byteALIGN-----
 3801 00000534                   1217     _STL_CODE_END:
 3802                            1218     
 3803                            1219     
 3804                            1220     ;********************************************************************
 3805                            1221     ;* シーケンス応用命令
 3806                            1222     ;* データ演算命令
 3807                            1223     ;********************************************************************
 3808                            1224     
 3809                            1225     ;       *******************************************************************
 3810                            1226     ;       ***                                                             ***
 3811                            1227     ;       ***                                                             ***
 3812                            1228     ;       ***             CMP/GT,GE,EQ  Dreg,(MEMword,MEMlong,IMIword )   ***
 3813                            1229     ;       ***                                                             ***
 3814                            1230     ;       ***             [MEM11,IMI10]                                   ***
 3815                            1231     ;       *******************************************************************
 3816                            1232     ;       --------- メモリ------
 3817                            1233             .MACRO  CMPCMD_MEM1 EXIT,LBEL1,LBEL2,LG,CMPCMD,OP1,OP2
 3818                            1234                     TST     A_REG,A_REG                             ;
 3819                            1235                     TST_BIT_OF \EXIT                                ; Areg=0 jump(比較しないと
                                          きはAreg=0を返す)
 3820                            1236     
 3821                            1237                     ADR_MAKE1_WORD LBEL1=\LBEL1,LBEL2=\LBEL2        ; R0=WORDｱﾄﾞﾚｽ
 3822                            1238                     MOV.\LG @(R0,TOP_REG),R2                        ; [[W/L]]
 3823                            1239                     CMP/\CMPCMD     \OP1,\OP2                       ; R2 < D_REG THEN T=1
 3824                            1240                     MOVT    A_REG                                   ; Areg<= T
 3825                            1241             .ENDM
 3826                            1242     
 3827                            1243     ;       --------- 直接数値----
 3828                            1244             .MACRO  CMPCMD_IMI1 EXIT,LBEL1,LBEL2,LG,CMPCMD,OP1,OP2
 3829                            1245                     TST     A_REG,A_REG                             ;
 3830                            1246                     TST_BIT_OF \EXIT                                ; Areg=0 jump(比較しないと
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE    30
PROGRAM NAME =

                                          きはAreg=0を返す)
 3831                            1247     
 3832                            1248                     IMD_MAKE1_WORD LBEL1=\LBEL1,LBEL2=\LBEL2        ; R2
 3833                            1249                     CMP/\CMPCMD     \OP1,\OP2                       ; R2 < D_REG THEN T=1
 3834                            1250                     MOVT    A_REG                                   ; Areg<= T
 3835                            1251             .ENDM
 3836                            1252     
 3837                            1253     ;       *******************************************************************
 3838                            1254     ;       ***                                                             ***
 3839                            1255     ;       ***                                                             ***
 3840                            1256     ;       ***             NE  Dreg,(MEMword,MEMlong,IMIword )             ***
 3841                            1257     ;       ***             (SHの持つ命令の論理が反対)                      ***
 3842                            1258     ;       ***             [MEM13,IMI12]                                   ***
 3843                            1259     ;       *******************************************************************
 3844                            1260     ;       --------- メモリ------
 3845                            1261             .MACRO  CMPCMD_MEM2 EXIT,LBEL1,LBEL2,LG,CMPCMD,OP1,OP2
 3846                            1262                     TST     A_REG,A_REG                             ;
 3847                            1263                     TST_BIT_OF \EXIT                                ; Areg=0 jump(比較しないと
                                          きはAreg=0を返す)
 3848                            1264     
 3849                            1265                     ADR_MAKE1_WORD LBEL1=\LBEL1,LBEL2=\LBEL2        ; R0=WORDｱﾄﾞﾚｽ
 3850                            1266                     MOV.\LG @(R0,TOP_REG),R2                        ; [[W/L]]
 3851                            1267                     CMP/\CMPCMD     \OP1,\OP2                       ; R2 < D_REG THEN T=1
 3852                            1268                     MOVT    R0                                      ;
 3853                            1269                     XOR     #BIT0,R0
 3854                            1270                     MOV     R0,A_REG                                ; Areg<= T
 3855                            1271             .ENDM
 3856                            1272     
 3857                            1273     ;       --------- 直接数値----
 3858                            1274             .MACRO  CMPCMD_IMI2 EXIT,LBEL1,LBEL2,LG,CMPCMD,OP1,OP2
 3859                            1275                     TST     A_REG,A_REG                             ;
 3860                            1276                     TST_BIT_OF \EXIT                                ; Areg=0 jump(比較しないと
                                          きはAreg=0を返す)
 3861                            1277     
 3862                            1278                     IMD_MAKE1_WORD LBEL1=\LBEL1,LBEL2=\LBEL2        ; R2
 3863                            1279                     CMP/\CMPCMD     \OP1,\OP2                       ; R2 < D_REG THEN T=1
 3864                            1280                     MOVT    R0                                      ;
 3865                            1281                     XOR     #BIT0,R0
 3866                            1282                     MOV     R0,A_REG                                ; Areg<= T
 3867                            1283             .ENDM
 3868                            1284     
 3869                            1285     ;       *******************************************************************
 3870                            1286     ;       ***                                                             ***
 3871                            1287     ;       ***                                                             ***
 3872                            1288     ;       ***     ADD,SUB,ANDL,ORL,XORL  (MEMword,MEMlong,IMIword ),Dreg  ***
 3873                            1289     ;       ***                                                             ***
 3874                            1290     ;       ***             [MEM9,IMI8]                                     ***
 3875                            1291     ;       *******************************************************************
 3876                            1292     ;       --------- メモリ------
 3877                            1293             .MACRO  CALCMD_MEM1 EXIT,LBEL1,LBEL2,LG,CALCMD
 3878                            1294                     TST     A_REG,A_REG                             ; 変更 091105AKIBA
 3879                            1295                     TST_BIT_OF \EXIT                                ; Areg=0 jump(比較しないと
                                          きはAreg=0を返す)
 3880                            1296     
 3881                            1297                     ADR_MAKE1_WORD LBEL1=\LBEL1,LBEL2=\LBEL2        ; R0=WORDｱﾄﾞﾚｽ
 3882                            1298                     MOV.\LG @(R0,TOP_REG),R2                        ; [[W/L]]
 3883                            1299                     \CALCMD R2,D_REG                                ; D_REG-R2=D_REG
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE    31
PROGRAM NAME =

 3884                            1300             .ENDM
 3885                            1301     
 3886                            1302     ;       --------- 直接数値----
 3887                            1303             .MACRO  CALCMD_IMI1 EXIT,LBEL1,LBEL2,LG,CALCMD
 3888                            1304                     TST     A_REG,A_REG                             ; 変更 091105AKIBA
 3889                            1305                     TST_BIT_OF \EXIT                                ; Areg=0 jump(比較しないと
                                          きはAreg=0を返す)
 3890                            1306     
 3891                            1307                     IMD_MAKE1_WORD LBEL1=\LBEL1,LBEL2=\LBEL2        ; R2
 3892                            1308                     \CALCMD R2,D_REG                                ; D_REG-R2=D_REG
 3893                            1309             .ENDM
 3894                            1310     
 3895                            1311     ;       *******************************************************************
 3896                            1312     ;       ***                                                             ***
 3897                            1313     ;       ***                                                             ***
 3898                            1314     ;       ***     AND,XOR,ORのWORD  (MEMword,MEMlong,IMIword ),Dreg       ***
 3899                            1315     ;       ***                                                             ***
 3900                            1316     ;       ***             [MEM10,IMI9]                                    ***
 3901                            1317     ;       *******************************************************************
 3902                            1318     ;       --------- メモリ------
 3903                            1319             .MACRO  CALCMD_MEM1_U EXIT,LBEL1,LBEL2,LG,CALCMD
 3904                            1320                     TST     A_REG,A_REG                             ; 変更 091105AKIBA
 3905                            1321                     TST_BIT_OF \EXIT                                ; Areg=0 jump(比較しないと
                                          きはAreg=0を返す)
 3906                            1322     
 3907                            1323                     ADR_MAKE1_WORD LBEL1=\LBEL1,LBEL2=\LBEL2        ; R0=WORDｱﾄﾞﾚｽ
 3908                            1324                     MOV.\LG @(R0,TOP_REG),R2                        ; [[W/L]]
 3909                            1325                     EXTU.W  R2,R2
 3910                            1326                     \CALCMD R2,D_REG                                ; D_REG-R2=D_REG
 3911                            1327             .ENDM
 3912                            1328     
 3913                            1329     ;       --------- 直接数値----
 3914                            1330             .MACRO  CALCMD_IMI1_U EXIT,LBEL1,LBEL2,LG,CALCMD
 3915                            1331                     TST     A_REG,A_REG                             ; 変更 091105AKIBA
 3916                            1332                     TST_BIT_OF \EXIT                                ; Areg=0 jump(比較しないと
                                          きはAreg=0を返す)
 3917                            1333     
 3918                            1334                     IMD_MAKE1_WORD LBEL1=\LBEL1,LBEL2=\LBEL2        ; R2
 3919                            1335                     EXTU.W  R2,R2
 3920                            1336                     \CALCMD R2,D_REG                                ; D_REG-R2=D_REG
 3921                            1337             .ENDM
 3922                            1338     
 3923                            1339     ;       *******************************************************************
 3924                            1340     ;       ***                                                             ***
 3925                            1341     ;       ***                                                             ***
 3926                            1342     ;       ***             CMP/EQ Dreg,(MEMword,MEMlong,IMIword )          ***
 3927                            1343     ;       ***                                                             ***
 3928                            1344     ;       ***                                                             ***
 3929                            1345     ;       *******************************************************************
 3930                            1346     
 3931                            1347     ;       *********************************************************************
 3932                            1348     ;       *****   CMP EQW command                         10*2            *****
 3933                            1349     ;       *********************************************************************
 3934 00000534                   1350             .ALIGN  4
 3935 00000534                   1351     _EQW_CODE:
 3936                            1352             CMPCMD_MEM1 EXIT=_EQW_CODE_END,LBEL1=EQW_ADR,LBEL2=EQW_OFS,LG=W,CMPCMD=EQ,OP1=R2,O
                                          P2=D_REG
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE    32
PROGRAM NAME =

 3937 00000534 2558                   M                   TST     A_REG,A_REG                             ;
 3938                                 M                   TST_BIT_OF _EQW_CODE_END                                ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 3939 00000536 8907                   M           BT      _EQW_CODE_END
 3940                                 M   
 3941                                 M                   ADR_MAKE1_WORD LBEL1=EQW_ADR,LBEL2=EQW_OFS      ; R0=WORDｱﾄﾞﾚｽ
 3942                                 M                   ADR_MAKE1_BIT EQW_ADR,EQW_OFS
 3943 00000538 E17F                   M   EQW_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 3944 0000053A E0FF                   M   EQW_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 3945 0000053C 4118                   M                   SHLL8   R1
 3946 0000053E 600C                   M                   EXTU.B  R0,R0                           ;
 3947 00000540 201B                   M                   OR      R1,R0                           ; adress
 3948 00000542 02ED                   M                   MOV.W   @(R0,TOP_REG),R2                        ; [[W/L]]
 3949 00000544 3820                   M                   CMP/EQ  R2,D_REG                        ; R2 < D_REG THEN T=1
 3950 00000546 0529                   M                   MOVT    A_REG                                   ; Areg<= T
 3951 00000548                   1353     _EQW_CODE_END:
 3952                            1354     
 3953                            1355     ;       *********************************************************************
 3954                            1356     ;       *****   CMP EQL command                         10*2            *****
 3955                            1357     ;       *********************************************************************
 3956 00000548                   1358             .ALIGN  4
 3957 00000548                   1359     _EQL_CODE:
 3958                            1360             CMPCMD_MEM1 EXIT=_EQL_CODE_END,LBEL1=EQL_ADR,LBEL2=EQL_OFS,LG=L,CMPCMD=EQ,OP1=R2,O
                                          P2=D_REG
 3959 00000548 2558                   M                   TST     A_REG,A_REG                             ;
 3960                                 M                   TST_BIT_OF _EQL_CODE_END                                ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 3961 0000054A 8907                   M           BT      _EQL_CODE_END
 3962                                 M   
 3963                                 M                   ADR_MAKE1_WORD LBEL1=EQL_ADR,LBEL2=EQL_OFS      ; R0=WORDｱﾄﾞﾚｽ
 3964                                 M                   ADR_MAKE1_BIT EQL_ADR,EQL_OFS
 3965 0000054C E17F                   M   EQL_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 3966 0000054E E0FF                   M   EQL_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 3967 00000550 4118                   M                   SHLL8   R1
 3968 00000552 600C                   M                   EXTU.B  R0,R0                           ;
 3969 00000554 201B                   M                   OR      R1,R0                           ; adress
 3970 00000556 02EE                   M                   MOV.L   @(R0,TOP_REG),R2                        ; [[W/L]]
 3971 00000558 3820                   M                   CMP/EQ  R2,D_REG                        ; R2 < D_REG THEN T=1
 3972 0000055A 0529                   M                   MOVT    A_REG                                   ; Areg<= T
 3973 0000055C                   1361     _EQL_CODE_END:
 3974                            1362     
 3975                            1363     ;       *********************************************************************
 3976                            1364     ;       *****   CMP EQI command                         9*2             *****
 3977                            1365     ;       *********************************************************************
 3978 0000055C                   1366             .ALIGN  4
 3979 0000055C                   1367     _EQWI_CODE:
 3980                            1368             CMPCMD_IMI1 EXIT=_EQWI_CODE_END,LBEL1=EQWI_DT_LH,LBEL2=EQWI_DT_LL,LG=NOUSE,CMPCMD=
                                          EQ,OP1=R2,OP2=D_REG
 3981 0000055C 2558                   M                   TST     A_REG,A_REG                             ;
 3982                                 M                   TST_BIT_OF _EQWI_CODE_END                               ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 3983 0000055E 8906                   M           BT      _EQWI_CODE_END
 3984                                 M   
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE    33
PROGRAM NAME =

 3985                                 M                   IMD_MAKE1_WORD LBEL1=EQWI_DT_LH,LBEL2=EQWI_DT_LL        ; R2
 3986 00000560 E1FF                   M   EQWI_DT_LH:             MOV.B   #CHG_LHDATA,R1                  ; H_BYTE
 3987 00000562 E2FF                   M   EQWI_DT_LL:             MOV.B   #CHG_LLDATA,R2                  ; L_BYTE
 3988 00000564 4118                   M                   SHLL8   R1                              ; 符号をそのまま
 3989 00000566 622C                   M                   EXTU.B  R2,R2                           ;
 3990 00000568 221B                   M                   OR      R1,R2                           ; data
 3991 0000056A 3820                   M                   CMP/EQ  R2,D_REG                        ; R2 < D_REG THEN T=1
 3992 0000056C 0529                   M                   MOVT    A_REG                                   ; Areg<= T
 3993                            1369     
 3994 0000056E                   1370     _EQWI_CODE_END:
 3995                            1371     
 3996                            1372     ;       *******************************************************************
 3997                            1373     ;       ***                                                             ***
 3998                            1374     ;       ***                                                             ***
 3999                            1375     ;       ***             CMP/EQの反転 Dreg,(MEMword,MEMlong,IMIword )    ***
 4000                            1376     ;       ***                                                             ***
 4001                            1377     ;       ***                                                             ***
 4002                            1378     ;       *******************************************************************
 4003                            1379     ;       *********************************************************************
 4004                            1380     ;       *****   CMP NEW command                         12*2            *****
 4005                            1381     ;       *********************************************************************
 4006 00000570                   1382             .ALIGN  4
 4007 00000570                   1383     _NEW_CODE:
 4008                            1384             CMPCMD_MEM2 EXIT=_NEW_CODE_END,LBEL1=NEW_ADR,LBEL2=NEW_OFS,LG=W,CMPCMD=EQ,OP1=R2,O
                                          P2=D_REG
 4009 00000570 2558                   M                   TST     A_REG,A_REG                             ;
 4010                                 M                   TST_BIT_OF _NEW_CODE_END                                ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4011 00000572 8909                   M           BT      _NEW_CODE_END
 4012                                 M   
 4013                                 M                   ADR_MAKE1_WORD LBEL1=NEW_ADR,LBEL2=NEW_OFS      ; R0=WORDｱﾄﾞﾚｽ
 4014                                 M                   ADR_MAKE1_BIT NEW_ADR,NEW_OFS
 4015 00000574 E17F                   M   NEW_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 4016 00000576 E0FF                   M   NEW_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 4017 00000578 4118                   M                   SHLL8   R1
 4018 0000057A 600C                   M                   EXTU.B  R0,R0                           ;
 4019 0000057C 201B                   M                   OR      R1,R0                           ; adress
 4020 0000057E 02ED                   M                   MOV.W   @(R0,TOP_REG),R2                        ; [[W/L]]
 4021 00000580 3820                   M                   CMP/EQ  R2,D_REG                        ; R2 < D_REG THEN T=1
 4022 00000582 0029                   M                   MOVT    R0                                      ;
 4023 00000584 CA01                   M                   XOR     #BIT0,R0
 4024 00000586 6503                   M                   MOV     R0,A_REG                                ; Areg<= T
 4025 00000588                   1385     _NEW_CODE_END:
 4026                            1386     
 4027                            1387     ;       *********************************************************************
 4028                            1388     ;       *****   CMP NEL command                         12*2            *****
 4029                            1389     ;       *********************************************************************
 4030 00000588                   1390             .ALIGN  4
 4031 00000588                   1391     _NEL_CODE:
 4032                            1392             CMPCMD_MEM2 EXIT=_NEL_CODE_END,LBEL1=NEL_ADR,LBEL2=NEL_OFS,LG=L,CMPCMD=EQ,OP1=R2,O
                                          P2=D_REG
 4033 00000588 2558                   M                   TST     A_REG,A_REG                             ;
 4034                                 M                   TST_BIT_OF _NEL_CODE_END                                ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4035 0000058A 8909                   M           BT      _NEL_CODE_END
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE    34
PROGRAM NAME =

 4036                                 M   
 4037                                 M                   ADR_MAKE1_WORD LBEL1=NEL_ADR,LBEL2=NEL_OFS      ; R0=WORDｱﾄﾞﾚｽ
 4038                                 M                   ADR_MAKE1_BIT NEL_ADR,NEL_OFS
 4039 0000058C E17F                   M   NEL_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 4040 0000058E E0FF                   M   NEL_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 4041 00000590 4118                   M                   SHLL8   R1
 4042 00000592 600C                   M                   EXTU.B  R0,R0                           ;
 4043 00000594 201B                   M                   OR      R1,R0                           ; adress
 4044 00000596 02EE                   M                   MOV.L   @(R0,TOP_REG),R2                        ; [[W/L]]
 4045 00000598 3820                   M                   CMP/EQ  R2,D_REG                        ; R2 < D_REG THEN T=1
 4046 0000059A 0029                   M                   MOVT    R0                                      ;
 4047 0000059C CA01                   M                   XOR     #BIT0,R0
 4048 0000059E 6503                   M                   MOV     R0,A_REG                                ; Areg<= T
 4049 000005A0                   1393     _NEL_CODE_END:
 4050                            1394     
 4051                            1395     ;       *********************************************************************
 4052                            1396     ;       *****   CMP NEI command                         11*2            *****
 4053                            1397     ;       *********************************************************************
 4054 000005A0                   1398             .ALIGN  4
 4055 000005A0                   1399     _NEWI_CODE:
 4056                            1400             CMPCMD_IMI2 EXIT=_NEWI_CODE_END,LBEL1=NEWI_DT_LH,LBEL2=NEWI_DT_LL,LG=NOUSE,CMPCMD=
                                          EQ,OP1=R2,OP2=D_REG
 4057 000005A0 2558                   M                   TST     A_REG,A_REG                             ;
 4058                                 M                   TST_BIT_OF _NEWI_CODE_END                               ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4059 000005A2 8908                   M           BT      _NEWI_CODE_END
 4060                                 M   
 4061                                 M                   IMD_MAKE1_WORD LBEL1=NEWI_DT_LH,LBEL2=NEWI_DT_LL        ; R2
 4062 000005A4 E1FF                   M   NEWI_DT_LH:             MOV.B   #CHG_LHDATA,R1                  ; H_BYTE
 4063 000005A6 E2FF                   M   NEWI_DT_LL:             MOV.B   #CHG_LLDATA,R2                  ; L_BYTE
 4064 000005A8 4118                   M                   SHLL8   R1                              ; 符号をそのまま
 4065 000005AA 622C                   M                   EXTU.B  R2,R2                           ;
 4066 000005AC 221B                   M                   OR      R1,R2                           ; data
 4067 000005AE 3820                   M                   CMP/EQ  R2,D_REG                        ; R2 < D_REG THEN T=1
 4068 000005B0 0029                   M                   MOVT    R0                                      ;
 4069 000005B2 CA01                   M                   XOR     #BIT0,R0
 4070 000005B4 6503                   M                   MOV     R0,A_REG                                ; Areg<= T
 4071 000005B6                   1401     _NEWI_CODE_END:
 4072                            1402     
 4073                            1403     ;       *******************************************************************
 4074                            1404     ;       ***                                                             ***
 4075                            1405     ;       ***                                                             ***
 4076                            1406     ;       ***             CMP/GT  Dreg,(MEMword,MEMlong,IMIword )         ***
 4077                            1407     ;       ***                                                             ***
 4078                            1408     ;       ***                                                             ***
 4079                            1409     ;       *******************************************************************
 4080                            1410     ;       *********************************************************************
 4081                            1411     ;       *****   CMP GTW command                         10*2            *****
 4082                            1412     ;       *********************************************************************
 4083 000005B8                   1413             .ALIGN  4
 4084 000005B8                   1414     _GTW_CODE:
 4085                            1415             CMPCMD_MEM1 EXIT=_GTW_CODE_END,LBEL1=GTW_ADR,LBEL2=GTW_OFS,LG=W,CMPCMD=GT,OP1=R2,O
                                          P2=D_REG
 4086 000005B8 2558                   M                   TST     A_REG,A_REG                             ;
 4087                                 M                   TST_BIT_OF _GTW_CODE_END                                ; Areg=0 jump(比較
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE    35
PROGRAM NAME =

                                          しないときはAreg=0を返す)
 4088 000005BA 8907                   M           BT      _GTW_CODE_END
 4089                                 M   
 4090                                 M                   ADR_MAKE1_WORD LBEL1=GTW_ADR,LBEL2=GTW_OFS      ; R0=WORDｱﾄﾞﾚｽ
 4091                                 M                   ADR_MAKE1_BIT GTW_ADR,GTW_OFS
 4092 000005BC E17F                   M   GTW_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 4093 000005BE E0FF                   M   GTW_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 4094 000005C0 4118                   M                   SHLL8   R1
 4095 000005C2 600C                   M                   EXTU.B  R0,R0                           ;
 4096 000005C4 201B                   M                   OR      R1,R0                           ; adress
 4097 000005C6 02ED                   M                   MOV.W   @(R0,TOP_REG),R2                        ; [[W/L]]
 4098 000005C8 3827                   M                   CMP/GT  R2,D_REG                        ; R2 < D_REG THEN T=1
 4099 000005CA 0529                   M                   MOVT    A_REG                                   ; Areg<= T
 4100 000005CC                   1416     _GTW_CODE_END:
 4101                            1417     
 4102                            1418     ;;      ﾏｸﾛ展開の結果
 4103                            1419     ;;_GTW_CODE:
 4104                            1420     ;;      AND     N_REG,A_REG                                     ; ARG and NRG
 4105                            1421     ;;      TST     A_REG,A_REG                                     ;
 4106                            1422     ;;      TST_BIT_OF _GTW_CODE_END                                ; Areg=0 jump(比較しないと
                                          きはAreg=0を返す)
 4107                            1423     ;;
 4108                            1424     ;;      ADR_MAKE1_WORD LBEL1=GTW_ADR,LBEL2=GTW_OFS              ; R0=WORDｱﾄﾞﾚｽ
 4109                            1425     ;;      MOV.W   @(R0,TOP_REG),R2                                ; [[W]]
 4110                            1426     ;;      CMP/GT  R2,D_REG                                        ; R2 < D_REG THEN T=1
 4111                            1427     ;;      MOVT    A_REG                                           ; Areg<= T
 4112                            1428     ;;
 4113                            1429     ;;_GTW_CODE_END:
 4114                            1430     
 4115                            1431     ;       *********************************************************************
 4116                            1432     ;       *****   CMP GTL command                         10*2            *****
 4117                            1433     ;       *********************************************************************
 4118 000005CC                   1434             .ALIGN  4
 4119 000005CC                   1435     _GTL_CODE:
 4120                            1436             CMPCMD_MEM1 EXIT=_GTL_CODE_END,LBEL1=GTL_ADR,LBEL2=GTL_OFS,LG=L,CMPCMD=GT,OP1=R2,O
                                          P2=D_REG
 4121 000005CC 2558                   M                   TST     A_REG,A_REG                             ;
 4122                                 M                   TST_BIT_OF _GTL_CODE_END                                ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4123 000005CE 8907                   M           BT      _GTL_CODE_END
 4124                                 M   
 4125                                 M                   ADR_MAKE1_WORD LBEL1=GTL_ADR,LBEL2=GTL_OFS      ; R0=WORDｱﾄﾞﾚｽ
 4126                                 M                   ADR_MAKE1_BIT GTL_ADR,GTL_OFS
 4127 000005D0 E17F                   M   GTL_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 4128 000005D2 E0FF                   M   GTL_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 4129 000005D4 4118                   M                   SHLL8   R1
 4130 000005D6 600C                   M                   EXTU.B  R0,R0                           ;
 4131 000005D8 201B                   M                   OR      R1,R0                           ; adress
 4132 000005DA 02EE                   M                   MOV.L   @(R0,TOP_REG),R2                        ; [[W/L]]
 4133 000005DC 3827                   M                   CMP/GT  R2,D_REG                        ; R2 < D_REG THEN T=1
 4134 000005DE 0529                   M                   MOVT    A_REG                                   ; Areg<= T
 4135 000005E0                   1437     _GTL_CODE_END:
 4136                            1438     
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE    36
PROGRAM NAME =

 4137                            1439     ;       *********************************************************************
 4138                            1440     ;       *****   CMP GTWI command                        9*2             *****
 4139                            1441     ;       *********************************************************************
 4140 000005E0                   1442             .ALIGN  4
 4141 000005E0                   1443     _GTWI_CODE:
 4142                            1444             CMPCMD_IMI1 EXIT=_GTWI_CODE_END,LBEL1=GTWI_DT_LH,LBEL2=GTWI_DT_LL,LG=NOUSE,CMPCMD=
                                          GT,OP1=R2,OP2=D_REG
 4143 000005E0 2558                   M                   TST     A_REG,A_REG                             ;
 4144                                 M                   TST_BIT_OF _GTWI_CODE_END                               ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4145 000005E2 8906                   M           BT      _GTWI_CODE_END
 4146                                 M   
 4147                                 M                   IMD_MAKE1_WORD LBEL1=GTWI_DT_LH,LBEL2=GTWI_DT_LL        ; R2
 4148 000005E4 E1FF                   M   GTWI_DT_LH:             MOV.B   #CHG_LHDATA,R1                  ; H_BYTE
 4149 000005E6 E2FF                   M   GTWI_DT_LL:             MOV.B   #CHG_LLDATA,R2                  ; L_BYTE
 4150 000005E8 4118                   M                   SHLL8   R1                              ; 符号をそのまま
 4151 000005EA 622C                   M                   EXTU.B  R2,R2                           ;
 4152 000005EC 221B                   M                   OR      R1,R2                           ; data
 4153 000005EE 3827                   M                   CMP/GT  R2,D_REG                        ; R2 < D_REG THEN T=1
 4154 000005F0 0529                   M                   MOVT    A_REG                                   ; Areg<= T
 4155 000005F2                   1445     _GTWI_CODE_END:
 4156                            1446     
 4157                            1447     ;       *******************************************************************
 4158                            1448     ;       ***                                                             ***
 4159                            1449     ;       ***                                                             ***
 4160                            1450     ;       ***             CMP/GE  Dreg,(MEMword,MEMlong,IMIword )         ***
 4161                            1451     ;       ***                                                             ***
 4162                            1452     ;       ***                                                             ***
 4163                            1453     ;       *******************************************************************
 4164                            1454     ;       *********************************************************************
 4165                            1455     ;       *****   CMP GEW command                         10*2            *****
 4166                            1456     ;       *********************************************************************
 4167 000005F4                   1457             .ALIGN  4
 4168 000005F4                   1458     _GEW_CODE:
 4169                            1459             CMPCMD_MEM1 EXIT=_GEW_CODE_END,LBEL1=GEW_ADR,LBEL2=GEW_OFS,LG=W,CMPCMD=GE,OP1=R2,O
                                          P2=D_REG
 4170 000005F4 2558                   M                   TST     A_REG,A_REG                             ;
 4171                                 M                   TST_BIT_OF _GEW_CODE_END                                ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4172 000005F6 8907                   M           BT      _GEW_CODE_END
 4173                                 M   
 4174                                 M                   ADR_MAKE1_WORD LBEL1=GEW_ADR,LBEL2=GEW_OFS      ; R0=WORDｱﾄﾞﾚｽ
 4175                                 M                   ADR_MAKE1_BIT GEW_ADR,GEW_OFS
 4176 000005F8 E17F                   M   GEW_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 4177 000005FA E0FF                   M   GEW_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 4178 000005FC 4118                   M                   SHLL8   R1
 4179 000005FE 600C                   M                   EXTU.B  R0,R0                           ;
 4180 00000600 201B                   M                   OR      R1,R0                           ; adress
 4181 00000602 02ED                   M                   MOV.W   @(R0,TOP_REG),R2                        ; [[W/L]]
 4182 00000604 3823                   M                   CMP/GE  R2,D_REG                        ; R2 < D_REG THEN T=1
 4183 00000606 0529                   M                   MOVT    A_REG                                   ; Areg<= T
 4184 00000608                   1460     _GEW_CODE_END:
 4185                            1461     
 4186                            1462     ;       *********************************************************************
 4187                            1463     ;       *****   CMP GEL command                         10*2            *****
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE    37
PROGRAM NAME =

 4188                            1464     ;       *********************************************************************
 4189 00000608                   1465             .ALIGN  4
 4190 00000608                   1466     _GEL_CODE:
 4191                            1467             CMPCMD_MEM1 EXIT=_GEL_CODE_END,LBEL1=GEL_ADR,LBEL2=GEL_OFS,LG=L,CMPCMD=GE,OP1=R2,O
                                          P2=D_REG
 4192 00000608 2558                   M                   TST     A_REG,A_REG                             ;
 4193                                 M                   TST_BIT_OF _GEL_CODE_END                                ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4194 0000060A 8907                   M           BT      _GEL_CODE_END
 4195                                 M   
 4196                                 M                   ADR_MAKE1_WORD LBEL1=GEL_ADR,LBEL2=GEL_OFS      ; R0=WORDｱﾄﾞﾚｽ
 4197                                 M                   ADR_MAKE1_BIT GEL_ADR,GEL_OFS
 4198 0000060C E17F                   M   GEL_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 4199 0000060E E0FF                   M   GEL_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 4200 00000610 4118                   M                   SHLL8   R1
 4201 00000612 600C                   M                   EXTU.B  R0,R0                           ;
 4202 00000614 201B                   M                   OR      R1,R0                           ; adress
 4203 00000616 02EE                   M                   MOV.L   @(R0,TOP_REG),R2                        ; [[W/L]]
 4204 00000618 3823                   M                   CMP/GE  R2,D_REG                        ; R2 < D_REG THEN T=1
 4205 0000061A 0529                   M                   MOVT    A_REG                                   ; Areg<= T
 4206 0000061C                   1468     _GEL_CODE_END:
 4207                            1469     
 4208                            1470     ;       *********************************************************************
 4209                            1471     ;       *****   CMP GEWI command                        9*2             *****
 4210                            1472     ;       *********************************************************************
 4211 0000061C                   1473             .ALIGN  4
 4212 0000061C                   1474     _GEWI_CODE:
 4213                            1475             CMPCMD_IMI1 EXIT=_GEWI_CODE_END,LBEL1=GEWI_DT_LH,LBEL2=GEWI_DT_LL,LG=NOUSE,CMPCMD=
                                          GE,OP1=R2,OP2=D_REG
 4214 0000061C 2558                   M                   TST     A_REG,A_REG                             ;
 4215                                 M                   TST_BIT_OF _GEWI_CODE_END                               ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4216 0000061E 8906                   M           BT      _GEWI_CODE_END
 4217                                 M   
 4218                                 M                   IMD_MAKE1_WORD LBEL1=GEWI_DT_LH,LBEL2=GEWI_DT_LL        ; R2
 4219 00000620 E1FF                   M   GEWI_DT_LH:             MOV.B   #CHG_LHDATA,R1                  ; H_BYTE
 4220 00000622 E2FF                   M   GEWI_DT_LL:             MOV.B   #CHG_LLDATA,R2                  ; L_BYTE
 4221 00000624 4118                   M                   SHLL8   R1                              ; 符号をそのまま
 4222 00000626 622C                   M                   EXTU.B  R2,R2                           ;
 4223 00000628 221B                   M                   OR      R1,R2                           ; data
 4224 0000062A 3823                   M                   CMP/GE  R2,D_REG                        ; R2 < D_REG THEN T=1
 4225 0000062C 0529                   M                   MOVT    A_REG                                   ; Areg<= T
 4226 0000062E                   1476     _GEWI_CODE_END:
 4227                            1477     
 4228                            1478     ;       *******************************************************************
 4229                            1479     ;       ***                                                             ***
 4230                            1480     ;       ***                                                             ***
 4231                            1481     ;       ***             CMP/LT  Dreg,(MEMword,MEMlong,IMIword )         ***
 4232                            1482     ;       ***             =>CMP/GE MEM,DREGで結果BIT反転                  ***
 4233                            1483     ;       ***                                                             ***
 4234                            1484     ;       *******************************************************************
 4235                            1485     ;       *********************************************************************
 4236                            1486     ;       *****   CMP LTW command                         10*2            *****
 4237                            1487     ;       *********************************************************************
 4238 00000630                   1488             .ALIGN  4
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE    38
PROGRAM NAME =

 4239 00000630                   1489     _LTW_CODE:
 4240                            1490             CMPCMD_MEM1 EXIT=_LTW_CODE_END,LBEL1=LTW_ADR,LBEL2=LTW_OFS,LG=W,CMPCMD=GT,OP1=D_RE
                                          G,OP2=R2        ; add akiba
 4241 00000630 2558                   M                   TST     A_REG,A_REG                             ;
 4242                                 M                   TST_BIT_OF _LTW_CODE_END                                ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4243 00000632 8907                   M           BT      _LTW_CODE_END
 4244                                 M   
 4245                                 M                   ADR_MAKE1_WORD LBEL1=LTW_ADR,LBEL2=LTW_OFS      ; R0=WORDｱﾄﾞﾚｽ
 4246                                 M                   ADR_MAKE1_BIT LTW_ADR,LTW_OFS
 4247 00000634 E17F                   M   LTW_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 4248 00000636 E0FF                   M   LTW_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 4249 00000638 4118                   M                   SHLL8   R1
 4250 0000063A 600C                   M                   EXTU.B  R0,R0                           ;
 4251 0000063C 201B                   M                   OR      R1,R0                           ; adress
 4252 0000063E 02ED                   M                   MOV.W   @(R0,TOP_REG),R2                        ; [[W/L]]
 4253 00000640 3287                   M                   CMP/GT  D_REG,R2                        ; R2 < D_REG THEN T=1
 4254 00000642 0529                   M                   MOVT    A_REG                                   ; Areg<= T
 4255 00000644                   1491     _LTW_CODE_END:
 4256                            1492     
 4257                            1493     ;       *********************************************************************
 4258                            1494     ;       *****   CMP LTL command                         10*2            *****
 4259                            1495     ;       *********************************************************************
 4260 00000644                   1496             .ALIGN  4
 4261 00000644                   1497     _LTL_CODE:
 4262                            1498             CMPCMD_MEM1 EXIT=_LTL_CODE_END,LBEL1=LTL_ADR,LBEL2=LTL_OFS,LG=L,CMPCMD=GT,OP1=D_RE
                                          G,OP2=R2        ; add akiba
 4263 00000644 2558                   M                   TST     A_REG,A_REG                             ;
 4264                                 M                   TST_BIT_OF _LTL_CODE_END                                ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4265 00000646 8907                   M           BT      _LTL_CODE_END
 4266                                 M   
 4267                                 M                   ADR_MAKE1_WORD LBEL1=LTL_ADR,LBEL2=LTL_OFS      ; R0=WORDｱﾄﾞﾚｽ
 4268                                 M                   ADR_MAKE1_BIT LTL_ADR,LTL_OFS
 4269 00000648 E17F                   M   LTL_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 4270 0000064A E0FF                   M   LTL_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 4271 0000064C 4118                   M                   SHLL8   R1
 4272 0000064E 600C                   M                   EXTU.B  R0,R0                           ;
 4273 00000650 201B                   M                   OR      R1,R0                           ; adress
 4274 00000652 02EE                   M                   MOV.L   @(R0,TOP_REG),R2                        ; [[W/L]]
 4275 00000654 3287                   M                   CMP/GT  D_REG,R2                        ; R2 < D_REG THEN T=1
 4276 00000656 0529                   M                   MOVT    A_REG                                   ; Areg<= T
 4277 00000658                   1499     _LTL_CODE_END:
 4278                            1500     
 4279                            1501     ;       *********************************************************************
 4280                            1502     ;       *****   CMP LTWI command                        9*2             *****
 4281                            1503     ;       *********************************************************************
 4282 00000658                   1504             .ALIGN  4
 4283 00000658                   1505     _LTWI_CODE:
 4284                            1506             CMPCMD_IMI1 EXIT=_LTWI_CODE_END,LBEL1=LTWI_DT_LH,LBEL2=LTWI_DT_LL,LG=NOUSE,CMPCMD=
                                          GT,OP1=D_REG,OP2=R2     ; add akiba
 4285 00000658 2558                   M                   TST     A_REG,A_REG                             ;
 4286                                 M                   TST_BIT_OF _LTWI_CODE_END                               ; Areg=0 jump(比較
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE    39
PROGRAM NAME =

                                          しないときはAreg=0を返す)
 4287 0000065A 8906                   M           BT      _LTWI_CODE_END
 4288                                 M   
 4289                                 M                   IMD_MAKE1_WORD LBEL1=LTWI_DT_LH,LBEL2=LTWI_DT_LL        ; R2
 4290 0000065C E1FF                   M   LTWI_DT_LH:             MOV.B   #CHG_LHDATA,R1                  ; H_BYTE
 4291 0000065E E2FF                   M   LTWI_DT_LL:             MOV.B   #CHG_LLDATA,R2                  ; L_BYTE
 4292 00000660 4118                   M                   SHLL8   R1                              ; 符号をそのまま
 4293 00000662 622C                   M                   EXTU.B  R2,R2                           ;
 4294 00000664 221B                   M                   OR      R1,R2                           ; data
 4295 00000666 3287                   M                   CMP/GT  D_REG,R2                        ; R2 < D_REG THEN T=1
 4296 00000668 0529                   M                   MOVT    A_REG                                   ; Areg<= T
 4297 0000066A                   1507     _LTWI_CODE_END:
 4298                            1508     
 4299                            1509     ;       *******************************************************************
 4300                            1510     ;       ***                                                             ***
 4301                            1511     ;       ***                                                             ***
 4302                            1512     ;       ***             CMP/LE  Dreg,(MEMword,MEMlong,IMIword )         ***
 4303                            1513     ;       ***             =>CMP/GT MEM,DREGで結果BIT反転                  ***
 4304                            1514     ;       ***                                                             ***
 4305                            1515     ;       *******************************************************************
 4306                            1516     ;       *********************************************************************
 4307                            1517     ;       *****   CMP LEW command                         10*2            *****
 4308                            1518     ;       *********************************************************************
 4309 0000066C                   1519             .ALIGN  4
 4310 0000066C                   1520     _LEW_CODE:
 4311                            1521             CMPCMD_MEM1 EXIT=_LEW_CODE_END,LBEL1=LEW_ADR,LBEL2=LEW_OFS,LG=W,CMPCMD=GE,OP1=D_RE
                                          G,OP2=R2        ; add akiba
 4312 0000066C 2558                   M                   TST     A_REG,A_REG                             ;
 4313                                 M                   TST_BIT_OF _LEW_CODE_END                                ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4314 0000066E 8907                   M           BT      _LEW_CODE_END
 4315                                 M   
 4316                                 M                   ADR_MAKE1_WORD LBEL1=LEW_ADR,LBEL2=LEW_OFS      ; R0=WORDｱﾄﾞﾚｽ
 4317                                 M                   ADR_MAKE1_BIT LEW_ADR,LEW_OFS
 4318 00000670 E17F                   M   LEW_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 4319 00000672 E0FF                   M   LEW_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 4320 00000674 4118                   M                   SHLL8   R1
 4321 00000676 600C                   M                   EXTU.B  R0,R0                           ;
 4322 00000678 201B                   M                   OR      R1,R0                           ; adress
 4323 0000067A 02ED                   M                   MOV.W   @(R0,TOP_REG),R2                        ; [[W/L]]
 4324 0000067C 3283                   M                   CMP/GE  D_REG,R2                        ; R2 < D_REG THEN T=1
 4325 0000067E 0529                   M                   MOVT    A_REG                                   ; Areg<= T
 4326 00000680                   1522     _LEW_CODE_END:
 4327                            1523     
 4328                            1524     ;       *********************************************************************
 4329                            1525     ;       *****   CMP LEL command                         10*2            *****
 4330                            1526     ;       *********************************************************************
 4331 00000680                   1527             .ALIGN  4
 4332 00000680                   1528     _LEL_CODE:
 4333                            1529             CMPCMD_MEM1 EXIT=_LEL_CODE_END,LBEL1=LEL_ADR,LBEL2=LEL_OFS,LG=L,CMPCMD=GE,OP1=D_RE
                                          G,OP2=R2        ; add akiba
 4334 00000680 2558                   M                   TST     A_REG,A_REG                             ;
 4335                                 M                   TST_BIT_OF _LEL_CODE_END                                ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4336 00000682 8907                   M           BT      _LEL_CODE_END
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE    40
PROGRAM NAME =

 4337                                 M   
 4338                                 M                   ADR_MAKE1_WORD LBEL1=LEL_ADR,LBEL2=LEL_OFS      ; R0=WORDｱﾄﾞﾚｽ
 4339                                 M                   ADR_MAKE1_BIT LEL_ADR,LEL_OFS
 4340 00000684 E17F                   M   LEL_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 4341 00000686 E0FF                   M   LEL_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 4342 00000688 4118                   M                   SHLL8   R1
 4343 0000068A 600C                   M                   EXTU.B  R0,R0                           ;
 4344 0000068C 201B                   M                   OR      R1,R0                           ; adress
 4345 0000068E 02EE                   M                   MOV.L   @(R0,TOP_REG),R2                        ; [[W/L]]
 4346 00000690 3283                   M                   CMP/GE  D_REG,R2                        ; R2 < D_REG THEN T=1
 4347 00000692 0529                   M                   MOVT    A_REG                                   ; Areg<= T
 4348 00000694                   1530     _LEL_CODE_END:
 4349                            1531     
 4350                            1532     ;       *********************************************************************
 4351                            1533     ;       *****   CMP LEWI command                        9*2             *****
 4352                            1534     ;       *********************************************************************
 4353 00000694                   1535             .ALIGN  4
 4354 00000694                   1536     _LEWI_CODE:
 4355                            1537             CMPCMD_IMI1 EXIT=_LEWI_CODE_END,LBEL1=LEWI_DT_LH,LBEL2=LEWI_DT_LL,LG=NOUSE,CMPCMD=
                                          GE,OP1=D_REG,OP2=R2     ; add akiba
 4356 00000694 2558                   M                   TST     A_REG,A_REG                             ;
 4357                                 M                   TST_BIT_OF _LEWI_CODE_END                               ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4358 00000696 8906                   M           BT      _LEWI_CODE_END
 4359                                 M   
 4360                                 M                   IMD_MAKE1_WORD LBEL1=LEWI_DT_LH,LBEL2=LEWI_DT_LL        ; R2
 4361 00000698 E1FF                   M   LEWI_DT_LH:             MOV.B   #CHG_LHDATA,R1                  ; H_BYTE
 4362 0000069A E2FF                   M   LEWI_DT_LL:             MOV.B   #CHG_LLDATA,R2                  ; L_BYTE
 4363 0000069C 4118                   M                   SHLL8   R1                              ; 符号をそのまま
 4364 0000069E 622C                   M                   EXTU.B  R2,R2                           ;
 4365 000006A0 221B                   M                   OR      R1,R2                           ; data
 4366 000006A2 3283                   M                   CMP/GE  D_REG,R2                        ; R2 < D_REG THEN T=1
 4367 000006A4 0529                   M                   MOVT    A_REG                                   ; Areg<= T
 4368 000006A6                   1538     _LEWI_CODE_END:
 4369                            1539     
 4370                            1540     ;       *******************************************************************
 4371                            1541     ;       ***                                                             ***
 4372                            1542     ;       ***                                                             ***
 4373                            1543     ;       ***     AND  (MEMword,MEMlong,IMIword ),Dreg=>Dreg              ***
 4374                            1544     ;       ***                                                             ***
 4375                            1545     ;       *******************************************************************
 4376                            1546     ;       *********************************************************************
 4377                            1547     ;       *****   ANDW command                            10*2            *****
 4378                            1548     ;       *********************************************************************
 4379 000006A8                   1549             .ALIGN  4
 4380 000006A8                   1550     _ANDW_CODE:
 4381                            1551             CALCMD_MEM1_U EXIT=_ANDW_CODE_END,LBEL1=ANDW_ADR,LBEL2=ANDW_OFS,LG=W,CALCMD=AND
 4382 000006A8 2558                   M                   TST     A_REG,A_REG                             ; 変更 091105AKIBA
 4383                                 M                   TST_BIT_OF _ANDW_CODE_END                               ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4384 000006AA 8907                   M           BT      _ANDW_CODE_END
 4385                                 M   
 4386                                 M                   ADR_MAKE1_WORD LBEL1=ANDW_ADR,LBEL2=ANDW_OFS    ; R0=WORDｱﾄﾞﾚｽ
 4387                                 M                   ADR_MAKE1_BIT ANDW_ADR,ANDW_OFS
 4388 000006AC E17F                   M   ANDW_ADR:               MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE    41
PROGRAM NAME =

                                          (0~7Fまで)
 4389 000006AE E0FF                   M   ANDW_OFS:               MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 4390 000006B0 4118                   M                   SHLL8   R1
 4391 000006B2 600C                   M                   EXTU.B  R0,R0                           ;
 4392 000006B4 201B                   M                   OR      R1,R0                           ; adress
 4393 000006B6 02ED                   M                   MOV.W   @(R0,TOP_REG),R2                        ; [[W/L]]
 4394 000006B8 622D                   M                   EXTU.W  R2,R2
 4395 000006BA 2829                   M                   AND     R2,D_REG                                ; D_REG-R2=D_REG
 4396 000006BC                   1552     _ANDW_CODE_END:
 4397                            1553     
 4398                            1554     ;       *********************************************************************
 4399                            1555     ;       *****   ANDL command                            10*2            *****
 4400                            1556     ;       *********************************************************************
 4401 000006BC                   1557             .ALIGN  4
 4402 000006BC                   1558     _ANDL_CODE:
 4403                            1559             CALCMD_MEM1 EXIT=_ANDL_CODE_END,LBEL1=ANDL_ADR,LBEL2=ANDL_OFS,LG=L,CALCMD=AND
 4404 000006BC 2558                   M                   TST     A_REG,A_REG                             ; 変更 091105AKIBA
 4405                                 M                   TST_BIT_OF _ANDL_CODE_END                               ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4406 000006BE 8906                   M           BT      _ANDL_CODE_END
 4407                                 M   
 4408                                 M                   ADR_MAKE1_WORD LBEL1=ANDL_ADR,LBEL2=ANDL_OFS    ; R0=WORDｱﾄﾞﾚｽ
 4409                                 M                   ADR_MAKE1_BIT ANDL_ADR,ANDL_OFS
 4410 000006C0 E17F                   M   ANDL_ADR:               MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 4411 000006C2 E0FF                   M   ANDL_OFS:               MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 4412 000006C4 4118                   M                   SHLL8   R1
 4413 000006C6 600C                   M                   EXTU.B  R0,R0                           ;
 4414 000006C8 201B                   M                   OR      R1,R0                           ; adress
 4415 000006CA 02EE                   M                   MOV.L   @(R0,TOP_REG),R2                        ; [[W/L]]
 4416 000006CC 2829                   M                   AND     R2,D_REG                                ; D_REG-R2=D_REG
 4417 000006CE                   1560     _ANDL_CODE_END:
 4418                            1561     
 4419                            1562     ;       *********************************************************************
 4420                            1563     ;       *****   ANDWI command                           9*2             *****
 4421                            1564     ;       *********************************************************************
 4422 000006D0                   1565             .ALIGN  4
 4423 000006D0                   1566     _ANDWI_CODE:
 4424                            1567             CALCMD_IMI1_U EXIT=_ANDWI_CODE_END,LBEL1=ANDWI_DT_LH,LBEL2=ANDWI_DT_LL,LG=NOUSE,CA
                                          LCMD=AND
 4425 000006D0 2558                   M                   TST     A_REG,A_REG                             ; 変更 091105AKIBA
 4426                                 M                   TST_BIT_OF _ANDWI_CODE_END                              ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4427 000006D2 8906                   M           BT      _ANDWI_CODE_END
 4428                                 M   
 4429                                 M                   IMD_MAKE1_WORD LBEL1=ANDWI_DT_LH,LBEL2=ANDWI_DT_LL      ; R2
 4430 000006D4 E1FF                   M   ANDWI_DT_LH:            MOV.B   #CHG_LHDATA,R1                  ; H_BYTE
 4431 000006D6 E2FF                   M   ANDWI_DT_LL:            MOV.B   #CHG_LLDATA,R2                  ; L_BYTE
 4432 000006D8 4118                   M                   SHLL8   R1                              ; 符号をそのまま
 4433 000006DA 622C                   M                   EXTU.B  R2,R2                           ;
 4434 000006DC 221B                   M                   OR      R1,R2                           ; data
 4435 000006DE 622D                   M                   EXTU.W  R2,R2
 4436 000006E0 2829                   M                   AND     R2,D_REG                                ; D_REG-R2=D_REG
 4437 000006E2                   1568     _ANDWI_CODE_END:
 4438                            1569     
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE    42
PROGRAM NAME =

 4439                            1570     ;       *******************************************************************
 4440                            1571     ;       ***                                                             ***
 4441                            1572     ;       ***                                                             ***
 4442                            1573     ;       ***     OR  (MEMword,MEMlong,IMIword ),Dreg=>Dreg               ***
 4443                            1574     ;       ***                                                             ***
 4444                            1575     ;       *******************************************************************
 4445                            1576     ;       *********************************************************************
 4446                            1577     ;       *****   ORW command                             10*2            *****
 4447                            1578     ;       *********************************************************************
 4448 000006E4                   1579             .ALIGN  4
 4449 000006E4                   1580     _ORW_CODE:
 4450                            1581             CALCMD_MEM1_U EXIT=_ORW_CODE_END,LBEL1=ORW_ADR,LBEL2=ORW_OFS,LG=W,CALCMD=OR
 4451 000006E4 2558                   M                   TST     A_REG,A_REG                             ; 変更 091105AKIBA
 4452                                 M                   TST_BIT_OF _ORW_CODE_END                                ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4453 000006E6 8907                   M           BT      _ORW_CODE_END
 4454                                 M   
 4455                                 M                   ADR_MAKE1_WORD LBEL1=ORW_ADR,LBEL2=ORW_OFS      ; R0=WORDｱﾄﾞﾚｽ
 4456                                 M                   ADR_MAKE1_BIT ORW_ADR,ORW_OFS
 4457 000006E8 E17F                   M   ORW_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 4458 000006EA E0FF                   M   ORW_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 4459 000006EC 4118                   M                   SHLL8   R1
 4460 000006EE 600C                   M                   EXTU.B  R0,R0                           ;
 4461 000006F0 201B                   M                   OR      R1,R0                           ; adress
 4462 000006F2 02ED                   M                   MOV.W   @(R0,TOP_REG),R2                        ; [[W/L]]
 4463 000006F4 622D                   M                   EXTU.W  R2,R2
 4464 000006F6 282B                   M                   OR      R2,D_REG                                ; D_REG-R2=D_REG
 4465 000006F8                   1582     _ORW_CODE_END:
 4466                            1583     
 4467                            1584     ;       *********************************************************************
 4468                            1585     ;       ***     ORL command                             10*2            *****
 4469                            1586     ;       *********************************************************************
 4470 000006F8                   1587             .ALIGN  4
 4471 000006F8                   1588     _ORL_CODE:
 4472                            1589             CALCMD_MEM1 EXIT=_ORL_CODE_END,LBEL1=ORL_ADR,LBEL2=ORL_OFS,LG=L,CALCMD=OR
 4473 000006F8 2558                   M                   TST     A_REG,A_REG                             ; 変更 091105AKIBA
 4474                                 M                   TST_BIT_OF _ORL_CODE_END                                ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4475 000006FA 8906                   M           BT      _ORL_CODE_END
 4476                                 M   
 4477                                 M                   ADR_MAKE1_WORD LBEL1=ORL_ADR,LBEL2=ORL_OFS      ; R0=WORDｱﾄﾞﾚｽ
 4478                                 M                   ADR_MAKE1_BIT ORL_ADR,ORL_OFS
 4479 000006FC E17F                   M   ORL_ADR:                MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 4480 000006FE E0FF                   M   ORL_OFS:                MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 4481 00000700 4118                   M                   SHLL8   R1
 4482 00000702 600C                   M                   EXTU.B  R0,R0                           ;
 4483 00000704 201B                   M                   OR      R1,R0                           ; adress
 4484 00000706 02EE                   M                   MOV.L   @(R0,TOP_REG),R2                        ; [[W/L]]
 4485 00000708 282B                   M                   OR      R2,D_REG                                ; D_REG-R2=D_REG
 4486 0000070A                   1590     _ORL_CODE_END:
 4487                            1591     
 4488                            1592     ;       *********************************************************************
 4489                            1593     ;       *****   ORWI command                            9*2             *****
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE    43
PROGRAM NAME =

 4490                            1594     ;       *********************************************************************
 4491 0000070C                   1595             .ALIGN  4
 4492 0000070C                   1596     _ORWI_CODE:
 4493                            1597             CALCMD_IMI1_U EXIT=_ORWI_CODE_END,LBEL1=ORWI_DT_LH,LBEL2=ORWI_DT_LL,LG=NOUSE,CALCM
                                          D=OR
 4494 0000070C 2558                   M                   TST     A_REG,A_REG                             ; 変更 091105AKIBA
 4495                                 M                   TST_BIT_OF _ORWI_CODE_END                               ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4496 0000070E 8906                   M           BT      _ORWI_CODE_END
 4497                                 M   
 4498                                 M                   IMD_MAKE1_WORD LBEL1=ORWI_DT_LH,LBEL2=ORWI_DT_LL        ; R2
 4499 00000710 E1FF                   M   ORWI_DT_LH:             MOV.B   #CHG_LHDATA,R1                  ; H_BYTE
 4500 00000712 E2FF                   M   ORWI_DT_LL:             MOV.B   #CHG_LLDATA,R2                  ; L_BYTE
 4501 00000714 4118                   M                   SHLL8   R1                              ; 符号をそのまま
 4502 00000716 622C                   M                   EXTU.B  R2,R2                           ;
 4503 00000718 221B                   M                   OR      R1,R2                           ; data
 4504 0000071A 622D                   M                   EXTU.W  R2,R2
 4505 0000071C 282B                   M                   OR      R2,D_REG                                ; D_REG-R2=D_REG
 4506 0000071E                   1598     _ORWI_CODE_END:
 4507                            1599     
 4508                            1600     ;       *******************************************************************
 4509                            1601     ;       ***                                                             ***
 4510                            1602     ;       ***                                                             ***
 4511                            1603     ;       ***     XOR  (MEMword,MEMlong,IMIword ),Dreg=>Dreg              ***
 4512                            1604     ;       ***                                                             ***
 4513                            1605     ;       *******************************************************************
 4514                            1606     ;       *********************************************************************
 4515                            1607     ;       *****   XORW command                            10*2            *****
 4516                            1608     ;       *********************************************************************
 4517 00000720                   1609             .ALIGN  4
 4518 00000720                   1610     _XORW_CODE:
 4519                            1611             CALCMD_MEM1_U EXIT=_XORW_CODE_END,LBEL1=XORW_ADR,LBEL2=XORW_OFS,LG=W,CALCMD=XOR
 4520 00000720 2558                   M                   TST     A_REG,A_REG                             ; 変更 091105AKIBA
 4521                                 M                   TST_BIT_OF _XORW_CODE_END                               ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4522 00000722 8907                   M           BT      _XORW_CODE_END
 4523                                 M   
 4524                                 M                   ADR_MAKE1_WORD LBEL1=XORW_ADR,LBEL2=XORW_OFS    ; R0=WORDｱﾄﾞﾚｽ
 4525                                 M                   ADR_MAKE1_BIT XORW_ADR,XORW_OFS
 4526 00000724 E17F                   M   XORW_ADR:               MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 4527 00000726 E0FF                   M   XORW_OFS:               MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 4528 00000728 4118                   M                   SHLL8   R1
 4529 0000072A 600C                   M                   EXTU.B  R0,R0                           ;
 4530 0000072C 201B                   M                   OR      R1,R0                           ; adress
 4531 0000072E 02ED                   M                   MOV.W   @(R0,TOP_REG),R2                        ; [[W/L]]
 4532 00000730 622D                   M                   EXTU.W  R2,R2
 4533 00000732 282A                   M                   XOR     R2,D_REG                                ; D_REG-R2=D_REG
 4534 00000734                   1612     _XORW_CODE_END:
 4535                            1613     
 4536                            1614     ;       *********************************************************************
 4537                            1615     ;       ***     XORL command                            10*2            *****
 4538                            1616     ;       *********************************************************************
 4539 00000734                   1617             .ALIGN  4
 4540 00000734                   1618     _XORL_CODE:
 4541                            1619             CALCMD_MEM1 EXIT=_XORL_CODE_END,LBEL1=XORL_ADR,LBEL2=XORL_OFS,LG=L,CALCMD=XOR
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE    44
PROGRAM NAME =

 4542 00000734 2558                   M                   TST     A_REG,A_REG                             ; 変更 091105AKIBA
 4543                                 M                   TST_BIT_OF _XORL_CODE_END                               ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4544 00000736 8906                   M           BT      _XORL_CODE_END
 4545                                 M   
 4546                                 M                   ADR_MAKE1_WORD LBEL1=XORL_ADR,LBEL2=XORL_OFS    ; R0=WORDｱﾄﾞﾚｽ
 4547                                 M                   ADR_MAKE1_BIT XORL_ADR,XORL_OFS
 4548 00000738 E17F                   M   XORL_ADR:               MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 4549 0000073A E0FF                   M   XORL_OFS:               MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 4550 0000073C 4118                   M                   SHLL8   R1
 4551 0000073E 600C                   M                   EXTU.B  R0,R0                           ;
 4552 00000740 201B                   M                   OR      R1,R0                           ; adress
 4553 00000742 02EE                   M                   MOV.L   @(R0,TOP_REG),R2                        ; [[W/L]]
 4554 00000744 282A                   M                   XOR     R2,D_REG                                ; D_REG-R2=D_REG
 4555 00000746                   1620     _XORL_CODE_END:
 4556                            1621     
 4557                            1622     ;       *********************************************************************
 4558                            1623     ;       *****   XORWI command                           9*2             *****
 4559                            1624     ;       *********************************************************************
 4560 00000748                   1625             .ALIGN  4
 4561 00000748                   1626     _XORWI_CODE:
 4562                            1627             CALCMD_IMI1_U EXIT=_XORWI_CODE_END,LBEL1=XORWI_DT_LH,LBEL2=XORWI_DT_LL,LG=NOUSE,CA
                                          LCMD=XOR
 4563 00000748 2558                   M                   TST     A_REG,A_REG                             ; 変更 091105AKIBA
 4564                                 M                   TST_BIT_OF _XORWI_CODE_END                              ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4565 0000074A 8906                   M           BT      _XORWI_CODE_END
 4566                                 M   
 4567                                 M                   IMD_MAKE1_WORD LBEL1=XORWI_DT_LH,LBEL2=XORWI_DT_LL      ; R2
 4568 0000074C E1FF                   M   XORWI_DT_LH:            MOV.B   #CHG_LHDATA,R1                  ; H_BYTE
 4569 0000074E E2FF                   M   XORWI_DT_LL:            MOV.B   #CHG_LLDATA,R2                  ; L_BYTE
 4570 00000750 4118                   M                   SHLL8   R1                              ; 符号をそのまま
 4571 00000752 622C                   M                   EXTU.B  R2,R2                           ;
 4572 00000754 221B                   M                   OR      R1,R2                           ; data
 4573 00000756 622D                   M                   EXTU.W  R2,R2
 4574 00000758 282A                   M                   XOR     R2,D_REG                                ; D_REG-R2=D_REG
 4575 0000075A                   1628     _XORWI_CODE_END:
 4576                            1629     
 4577                            1630     ;       *******************************************************************
 4578                            1631     ;       ***                                                             ***
 4579                            1632     ;       ***                                                             ***
 4580                            1633     ;       ***     ADD  (MEMword,MEMlong,IMIword ),Dreg=>Dreg              ***
 4581                            1634     ;       ***                                                             ***
 4582                            1635     ;       *******************************************************************
 4583                            1636     ;       *********************************************************************
 4584                            1637     ;       *****   ADDW command                            9*2             *****
 4585                            1638     ;       *********************************************************************
 4586 0000075C                   1639             .ALIGN  4
 4587 0000075C                   1640     _ADDW_CODE:
 4588                            1641             CALCMD_MEM1 EXIT=_ADDW_CODE_END,LBEL1=ADDW_ADR,LBEL2=ADDW_OFS,LG=W,CALCMD=ADD
 4589 0000075C 2558                   M                   TST     A_REG,A_REG                             ; 変更 091105AKIBA
 4590                                 M                   TST_BIT_OF _ADDW_CODE_END                               ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4591 0000075E 8906                   M           BT      _ADDW_CODE_END
 4592                                 M   
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE    45
PROGRAM NAME =

 4593                                 M                   ADR_MAKE1_WORD LBEL1=ADDW_ADR,LBEL2=ADDW_OFS    ; R0=WORDｱﾄﾞﾚｽ
 4594                                 M                   ADR_MAKE1_BIT ADDW_ADR,ADDW_OFS
 4595 00000760 E17F                   M   ADDW_ADR:               MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 4596 00000762 E0FF                   M   ADDW_OFS:               MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 4597 00000764 4118                   M                   SHLL8   R1
 4598 00000766 600C                   M                   EXTU.B  R0,R0                           ;
 4599 00000768 201B                   M                   OR      R1,R0                           ; adress
 4600 0000076A 02ED                   M                   MOV.W   @(R0,TOP_REG),R2                        ; [[W/L]]
 4601 0000076C 382C                   M                   ADD     R2,D_REG                                ; D_REG-R2=D_REG
 4602 0000076E                   1642     _ADDW_CODE_END:
 4603                            1643     
 4604                            1644     ;       *********************************************************************
 4605                            1645     ;       *****   ADDL command                            10*2            *****
 4606                            1646     ;       *********************************************************************
 4607 00000770                   1647             .ALIGN  4
 4608 00000770                   1648     _ADDL_CODE:
 4609                            1649             CALCMD_MEM1 EXIT=_ADDL_CODE_END,LBEL1=ADDL_ADR,LBEL2=ADDL_OFS,LG=L,CALCMD=ADD
 4610 00000770 2558                   M                   TST     A_REG,A_REG                             ; 変更 091105AKIBA
 4611                                 M                   TST_BIT_OF _ADDL_CODE_END                               ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4612 00000772 8906                   M           BT      _ADDL_CODE_END
 4613                                 M   
 4614                                 M                   ADR_MAKE1_WORD LBEL1=ADDL_ADR,LBEL2=ADDL_OFS    ; R0=WORDｱﾄﾞﾚｽ
 4615                                 M                   ADR_MAKE1_BIT ADDL_ADR,ADDL_OFS
 4616 00000774 E17F                   M   ADDL_ADR:               MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 4617 00000776 E0FF                   M   ADDL_OFS:               MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 4618 00000778 4118                   M                   SHLL8   R1
 4619 0000077A 600C                   M                   EXTU.B  R0,R0                           ;
 4620 0000077C 201B                   M                   OR      R1,R0                           ; adress
 4621 0000077E 02EE                   M                   MOV.L   @(R0,TOP_REG),R2                        ; [[W/L]]
 4622 00000780 382C                   M                   ADD     R2,D_REG                                ; D_REG-R2=D_REG
 4623 00000782                   1650     _ADDL_CODE_END:
 4624                            1651     
 4625                            1652     ;       *********************************************************************
 4626                            1653     ;       *****   ADDWI command                           8*2             *****
 4627                            1654     ;       *********************************************************************
 4628 00000784                   1655             .ALIGN  4
 4629 00000784                   1656     _ADDWI_CODE:
 4630                            1657             CALCMD_IMI1 EXIT=_ADDWI_CODE_END,LBEL1=ADDWI_DT_LH,LBEL2=ADDWI_DT_LL,LG=NOUSE,CALC
                                          MD=ADD
 4631 00000784 2558                   M                   TST     A_REG,A_REG                             ; 変更 091105AKIBA
 4632                                 M                   TST_BIT_OF _ADDWI_CODE_END                              ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4633 00000786 8905                   M           BT      _ADDWI_CODE_END
 4634                                 M   
 4635                                 M                   IMD_MAKE1_WORD LBEL1=ADDWI_DT_LH,LBEL2=ADDWI_DT_LL      ; R2
 4636 00000788 E1FF                   M   ADDWI_DT_LH:            MOV.B   #CHG_LHDATA,R1                  ; H_BYTE
 4637 0000078A E2FF                   M   ADDWI_DT_LL:            MOV.B   #CHG_LLDATA,R2                  ; L_BYTE
 4638 0000078C 4118                   M                   SHLL8   R1                              ; 符号をそのまま
 4639 0000078E 622C                   M                   EXTU.B  R2,R2                           ;
 4640 00000790 221B                   M                   OR      R1,R2                           ; data
 4641 00000792 382C                   M                   ADD     R2,D_REG                                ; D_REG-R2=D_REG
 4642 00000794                   1658     _ADDWI_CODE_END:
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE    46
PROGRAM NAME =

 4643                            1659     
 4644                            1660     ;       *******************************************************************
 4645                            1661     ;       ***                                                             ***
 4646                            1662     ;       ***                                                             ***
 4647                            1663     ;       ***     SUB  (MEMword,MEMlong,IMIword ),Dreg=>Dreg              ***
 4648                            1664     ;       ***                                                             ***
 4649                            1665     ;       *******************************************************************
 4650                            1666     ;       *********************************************************************
 4651                            1667     ;       *****   SUBW command                            9*2             *****
 4652                            1668     ;       *********************************************************************
 4653 00000794                   1669             .ALIGN  4
 4654 00000794                   1670     _SUBW_CODE:
 4655                            1671             CALCMD_MEM1 EXIT=_SUBW_CODE_END,LBEL1=SUBW_ADR,LBEL2=SUBW_OFS,LG=W,CALCMD=SUB
 4656 00000794 2558                   M                   TST     A_REG,A_REG                             ; 変更 091105AKIBA
 4657                                 M                   TST_BIT_OF _SUBW_CODE_END                               ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4658 00000796 8906                   M           BT      _SUBW_CODE_END
 4659                                 M   
 4660                                 M                   ADR_MAKE1_WORD LBEL1=SUBW_ADR,LBEL2=SUBW_OFS    ; R0=WORDｱﾄﾞﾚｽ
 4661                                 M                   ADR_MAKE1_BIT SUBW_ADR,SUBW_OFS
 4662 00000798 E17F                   M   SUBW_ADR:               MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 4663 0000079A E0FF                   M   SUBW_OFS:               MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 4664 0000079C 4118                   M                   SHLL8   R1
 4665 0000079E 600C                   M                   EXTU.B  R0,R0                           ;
 4666 000007A0 201B                   M                   OR      R1,R0                           ; adress
 4667 000007A2 02ED                   M                   MOV.W   @(R0,TOP_REG),R2                        ; [[W/L]]
 4668 000007A4 3828                   M                   SUB     R2,D_REG                                ; D_REG-R2=D_REG
 4669 000007A6                   1672     _SUBW_CODE_END:
 4670                            1673     
 4671                            1674     ;       *********************************************************************
 4672                            1675     ;       *****   SUBL command                            10*2            *****
 4673                            1676     ;       *********************************************************************
 4674 000007A8                   1677             .ALIGN  4
 4675 000007A8                   1678     _SUBL_CODE:
 4676                            1679             CALCMD_MEM1 EXIT=_SUBL_CODE_END,LBEL1=SUBL_ADR,LBEL2=SUBL_OFS,LG=L,CALCMD=SUB
 4677 000007A8 2558                   M                   TST     A_REG,A_REG                             ; 変更 091105AKIBA
 4678                                 M                   TST_BIT_OF _SUBL_CODE_END                               ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4679 000007AA 8906                   M           BT      _SUBL_CODE_END
 4680                                 M   
 4681                                 M                   ADR_MAKE1_WORD LBEL1=SUBL_ADR,LBEL2=SUBL_OFS    ; R0=WORDｱﾄﾞﾚｽ
 4682                                 M                   ADR_MAKE1_BIT SUBL_ADR,SUBL_OFS
 4683 000007AC E17F                   M   SUBL_ADR:               MOV.B   #CHG_SQ_ADR,R1                  ; [命令書換用ラベル]H_BYTE
                                          (0~7Fまで)
 4684 000007AE E0FF                   M   SUBL_OFS:               MOV.B   #CHG_SQ_OFS,R0                  ; [命令書換用ラベル];L_BYT
                                          E
 4685 000007B0 4118                   M                   SHLL8   R1
 4686 000007B2 600C                   M                   EXTU.B  R0,R0                           ;
 4687 000007B4 201B                   M                   OR      R1,R0                           ; adress
 4688 000007B6 02EE                   M                   MOV.L   @(R0,TOP_REG),R2                        ; [[W/L]]
 4689 000007B8 3828                   M                   SUB     R2,D_REG                                ; D_REG-R2=D_REG
 4690 000007BA                   1680     _SUBL_CODE_END:
 4691                            1681     
 4692                            1682     ;       *********************************************************************
 4693                            1683     ;       *****   SUBWI command                           8*2             *****
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE    47
PROGRAM NAME =

 4694                            1684     ;       *********************************************************************
 4695 000007BC                   1685             .ALIGN  4
 4696 000007BC                   1686     _SUBWI_CODE:
 4697                            1687             CALCMD_IMI1 EXIT=_SUBWI_CODE_END,LBEL1=SUBWI_DT_LH,LBEL2=SUBWI_DT_LL,LG=NOUSE,CALC
                                          MD=SUB
 4698 000007BC 2558                   M                   TST     A_REG,A_REG                             ; 変更 091105AKIBA
 4699                                 M                   TST_BIT_OF _SUBWI_CODE_END                              ; Areg=0 jump(比較
                                          しないときはAreg=0を返す)
 4700 000007BE 8905                   M           BT      _SUBWI_CODE_END
 4701                                 M   
 4702                                 M                   IMD_MAKE1_WORD LBEL1=SUBWI_DT_LH,LBEL2=SUBWI_DT_LL      ; R2
 4703 000007C0 E1FF                   M   SUBWI_DT_LH:            MOV.B   #CHG_LHDATA,R1                  ; H_BYTE
 4704 000007C2 E2FF                   M   SUBWI_DT_LL:            MOV.B   #CHG_LLDATA,R2                  ; L_BYTE
 4705 000007C4 4118                   M                   SHLL8   R1                              ; 符号をそのまま
 4706 000007C6 622C                   M                   EXTU.B  R2,R2                           ;
 4707 000007C8 221B                   M                   OR      R1,R2                           ; data
 4708 000007CA 3828                   M                   SUB     R2,D_REG                                ; D_REG-R2=D_REG
 4709 000007CC                   1688     _SUBWI_CODE_END:
 4710                            1689     
 4711                            1690     ;       *********************************************************************
 4712                            1691     ;       *****   End command                             8byte           *****
 4713                            1692     ;       *********************************************************************
 4714 000007CC                   1693             .ALIGN  4
 4715 000007CC                   1694     _END_CODE:
 4716                            1695             SUB_END                                 ; END命令の中身
 4717                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 4718 000007CC 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 4719                            1696             M_RTS                                   ;
 4720 000007CE 000B                   M           RTS                             ;RTSの後ろの
 4721 000007D0 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 4722 000007D2                   1697     _END_CODE_END:
 4723                            1698     
 4724                            1699     ;       *********************************************************************
 4725                            1700     ;       *****   No Operation command            1step    4clocks        *****
 4726                            1701     ;       *********************************************************************
 4727 000007D4                   1702             .ALIGN  4
 4728 000007D4                   1703     _NOP_CODE:
 4729 000007D4 0009              1704             NOP                                     ; no operation
 4730 000007D6                   1705     _NOP_CODE_END:
 4731                            1706     
 4732                            1707             .END
  *****TOTAL ERRORS       0
  *****TOTAL WARNINGS     0
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE    48

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

ADDL_ADR                         P        EXPT 00000774   1943  4616*
ADDL_OFS                         P        EXPT 00000776   1944  4617*
ADDWI_DT_LH                      P        EXPT 00000788   1948  4636*
ADDWI_DT_LL                      P        EXPT 0000078A   1949  4637*
ADDW_ADR                         P        EXPT 00000760   1938  4595*
ADDW_OFS                         P        EXPT 00000762   1939  4596*
ANDL_ADR                         P        EXPT 000006C0   1973  4410*
ANDL_OFS                         P        EXPT 000006C2   1974  4411*
ANDN_ADR                         P        EXPT 000000C8   1729  2588*
ANDN_BIT                         P        EXPT 000000D2   1731  2594*
ANDN_OFS                         P        EXPT 000000CA   1730  2589*
ANDWI_DT_LH                      P        EXPT 000006D4   1978  4430*
ANDWI_DT_LL                      P        EXPT 000006D6   1979  4431*
ANDW_ADR                         P        EXPT 000006AC   1968  4388*
ANDW_OFS                         P        EXPT 000006AE   1969  4389*
AND_ADR                          P        EXPT 000000B4   1723  2568*
AND_BIT                          P        EXPT 000000BE   1725  2574*
AND_OFS                          P        EXPT 000000B6   1724  2569*
A_REG                                     REG             2267* 2507  2509  2522  2533  2546  2556  2577  2596  2614  2631  2646 
                                                          2646  2672  2672  2691  2691  2719  2730  2739  2747  2747  2750  2760 
                                                          2785  2785  2832  2832  2856  2905  2905  2928  2975  2975  3036  3038 
                                                          3039  3208  3208  3301  3343  3343  3399  3399  3493  3535  3535  3658 
                                                          3658  3676  3676  3729  3729  3749  3749  3770  3770  3789  3789  3937 
                                                          3937  3950  3959  3959  3972  3981  3981  3992  4009  4009  4024  4033 
                                                          4033  4048  4057  4057  4070  4086  4086  4099  4121  4121  4134  4143 
                                                          4143  4154  4170  4170  4183  4192  4192  4205  4214  4214  4225  4241 
                                                          4241  4254  4263  4263  4276  4285  4285  4296  4312  4312  4325  4334 
                                                          4334  4347  4356  4356  4367  4382  4382  4404  4404  4425  4425  4451 
                                                          4451  4473  4473  4494  4494  4520  4520  4542  4542  4563  4563  4589 
                                                          4589  4610  4610  4631  4631  4656  4656  4677  4677  4698  4698 
BIT0                                      EQU  00000001     19* 2321  2508  2532  2576  2613  2768  2855  2927  3161  3171  3194 
                                                          3231  3301  3428  3439  3446  3493  3506  3571  4023  4047  4069 
BIT1                                      EQU  00000002     20* 2322  3161  3211  3216  3402  3406  3413  3571 
BIT10                                     EQU  00000400     29* 2331 
BIT11                                     EQU  00000800     30* 2332 
BIT12                                     EQU  00001000     31* 2333 
BIT13                                     EQU  00002000     32* 2334 
BIT14                                     EQU  00004000     33* 2335 
BIT15                                     EQU  00008000     34* 2336 
BIT16                                     EQU  00010000     35*
BIT17                                     EQU  00020000     36*
BIT18                                     EQU  00040000     37*
BIT19                                     EQU  00080000     38*
BIT2                                      EQU  00000004     21* 2323  3161  3201  3231  3295  3571 
BIT20                                     EQU  00100000     39*
BIT21                                     EQU  00200000     40*
BIT22                                     EQU  00400000     41*
BIT23                                     EQU  00800000     42*
BIT24                                     EQU  01000000     43*
BIT25                                     EQU  02000000     44*
BIT26                                     EQU  04000000     45*
BIT27                                     EQU  08000000     46*
BIT28                                     EQU  10000000     47*
BIT29                                     EQU  20000000     48*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE    49

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

BIT3                                      EQU  00000008     22* 2324  3571 
BIT30                                     EQU  40000000     49*
BIT31                                     EQU  80000000     50*
BIT4                                      EQU  00000010     23* 2325 
BIT5                                      EQU  00000020     24* 2326 
BIT6                                      EQU  00000040     25* 2327 
BIT7                                      EQU  00000080     26* 2328 
BIT8                                      EQU  00000100     27* 2329 
BIT9                                      EQU  00000200     28* 2330 
CHG_DGT_SL                                EQU  0000000F   2313* 3112 
CHG_HHDATA                                EQU  000000FF   2307* 3680 
CHG_HLDATA                                EQU  000000FF   2308* 3681 
CHG_LHDATA                                EQU  000000FF   2309* 3663  3682  3986  4062  4148  4219  4290  4361  4430  4499  4568 
                                                          4636  4703 
CHG_LLDATA                                EQU  000000FF   2310* 3664  3683  3987  4063  4149  4220  4291  4362  4431  4500  4569 
                                                          4637  4704 
CHG_SQ_ADR                                EQU  0000007F   2303* 2524  2548  2568  2588  2605  2623  2641  2667  2686  2790  2808 
                                                          2880  2953  3010  3735  3755  3776  3795  3943  3965  4015  4039  4092 
                                                          4127  4176  4198  4247  4269  4318  4340  4388  4410  4457  4479  4526 
                                                          4548  4595  4616  4662  4683 
CHG_SQ_BIT                                EQU  000000FF   2305* 2530  2554  2574  2594  2611  2629  2651  2657  2677  2696  2813 
                                                          2885 
CHG_SQ_BTD                                EQU  0000000F   2306* 2958 
CHG_SQ_OFS                                EQU  000000FF   2304* 2525  2549  2569  2589  2606  2624  2642  2668  2687  2791  2809 
                                                          2881  2954  3011  3736  3756  3777  3796  3944  3966  4016  4040  4093 
                                                          4128  4177  4199  4248  4270  4319  4341  4389  4411  4458  4480  4527 
                                                          4549  4596  4617  4663  4684 
CHG_UNIT_H                                EQU  0000007F   2311* 3110  3364 
CHG_UNIT_L                                EQU  000000FF   2312* 3111  3365 
CLR_ADR                          P        EXPT 0000015C   1801  2790*
CLR_OFS                          P        EXPT 0000015E   1802  2791*
CTBL_REG                                  REG             2271* 2814  2887  2960  3016  3113  3366  3685 
CT_KDN_C_TOP                     P             00000078   2374* 3472  3511 
CT_KND_CD_TOP                    P             0000007C   2375* 3459 
CT_STCT_TOP                      P             00000074   2373* 3388 
DSETLI_CALL                      P             00000044   2350* 3685 
DSETLI_DT_HH                     P        EXPT 000004C4   2022  3680*
DSETLI_DT_HL                     P        EXPT 000004C6   2023  3681*
DSETLI_DT_LH                     P        EXPT 000004C8   2024  3682*
DSETLI_DT_LL                     P        EXPT 000004CA   2025  3683*
DSETWI_DT_LH                     P        EXPT 000004B4   1796  3663*
DSETWI_DT_LL                     P        EXPT 000004B6   1797  3664*
DTBL_REG                                  REG             2272* 3033  3152  3163  3243  3282  3319  3388  3459  3472  3511 
D_REG                                     REG             2270* 3187  3467  3668  3715  3740  3761  3781  3800  3949  3971  3991 
                                                          4021  4045  4067  4098  4133  4153  4182  4204  4224  4253  4275  4295 
                                                          4324  4346  4366  4395  4416  4436  4464  4485  4505  4533  4554  4574 
                                                          4601  4622  4641  4668  4689  4708 
EQL_ADR                          P        EXPT 0000054C   1853  3965*
EQL_OFS                          P        EXPT 0000054E   1854  3966*
EQWI_DT_LH                       P        EXPT 00000560   1858  3986*
EQWI_DT_LL                       P        EXPT 00000562   1859  3987*
EQW_ADR                          P        EXPT 00000538   1848  3943*
EQW_OFS                          P        EXPT 0000053A   1849  3944*
GEL_ADR                          P        EXPT 0000060C   1898  4198*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE    50

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

GEL_OFS                          P        EXPT 0000060E   1899  4199*
GEWI_DT_LH                       P        EXPT 00000620   1903  4219*
GEWI_DT_LL                       P        EXPT 00000622   1904  4220*
GEW_ADR                          P        EXPT 000005F8   1893  4176*
GEW_OFS                          P        EXPT 000005FA   1894  4177*
GTL_ADR                          P        EXPT 000005D0   1883  4127*
GTL_OFS                          P        EXPT 000005D2   1884  4128*
GTWI_DT_LH                       P        EXPT 000005E4   1888  4148*
GTWI_DT_LL                       P        EXPT 000005E6   1889  4149*
GTW_ADR                          P        EXPT 000005BC   1878  4092*
GTW_OFS                          P        EXPT 000005BE   1879  4093*
H_BYTE                                    EQU  00000000     86*
LDL_ADR                          P        EXPT 00000508   1833  3755*
LDL_OFS                          P        EXPT 0000050A   1834  3756*
LDN_ADR                          P        EXPT 000000A4   1717  2548*
LDN_BIT                          P        EXPT 000000AE   1719  2554*
LDN_OFS                          P        EXPT 000000A6   1718  2549*
LDW_ADR                          P        EXPT 000004F8   1828  3735*
LDW_OFS                          P        EXPT 000004FA   1829  3736*
LD_ADR                           P        EXPT 0000008C   1711  2524*
LD_BIT                           P        EXPT 00000096   1713  2530*
LD_OFS                           P        EXPT 0000008E   1712  2525*
LEL_ADR                          P        EXPT 00000684   1928  4340*
LEL_OFS                          P        EXPT 00000686   1929  4341*
LEWI_DT_LH                       P        EXPT 00000698   1933  4361*
LEWI_DT_LL                       P        EXPT 0000069A   1934  4362*
LEW_ADR                          P        EXPT 00000670   1923  4318*
LEW_OFS                          P        EXPT 00000672   1924  4319*
LTL_ADR                          P        EXPT 00000648   1913  4269*
LTL_OFS                          P        EXPT 0000064A   1914  4270*
LTWI_DT_LH                       P        EXPT 0000065C   1918  4290*
LTWI_DT_LL                       P        EXPT 0000065E   1919  4291*
LTW_ADR                          P        EXPT 00000634   1908  4247*
LTW_OFS                          P        EXPT 00000636   1909  4248*
L_BYTE                                    EQU  00000001     85*
M_REG                                     REG             2269* 2506  2507  2521  2522  2545  2546  2719  2720  2728  3044  3176 
                                                          3290  3433  3451 
NBIT0                                     EQU  000000FE     53*
NBIT1                                     EQU  000000FD     54*
NBIT10                                    EQU  0000FBFF     64*
NBIT11                                    EQU  0000F7FF     65*
NBIT12                                    EQU  0000EFFF     66*
NBIT13                                    EQU  0000DFFF     67*
NBIT14                                    EQU  0000BFFF     68*
NBIT15                                    EQU  00007FFF     69*
NBIT2                                     EQU  000000FB     55*
NBIT3                                     EQU  000000F7     56*
NBIT4                                     EQU  000000EF     57*
NBIT5                                     EQU  000000DF     58*
NBIT6                                     EQU  000000BF     59*
NBIT7                                     EQU  0000007F     60*
NBIT8                                     EQU  0000FEFF     62*
NBIT9                                     EQU  0000FDFF     63*
NEL_ADR                          P        EXPT 0000058C   1868  4039*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE    51

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

NEL_OFS                          P        EXPT 0000058E   1869  4040*
NEWI_DT_LH                       P        EXPT 000005A4   1873  4062*
NEWI_DT_LL                       P        EXPT 000005A6   1874  4063*
NEW_ADR                          P        EXPT 00000574   1863  4015*
NEW_OFS                          P        EXPT 00000576   1864  4016*
N_REG                                     REG             2268* 2738  2739  2749  2758  2768 
ORL_ADR                          P        EXPT 000006FC   1988  4479*
ORL_OFS                          P        EXPT 000006FE   1989  4480*
ORN_ADR                          P        EXPT 000000EC   1741  2623*
ORN_BIT                          P        EXPT 000000F6   1743  2629*
ORN_OFS                          P        EXPT 000000EE   1742  2624*
ORWI_DT_LH                       P        EXPT 00000710   1993  4499*
ORWI_DT_LL                       P        EXPT 00000712   1994  4500*
ORW_ADR                          P        EXPT 000006E8   1983  4457*
ORW_OFS                          P        EXPT 000006EA   1984  4458*
OR_ADR                           P        EXPT 000000D8   1735  2605*
OR_BIT                           P        EXPT 000000E2   1737  2611*
OR_OFS                           P        EXPT 000000DA   1736  2606*
P                                P        SCT  00000000   2286*
PLF_ADR                          P        EXPT 000001B8   1772  2880*
PLF_BIT                          P        EXPT 000001C2   1774  2885*
PLF_CALL                         P             0000004C   2352* 2887 
PLF_OFS                          P        EXPT 000001BA   1773  2881*
PLF_SB100                        P             000001DA   2907  2909*
PLS_ADR                          P        EXPT 0000016C   1766  2808*
PLS_BIT                          P        EXPT 00000176   1768  2813*
PLS_CALL                         P             00000048   2351* 2814 
PLS_OFS                          P        EXPT 0000016E   1767  2809*
PLS_SB100                        P             0000018E   2834  2837*
R0_REG                                    REG             2276* 3575 
R10_REG                                   REG             2282* 3152  3170  3182  3183  3191  3195  3200  3207  3218  3221  3224 
                                                          3232  3294  3316  3388  3404  3408  3417  3423  3427  3438  3440  3443 
                                                          3447  3456  3505  3507 
R1_REG                                    REG             2277* 3167  3189  3235  3245  3269  3273  3275  3321  3474  3513  3598 
R2_REG                                    REG             2278* 3246  3322  3475  3514  3568 
R3_REG                                    REG             2279*
R4_REG                                    REG             2280*
R9_REG                                    REG             2281* 3149  3246  3285  3286  3322  3386  3462  3463  3475  3514 
RSTCD_SETBIT                     P        EXPT 00000132   1762  2695*
RST_ADR                          P        EXPT 00000124   1760  2686*
RST_OFS                          P        EXPT 00000126   1761  2687*
SETCD_SETBIT                     P        EXPT 00000122   1756  2676*
SET_ADR                          P        EXPT 00000114   1754  2667*
SET_OFS                          P        EXPT 00000116   1755  2668*
SR_STCT_TOP                      P             00000060   2368* 3033 
STCD_CLRBIT                      P        EXPT 00000110   1750  2648  2656*
STCD_SETBIT                      P        EXPT 0000010A   1749  2650*
STL_ADR                          P        EXPT 00000528   1843  3795*
STL_OFS                          P        EXPT 0000052A   1844  3796*
STW_ADR                          P        EXPT 00000518   1838  3776*
STW_OFS                          P        EXPT 0000051A   1839  3777*
ST_ADR                           P        EXPT 000000FC   1747  2641*
ST_OFS                           P        EXPT 000000FE   1748  2642*
SUBL_ADR                         P        EXPT 000007AC   1958  4683*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE    52

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

SUBL_OFS                         P        EXPT 000007AE   1959  4684*
SUBWI_DT_LH                      P        EXPT 000007C0   1963  4703*
SUBWI_DT_LL                      P        EXPT 000007C2   1964  4704*
SUBW_ADR                         P        EXPT 00000798   1953  4662*
SUBW_OFS                         P        EXPT 0000079A   1954  4663*
TM_KND_TD_TOP                    P             0000006C   2371* 3282 
TM_KND_T_TOP                     P             00000068   2370* 3243  3319 
TM_LAT_CG_TOP                    P             00000070   2372* 3163 
TM_STCT_TOP                      P             00000064   2369* 3152 
TOP_REG                                   REG             2273* 2796  2844  2848  2916  2920  2984  3051  3055  3740  3761  3781 
                                                          3800  3948  3970  4020  4044  4097  4132  4181  4203  4252  4274  4323 
                                                          4345  4393  4415  4462  4484  4531  4553  4600  4621  4667  4688 
WCTR_CALL                        P             00000054   2354* 3366 
WCTR_S10                         P             000003C2   3401  3403*
WCTR_S20                         P             000003E0   3415  3422  3424*
WCTR_S30                         P             000003FA   3430  3450*
WCTR_S90                         P             00000412   3470*
WCTR_S95                         P             00000440   3453  3504*
WCTR_S97                         P             00000446   3468  3509*
WCTR_S98                         P             00000466   3435  3534*
WCTR_SEND                        P             00000468   3495  3537*
WCTR_UNH                         P        EXPT 00000398   1812  3364*
WCTR_UNL                         P        EXPT 0000039A   1813  3365*
WSC_ADR                          P        EXPT 00000204   1817  2953*
WSC_BTD                          P        EXPT 0000020E   1819  2958*
WSC_CALL                         P             00000058   2355* 2960 
WSC_OFS                          P        EXPT 00000206   1818  2954*
WSC_S10                          P             00000228   2977  2986*
WSR_ADR                          P        EXPT 00000234   1823  3010*
WSR_CALL                         P             0000005C   2356* 3016 
WSR_OFS                          P        EXPT 00000236   1824  3011*
WSR_S10                          P             0000026A   3042  3059*
WTMR_CALL                        P             00000050   2353* 3113 
WTMR_DGT                         P        EXPT 00000278   1808  3112*
WTMR_S30                         P             000002E2   3173  3198*
WTMR_S40                         P             000002F4   3210  3215*
WTMR_S45                         P             000002F6   3213  3217*
WTMR_S50                         P             0000032E   3226  3270*
WTMR_S60                         P             0000033C   3274  3280*
WTMR_S70                         P             00000346   3203  3289*
WTMR_S90                         P             00000352   3300*
WTMR_S95                         P             00000364   3292  3314*
WTMR_S98                         P             00000388   3178  3297  3342*
WTMR_SEND                        P             0000038A   3303  3345*
WTMR_UNH                         P        EXPT 00000274   1806  3110*
WTMR_UNL                         P        EXPT 00000276   1807  3111*
XBIT0                                     EQU  00000000     72*
XBIT1                                     EQU  00000001     73*
XBIT2                                     EQU  00000002     74*
XBIT3                                     EQU  00000003     75*
XBIT4                                     EQU  00000004     76*
XBIT5                                     EQU  00000005     77*
XBIT6                                     EQU  00000006     78*
XBIT7                                     EQU  00000007     79*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE    53

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

XORL_ADR                         P        EXPT 00000738   2003  4548*
XORL_OFS                         P        EXPT 0000073A   2004  4549*
XORWI_DT_LH                      P        EXPT 0000074C   2008  4568*
XORWI_DT_LL                      P        EXPT 0000074E   2009  4569*
XORW_ADR                         P        EXPT 00000724   1998  4526*
XORW_OFS                         P        EXPT 00000726   1999  4527*
_ADDL_CHG                                 IMPT 00000000   2085 
_ADDL_CODE                       P        EXPT 00000770   1942  4608*
_ADDL_CODE_END                   P        EXPT 00000782   1945  4612  4623*
_ADDWI_CHG                                IMPT 00000000   2086 
_ADDWI_CODE                      P        EXPT 00000784   1947  4629*
_ADDWI_CODE_END                  P        EXPT 00000794   1950  4633  4642*
_ADDW_CHG                                 IMPT 00000000   2084 
_ADDW_CODE                       P        EXPT 0000075C   1937  4587*
_ADDW_CODE_END                   P        EXPT 0000076E   1940  4591  4602*
_ADD_CODE                                 IMPT 00000000   2012 
_ADD_CODE_END                             IMPT 00000000   2013 
_ADD_SUB                                  IMPT 00000000   1696 
_AMRG_CHG                                 IMPT 00000000   2052 
_AMRG_CODE                       P        EXPT 00000134   1777  2718*
_AMRG_CODE_END                   P        EXPT 00000138   1778  2721*
_ANDL_CHG                                 IMPT 00000000   2093 
_ANDL_CODE                       P        EXPT 000006BC   1972  4402*
_ANDL_CODE_END                   P        EXPT 000006CE   1975  4406  4417*
_ANDN_CHG                                 IMPT 00000000   2037 
_ANDN_CODE                       P        EXPT 000000C8   1728  2586*
_ANDN_CODE_END                   P        EXPT 000000D8   1732  2597*
_ANDWI_CHG                                IMPT 00000000   2094 
_ANDWI_CODE                      P        EXPT 000006D0   1977  4423*
_ANDWI_CODE_END                  P        EXPT 000006E2   1980  4427  4437*
_ANDW_CHG                                 IMPT 00000000   2092 
_ANDW_CODE                       P        EXPT 000006A8   1967  4380*
_ANDW_CODE_END                   P        EXPT 000006BC   1970  4384  4396*
_ANDW_SUB                                 IMPT 00000000   1693 
_AND_CHG                                  IMPT 00000000   2036 
_AND_CODE                        P        EXPT 000000B4   1722  2566*
_AND_CODE_END                    P        EXPT 000000C6   1726  2578*
_BIT_DATA_TBL1                   P             00000000   2320*
_BIT_DATA_TBL2                   P             00000004   2321* 2979  3572 
_CB_BAKUP_CMD1                            EQU  00005678    118*
_CB_BAKUP_CMD2                            EQU  00001234    119*
_CB_BAK_SUM_COD1                          EQU  5AA51234    116*
_CB_BAK_SUM_COD2                          EQU  A55A4321    117*
_CB_ERR_INFO_MEM                          EQU  00000080    142*
_CB_ERR_INFO_PSIZE                        EQU  00000008    143*
_CB_STS_BUF_1BLK                          EQU  00000040    121*  123 
_CB_STS_BUF_BLKMAX                        EQU  00000008    122*  123 
_CB_STS_BUF_MAX                           EQU  00000200    123*
_CB_TRD_BEFORE                            EQU  00000060    131*
_CB_TRD_BUF_DP_MAX                        EQU  00000080    135*
_CB_TRD_BUF_MAX                           EQU  00000800    132*
_CB_TRD_DP_1CNT                           EQU  00000008    134*
_CB_TRD_DP_CH                             EQU  00000004    127*
_CB_TRD_SMP_CNT                           EQU  00000080    130*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE    54

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_CLR_CHG                                  IMPT 00000000   2050 
_CLR_CODE                        P        EXPT 00000158   1800  2784*
_CLR_CODE_END                    P        EXPT 0000016A   1803  2787  2797*
_CLR_SUB                                  IMPT 00000000   1682 
_DIVS_32REG2_32REG1_R4_32REG2_R2          IMPT 00000000   2291  3277 
_DI_X_TOP1                                IMPT 00000000   1647 
_DI_X_TOP2                                IMPT 00000000   1648 
_DO_Y_TOP1                                IMPT 00000000   1649 
_DO_Y_TOP2                                IMPT 00000000   1650 
_DSETLI_CHG                               IMPT 00000000   2102 
_DSETLI_CODE                     P        EXPT 000004C0   2021  3675*
_DSETLI_CODE_END                 P        EXPT 000004D2   2026  3678  3688*
_DSETLI_SUB                      P             000004D4   2350  3695*
_DSETWI_CHG                               IMPT 00000000   2051 
_DSETWI_CODE                     P        EXPT 000004B0   1795  3657*
_DSETWI_CODE_END                 P        EXPT 000004C0   1798  3660  3669*
_DUMMY_SUM_CODE                           EQU  5AA53CC3    109*
_ENDNRG_CHG                               IMPT 00000000   2057 
_ENDNRG_CODE                     P        EXPT 00000154   1792  2767*
_ENDNRG_CODE_END                 P        EXPT 00000156   1793  2769*
_END_CHG                                  IMPT 00000000   2058 
_END_CODE                        P        EXPT 000007CC   2018  4715*
_END_CODE_END                    P        EXPT 000007D2   2019  4722*
_END_SUB                                  IMPT 00000000   1698 
_EQL_CHG                                  IMPT 00000000   2066 
_EQL_CODE                        P        EXPT 00000548   1852  3957*
_EQL_CODE_END                    P        EXPT 0000055C   1855  3961  3973*
_EQWI_CHG                                 IMPT 00000000   2067 
_EQWI_CODE                       P        EXPT 0000055C   1857  3979*
_EQWI_CODE_END                   P        EXPT 0000056E   1860  3983  3994*
_EQW_CHG                                  IMPT 00000000   2065 
_EQW_CODE                        P        EXPT 00000534   1847  3935*
_EQW_CODE_END                    P        EXPT 00000548   1850  3939  3951*
_EQ_SUB                                   IMPT 00000000   1689 
_GEL_CHG                                  IMPT 00000000   2075 
_GEL_CODE                        P        EXPT 00000608   1897  4190*
_GEL_CODE_END                    P        EXPT 0000061C   1900  4194  4206*
_GEWI_CHG                                 IMPT 00000000   2076 
_GEWI_CODE                       P        EXPT 0000061C   1902  4212*
_GEWI_CODE_END                   P        EXPT 0000062E   1905  4216  4226*
_GEW_CHG                                  IMPT 00000000   2074 
_GEW_CODE                        P        EXPT 000005F4   1892  4168*
_GEW_CODE_END                    P        EXPT 00000608   1895  4172  4184*
_GTL_CHG                                  IMPT 00000000   2072 
_GTL_CODE                        P        EXPT 000005CC   1882  4119*
_GTL_CODE_END                    P        EXPT 000005E0   1885  4123  4135*
_GTWI_CHG                                 IMPT 00000000   2073 
_GTWI_CODE                       P        EXPT 000005E0   1887  4141*
_GTWI_CODE_END                   P        EXPT 000005F2   1890  4145  4155*
_GTW_CHG                                  IMPT 00000000   2071 
_GTW_CODE                        P        EXPT 000005B8   1877  4084*
_GTW_CODE_END                    P        EXPT 000005CC   1880  4088  4100*
_GT_SUB                                   IMPT 00000000   1691 
_LDL_CHG                                  IMPT 00000000   2061 
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE    55

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_LDL_CODE                        P        EXPT 00000504   1832  3748*
_LDL_CODE_END                    P        EXPT 00000514   1835  3751  3763*
_LDNRG_CHG                                IMPT 00000000   2056 
_LDNRG_CODE                      P        EXPT 0000014C   1789  2757*
_LDNRG_CODE_END                  P        EXPT 00000152   1790  2761*
_LDN_CHG                                  IMPT 00000000   2035 
_LDN_CODE                        P        EXPT 000000A0   1716  2543*
_LDN_CODE_END                    P        EXPT 000000B4   1720  2557*
_LDON_CHG                                 IMPT 00000000   2033 
_LDON_CODE                       P        EXPT 00000080   1707  2504*
_LDON_CODE_END                   P        EXPT 00000088   1708  2510*
_LDW_CHG                                  IMPT 00000000   2060 
_LDW_CODE                        P        EXPT 000004F4   1827  3728*
_LDW_CODE_END                    P        EXPT 00000504   1830  3731  3742*
_LDW_SUB                                  IMPT 00000000   1687 
_LD_CHG                                   IMPT 00000000   2034 
_LD_CODE                         P        EXPT 00000088   1710  2519*
_LD_CODE_END                     P        EXPT 0000009E   1714  2534*
_LEL_CHG                                  IMPT 00000000   2082 
_LEL_CODE                        P        EXPT 00000680   1927  4332*
_LEL_CODE_END                    P        EXPT 00000694   1930  4336  4348*
_LEWI_CHG                                 IMPT 00000000   2083 
_LEWI_CODE                       P        EXPT 00000694   1932  4354*
_LEWI_CODE_END                   P        EXPT 000006A6   1935  4358  4368*
_LEW_CHG                                  IMPT 00000000   2081 
_LEW_CODE                        P        EXPT 0000066C   1922  4310*
_LEW_CODE_END                    P        EXPT 00000680   1925  4314  4326*
_LE_SUB                                   IMPT 00000000   1692 
_LTL_CHG                                  IMPT 00000000   2079 
_LTL_CODE                        P        EXPT 00000644   1912  4261*
_LTL_CODE_END                    P        EXPT 00000658   1915  4265  4277*
_LTWI_CHG                                 IMPT 00000000   2080 
_LTWI_CODE                       P        EXPT 00000658   1917  4283*
_LTWI_CODE_END                   P        EXPT 0000066A   1920  4287  4297*
_LTW_CHG                                  IMPT 00000000   2078 
_LTW_CODE                        P        EXPT 00000630   1907  4239*
_LTW_CODE_END                    P        EXPT 00000644   1910  4243  4255*
_MKIND_A                                  EQU  00000040   2243*
_MKIND_A_ADR                              EQU  00001610   2242*
_MKIND_C                                  EQU  00000040   2225* 2226 
_MKIND_CD                                 EQU  00000400   2229* 2230 
_MKIND_CD_ADR                             EQU  00000900   2228* 2230  2375 
_MKIND_C_ADR                              EQU  000004C0   2224* 2226  2374 
_MKIND_F                                  EQU  00000110   2239* 2240 
_MKIND_F_ADR                              EQU  00000D00   2238* 2240 
_MKIND_L                                  EQU  00000040   2221* 2222 
_MKIND_L_ADR                              EQU  00000440   2220* 2222 
_MKIND_M                                  EQU  00000400   2219* 2220 
_MKIND_M_ADR                              EQU  00000040   2218* 2220 
_MKIND_S                                  EQU  00000800   2241* 2242 
_MKIND_S_ADR                              EQU  00000E10   2240* 2242 
_MKIND_T                                  EQU  00000040   2223* 2224 
_MKIND_TBL                                IMPT 00000000   2132 
_MKIND_TBL_TOP                            IMPT 00000000   2133 
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE    56

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_MKIND_TD                                 EQU  00000400   2227* 2228 
_MKIND_TD_ADR                             EQU  00000500   2226* 2228  2371 
_MKIND_T_ADR                              EQU  00000480   2222* 2224  2370 
_MKIND_W0                                 EQU  00000000   2213* 2214 
_MKIND_W0_ADR                             EQU  00000000   2212*
_MKIND_W1                                 EQU  00000000   2231* 2232 
_MKIND_W1_ADR                             EQU  00000D00   2230* 2232 
_MKIND_W2                                 EQU  00000000   2233* 2234 
_MKIND_W2_ADR                             EQU  00000D00   2232* 2234 
_MKIND_W3                                 EQU  00000000   2235* 2236 
_MKIND_W3_ADR                             EQU  00000D00   2234* 2236 
_MKIND_W4                                 EQU  00000000   2237* 2238 
_MKIND_W4_ADR                             EQU  00000D00   2236* 2238 
_MKIND_X                                  EQU  00000020   2215* 2216 
_MKIND_X_ADR                              EQU  00000000   2214* 2216 
_MKIND_Y                                  EQU  00000020   2217* 2218 
_MKIND_Y_ADR                              EQU  00000020   2216* 2218 
_NEL_CHG                                  IMPT 00000000   2069 
_NEL_CODE                        P        EXPT 00000588   1867  4031*
_NEL_CODE_END                    P        EXPT 000005A0   1870  4035  4049*
_NEWI_CHG                                 IMPT 00000000   2070 
_NEWI_CODE                       P        EXPT 000005A0   1872  4055*
_NEWI_CODE_END                   P        EXPT 000005B6   1875  4059  4071*
_NEW_CHG                                  IMPT 00000000   2068 
_NEW_CODE                        P        EXPT 00000570   1862  4007*
_NEW_CODE_END                    P        EXPT 00000588   1865  4011  4025*
_NE_SUB                                   IMPT 00000000   1690 
_NOP_CHG                                  IMPT 00000000   2032 
_NOP_CODE                        P        EXPT 000007D4   1704  4728*
_NOP_CODE_END                    P        EXPT 000007D6   1705  4730*
_OMRG_CHG                                 IMPT 00000000   2053 
_OMRG_CODE                       P        EXPT 00000138   1780  2727*
_OMRG_CODE_END                   P        EXPT 0000013E   1781  2731*
_ORL_CHG                                  IMPT 00000000   2096 
_ORL_CODE                        P        EXPT 000006F8   1987  4471*
_ORL_CODE_END                    P        EXPT 0000070A   1990  4475  4486*
_ORN_CHG                                  IMPT 00000000   2039 
_ORN_CODE                        P        EXPT 000000EC   1740  2621*
_ORN_CODE_END                    P        EXPT 000000FC   1744  2632*
_ORWI_CHG                                 IMPT 00000000   2097 
_ORWI_CODE                       P        EXPT 0000070C   1992  4492*
_ORWI_CODE_END                   P        EXPT 0000071E   1995  4496  4506*
_ORW_CHG                                  IMPT 00000000   2095 
_ORW_CODE                        P        EXPT 000006E4   1982  4449*
_ORW_CODE_END                    P        EXPT 000006F8   1985  4453  4465*
_ORW_SUB                                  IMPT 00000000   1694 
_OR_CHG                                   IMPT 00000000   2038 
_OR_CODE                         P        EXPT 000000D8   1734  2603*
_OR_CODE_END                     P        EXPT 000000EA   1738  2615*
_PLF_CHG                                  IMPT 00000000   2041 
_PLF_CODE                        P        EXPT 000001B8   1771  2878*
_PLF_CODE_END                    P        EXPT 000001CA   1775  2890*
_PLF_SUB                         P        EXPT 000001CC   1681  2352  2898*
_PLF_SUB_END                     P             000001FC   2930*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE    57

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_PLS_CHG                                  IMPT 00000000   2040 
_PLS_CODE                        P        EXPT 0000016C   1765  2806*
_PLS_CODE_END                    P        EXPT 0000017E   1769  2817*
_PLS_SUB                         P        EXPT 00000180   1680  2351  2824*
_PLS_SUB_END                     P             000001B0   2858*
_POP_CHG                                  IMPT 00000000   2055 
_POP_CODE                        P        EXPT 00000144   1786  2746*
_POP_CODE_END                    P        EXPT 0000014C   1787  2751*
_PUSH_CHG                                 IMPT 00000000   2054 
_PUSH_CODE                       P        EXPT 00000140   1783  2737*
_PUSH_CODE_END                   P        EXPT 00000144   1784  2740*
_RST_CHG                                  IMPT 00000000   2045 
_RST_CODE                        P        EXPT 00000124   1759  2684*
_RST_CODE_END                    P        EXPT 00000134   1763  2693  2697*
_SEQ_ARG1_DATA                            IMPT 00000000   1628 
_SEQ_ARG2_DATA                            IMPT 00000000   1635 
_SEQ_ARG3_DATA                            IMPT 00000000   1642 
_SEQ_ASM_RAM_TOP                          IMPT 00000000   1606 
_SEQ_A_SET                                EQU  00000020   2182* 2243 
_SEQ_BBIT_CHG_TBL                         IMPT 00000000   2113 
_SEQ_CALL_TBL1                   P        EXPT 00000044   2346  2349* 2814  2887  2960  3016  3113  3366  3685 
_SEQ_CARD_MAX                             EQU  00000C00   2183*
_SEQ_CARD_RAM                             IMPT 00000000   1620  2370  2371  2374  2375 
_SEQ_CD_SET                               EQU  00000200   2175* 2229 
_SEQ_CHG_TBL0                             IMPT 00000000   2109 
_SEQ_CMP_ERR1                             IMPT 00000000   1626 
_SEQ_CMP_ERR2                             IMPT 00000000   1633 
_SEQ_CMP_ERR3                             IMPT 00000000   1640 
_SEQ_CMP_ERR_ADR1                         IMPT 00000000   1627 
_SEQ_CMP_ERR_ADR2                         IMPT 00000000   1634 
_SEQ_CMP_ERR_ADR3                         IMPT 00000000   1641 
_SEQ_CMP_START                            IMPT 00000000   1654 
_SEQ_CTR_DATA                             IMPT 00000000   1623  2373 
_SEQ_C_SET                                EQU  00000020   2173* 2175  2225 
_SEQ_DATA_TBL1                   P        EXPT 00000060   2364  2367* 3033  3152  3163  3243  3282  3319  3388  3459  3472  3511 
_SEQ_DRG1_DATA                            IMPT 00000000   1631 
_SEQ_DRG2_DATA                            IMPT 00000000   1638 
_SEQ_DRG3_DATA                            IMPT 00000000   1645 
_SEQ_F_SET                                EQU  00000088   2180* 2239 
_SEQ_LD_TIMOUT                            IMPT 00000000   1662 
_SEQ_L_SET                                EQU  00000020   2171* 2221 
_SEQ_MAX_BYTE                             EQU  0000001E   2206*
_SEQ_MRG1_DATA                            IMPT 00000000   1629 
_SEQ_MRG2_DATA                            IMPT 00000000   1636 
_SEQ_MRG3_DATA                            IMPT 00000000   1643 
_SEQ_M_SET                                EQU  00000200   2170* 2219 
_SEQ_NRG1_DATA                            IMPT 00000000   1630 
_SEQ_NRG2_DATA                            IMPT 00000000   1637 
_SEQ_NRG3_DATA                            IMPT 00000000   1644 
_SEQ_POU_SET                              EQU  00004000   2207*
_SEQ_RUN1                                 IMPT 00000000   1609 
_SEQ_RUN1_END                             IMPT 00000000   1610 
_SEQ_RUN1_TOP                             IMPT 00000000   1608 
_SEQ_RUN2                                 IMPT 00000000   1613 
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE    58

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_SEQ_RUN2_END                             IMPT 00000000   1614 
_SEQ_RUN2_TOP                             IMPT 00000000   1612 
_SEQ_RUN3                                 IMPT 00000000   1617 
_SEQ_RUN3_END                             IMPT 00000000   1618 
_SEQ_RUN3_TOP                             IMPT 00000000   1616 
_SEQ_RUN_CHG1_ERR_END                     IMPT 00000000   2090 
_SEQ_SR_FLG                               IMPT 00000000   1624  2368 
_SEQ_S_SET                                EQU  00000400   2181* 2241 
_SEQ_TD_SET                               EQU  00000200   2174* 2227 
_SEQ_TIM_WK1000M                          IMPT 00000000   1665 
_SEQ_TIM_WK100M                           IMPT 00000000   1664 
_SEQ_TMR_DATA                             IMPT 00000000   1622  2369 
_SEQ_T_SET                                EQU  00000020   2172* 2174  2223 
_SEQ_W0_SET                               EQU  00000000   2167* 2213 
_SEQ_W1_SET                               EQU  00000000   2176* 2231 
_SEQ_W2_SET                               EQU  00000000   2177* 2233 
_SEQ_W3_SET                               EQU  00000000   2178* 2235 
_SEQ_W4_SET                               EQU  00000000   2179* 2237 
_SEQ_X_SET                                EQU  00000010   2168* 2215 
_SEQ_Y_SET                                EQU  00000010   2169* 2217 
_SET_CHG                                  IMPT 00000000   2044 
_SET_CODE                        P        EXPT 00000114   1753  2665*
_SET_CODE_END                    P        EXPT 00000124   1757  2674  2678*
_SQ_ERR_END                               EQU  0000FF00   2160*
_SQ_NML_COD                               EQU  00000000   2158*
_SQ_NML_END                               EQU  00000055   2159*
_START_ACK_COD                            EQU  00004321    217*
_START_REQ_COD                            EQU  00009876    216*
_STL_CHG                                  IMPT 00000000   2063 
_STL_CODE                        P        EXPT 00000524   1842  3788*
_STL_CODE_END                    P        EXPT 00000534   1845  3791  3801*
_STW_CHG                                  IMPT 00000000   2062 
_STW_CODE                        P        EXPT 00000514   1837  3769*
_STW_CODE_END                    P        EXPT 00000524   1840  3772  3782*
_STW_SUB                                  IMPT 00000000   1688 
_ST_CHG                                   IMPT 00000000   2042 
_ST_CODE                         P        EXPT 000000FC   1746  2639*
_ST_CODE_END                     P        EXPT 00000112   1751  2653  2658*
_SUBL_CHG                                 IMPT 00000000   2088 
_SUBL_CODE                       P        EXPT 000007A8   1957  4675*
_SUBL_CODE_END                   P        EXPT 000007BA   1960  4679  4690*
_SUBWI_CHG                                IMPT 00000000   2089 
_SUBWI_CODE                      P        EXPT 000007BC   1962  4696*
_SUBWI_CODE_END                  P        EXPT 000007CC   1965  4700  4709*
_SUBW_CHG                                 IMPT 00000000   2087 
_SUBW_CODE                       P        EXPT 00000794   1952  4654*
_SUBW_CODE_END                   P        EXPT 000007A6   1955  4658  4669*
_SUB_CODE                                 IMPT 00000000   2015 
_SUB_CODE_END                             IMPT 00000000   2016 
_SUB_SUB                                  IMPT 00000000   1697 
_SeqLd_MKIND_TBL_TOP                      IMPT 00000000   2134 
_SeqSysStat                               IMPT 00000000   1656 
_TMR_CNT_ADR_BIT_H               P             0000049C   3582  3594*
_TMR_CNT_ADR_BIT_L               P             00000498   3579  3590*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE    59

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_TMR_CNT_ADR_BIT_MAKE            P             00000474   3248  3324  3477  3516  3563*
_TM_LATE_CHGTOP                  P             00000280   2372  3129*
_T_0001HR_CNT                             EQU  00000020   2262*
_T_0001HR_TOP                             EQU  000001E0   2261*
_T_0001MS_CNT                             EQU  00000040   2260* 2261 
_T_0001MS_TOP                             EQU  000001A0   2259* 2261 
_T_0010MS_CNT                             EQU  00000100   2254* 2255 
_T_0010MS_TOP                             EQU  00000000   2253* 2255 
_T_0100MS_CNT                             EQU  00000080   2256* 2257 
_T_0100MS_TOP                             EQU  00000100   2255* 2257 
_T_1000MS_CNT                             EQU  00000020   2258* 2259 
_T_1000MS_TOP                             EQU  00000180   2257* 2259 
_VUPCHECK_EQU                             EQU  11AB3739    102*
_WCTR_CHG                                 IMPT 00000000   2048 
_WCTR_CODE                       P        EXPT 00000398   1811  3362*
_WCTR_CODE_END                   P        EXPT 000003A2   1814  3369*
_WCTR_SUB                        P        EXPT 000003A4   1684  2354  3378*
_WSC_CHG                                  IMPT 00000000   2043 
_WSC_CODE                        P        EXPT 00000204   1816  2951*
_WSC_CODE_END                    P        EXPT 00000216   1820  2963*
_WSC_SUB                         P        EXPT 00000218   1685  2355  2970*
_WSR_CHG                                  IMPT 00000000   2049 
_WSR_CODE                        P        EXPT 00000234   1822  3008*
_WSR_CODE_END                    P        EXPT 00000244   1825  3019*
_WSR_SUB                         P        EXPT 00000244   1686  2356  3028*
_WTMR_CHG                                 IMPT 00000000   2047 
_WTMR_CODE                       P        EXPT 00000274   1805  3109*
_WTMR_CODE_END                   P        EXPT 00000280   1809  3116*
_WTMR_SUB                        P        EXPT 000002A0   1683  2353  3140*
_XORL_CHG                                 IMPT 00000000   2099 
_XORL_CODE                       P        EXPT 00000734   2002  4540*
_XORL_CODE_END                   P        EXPT 00000746   2005  4544  4555*
_XORWI_CHG                                IMPT 00000000   2100 
_XORWI_CODE                      P        EXPT 00000748   2007  4561*
_XORWI_CODE_END                  P        EXPT 0000075A   2010  4565  4575*
_XORW_CHG                                 IMPT 00000000   2098 
_XORW_CODE                       P        EXPT 00000720   1997  4518*
_XORW_CODE_END                   P        EXPT 00000734   2000  4522  4534*
_XORW_SUB                                 IMPT 00000000   1695 
_X_PUSH_TOP1                              IMPT 00000000   1651 
_X_PUSH_TOP2                              IMPT 00000000   1652 
__TMCT_FLG                                EQU  00000008   2251* 3170  3182  3195  3200  3207  3218  3232  3294  3316  3404  3408 
                                                          3427  3438  3440  3447  3505  3507 
__TMCT_PV                                 EQU  00000000   2249* 3183  3221  3417  3423  3443  3456 
__TMCT_ST_CNT                             EQU  0000000C   2248*
__TMCT_SV                                 EQU  00000004   2250* 3191  3224 
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    07/04/21 19:29:13                                                  PAGE    60

*** SECTION DATA LIST

SECTION                          ATTRIBUTE    SIZE             START

P                                REL-CODE    0000007D6        
