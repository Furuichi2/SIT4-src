*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE     1
PROGRAM NAME =

    1                               1     ;       ***************************************************
    2                               2     ;       ***                                             ***
    3                               3     ;       ***                                             ***
    4                               4     ;       ***     シーケンスコード変換ソフト              ***
    5                               5     ;       ***                                             ***
    6                               6     ;       ***                                             ***
    7                               7     ;       ***************************************************
 3868                              20     
 3869                              21     
 3870                              22     ;       ***************************************************
 3871                              23     ;       *****   AND,ANDN,OR,ORN CODE CHANGE MACRO       ***
 3872                              24     ;       ***************************************************
 3873                              25     
 3874                              26             .MACRO  _SEQ_LD_LDN_CMD TOP_ADR,END_ADR
 3875                              27     
 3876                              28             MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 3877                              29             CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 3878                              30             BT      _JMP_C80\@                              ; IF ADR >= 127 THEN JUMP
 3879                              31     ;
 3880                              32             MOV.L   #(\END_ADR-\TOP_ADR),R0         ; 転送 BYTE長
 3881                              33             MOV.L   #\TOP_ADR,R3                    ; Read CODE MOVE        (12 BYTE)
 3882                              34     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 3883                              35             MOV     R13,R4                          ; SEQ ADR. KEEP
 3884                              36     
 3885                              37             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 3886                              38                                                     ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 3887                              39     ;       *** BIT SET ***
 3888                              40             MOV.L   #D'6,R1                         ; ﾒﾓﾘのところ
 3889                              41             ADD     R1,R4                           ;
 3890                              42             MOV.L   #_SEQ_BBIT_CHG_TBL,R1           ;
 3891                              43             SHLL    R10                             ; *2
 3892                              44             ADD     R10,R1                          ;
 3893                              45             MOV.W   @R1,R1                          ;
 3894                              46             MOV.W   @R4,R2                          ; ﾒﾓﾘのところの命令LOAD
 3895                              47             MOV.L   #H'FFFFFF00,R0                  ;
 3896                              48             AND     R0,R2                           ; BITﾃﾞｰﾀのところをｸﾘｱ
 3897                              49             OR      R1,R2                           ;
 3898                              50             MOV.W   R2,@R4                          ; BIT SET
 3899                              51     
 3900                              52     ;       *** ADR SET ***
 3901                              53             MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 3902                              54             ADD     R1,R4                           ; 6+4=10
 3903                              55             MOV.W   @R4,R2                          ;
 3904                              56             AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 3905                              57             SHLL    R8                              ; ADR*2
 3906                              58             OR      R8,R2                           ;
 3907                              59             MOV.W   R2,@R4                          ; RAM ADR SET
 3908                              60     
 3909                              61     ;       *** OFFSET SET ***
 3910                              62             MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 3911                              63             ADD     R1,R4                           ; 10+4=14  MOV.B @(R0,R*),R0の命令 LOAD
 3912                              64             MOV.L   #_SEQ_MOVCMD_R0RD_TBL,R0        ;
 3913                              65             SHLL    R9                              ; OFFSET*2
 3914                              66             ADD     R9,R0                           ;
 3915                              67             MOV.W   @R0,R0                          ;
 3916                              68             MOV.W   R0,@R4                          ; 命令置換え
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE     2
PROGRAM NAME =

 3917                              69     
 3918                              70     ;       *** SWAP命令はBIT7以下ならNOPに置換える ***
 3919                              71             MOV.L   #_NOP_SWAP_TBL0,R0              ;
 3920                              72             ADD     R10,R0                          ;
 3921                              73             MOV.W   @R0,R0                          ; NOP or SWAP命令LOAD
 3922                              74     
 3923                              75             MOV.L   #D'2,R1                         ; ﾒﾓﾘのところ
 3924                              76             ADD     R1,R4                           ; 14+2=16  SWAP.Bの命令 LOAD
 3925                              77             MOV.W   R0,@R4                          ; NOP or SWAP命令 WRITE
 3926                              78     
 3927                              79             MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 3928                              80             M_BRA   _JMP_EX\@                       ;
 3929                              81     ;
 3930                              82     _JMP_C80\@:
 3931                              83             MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 3932                              84     
 3933                              85     _JMP_EX\@:
 3934                              86             .ENDM
 3935                              87     
 3936                              88     ;       ***************************************************
 3937                              89     ;       *****   AND,ANDN,OR,ORN CODE CHANGE MACRO       ***
 3938                              90     ;       ***************************************************
 3939                              91     
 3940                              92             .MACRO  _SEQ_A_AN_O_ON_CMD      TOP_ADR,END_ADR
 3941                              93     
 3942                              94     ;_AND_CHG:                                      ; 00000100B     4
 3943                              95     ;_ANDN_CHG:                                     ; 00000101B     5
 3944                              96     ;_OR_CHG:                                       ; 00000110B     6
 3945                              97     ;_ORN_CHG:                                      ; 00000111B     7
 3946                              98             MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 3947                              99             CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 3948                             100             BT      _JMP_C80\@                      ; IF ADR >= 127 THEN JUMP
 3949                             101     ;
 3950                             102             MOV.L   #(\END_ADR-\TOP_ADR),R0         ; 転送 BYTE長
 3951                             103             MOV.L   #\TOP_ADR,R3                    ; Read CODE MOVE        (12 BYTE)
 3952                             104     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 3953                             105             MOV     R13,R4                          ; SEQ ADR. KEEP
 3954                             106     
 3955                             107             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 3956                             108                                                     ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 3957                             109     ;       *** BIT SET ***
 3958                             110             MOV.L   #_SEQ_BBIT_CHG_TBL,R1           ; ﾒﾓﾘのところ +0
 3959                             111             SHLL    R10                             ; *2
 3960                             112             ADD     R10,R1                          ;
 3961                             113             MOV.W   @R1,R1                          ; BIT LOAD
 3962                             114             MOV.W   @R4,R2                          ; ﾒﾓﾘのところの命令LOAD
 3963                             115             MOV.L   #H'FFFFFF00,R0                  ;
 3964                             116             AND     R0,R2                           ; BITﾃﾞｰﾀのところをｸﾘｱ
 3965                             117             OR      R1,R2                           ;
 3966                             118             MOV.W   R2,@R4                          ; BIT SET
 3967                             119     
 3968                             120     ;       *** ADR SET ***
 3969                             121             MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 3970                             122             ADD     R1,R4                           ; 0+4=4
 3971                             123             MOV.W   @R4,R2                          ;
 3972                             124             AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE     3
PROGRAM NAME =

 3973                             125             SHLL    R8                              ; ADR*2
 3974                             126             OR      R8,R2                           ;
 3975                             127             MOV.W   R2,@R4                          ; RAM ADR SET
 3976                             128     
 3977                             129     ;       *** OFFSET SET ***
 3978                             130             MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 3979                             131             ADD     R1,R4                           ; 4+4=8  MOV.B @(R0,R*),R0の命令 LOAD
 3980                             132             MOV.L   #_SEQ_MOVCMD_R0RD_TBL,R0        ;
 3981                             133             SHLL    R9                              ; OFFSET*2
 3982                             134             ADD     R9,R0                           ;
 3983                             135             MOV.W   @R0,R0                          ;
 3984                             136             MOV.W   R0,@R4                          ; 命令置換え
 3985                             137     
 3986                             138     ;       *** SWAP命令はBIT7以下ならNOPに置換える ***
 3987                             139             MOV.L   #_NOP_SWAP_TBL0,R0              ;
 3988                             140             ADD     R10,R0                          ;
 3989                             141             MOV.W   @R0,R0                          ; NOP or SWAP命令LOAD
 3990                             142     
 3991                             143             MOV.L   #D'2,R1                         ; ﾒﾓﾘのところ
 3992                             144             ADD     R1,R4                           ; 8+2=10  SWAP.Bの命令 LOAD
 3993                             145             MOV.W   R0,@R4                          ; NOP or SWAP命令 WRITE
 3994                             146     
 3995                             147             MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 3996                             148             M_BRA   _JMP_EX\@                       ;
 3997                             149     ;
 3998                             150     _JMP_C80\@:
 3999                             151             MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 4000                             152     
 4001                             153     _JMP_EX\@:
 4002                             154             .ENDM
 4003                             155     
 4004                             156     
 4005                             157     
 4006                             158     ;       ***************************************************
 4007                             159     ;       *****   SET,RST CODE CHANGE MACRO               ***
 4008                             160     ;       ***************************************************
 4009                             161     
 4010                             162             .MACRO  _SEQ_SET_RST_CMD        TOP_ADR,END_ADR,BIT_AREA,ADR_AREA,COD_AREA1,COD_AR
                                          EA2,COD_AREA3
 4011                             163     
 4012                             164             MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 4013                             165             CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 4014                             166             BT      _JMP_C80\@                      ; IF ADR >= 127 THEN JUMP
 4015                             167     ;
 4016                             168             MOV.L   #(\END_ADR-\TOP_ADR),R0         ; 転送 BYTE長
 4017                             169             MOV.L   #\TOP_ADR,R3                    ; Read CODE MOVE        (12 BYTE)
 4018                             170     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 4019                             171             MOV     R13,R4                          ; SEQ ADR. KEEP
 4020                             172     
 4021                             173             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 4022                             174                                                     ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 4023                             175     
 4024                             176             MOV.L   #H'FFFFFF00,R0                  ;
 4025                             177     
 4026                             178     ;       *** BIT SET ***
 4027                             179             MOV.L   #\BIT_AREA,R1                   ; ﾒﾓﾘのところ
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE     4
PROGRAM NAME =

 4028                             180             ADD     R1,R4                           ; +2
 4029                             181             MOV.L   #_SEQ_BBIT_CHG_TBL,R1           ; ﾒﾓﾘのところ +0
 4030                             182             SHLL    R10                             ; *2
 4031                             183             ADD     R10,R1                          ;
 4032                             184             MOV.W   @R1,R1                          ; BIT LOAD
 4033                             185             MOV.W   @R4,R2                          ; ﾒﾓﾘのところの命令LOAD
 4034                             186             AND     R0,R2                           ; BITﾃﾞｰﾀのところをｸﾘｱ
 4035                             187             OR      R1,R2                           ;
 4036                             188             MOV.W   R2,@R4                          ; BIT SET
 4037                             189     
 4038                             190     ;       *** SHLL命令はBIT7以下ならNOPに置換える ***
 4039                             191             MOV.L   #_NOP_SHLL8_R3_TBL0,R2          ;
 4040                             192             ADD     R10,R2                          ;
 4041                             193             MOV.W   @R2,R2                          ; NOP or SHLL8命令LOAD
 4042                             194             MOV.L   #\COD_AREA1,R1                          ; ﾒﾓﾘのところ
 4043                             195             ADD     R1,R4                           ; 8+2=10  SWAP.Bの命令 LOAD
 4044                             196             MOV.W   R2,@R4                          ; NOP or SWAP命令 WRITE
 4045                             197     
 4046                             198     ;       *** ADR SET ***
 4047                             199             MOV.L   #\ADR_AREA,R1                   ; ﾒﾓﾘのところ
 4048                             200             ADD     R1,R4                           ; 2+6=8
 4049                             201             MOV.W   @R4,R2                          ;
 4050                             202             AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 4051                             203             SHLL    R8                              ; ADR*2
 4052                             204             OR      R8,R2                           ;
 4053                             205             MOV.W   R2,@R4                          ; RAM ADR SET
 4054                             206     
 4055                             207     ;       *** OFFSET SET ***
 4056                             208             MOV.L   #\COD_AREA2,R1                  ; ﾒﾓﾘのところ
 4057                             209             ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 4058                             210             MOV.L   #_SEQ_MOVCMD_R1RD_TBL,R0        ;
 4059                             211             SHLL    R9                              ; OFFSET*2
 4060                             212             ADD     R9,R0                           ;
 4061                             213             MOV.W   @R0,R0                          ;
 4062                             214             MOV.W   R0,@R4                          ; 命令置換え
 4063                             215     
 4064                             216     ;       *** OFFSET SET ***
 4065                             217             MOV.L   #\COD_AREA3,R1                  ; ﾒﾓﾘのところ
 4066                             218             ADD     R1,R4                           ; 12+4=16  MOV.B R1,@(R0,R*)の命令 LOAD
 4067                             219             MOV.L   #_SEQ_MOVCMD_R1WR_TBL,R0        ;
 4068                             220             ADD     R9,R0                           ;
 4069                             221             MOV.W   @R0,R0                          ;
 4070                             222             MOV.W   R0,@R4                          ; 命令置換え
 4071                             223     
 4072                             224             MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 4073                             225             M_BRA   _JMP_EX\@                       ;
 4074                             226     ;
 4075                             227     _JMP_C80\@:
 4076                             228             MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 4077                             229     
 4078                             230     _JMP_EX\@:
 4079                             231             .ENDM
 4080                             232     
 4081                             233     
 4082                             234     ;       ***************************************************
 4083                             235     ;       *****   PLS PLF DS CODE CHANGE MACRO            ***
 4084                             236     ;       ***************************************************
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE     5
PROGRAM NAME =

 4085                             237     
 4086                             238             .MACRO  _SEQ_PLS_PLF_CMD        TOP_ADR,END_ADR,BIT_AREA,ADR_AREA,COD_AREA1
 4087                             239     
 4088                             240             MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 4089                             241             CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 4090                             242             BT      _JMP_C80\@                      ; IF ADR >= 127 THEN JUMP
 4091                             243     ;
 4092                             244             MOV.L   #(\END_ADR-\TOP_ADR),R0         ; 転送 BYTE長
 4093                             245             MOV.L   #\TOP_ADR,R3                    ; Read CODE MOVE        (12 BYTE)
 4094                             246     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 4095                             247             MOV     R13,R4                          ; SEQ ADR. KEEP
 4096                             248     
 4097                             249             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 4098                             250                                                     ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 4099                             251     ;       *** BIT SET ***
 4100                             252             MOV.L   #\BIT_AREA,R1                   ; ﾒﾓﾘのところ
 4101                             253             ADD     R1,R4                           ;
 4102                             254             MOV.L   #_SEQ_BBIT_CHG_TBL,R1           ;
 4103                             255             SHLL    R10                             ; *2
 4104                             256             ADD     R10,R1                          ;
 4105                             257             MOV.W   @R1,R1                          ;
 4106                             258             MOV.W   @R4,R2                          ; ﾒﾓﾘのところの命令LOAD
 4107                             259             MOV.L   #H'FFFFFF00,R0                  ;
 4108                             260             AND     R0,R2                           ; BITﾃﾞｰﾀのところをｸﾘｱ
 4109                             261             OR      R1,R2                           ;
 4110                             262             MOV.W   R2,@R4                          ; BIT SET
 4111                             263     
 4112                             264     ;       *** SHLL命令はBIT7以下ならNOPに置換える ***
 4113                             265             MOV.L   #_NOP_SHLL8_R2_TBL0,R2          ;
 4114                             266             ADD     R10,R2                          ;
 4115                             267             MOV.W   @R2,R2                          ; NOP or SHLL8命令LOAD
 4116                             268     
 4117                             269             MOV.L   #\COD_AREA1,R1                          ; ﾒﾓﾘのところ
 4118                             270             ADD     R1,R4                           ; 8+2=10  SWAP.Bの命令 LOAD
 4119                             271             MOV.W   R2,@R4                          ; NOP or SWAP命令 WRITE
 4120                             272     
 4121                             273     ;       *** ADR SET ***
 4122                             274             MOV.L   #\ADR_AREA,R1                   ; ﾒﾓﾘのところ
 4123                             275             ADD     R1,R4                           ; 0+6=6
 4124                             276             MOV.W   @R4,R2                          ;
 4125                             277             AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 4126                             278             SHLL    R8                              ; ADR*2
 4127                             279             OR      R8,R2                           ;
 4128                             280             MOV.W   R2,@R4                          ; RAM ADR SET
 4129                             281     
 4130                             282             MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 4131                             283             M_BRA   _JMP_EX\@                       ;
 4132                             284     ;
 4133                             285     _JMP_C80\@:
 4134                             286             MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 4135                             287     
 4136                             288     _JMP_EX\@:
 4137                             289             .ENDM
 4138                             290     
 4139                             291     
 4140                             292     ;       *********************************************************************
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE     6
PROGRAM NAME =

 4141                             293     ;       *****   LDW,EQ,NE,GT,LE,ANDW,ORW,XORW,ADD,SUB命令変換 ﾏｸﾛ       *****
 4142                             294     ;       *********************************************************************
 4143                             295             .MACRO  _SEQ_LDW_CMP_OPE_CMD    TOP_ADR,END_ADR,ADR_AREA,COD_AREA1
 4144                             296     
 4145                             297             MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 4146                             298             CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 4147                             299             BT      _JMP_C80\@                      ; IF ADR >= 127 THEN JUMP
 4148                             300     ;
 4149                             301             MOV.L   #(\END_ADR-\TOP_ADR),R0         ; 転送 BYTE長
 4150                             302             MOV.L   #\TOP_ADR,R3                    ; Read CODE MOVE        (12 BYTE)
 4151                             303     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 4152                             304             MOV     R13,R4                          ; SEQ ADR. KEEP
 4153                             305     
 4154                             306             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 4155                             307                                                     ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 4156                             308     
 4157                             309             MOV.L   #H'FFFFFF00,R0                  ;
 4158                             310     ;       *** ADR SET ***
 4159                             311             MOV.L   #\ADR_AREA,R1                   ; ﾒﾓﾘのところ
 4160                             312             ADD     R1,R4                           ; +0
 4161                             313             MOV.W   @R4,R2                          ;
 4162                             314             AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 4163                             315             SHLL    R8                              ; ADR*2
 4164                             316             OR      R8,R2                           ;
 4165                             317             MOV.W   R2,@R4                          ; RAM ADR SET
 4166                             318     
 4167                             319     ;       *** OFFSET SET ***
 4168                             320             MOV.L   #\COD_AREA1,R1                  ; ﾒﾓﾘのところ
 4169                             321             ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 4170                             322             MOV.L   #_SEQ_MOVCMD_R3RD_TBL,R0        ;
 4171                             323             SHLL    R9                              ; OFFSET*2
 4172                             324             ADD     R9,R0                           ;
 4173                             325             MOV.W   @R0,R0                          ;
 4174                             326             MOV.W   R0,@R4                          ; 命令置換え
 4175                             327     
 4176                             328             MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 4177                             329             M_BRA   _JMP_EX\@                       ;
 4178                             330     ;
 4179                             331     _JMP_C80\@:
 4180                             332             MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 4181                             333     
 4182                             334     _JMP_EX\@:
 4183                             335             .ENDM
 4184                             336     
 4185                             337     
 4186                             338     ;       *****************************************************
 4187                             339     ;       *****   STW,CLR命令変換 ﾏｸﾛ                     *****
 4188                             340     ;       *****************************************************
 4189                             341             .MACRO  _SEQ_STW_CLR_CMD        TOP_ADR,END_ADR,ADR_AREA,COD_AREA1
 4190                             342     
 4191                             343             MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 4192                             344             CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 4193                             345             BT      _JMP_C80\@                      ; IF ADR >= 127 THEN JUMP
 4194                             346     ;
 4195                             347             MOV.L   #(\END_ADR-\TOP_ADR),R0         ; 転送 BYTE長
 4196                             348             MOV.L   #\TOP_ADR,R3                    ; Read CODE MOVE        (12 BYTE)
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE     7
PROGRAM NAME =

 4197                             349     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 4198                             350             MOV     R13,R4                          ; SEQ ADR. KEEP
 4199                             351     
 4200                             352             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 4201                             353                                                     ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 4202                             354             MOV.L   #H'FFFFFF00,R0                  ;
 4203                             355     ;       *** ADR SET ***
 4204                             356             MOV.L   #\ADR_AREA,R1                   ; ﾒﾓﾘのところ
 4205                             357             ADD     R1,R4                           ; +0
 4206                             358             MOV.W   @R4,R2                          ;
 4207                             359             AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 4208                             360             SHLL    R8                              ; ADR*2
 4209                             361             OR      R8,R2                           ;
 4210                             362             MOV.W   R2,@R4                          ; RAM ADR SET
 4211                             363     
 4212                             364     ;       *** OFFSET SET ***
 4213                             365             MOV.L   #\COD_AREA1,R1                  ; ﾒﾓﾘのところ
 4214                             366             ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 4215                             367             MOV.L   #_SEQ_ADDCMD_R0_TBL,R0  ;
 4216                             368             SHLL    R9                              ; OFFSET*2
 4217                             369             ADD     R9,R0                           ;
 4218                             370             MOV.W   @R0,R0                          ;
 4219                             371             MOV.W   R0,@R4                          ; 命令置換え
 4220                             372     
 4221                             373             MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 4222                             374             M_BRA   _JMP_EX\@                       ;
 4223                             375     ;
 4224                             376     _JMP_C80\@:
 4225                             377             MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 4226                             378     
 4227                             379     _JMP_EX\@:
 4228                             380             .ENDM
 4229                             381     
 4230                             382     
 4231                             383     
 4232                             384     
 4233                             385     ;       *****************************************************
 4234                             386     ;       *****   WTMR,WCTR命令変換 ﾏｸﾛ                   *****
 4235                             387     ;       *****************************************************
 4236                             388             .MACRO  _SEQ_WTMR_WCTR_CMD      TOP_ADR,END_ADR,ADR_AREA,COD_AREA1
 4237                             389     
 4238                             390             MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 4239                             391             CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 4240                             392             BT      _JMP_C80\@                      ; IF ADR >= 127 THEN JUMP
 4241                             393     ;
 4242                             394             MOV.L   #(\END_ADR-\TOP_ADR),R0         ; 転送 BYTE長
 4243                             395             MOV.L   #\TOP_ADR,R3                    ; Read CODE MOVE        (12 BYTE)
 4244                             396     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 4245                             397             MOV     R13,R4                          ; SEQ ADR. KEEP
 4246                             398     
 4247                             399             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 4248                             400                                                     ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 4249                             401     
 4250                             402             MOV.L   #H'FFFFFF00,R0                  ;
 4251                             403     ;       *** ADR SET ***
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE     8
PROGRAM NAME =

 4252                             404             MOV.L   #\ADR_AREA,R1                   ; ﾒﾓﾘのところ
 4253                             405             ADD     R1,R4                           ; +0
 4254                             406             MOV.W   @R4,R2                          ;
 4255                             407             AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 4256                             408     ;;;;;   SHLL    R8                              ; ADR*2
 4257                             409             OR      R8,R2                           ;
 4258                             410             MOV.W   R2,@R4                          ; RAM ADR SET
 4259                             411     
 4260                             412             MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 4261                             413             M_BRA   _JMP_EX\@                       ;
 4262                             414     ;
 4263                             415     _JMP_C80\@:
 4264                             416             MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 4265                             417     
 4266                             418     _JMP_EX\@:
 4267                             419             .ENDM
 4268                             420     
 4269                             421     
 4270                             422     ;       ***************************************************
 4271                             423     ;       ***                                             ***
 4272                             424     ;       ***                                             ***
 4273                             425     ;       ***     シーケンスコード変換ソフト              ***
 4274                             426     ;       ***                                             ***
 4275                             427     ;       ***                                             ***
 4276                             428     ;       ***************************************************
 4277 00000000                    429             .SECTION        P,CODE                  ;
 4278                             430             .import _SEQ_COM1_TOP                   ; SEQUENCE COMMAND AREA TOP ADR.
 4279                             431             .import _SEQ_COM1_END                   ; SEQUENCE COMMAND AREA END ADR.
 4280                             432     
 4281                             433             .EXPORT _SEQ_RUN_CHG_MAIN               ; ｼｰｹﾝｽFROM->SDRAM命令変換
 4282                             434     
 4283                             435     
 4284                             436     
 4285 00000000                    437     _SEQ_START_CODE:
 4286                             438             SUB_START
 4287 00000000 4F22                   M           STS.L   PR,@-R15                ;[必要]
 4288                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 4289 00000002 0009               439             NOP
 4290                             440     
 4291 00000004                    441     _SEQ_END_CODE:
 4292                             442             SUB_END
 4293                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 4294 00000004 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 4295                             443             M_RTS
 4296 00000006 000B                   M           RTS                             ;RTSの後ろの
 4297 00000008 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 4298                             444     
 4299                             445     
 4300                             446     
 4301                             447     ;
 4302                             448     ;       /********************************************************
 4303                             449     ;       /**********     SEQUENCE COMMAND CHANGE        **********
 4304                             450     ;       /********************************************************
 4305                             451             .IMPORT _PVP_COM_ADR            ;word
 4306                             452             .IMPORT _PVP_COM_ERR            ;ｺﾝﾊﾟｲﾙ異常有り／無し
 4307                             453     
 4308                             454     
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE     9
PROGRAM NAME =

 4309                             455     ;SEQ_COMPILE :FLAG IF data  ==0 THEN MAIN-SEQ 0~4000?[EQU=MAIN_SEQ_STP] STEP
 4310                             456     ;                  IF data  !=0 THEN INT -SEQ 0~100? [EQU=INT_SEQ_STP] STEP
 4311                             457     
 4312 0000000A                    458     _SEQ_RUN_CHG_MAIN:
 4313                             459             SUB_START
 4314 0000000A 4F22                   M           STS.L   PR,@-R15                ;[必要]
 4315                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 4316                             460     
 4317                             461     ;       *** ｼｰｹﾝｽの始まりはSUB_STARTを入れる ***
 4318 0000000C DD17               462             MOV.L   #_SEQ_RUN1_TOP,R13              ; RUN COMMAND STORE AREA TOP ADR.
 4319 0000000E DC18               463             MOV.L   #_SEQ_START_CODE,R12            ;
 4320 00000010 60C1               464             MOV.W   @R12,R0                         ; SUB_START CODE SET
 4321 00000012 2D01               465             MOV.W   R0,@R13                         ;
 4322 00000014 D017               466             MOV.L   #2,R0                           ;
 4323 00000016 3D0C               467             ADD     R0,R13                          ; ADDRESS INC
 4324 00000018 3C0C               468             ADD     R0,R12                          ; ADDRESS INC
 4325 0000001A 60C1               469             MOV.W   @R12,R0                         ;
 4326 0000001C 2D01               470             MOV.W   R0,@R13                         ; NOP CODE SET
 4327                             471     
 4328                             472             FAR_JSR #_SEQ_RUN_CHG1,R1               ;
 4329 0000001E D116                   M           MOV.L   #_SEQ_RUN_CHG1,R1               ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 4330 00000020 410B                   M           JSR     @R1                     ;
 4331 00000022 0009                   M           NOP                                     ;
 4332                             473     
 4333 00000024 D115               474             MOV.L   #_SEQ_CMP_ERR_ADR,R1            ;
 4334 00000026 2172               475             MOV.L   R7,@R1                          ; compile error adr set
 4335                             476     
 4336                             477     ;       ===========================
 4337 00000028 D115               478             MOV.L   #_PVP_COM_ADR,R1                ;word
 4338 0000002A 2171               479             MOV.W   R7,@R1                          ;
 4339 0000002C D115               480             MOV.L   #_PVP_COM_ERR,R1                ;ｺﾝﾊﾟｲﾙ異常有り／無し
 4340 0000002E 2101               481             MOV.W   R0,@R1                          ;
 4341                             482     ;       ============================
 4342                             483     
 4343 00000030 D115               484             MOV.L   #_SEQ_CMP_ERR,R1                ;
 4344 00000032 2101               485             MOV.W   R0,@R1                          ; CMP OK = R0:0000 , CMP NG = R0:FFFF
 4345                             486     
 4346 00000034 2008               487             TST     R0,R0                           ;
 4347 00000036 890C               488             BT      _SEQ_RUN_CHG_MAIN020            ;
 4348                             489     
 4349                             490     ;       *** 異常終了時はSUB_END,M_RTSをつける ***
 4350 00000038 DC14               491             MOV.L   #_SEQ_END_CODE,R12              ;
 4351 0000003A 60C1               492             MOV.W   @R12,R0                         ; SUB_END CODE SET
 4352 0000003C 2D01               493             MOV.W   R0,@R13                         ;
 4353 0000003E D00D               494             MOV.L   #2,R0                           ;
 4354 00000040 3D0C               495             ADD     R0,R13                          ; ADDRESS INC
 4355 00000042 3C0C               496             ADD     R0,R12                          ; ADDRESS INC
 4356 00000044 60C1               497             MOV.W   @R12,R0                         ;
 4357 00000046 2D01               498             MOV.W   R0,@R13                         ; M_RTS SET
 4358 00000048 D00A               499             MOV.L   #2,R0                           ;
 4359 0000004A 3D0C               500             ADD     R0,R13                          ; ADDRESS INC
 4360 0000004C 3C0C               501             ADD     R0,R12                          ; ADDRESS INC
 4361 0000004E 60C1               502             MOV.W   @R12,R0                         ;
 4362 00000050 2D01               503             MOV.W   R0,@R13                         ; M_RTS SET
 4363                             504     
 4364 00000052                    505     _SEQ_RUN_CHG_MAIN020:
 4365                             506     
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    10
PROGRAM NAME =

 4366 00000052 222A               507             XOR     R2,R2                           ;
 4367                             508     
 4368 00000054 D10E               509             MOV.L   #_SEQ_ARG1_DATA,R1              ; ARG clear
 4369 00000056 2121               510             MOV.W   R2,@R1                          ;
 4370 00000058 D10E               511             MOV.L   #_SEQ_MRG1_DATA,R1              ; MRG clear
 4371 0000005A 2121               512             MOV.W   R2,@R1                          ;
 4372 0000005C 9204               513             MOV.W   #H'01,R2                        ; NRG 1 set
 4373 0000005E D10E               514             MOV.L   #_SEQ_NRG1_DATA,R1              ;
 4374 00000060 2121               515             MOV.W   R2,@R1                          ;
 4375                             516     
 4376                             517             SUB_END
 4377                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 4378 00000062 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 4379                             518             M_RTS
 4380 00000064 000B                   M           RTS                             ;RTSの後ろの
 4381 00000066 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 4382                             519     
 4383                             520     ;       ***********************************
 4384                             521     ;       ***     ｺﾝﾊﾟｲﾙｻﾌﾞﾙｰﾁﾝ           ***
 4385                             522     ;       ***********************************
 4386                             523     ;
 4387                                     ***** BEGIN-POOL *****
 4388 00000068 0001                       DATA FOR SOURCE-LINE 513
 4389 0000006A 0000                       ALIGNMENT CODE
 4390 0000006C 00000000                   DATA FOR SOURCE-LINE 462
 4391 00000070 00000000                   DATA FOR SOURCE-LINE 463
 4392 00000074 00000002                   DATA FOR SOURCE-LINE 466,494,499
 4393 00000078 00000000                   DATA FOR SOURCE-LINE 472
 4394 0000007C 00000000                   DATA FOR SOURCE-LINE 474
 4395 00000080 00000000                   DATA FOR SOURCE-LINE 478
 4396 00000084 00000000                   DATA FOR SOURCE-LINE 480
 4397 00000088 00000000                   DATA FOR SOURCE-LINE 484
 4398 0000008C 00000000                   DATA FOR SOURCE-LINE 491
 4399 00000090 00000000                   DATA FOR SOURCE-LINE 509
 4400 00000094 00000000                   DATA FOR SOURCE-LINE 511
 4401 00000098 00000000                   DATA FOR SOURCE-LINE 514
 4402                                     ***** END-POOL *****
 4403 0000009C                    524     _SEQ_RUN_CHG1:
 4404                             525             SUB_START
 4405 0000009C 4F22                   M           STS.L   PR,@-R15                ;[必要]
 4406                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 4407                             526     
 4408 0000009E DC1A               527             MOV.L   #_SEQ_COM1_TOP,R12              ; SEQUENCE COMMAND AREA TOP ADR.
 4409 000000A0 DD1A               528             MOV.L   #_SEQ_RUN1,R13                  ; RUN COMMAND STORE AREA TOP ADR.
 4410 000000A2 DE1B               529             MOV.L   #_SEQ_RUN1_END,R14              ; RUN COMMAND STORE AREA TOP ADR.
 4411                             530     
 4412 000000A4 D01B               531             MOV.L   #_SEQ_MAX_BYTE,R0               ; 最大命令数28BYTE
 4413 000000A6 3E08               532             SUB     R0,R14                          ; 最大命令数28BYTE
 4414 000000A8 277A               533             XOR     R7,R7                           ; 異常ｽﾃｯﾌﾟ検出ｶｳﾝﾀ
 4415                             534     
 4416 000000AA D61B               535             MOV.L   #_SEQ_COM1_END,R6               ; SEQUENCE COMMAND AREA END ADR.
 4417                             536     
 4418 000000AC                    537     _SEQ_RUN_CHG1_100:
 4419                             538             _WDT_CLR R0,R1,R2                       ;
 4420                                 M           DI_PUSH_SR_SH3  R0, R1
 4421 000000AC 0002                   M           STC     SR,R0                   ;
 4422 000000AE 9127                   M           MOV.W   #H'000000F0,R1          ;
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    11
PROGRAM NAME =

 4423 000000B0 201B                   M           OR      R1,R0           ;INT15
 4424 000000B2 4F03                   M           STC.L   SR,@-R15                        ;PUSH SR
 4425 000000B4 400E                   M           LDC     R0,SR                   ;割込禁止（15）
 4426                                 M   
 4427 000000B6 D119                   M           MOV.L   #_PDTRB,R1
 4428 000000B8 6011                   M           MOV.W   @R1,R0  ;R0:
 4429 000000BA 9222                   M           MOV.W   #BIT2,R2                ;
 4430 000000BC 202A                   M           XOR     R2,R0   ;
 4431 000000BE 2101                   M           MOV.W   R0,@R1  ;output
 4432                                 M   
 4433 000000C0 202A                   M           XOR     R2,R0   ;
 4434 000000C2 2101                   M           MOV.W   R0,@R1  ;output
 4435                                 M   
 4436 000000C4 202A                   M           XOR     R2,R0   ;
 4437 000000C6 2101                   M           MOV.W   R0,@R1  ;output
 4438                                 M   
 4439                                 M           EI_POP_SR_SH3                   ;
 4440 000000C8 4F07                   M           LDC.L   @R15+,SR                        ;POP SR
 4441                             539                                                     ; R12:ﾕ-ｻﾞ命令ｺｰﾄﾞ
 4442                             540                                                     ; R12:ｲﾝｸﾘﾒﾝﾄ
 4443                             541                                                     ; R13:SEQ-展開命令-WORK
 4444                             542                                                     ; R13:ｲﾝｸﾘﾒﾝﾄ
 4445 000000CA 3DE3               543             CMP/GE  R14,R13                         ; ﾜｰｸﾒﾓﾘｵｰﾊﾞﾁｪｯｸ IF OVER THEN ERR R13 >= R
                                          14
 4446 000000CC 8937               544             BT      _SEQ_RUN_CHG1_ERR_END           ; R13>=R14 JUMP
 4447                             545     
 4448 000000CE 3C63               546             CMP/GE  R6,R12                          ; ｼｰｹﾝｽｺｰﾄﾞ領域ﾁｪｯｸ IF OVER THEN ERR R12 >
                                          = R6
 4449 000000D0 8935               547             BT      _SEQ_RUN_CHG1_ERR_END           ; R13>=R14 JUMP
 4450                             548     
 4451 000000D2 6AC5               549             MOV.W   @R12+,R10                       ; OP CODE , BIT CODE LOAD
 4452 000000D4 68C5               550             MOV.W   @R12+,R8                        ; DATA CODE LOAD
 4453                             551     
 4454 000000D6 69A8               552             SWAP.B  R10,R9                          ;
 4455 000000D8 699C               553             EXTU.B  R9,R9                           ; OP CODE
 4456 000000DA 9013               554             MOV.W   #H'007F,R0                      ;
 4457 000000DC 2909               555             AND     R0,R9                           ;
 4458 000000DE 6AAC               556             EXTU.B  R10,R10                         ; BIT CODE
 4459                             557     
 4460 000000E0                    558     _SEQ_RUN_CHG1_300:
 4461                             559     ;                                               ; SEQUENCE COMMAND
 4462 000000E0 4908               560             SHLL2   R9                              ; OP CODE * 4
 4463 000000E2 D10F               561             MOV.L   #_SEQ_CHG_TBL0,R1               ;
 4464 000000E4 319C               562             ADD     R9,R1                           ;
 4465                             563     
 4466 000000E6 6983               564             MOV     R8,R9                           ;
 4467 000000E8 6998               565             SWAP.B  R9,R9                           ;
 4468 000000EA 688C               566             EXTU.B  R8,R8                           ; R8=ADR
 4469 000000EC 699C               567             EXTU.B  R9,R9                           ; R9=OFFSET
 4470                             568     
 4471 000000EE 6112               569             MOV.L   @R1,R1                          ; ADDRESS LOAD
 4472 000000F0 410B               570             JSR     @R1                             ; ｺﾏﾝﾄﾞから展開する
 4473 000000F2 0009               571             NOP                                     ; ER0,ER1,ER2,ER3,ER4 BREAK OK!
 4474                             572                                                     ; IF ERR THEN R0=FFFFH ELSE "0"
 4475                             573                                                     ; IF END THEN R0=0000H ELSE "0"
 4476                             574     
 4477 000000F4 8800               575             CMP/EQ  #_SQ_NML_COD,R0                 ;
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    12
PROGRAM NAME =

 4478 000000F6 8915               576             BT      _SEQ_RUN_CHG1_800               ; NO ERR THEN JUMP
 4479                             577     
 4480 000000F8 8855               578             CMP/EQ  #_SQ_NML_END,R0                 ;
 4481 000000FA 891D               579             BT      _SEQ_RUN_CHG1_END               ; NORMAL END
 4482                             580             M_BRA   _SEQ_RUN_CHG1_ERR_END           ; ERR[ｵﾍﾟｺｰﾄﾞ異常または
 4483 000000FC A01F                   M           BRA     _SEQ_RUN_CHG1_ERR_END
 4484 000000FE 0009                   M           NOP
 4485                             581                                                     ;    [ENDなし異常=内部RAMに収まらない]
 4486                             582     
 4487                                     ***** BEGIN-POOL *****
 4488 00000100 00F0                       DATA FOR SOURCE-LINE 538
 4489 00000102 0004                       DATA FOR SOURCE-LINE 538
 4490 00000104 007F                       DATA FOR SOURCE-LINE 554
 4491 00000106 0000                       ALIGNMENT CODE
 4492 00000108 00000000                   DATA FOR SOURCE-LINE 527
 4493 0000010C 00000000                   DATA FOR SOURCE-LINE 528
 4494 00000110 00000000                   DATA FOR SOURCE-LINE 529
 4495 00000114 0000001C                   DATA FOR SOURCE-LINE 531
 4496 00000118 00000000                   DATA FOR SOURCE-LINE 535
 4497 0000011C 00000000                   DATA FOR SOURCE-LINE 538
 4498 00000120 00000000                   DATA FOR SOURCE-LINE 561
 4499                                     ***** END-POOL *****
 4500 00000124                    583     _SEQ_RUN_CHG1_800:                              ; CODE SET END
 4501                             584     
 4502                             585     ;--- 2013-06-17 DEBUG機能追加
 4503 00000124 9106               586             MOV.W   #D'3460,R1                      ;
 4504 00000126 3710               587             CMP/EQ  R1,R7                           ;
 4505 00000128 8B00               588             BF      SEQ_RUN_CHG1_DBE                ;
 4506 0000012A 0009               589             NOP
 4507 0000012C                    590     SEQ_RUN_CHG1_DBE
 4508                             591     
 4509                             592     
 4510                             593     
 4511                             594     
 4512                             595     
 4513                             596     
 4514                             597     
 4515                             598     
 4516 0000012C 9103               599             MOV.W   #1,R1                           ;
 4517 0000012E 371C               600             ADD     R1,R7                           ; STEP COUNTER + 1
 4518                             601             M_BRA   _SEQ_RUN_CHG1_100               ; LOOP
 4519 00000130 AFBC                   M           BRA     _SEQ_RUN_CHG1_100
 4520 00000132 0009                   M           NOP
 4521                             602     
 4522                                     ***** BEGIN-POOL *****
 4523 00000134 0D84                       DATA FOR SOURCE-LINE 586
 4524 00000136 0001                       DATA FOR SOURCE-LINE 599
 4525                                     ***** END-POOL *****
 4526 00000138                    603     _SEQ_RUN_CHG1_END:
 4527 00000138 200A               604             XOR     R0,R0                           ; 0 --> R0 = NOMAL
 4528                             605                                                     ; ANS.R7 ROMｽﾃｯﾌﾟ数
 4529                             606             M_BRA   _SEQ_RUN_CHG1_EXIT              ;
 4530 0000013A A001                   M           BRA     _SEQ_RUN_CHG1_EXIT
 4531 0000013C 0009                   M           NOP
 4532                             607     
 4533 0000013E                    608     _SEQ_RUN_CHG1_ERR_END:
 4534 0000013E 9002               609             MOV.W   #_SQ_ERR_END,R0                 ; FFFF-->R0 = ERR
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    13
PROGRAM NAME =

 4535                             610                                                     ; ANS.R7 ROMｽﾃｯﾌﾟ数
 4536 00000140                    611     _SEQ_RUN_CHG1_EXIT:
 4537                             612             SUB_END
 4538                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 4539 00000140 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 4540                             613             M_RTS
 4541 00000142 000B                   M           RTS                             ;RTSの後ろの
 4542 00000144 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 4543                             614     ;
 4544                             615     
 4545                             616     ;       /****************************************************
 4546                             617     ;       /*****    R11 ＝　ＯＰ　ＣＯＤＥ                *****
 4547                             618     ;       /*****    R10 ＝　ＢＩＴ　ＣＯＤＥ              *****
 4548                             619     ;       /*****    R9  ＝　ＯＦＦＳＥＴ　ＣＯＤＥ        *****
 4549                             620     ;       /*****    R8  ＝　ＡＤＲ　ＣＯＤＥ              *****
 4550                             621     ;       /****************************************************
 4551                             622     ;
 4552                             623     ;       *******************************************
 4553                             624     ;       ***     NOP CODE CHANGE ROUTINE         ***
 4554                             625     ;       *******************************************
 4555                                     ***** BEGIN-POOL *****
 4556 00000146 FF00                       DATA FOR SOURCE-LINE 609
 4557                                     ***** END-POOL *****
 4558 00000148                    626             .ALIGN  4
 4559 00000148                    627     _NOP_CHG:                               ; 00000000B
 4560                             628             SUB_START
 4561 00000148 4F22                   M           STS.L   PR,@-R15                ;[必要]
 4562                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 4563                             629     
 4564 0000014A D105               630             MOV.L   #_NOP_CODE,R1           ; NOP CODE MOVE
 4565 0000014C 6011               631             MOV.W   @R1,R0                  ; *** NOP *** LOAD
 4566 0000014E 2D01               632             MOV.W   R0,@R13                 ;
 4567 00000150 D104               633             MOV.L   #2,R1                   ;
 4568 00000152 3D1C               634             ADD     R1,R13                  ; SDRAM ADRESS +2
 4569 00000154 9002               635             MOV.W   #_SQ_NML_COD,R0         ;
 4570                             636     
 4571                             637             SUB_END
 4572                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 4573 00000156 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 4574                             638             M_RTS                           ; NORMAL END
 4575 00000158 000B                   M           RTS                             ;RTSの後ろの
 4576 0000015A 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 4577                             639     ;
 4578                             640     
 4579                             641     ;       /****************************************************
 4580                             642     ;       /*****    R11 ＝　ＯＰ　ＣＯＤＥ                *****
 4581                             643     ;       /*****    R10 ＝　ＢＩＴ　ＣＯＤＥ              *****
 4582                             644     ;       /*****    R9  ＝　ＯＦＦＳＥＴ　ＣＯＤＥ        *****
 4583                             645     ;       /*****    R8  ＝　ＡＤＲ　ＣＯＤＥ              *****
 4584                             646     ;       /****************************************************
 4585                             647     ;       *******************************************
 4586                             648     ;       ***     Read CODE CHANGE ROUTINE        ***
 4587                             649     ;       *******************************************
 4588                             650     ;
 4589                                     ***** BEGIN-POOL *****
 4590 0000015C 0000                       DATA FOR SOURCE-LINE 635
 4591 0000015E 0000                       ALIGNMENT CODE
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    14
PROGRAM NAME =

 4592 00000160 00000000                   DATA FOR SOURCE-LINE 630
 4593 00000164 00000002                   DATA FOR SOURCE-LINE 633
 4594                                     ***** END-POOL *****
 4595 00000168                    651             .ALIGN  4
 4596 00000168                    652     _LD_CHG:                                        ; 00000010B
 4597                             653             SUB_START
 4598 00000168 4F22                   M           STS.L   PR,@-R15                ;[必要]
 4599                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 4600                             654     
 4601                             655     ;;;;;   _SEQ_LD_LDN_CMD _LD_CODE,_LD_CODE_END
 4602                             656     ;;;;;
 4603                             657     ;;;;;   SUB_END
 4604                             658     ;;;;;   M_RTS
 4605                             659     
 4606                             660     ;;;;;   消すのもったいないので動いたら削除する
 4607                             661     ;;;;;_LD_CHG:                                   ; 00000010B
 4608 0000016A D116               662             MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 4609 0000016C 3813               663             CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 4610 0000016E 893F               664             BT      _LD_C80                         ; IF ADR >= 127 THEN JUMP
 4611                             665     ;
 4612 00000170 D015               666             MOV.L   #(_LD_CODE_END-_LD_CODE),R0     ; 転送 BYTE長
 4613 00000172 D316               667             MOV.L   #_LD_CODE,R3                    ; Read CODE MOVE        (12 BYTE)
 4614                             668     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 4615 00000174 64D3               669             MOV     R13,R4                          ; SEQ ADR. KEEP
 4616                             670     
 4617                             671             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 4618 00000176 D116                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 4619 00000178 410B                   M           JSR     @R1                     ;
 4620 0000017A 0009                   M           NOP                                     ;
 4621                             672                                                     ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 4622                             673     ;       *** BIT SET ***
 4623 0000017C D115               674             MOV.L   #D'6,R1                         ; ﾒﾓﾘのところ
 4624 0000017E 341C               675             ADD     R1,R4                           ;
 4625 00000180 D115               676             MOV.L   #_SEQ_BBIT_CHG_TBL,R1           ;
 4626 00000182 4A00               677             SHLL    R10                             ; *2
 4627 00000184 31AC               678             ADD     R10,R1                          ;
 4628 00000186 6111               679             MOV.W   @R1,R1                          ;
 4629 00000188 6241               680             MOV.W   @R4,R2                          ; ﾒﾓﾘのところの命令LOAD
 4630 0000018A D014               681             MOV.L   #H'FFFFFF00,R0                  ;
 4631 0000018C 2209               682             AND     R0,R2                           ; BITﾃﾞｰﾀのところをｸﾘｱ
 4632 0000018E 221B               683             OR      R1,R2                           ;
 4633 00000190 2421               684             MOV.W   R2,@R4                          ; BIT SET
 4634                             685     
 4635                             686     ;       *** ADR SET ***
 4636 00000192 D113               687             MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 4637 00000194 341C               688             ADD     R1,R4                           ; 6+4=10
 4638 00000196 6241               689             MOV.W   @R4,R2                          ;
 4639 00000198 2209               690             AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 4640 0000019A 4800               691             SHLL    R8                              ; ADR*2
 4641 0000019C 228B               692             OR      R8,R2                           ;
 4642 0000019E 2421               693             MOV.W   R2,@R4                          ; RAM ADR SET
 4643                             694     
 4644                             695     ;       *** OFFSET SET ***
 4645 000001A0 D10F               696             MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 4646 000001A2 341C               697             ADD     R1,R4                           ; 10+4=14  MOV.B @(R0,R*),R0の命令 LOAD
 4647 000001A4 D00F               698             MOV.L   #_SEQ_MOVCMD_R0RD_TBL,R0        ;
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    15
PROGRAM NAME =

 4648 000001A6 4900               699             SHLL    R9                              ; OFFSET*2
 4649 000001A8 309C               700             ADD     R9,R0                           ;
 4650 000001AA 6001               701             MOV.W   @R0,R0                          ;
 4651 000001AC 2401               702             MOV.W   R0,@R4                          ; 命令置換え
 4652                             703     
 4653                             704     ;       *** SWAP命令はBIT7以下ならNOPに置換える ***
 4654 000001AE D00E               705             MOV.L   #_NOP_SWAP_TBL0,R0              ;
 4655 000001B0 30AC               706             ADD     R10,R0                          ;
 4656 000001B2 6001               707             MOV.W   @R0,R0                          ; NOP or SWAP命令LOAD
 4657                             708     
 4658 000001B4 D10D               709             MOV.L   #D'2,R1                         ; ﾒﾓﾘのところ
 4659 000001B6 341C               710             ADD     R1,R4                           ; 14+2=16  SWAP.Bの命令 LOAD
 4660 000001B8 2401               711             MOV.W   R0,@R4                          ; NOP or SWAP命令 WRITE
 4661                             712     
 4662 000001BA 9001               713             MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 4663                             714             M_BRA   _LD_CHG_EX                      ;
 4664 000001BC A019                   M           BRA     _LD_CHG_EX
 4665 000001BE 0009                   M           NOP
 4666                             715     ;
 4667                                     ***** BEGIN-POOL *****
 4668 000001C0 0000                       DATA FOR SOURCE-LINE 713
 4669 000001C2 0000                       ALIGNMENT CODE
 4670 000001C4 0000007F                   DATA FOR SOURCE-LINE 662
 4671 000001C8 00000000                   DATA FOR SOURCE-LINE 666
 4672 000001CC 00000000                   DATA FOR SOURCE-LINE 667
 4673 000001D0 00000000                   DATA FOR SOURCE-LINE 671
 4674 000001D4 00000006                   DATA FOR SOURCE-LINE 674
 4675 000001D8 00000000                   DATA FOR SOURCE-LINE 676
 4676 000001DC FFFFFF00                   DATA FOR SOURCE-LINE 681
 4677 000001E0 00000004                   DATA FOR SOURCE-LINE 687,696
 4678 000001E4 00000000                   DATA FOR SOURCE-LINE 698
 4679 000001E8 00000000                   DATA FOR SOURCE-LINE 705
 4680 000001EC 00000002                   DATA FOR SOURCE-LINE 709
 4681                                     ***** END-POOL *****
 4682 000001F0                    716     _LD_C80:
 4683 000001F0 9002               717             MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 4684                             718     
 4685 000001F2                    719     _LD_CHG_EX:
 4686                             720             SUB_END
 4687                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 4688 000001F2 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 4689                             721             M_RTS
 4690 000001F4 000B                   M           RTS                             ;RTSの後ろの
 4691 000001F6 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 4692                             722     
 4693                             723     ;       *******************************************
 4694                             724     ;       ***     Read Not CODE CHANGE ROUTINE    ***
 4695                             725     ;       *******************************************
 4696                                     ***** BEGIN-POOL *****
 4697 000001F8 FF00                       DATA FOR SOURCE-LINE 717
 4698                                     ***** END-POOL *****
 4699 000001FA                    726     _LDN_CHG:                                       ; 00000011B
 4700                             727             SUB_START
 4701 000001FA 4F22                   M           STS.L   PR,@-R15                ;[必要]
 4702                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 4703                             728     
 4704                             729             _SEQ_LD_LDN_CMD _LDN_CODE,_LDN_CODE_END
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    16
PROGRAM NAME =

 4705                                 M   
 4706 000001FC D115                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 4707 000001FE 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 4708 00000200 893E                   M           BT      _JMP_C8000000                           ; IF ADR >= 127 THEN JUMP
 4709                                 M   ;
 4710 00000202 D015                   M           MOV.L   #(_LDN_CODE_END-_LDN_CODE),R0           ; 転送 BYTE長
 4711 00000204 D315                   M           MOV.L   #_LDN_CODE,R3                   ; Read CODE MOVE        (12 BYTE)
 4712                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 4713 00000206 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 4714                                 M   
 4715                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 4716 00000208 D115                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 4717 0000020A 410B                   M           JSR     @R1                     ;
 4718 0000020C 0009                   M           NOP                                     ;
 4719                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 4720                                 M   ;       *** BIT SET ***
 4721 0000020E D115                   M           MOV.L   #D'6,R1                         ; ﾒﾓﾘのところ
 4722 00000210 341C                   M           ADD     R1,R4                           ;
 4723 00000212 D115                   M           MOV.L   #_SEQ_BBIT_CHG_TBL,R1           ;
 4724 00000214 4A00                   M           SHLL    R10                             ; *2
 4725 00000216 31AC                   M           ADD     R10,R1                          ;
 4726 00000218 6111                   M           MOV.W   @R1,R1                          ;
 4727 0000021A 6241                   M           MOV.W   @R4,R2                          ; ﾒﾓﾘのところの命令LOAD
 4728 0000021C D013                   M           MOV.L   #H'FFFFFF00,R0                  ;
 4729 0000021E 2209                   M           AND     R0,R2                           ; BITﾃﾞｰﾀのところをｸﾘｱ
 4730 00000220 221B                   M           OR      R1,R2                           ;
 4731 00000222 2421                   M           MOV.W   R2,@R4                          ; BIT SET
 4732                                 M   
 4733                                 M   ;       *** ADR SET ***
 4734 00000224 D112                   M           MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 4735 00000226 341C                   M           ADD     R1,R4                           ; 6+4=10
 4736 00000228 6241                   M           MOV.W   @R4,R2                          ;
 4737 0000022A 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 4738 0000022C 4800                   M           SHLL    R8                              ; ADR*2
 4739 0000022E 228B                   M           OR      R8,R2                           ;
 4740 00000230 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 4741                                 M   
 4742                                 M   ;       *** OFFSET SET ***
 4743 00000232 D10F                   M           MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 4744 00000234 341C                   M           ADD     R1,R4                           ; 10+4=14  MOV.B @(R0,R*),R0の命令 LOAD
 4745 00000236 D00F                   M           MOV.L   #_SEQ_MOVCMD_R0RD_TBL,R0        ;
 4746 00000238 4900                   M           SHLL    R9                              ; OFFSET*2
 4747 0000023A 309C                   M           ADD     R9,R0                           ;
 4748 0000023C 6001                   M           MOV.W   @R0,R0                          ;
 4749 0000023E 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 4750                                 M   
 4751                                 M   ;       *** SWAP命令はBIT7以下ならNOPに置換える ***
 4752 00000240 D00D                   M           MOV.L   #_NOP_SWAP_TBL0,R0              ;
 4753 00000242 30AC                   M           ADD     R10,R0                          ;
 4754 00000244 6001                   M           MOV.W   @R0,R0                          ; NOP or SWAP命令LOAD
 4755                                 M   
 4756 00000246 D10D                   M           MOV.L   #D'2,R1                         ; ﾒﾓﾘのところ
 4757 00000248 341C                   M           ADD     R1,R4                           ; 14+2=16  SWAP.Bの命令 LOAD
 4758 0000024A 2401                   M           MOV.W   R0,@R4                          ; NOP or SWAP命令 WRITE
 4759                                 M   
 4760 0000024C 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    17
PROGRAM NAME =

 4761                                 M           M_BRA   _JMP_EX00000                    ;
 4762 0000024E A018                   M           BRA     _JMP_EX00000
 4763 00000250 0009                   M           NOP
 4764                                 M   ;
 4765                                 M   ***** BEGIN-POOL *****
 4766 00000252 0000                   M   DATA FOR SOURCE-LINE 729
 4767 00000254 0000007F               M   DATA FOR SOURCE-LINE 729
 4768 00000258 00000000               M   DATA FOR SOURCE-LINE 729
 4769 0000025C 00000000               M   DATA FOR SOURCE-LINE 729
 4770 00000260 00000000               M   DATA FOR SOURCE-LINE 729
 4771 00000264 00000006               M   DATA FOR SOURCE-LINE 729
 4772 00000268 00000000               M   DATA FOR SOURCE-LINE 729
 4773 0000026C FFFFFF00               M   DATA FOR SOURCE-LINE 729
 4774 00000270 00000004               M   DATA FOR SOURCE-LINE 729,729
 4775 00000274 00000000               M   DATA FOR SOURCE-LINE 729
 4776 00000278 00000000               M   DATA FOR SOURCE-LINE 729
 4777 0000027C 00000002               M   DATA FOR SOURCE-LINE 729
 4778                                 M   ***** END-POOL *****
 4779 00000280                        M   _JMP_C8000000:
 4780 00000280 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 4781                                 M   
 4782 00000282                        M   _JMP_EX00000:
 4783                             730     
 4784                             731             SUB_END
 4785                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 4786 00000282 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 4787                             732             M_RTS
 4788 00000284 000B                   M           RTS                             ;RTSの後ろの
 4789 00000286 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 4790                             733     
 4791                             734     ;       *******************************************
 4792                             735     ;       *****   And CODE CHANGE ROUTINE         ***
 4793                             736     ;       *******************************************
 4794                                     ***** BEGIN-POOL *****
 4795 00000288 FF00                       DATA FOR SOURCE-LINE 729
 4796                                     ***** END-POOL *****
 4797 0000028A                    737     _AND_CHG:                                       ; 00000100B     4
 4798                             738             SUB_START
 4799 0000028A 4F22                   M           STS.L   PR,@-R15                ;[必要]
 4800                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 4801                             739     
 4802                             740             _SEQ_A_AN_O_ON_CMD      _AND_CODE,_AND_CODE_END
 4803                                 M   
 4804                                 M   ;_AND_CHG:                                      ; 00000100B     4
 4805                                 M   ;_ANDN_CHG:                                     ; 00000101B     5
 4806                                 M   ;_OR_CHG:                                       ; 00000110B     6
 4807                                 M   ;_ORN_CHG:                                      ; 00000111B     7
 4808 0000028C D114                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 4809 0000028E 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 4810 00000290 893A                   M           BT      _JMP_C8000001                   ; IF ADR >= 127 THEN JUMP
 4811                                 M   ;
 4812 00000292 D014                   M           MOV.L   #(_AND_CODE_END-_AND_CODE),R0           ; 転送 BYTE長
 4813 00000294 D314                   M           MOV.L   #_AND_CODE,R3                   ; Read CODE MOVE        (12 BYTE)
 4814                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 4815 00000296 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 4816                                 M   
 4817                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    18
PROGRAM NAME =

 4818 00000298 D114                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 4819 0000029A 410B                   M           JSR     @R1                     ;
 4820 0000029C 0009                   M           NOP                                     ;
 4821                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 4822                                 M   ;       *** BIT SET ***
 4823 0000029E D114                   M           MOV.L   #_SEQ_BBIT_CHG_TBL,R1           ; ﾒﾓﾘのところ +0
 4824 000002A0 4A00                   M           SHLL    R10                             ; *2
 4825 000002A2 31AC                   M           ADD     R10,R1                          ;
 4826 000002A4 6111                   M           MOV.W   @R1,R1                          ; BIT LOAD
 4827 000002A6 6241                   M           MOV.W   @R4,R2                          ; ﾒﾓﾘのところの命令LOAD
 4828 000002A8 D012                   M           MOV.L   #H'FFFFFF00,R0                  ;
 4829 000002AA 2209                   M           AND     R0,R2                           ; BITﾃﾞｰﾀのところをｸﾘｱ
 4830 000002AC 221B                   M           OR      R1,R2                           ;
 4831 000002AE 2421                   M           MOV.W   R2,@R4                          ; BIT SET
 4832                                 M   
 4833                                 M   ;       *** ADR SET ***
 4834 000002B0 D111                   M           MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 4835 000002B2 341C                   M           ADD     R1,R4                           ; 0+4=4
 4836 000002B4 6241                   M           MOV.W   @R4,R2                          ;
 4837 000002B6 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 4838 000002B8 4800                   M           SHLL    R8                              ; ADR*2
 4839 000002BA 228B                   M           OR      R8,R2                           ;
 4840 000002BC 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 4841                                 M   
 4842                                 M   ;       *** OFFSET SET ***
 4843 000002BE D10E                   M           MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 4844 000002C0 341C                   M           ADD     R1,R4                           ; 4+4=8  MOV.B @(R0,R*),R0の命令 LOAD
 4845 000002C2 D00E                   M           MOV.L   #_SEQ_MOVCMD_R0RD_TBL,R0        ;
 4846 000002C4 4900                   M           SHLL    R9                              ; OFFSET*2
 4847 000002C6 309C                   M           ADD     R9,R0                           ;
 4848 000002C8 6001                   M           MOV.W   @R0,R0                          ;
 4849 000002CA 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 4850                                 M   
 4851                                 M   ;       *** SWAP命令はBIT7以下ならNOPに置換える ***
 4852 000002CC D00C                   M           MOV.L   #_NOP_SWAP_TBL0,R0              ;
 4853 000002CE 30AC                   M           ADD     R10,R0                          ;
 4854 000002D0 6001                   M           MOV.W   @R0,R0                          ; NOP or SWAP命令LOAD
 4855                                 M   
 4856 000002D2 D10C                   M           MOV.L   #D'2,R1                         ; ﾒﾓﾘのところ
 4857 000002D4 341C                   M           ADD     R1,R4                           ; 8+2=10  SWAP.Bの命令 LOAD
 4858 000002D6 2401                   M           MOV.W   R0,@R4                          ; NOP or SWAP命令 WRITE
 4859                                 M   
 4860 000002D8 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 4861                                 M           M_BRA   _JMP_EX00001                    ;
 4862 000002DA A016                   M           BRA     _JMP_EX00001
 4863 000002DC 0009                   M           NOP
 4864                                 M   ;
 4865                                 M   ***** BEGIN-POOL *****
 4866 000002DE 0000                   M   DATA FOR SOURCE-LINE 740
 4867 000002E0 0000007F               M   DATA FOR SOURCE-LINE 740
 4868 000002E4 00000000               M   DATA FOR SOURCE-LINE 740
 4869 000002E8 00000000               M   DATA FOR SOURCE-LINE 740
 4870 000002EC 00000000               M   DATA FOR SOURCE-LINE 740
 4871 000002F0 00000000               M   DATA FOR SOURCE-LINE 740
 4872 000002F4 FFFFFF00               M   DATA FOR SOURCE-LINE 740
 4873 000002F8 00000004               M   DATA FOR SOURCE-LINE 740,740
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    19
PROGRAM NAME =

 4874 000002FC 00000000               M   DATA FOR SOURCE-LINE 740
 4875 00000300 00000000               M   DATA FOR SOURCE-LINE 740
 4876 00000304 00000002               M   DATA FOR SOURCE-LINE 740
 4877                                 M   ***** END-POOL *****
 4878 00000308                        M   _JMP_C8000001:
 4879 00000308 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 4880                                 M   
 4881 0000030A                        M   _JMP_EX00001:
 4882                             741     
 4883                             742             SUB_END
 4884                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 4885 0000030A 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 4886                             743             M_RTS
 4887 0000030C 000B                   M           RTS                             ;RTSの後ろの
 4888 0000030E 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 4889                             744     
 4890                             745     
 4891                             746     ;       *******************************************
 4892                             747     ;       *****   And Not CODE CHANGE ROUTINE     ***
 4893                             748     ;       *******************************************
 4894                                     ***** BEGIN-POOL *****
 4895 00000310 FF00                       DATA FOR SOURCE-LINE 740
 4896                                     ***** END-POOL *****
 4897 00000312                    749     _ANDN_CHG:                                      ; 00000101B     5
 4898                             750             SUB_START
 4899 00000312 4F22                   M           STS.L   PR,@-R15                ;[必要]
 4900                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 4901                             751     
 4902                             752             _SEQ_A_AN_O_ON_CMD      _ANDN_CODE,_ANDN_CODE_END
 4903                                 M   
 4904                                 M   ;_AND_CHG:                                      ; 00000100B     4
 4905                                 M   ;_ANDN_CHG:                                     ; 00000101B     5
 4906                                 M   ;_OR_CHG:                                       ; 00000110B     6
 4907                                 M   ;_ORN_CHG:                                      ; 00000111B     7
 4908 00000314 D114                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 4909 00000316 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 4910 00000318 893A                   M           BT      _JMP_C8000002                   ; IF ADR >= 127 THEN JUMP
 4911                                 M   ;
 4912 0000031A D014                   M           MOV.L   #(_ANDN_CODE_END-_ANDN_CODE),R0         ; 転送 BYTE長
 4913 0000031C D314                   M           MOV.L   #_ANDN_CODE,R3                  ; Read CODE MOVE        (12 BYTE)
 4914                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 4915 0000031E 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 4916                                 M   
 4917                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 4918 00000320 D114                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 4919 00000322 410B                   M           JSR     @R1                     ;
 4920 00000324 0009                   M           NOP                                     ;
 4921                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 4922                                 M   ;       *** BIT SET ***
 4923 00000326 D114                   M           MOV.L   #_SEQ_BBIT_CHG_TBL,R1           ; ﾒﾓﾘのところ +0
 4924 00000328 4A00                   M           SHLL    R10                             ; *2
 4925 0000032A 31AC                   M           ADD     R10,R1                          ;
 4926 0000032C 6111                   M           MOV.W   @R1,R1                          ; BIT LOAD
 4927 0000032E 6241                   M           MOV.W   @R4,R2                          ; ﾒﾓﾘのところの命令LOAD
 4928 00000330 D012                   M           MOV.L   #H'FFFFFF00,R0                  ;
 4929 00000332 2209                   M           AND     R0,R2                           ; BITﾃﾞｰﾀのところをｸﾘｱ
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    20
PROGRAM NAME =

 4930 00000334 221B                   M           OR      R1,R2                           ;
 4931 00000336 2421                   M           MOV.W   R2,@R4                          ; BIT SET
 4932                                 M   
 4933                                 M   ;       *** ADR SET ***
 4934 00000338 D111                   M           MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 4935 0000033A 341C                   M           ADD     R1,R4                           ; 0+4=4
 4936 0000033C 6241                   M           MOV.W   @R4,R2                          ;
 4937 0000033E 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 4938 00000340 4800                   M           SHLL    R8                              ; ADR*2
 4939 00000342 228B                   M           OR      R8,R2                           ;
 4940 00000344 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 4941                                 M   
 4942                                 M   ;       *** OFFSET SET ***
 4943 00000346 D10E                   M           MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 4944 00000348 341C                   M           ADD     R1,R4                           ; 4+4=8  MOV.B @(R0,R*),R0の命令 LOAD
 4945 0000034A D00E                   M           MOV.L   #_SEQ_MOVCMD_R0RD_TBL,R0        ;
 4946 0000034C 4900                   M           SHLL    R9                              ; OFFSET*2
 4947 0000034E 309C                   M           ADD     R9,R0                           ;
 4948 00000350 6001                   M           MOV.W   @R0,R0                          ;
 4949 00000352 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 4950                                 M   
 4951                                 M   ;       *** SWAP命令はBIT7以下ならNOPに置換える ***
 4952 00000354 D00C                   M           MOV.L   #_NOP_SWAP_TBL0,R0              ;
 4953 00000356 30AC                   M           ADD     R10,R0                          ;
 4954 00000358 6001                   M           MOV.W   @R0,R0                          ; NOP or SWAP命令LOAD
 4955                                 M   
 4956 0000035A D10C                   M           MOV.L   #D'2,R1                         ; ﾒﾓﾘのところ
 4957 0000035C 341C                   M           ADD     R1,R4                           ; 8+2=10  SWAP.Bの命令 LOAD
 4958 0000035E 2401                   M           MOV.W   R0,@R4                          ; NOP or SWAP命令 WRITE
 4959                                 M   
 4960 00000360 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 4961                                 M           M_BRA   _JMP_EX00002                    ;
 4962 00000362 A016                   M           BRA     _JMP_EX00002
 4963 00000364 0009                   M           NOP
 4964                                 M   ;
 4965                                 M   ***** BEGIN-POOL *****
 4966 00000366 0000                   M   DATA FOR SOURCE-LINE 752
 4967 00000368 0000007F               M   DATA FOR SOURCE-LINE 752
 4968 0000036C 00000000               M   DATA FOR SOURCE-LINE 752
 4969 00000370 00000000               M   DATA FOR SOURCE-LINE 752
 4970 00000374 00000000               M   DATA FOR SOURCE-LINE 752
 4971 00000378 00000000               M   DATA FOR SOURCE-LINE 752
 4972 0000037C FFFFFF00               M   DATA FOR SOURCE-LINE 752
 4973 00000380 00000004               M   DATA FOR SOURCE-LINE 752,752
 4974 00000384 00000000               M   DATA FOR SOURCE-LINE 752
 4975 00000388 00000000               M   DATA FOR SOURCE-LINE 752
 4976 0000038C 00000002               M   DATA FOR SOURCE-LINE 752
 4977                                 M   ***** END-POOL *****
 4978 00000390                        M   _JMP_C8000002:
 4979 00000390 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 4980                                 M   
 4981 00000392                        M   _JMP_EX00002:
 4982                             753     
 4983                             754             SUB_END
 4984                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 4985 00000392 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 4986                             755             M_RTS
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    21
PROGRAM NAME =

 4987 00000394 000B                   M           RTS                             ;RTSの後ろの
 4988 00000396 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 4989                             756     
 4990                             757     ;       *******************************************
 4991                             758     ;       *****   Or CODE CHANGE ROUTINE          ***
 4992                             759     ;       *******************************************
 4993                                     ***** BEGIN-POOL *****
 4994 00000398 FF00                       DATA FOR SOURCE-LINE 752
 4995                                     ***** END-POOL *****
 4996 0000039A                    760     _OR_CHG:                                        ; 00000110B     6
 4997                             761             SUB_START
 4998 0000039A 4F22                   M           STS.L   PR,@-R15                ;[必要]
 4999                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 5000                             762     
 5001                             763             _SEQ_A_AN_O_ON_CMD      _OR_CODE,_OR_CODE_END
 5002                                 M   
 5003                                 M   ;_AND_CHG:                                      ; 00000100B     4
 5004                                 M   ;_ANDN_CHG:                                     ; 00000101B     5
 5005                                 M   ;_OR_CHG:                                       ; 00000110B     6
 5006                                 M   ;_ORN_CHG:                                      ; 00000111B     7
 5007 0000039C D114                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 5008 0000039E 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 5009 000003A0 893A                   M           BT      _JMP_C8000003                   ; IF ADR >= 127 THEN JUMP
 5010                                 M   ;
 5011 000003A2 D014                   M           MOV.L   #(_OR_CODE_END-_OR_CODE),R0             ; 転送 BYTE長
 5012 000003A4 D314                   M           MOV.L   #_OR_CODE,R3                    ; Read CODE MOVE        (12 BYTE)
 5013                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 5014 000003A6 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 5015                                 M   
 5016                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 5017 000003A8 D114                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 5018 000003AA 410B                   M           JSR     @R1                     ;
 5019 000003AC 0009                   M           NOP                                     ;
 5020                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 5021                                 M   ;       *** BIT SET ***
 5022 000003AE D114                   M           MOV.L   #_SEQ_BBIT_CHG_TBL,R1           ; ﾒﾓﾘのところ +0
 5023 000003B0 4A00                   M           SHLL    R10                             ; *2
 5024 000003B2 31AC                   M           ADD     R10,R1                          ;
 5025 000003B4 6111                   M           MOV.W   @R1,R1                          ; BIT LOAD
 5026 000003B6 6241                   M           MOV.W   @R4,R2                          ; ﾒﾓﾘのところの命令LOAD
 5027 000003B8 D012                   M           MOV.L   #H'FFFFFF00,R0                  ;
 5028 000003BA 2209                   M           AND     R0,R2                           ; BITﾃﾞｰﾀのところをｸﾘｱ
 5029 000003BC 221B                   M           OR      R1,R2                           ;
 5030 000003BE 2421                   M           MOV.W   R2,@R4                          ; BIT SET
 5031                                 M   
 5032                                 M   ;       *** ADR SET ***
 5033 000003C0 D111                   M           MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 5034 000003C2 341C                   M           ADD     R1,R4                           ; 0+4=4
 5035 000003C4 6241                   M           MOV.W   @R4,R2                          ;
 5036 000003C6 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 5037 000003C8 4800                   M           SHLL    R8                              ; ADR*2
 5038 000003CA 228B                   M           OR      R8,R2                           ;
 5039 000003CC 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 5040                                 M   
 5041                                 M   ;       *** OFFSET SET ***
 5042 000003CE D10E                   M           MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    22
PROGRAM NAME =

 5043 000003D0 341C                   M           ADD     R1,R4                           ; 4+4=8  MOV.B @(R0,R*),R0の命令 LOAD
 5044 000003D2 D00E                   M           MOV.L   #_SEQ_MOVCMD_R0RD_TBL,R0        ;
 5045 000003D4 4900                   M           SHLL    R9                              ; OFFSET*2
 5046 000003D6 309C                   M           ADD     R9,R0                           ;
 5047 000003D8 6001                   M           MOV.W   @R0,R0                          ;
 5048 000003DA 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 5049                                 M   
 5050                                 M   ;       *** SWAP命令はBIT7以下ならNOPに置換える ***
 5051 000003DC D00C                   M           MOV.L   #_NOP_SWAP_TBL0,R0              ;
 5052 000003DE 30AC                   M           ADD     R10,R0                          ;
 5053 000003E0 6001                   M           MOV.W   @R0,R0                          ; NOP or SWAP命令LOAD
 5054                                 M   
 5055 000003E2 D10C                   M           MOV.L   #D'2,R1                         ; ﾒﾓﾘのところ
 5056 000003E4 341C                   M           ADD     R1,R4                           ; 8+2=10  SWAP.Bの命令 LOAD
 5057 000003E6 2401                   M           MOV.W   R0,@R4                          ; NOP or SWAP命令 WRITE
 5058                                 M   
 5059 000003E8 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 5060                                 M           M_BRA   _JMP_EX00003                    ;
 5061 000003EA A016                   M           BRA     _JMP_EX00003
 5062 000003EC 0009                   M           NOP
 5063                                 M   ;
 5064                                 M   ***** BEGIN-POOL *****
 5065 000003EE 0000                   M   DATA FOR SOURCE-LINE 763
 5066 000003F0 0000007F               M   DATA FOR SOURCE-LINE 763
 5067 000003F4 00000000               M   DATA FOR SOURCE-LINE 763
 5068 000003F8 00000000               M   DATA FOR SOURCE-LINE 763
 5069 000003FC 00000000               M   DATA FOR SOURCE-LINE 763
 5070 00000400 00000000               M   DATA FOR SOURCE-LINE 763
 5071 00000404 FFFFFF00               M   DATA FOR SOURCE-LINE 763
 5072 00000408 00000004               M   DATA FOR SOURCE-LINE 763,763
 5073 0000040C 00000000               M   DATA FOR SOURCE-LINE 763
 5074 00000410 00000000               M   DATA FOR SOURCE-LINE 763
 5075 00000414 00000002               M   DATA FOR SOURCE-LINE 763
 5076                                 M   ***** END-POOL *****
 5077 00000418                        M   _JMP_C8000003:
 5078 00000418 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 5079                                 M   
 5080 0000041A                        M   _JMP_EX00003:
 5081                             764     
 5082                             765             SUB_END
 5083                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 5084 0000041A 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 5085                             766             M_RTS
 5086 0000041C 000B                   M           RTS                             ;RTSの後ろの
 5087 0000041E 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 5088                             767     
 5089                             768     ;       *******************************************
 5090                             769     ;       *****   Or Not CODE CHANGE ROUTINE      ***
 5091                             770     ;       *******************************************
 5092                                     ***** BEGIN-POOL *****
 5093 00000420 FF00                       DATA FOR SOURCE-LINE 763
 5094                                     ***** END-POOL *****
 5095 00000422                    771     _ORN_CHG:                                       ; 00000111B     7
 5096                             772             SUB_START
 5097 00000422 4F22                   M           STS.L   PR,@-R15                ;[必要]
 5098                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 5099                             773     
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    23
PROGRAM NAME =

 5100                             774             _SEQ_A_AN_O_ON_CMD      _ORN_CODE,_ORN_CODE_END
 5101                                 M   
 5102                                 M   ;_AND_CHG:                                      ; 00000100B     4
 5103                                 M   ;_ANDN_CHG:                                     ; 00000101B     5
 5104                                 M   ;_OR_CHG:                                       ; 00000110B     6
 5105                                 M   ;_ORN_CHG:                                      ; 00000111B     7
 5106 00000424 D114                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 5107 00000426 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 5108 00000428 893A                   M           BT      _JMP_C8000004                   ; IF ADR >= 127 THEN JUMP
 5109                                 M   ;
 5110 0000042A D014                   M           MOV.L   #(_ORN_CODE_END-_ORN_CODE),R0           ; 転送 BYTE長
 5111 0000042C D314                   M           MOV.L   #_ORN_CODE,R3                   ; Read CODE MOVE        (12 BYTE)
 5112                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 5113 0000042E 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 5114                                 M   
 5115                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 5116 00000430 D114                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 5117 00000432 410B                   M           JSR     @R1                     ;
 5118 00000434 0009                   M           NOP                                     ;
 5119                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 5120                                 M   ;       *** BIT SET ***
 5121 00000436 D114                   M           MOV.L   #_SEQ_BBIT_CHG_TBL,R1           ; ﾒﾓﾘのところ +0
 5122 00000438 4A00                   M           SHLL    R10                             ; *2
 5123 0000043A 31AC                   M           ADD     R10,R1                          ;
 5124 0000043C 6111                   M           MOV.W   @R1,R1                          ; BIT LOAD
 5125 0000043E 6241                   M           MOV.W   @R4,R2                          ; ﾒﾓﾘのところの命令LOAD
 5126 00000440 D012                   M           MOV.L   #H'FFFFFF00,R0                  ;
 5127 00000442 2209                   M           AND     R0,R2                           ; BITﾃﾞｰﾀのところをｸﾘｱ
 5128 00000444 221B                   M           OR      R1,R2                           ;
 5129 00000446 2421                   M           MOV.W   R2,@R4                          ; BIT SET
 5130                                 M   
 5131                                 M   ;       *** ADR SET ***
 5132 00000448 D111                   M           MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 5133 0000044A 341C                   M           ADD     R1,R4                           ; 0+4=4
 5134 0000044C 6241                   M           MOV.W   @R4,R2                          ;
 5135 0000044E 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 5136 00000450 4800                   M           SHLL    R8                              ; ADR*2
 5137 00000452 228B                   M           OR      R8,R2                           ;
 5138 00000454 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 5139                                 M   
 5140                                 M   ;       *** OFFSET SET ***
 5141 00000456 D10E                   M           MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 5142 00000458 341C                   M           ADD     R1,R4                           ; 4+4=8  MOV.B @(R0,R*),R0の命令 LOAD
 5143 0000045A D00E                   M           MOV.L   #_SEQ_MOVCMD_R0RD_TBL,R0        ;
 5144 0000045C 4900                   M           SHLL    R9                              ; OFFSET*2
 5145 0000045E 309C                   M           ADD     R9,R0                           ;
 5146 00000460 6001                   M           MOV.W   @R0,R0                          ;
 5147 00000462 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 5148                                 M   
 5149                                 M   ;       *** SWAP命令はBIT7以下ならNOPに置換える ***
 5150 00000464 D00C                   M           MOV.L   #_NOP_SWAP_TBL0,R0              ;
 5151 00000466 30AC                   M           ADD     R10,R0                          ;
 5152 00000468 6001                   M           MOV.W   @R0,R0                          ; NOP or SWAP命令LOAD
 5153                                 M   
 5154 0000046A D10C                   M           MOV.L   #D'2,R1                         ; ﾒﾓﾘのところ
 5155 0000046C 341C                   M           ADD     R1,R4                           ; 8+2=10  SWAP.Bの命令 LOAD
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    24
PROGRAM NAME =

 5156 0000046E 2401                   M           MOV.W   R0,@R4                          ; NOP or SWAP命令 WRITE
 5157                                 M   
 5158 00000470 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 5159                                 M           M_BRA   _JMP_EX00004                    ;
 5160 00000472 A016                   M           BRA     _JMP_EX00004
 5161 00000474 0009                   M           NOP
 5162                                 M   ;
 5163                                 M   ***** BEGIN-POOL *****
 5164 00000476 0000                   M   DATA FOR SOURCE-LINE 774
 5165 00000478 0000007F               M   DATA FOR SOURCE-LINE 774
 5166 0000047C 00000000               M   DATA FOR SOURCE-LINE 774
 5167 00000480 00000000               M   DATA FOR SOURCE-LINE 774
 5168 00000484 00000000               M   DATA FOR SOURCE-LINE 774
 5169 00000488 00000000               M   DATA FOR SOURCE-LINE 774
 5170 0000048C FFFFFF00               M   DATA FOR SOURCE-LINE 774
 5171 00000490 00000004               M   DATA FOR SOURCE-LINE 774,774
 5172 00000494 00000000               M   DATA FOR SOURCE-LINE 774
 5173 00000498 00000000               M   DATA FOR SOURCE-LINE 774
 5174 0000049C 00000002               M   DATA FOR SOURCE-LINE 774
 5175                                 M   ***** END-POOL *****
 5176 000004A0                        M   _JMP_C8000004:
 5177 000004A0 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 5178                                 M   
 5179 000004A2                        M   _JMP_EX00004:
 5180                             775     
 5181                             776             SUB_END
 5182                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 5183 000004A2 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 5184                             777             M_RTS
 5185 000004A4 000B                   M           RTS                             ;RTSの後ろの
 5186 000004A6 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 5187                             778     
 5188                             779     ;;;;;   消すのもったいないので動いたら削除する
 5189                             780     ;;;;;_ORN_CHG:                                  ; 00000111B     7
 5190                             781             SUB_START
 5191                                 M   ***** BEGIN-POOL *****
 5192 000004A8 FF00                   M   DATA FOR SOURCE-LINE 774
 5193                                 M   ***** END-POOL *****
 5194 000004AA 4F22                   M           STS.L   PR,@-R15                ;[必要]
 5195                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 5196                             782     
 5197 000004AC D114               783             MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 5198 000004AE 3813               784             CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 5199 000004B0 893A               785             BT      _ORN_C80                        ; IF ADR >= 127 THEN JUMP
 5200                             786     ;
 5201 000004B2 D014               787             MOV.L   #(_ORN_CODE_END-_ORN_CODE),R0   ; 転送 BYTE長
 5202 000004B4 D314               788             MOV.L   #_ORN_CODE,R3                   ; Read CODE MOVE        (12 BYTE)
 5203                             789     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 5204 000004B6 64D3               790             MOV     R13,R4                          ; SEQ ADR. KEEP
 5205                             791     
 5206                             792             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 5207 000004B8 D114                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 5208 000004BA 410B                   M           JSR     @R1                     ;
 5209 000004BC 0009                   M           NOP                                     ;
 5210                             793                                                     ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 5211                             794     ;       *** BIT SET ***
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    25
PROGRAM NAME =

 5212 000004BE D114               795             MOV.L   #_SEQ_BBIT_CHG_TBL,R1           ; ﾒﾓﾘのところ +0
 5213 000004C0 4A00               796             SHLL    R10                             ; *2
 5214 000004C2 31AC               797             ADD     R10,R1                          ;
 5215 000004C4 6111               798             MOV.W   @R1,R1                          ; BIT LOAD
 5216 000004C6 6241               799             MOV.W   @R4,R2                          ; ﾒﾓﾘのところの命令LOAD
 5217 000004C8 D012               800             MOV.L   #H'FFFFFF00,R0                  ;
 5218 000004CA 2209               801             AND     R0,R2                           ; BITﾃﾞｰﾀのところをｸﾘｱ
 5219 000004CC 221B               802             OR      R1,R2                           ;
 5220 000004CE 2421               803             MOV.W   R2,@R4                          ; BIT SET
 5221                             804     
 5222                             805     ;       *** ADR SET ***
 5223 000004D0 D111               806             MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 5224 000004D2 341C               807             ADD     R1,R4                           ; 0+4=4
 5225 000004D4 6241               808             MOV.W   @R4,R2                          ;
 5226 000004D6 2209               809             AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 5227 000004D8 4800               810             SHLL    R8                              ; ADR*2
 5228 000004DA 228B               811             OR      R8,R2                           ;
 5229 000004DC 2421               812             MOV.W   R2,@R4                          ; RAM ADR SET
 5230                             813     
 5231                             814     ;       *** OFFSET SET ***
 5232 000004DE D10E               815             MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 5233 000004E0 341C               816             ADD     R1,R4                           ; 4+4=8  MOV.B @(R0,R*),R0の命令 LOAD
 5234 000004E2 D00E               817             MOV.L   #_SEQ_MOVCMD_R0RD_TBL,R0        ;
 5235 000004E4 4900               818             SHLL    R9                              ; OFFSET*2
 5236 000004E6 309C               819             ADD     R9,R0                           ;
 5237 000004E8 6001               820             MOV.W   @R0,R0                          ;
 5238 000004EA 2401               821             MOV.W   R0,@R4                          ; 命令置換え
 5239                             822     
 5240                             823     ;       *** SWAP命令はBIT7以下ならNOPに置換える ***
 5241 000004EC D00C               824             MOV.L   #_NOP_SWAP_TBL0,R0              ;
 5242 000004EE 30AC               825             ADD     R10,R0                          ;
 5243 000004F0 6001               826             MOV.W   @R0,R0                          ; NOP or SWAP命令LOAD
 5244                             827     
 5245 000004F2 D10C               828             MOV.L   #D'2,R1                         ; ﾒﾓﾘのところ
 5246 000004F4 341C               829             ADD     R1,R4                           ; 8+2=10  SWAP.Bの命令 LOAD
 5247 000004F6 2401               830             MOV.W   R0,@R4                          ; NOP or SWAP命令 WRITE
 5248                             831     
 5249 000004F8 9001               832             MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 5250                             833             M_BRA   _ORN_CHG_EX                     ;
 5251 000004FA A016                   M           BRA     _ORN_CHG_EX
 5252 000004FC 0009                   M           NOP
 5253                             834     ;
 5254                                     ***** BEGIN-POOL *****
 5255 000004FE 0000                       DATA FOR SOURCE-LINE 832
 5256 00000500 0000007F                   DATA FOR SOURCE-LINE 783
 5257 00000504 00000000                   DATA FOR SOURCE-LINE 787
 5258 00000508 00000000                   DATA FOR SOURCE-LINE 788
 5259 0000050C 00000000                   DATA FOR SOURCE-LINE 792
 5260 00000510 00000000                   DATA FOR SOURCE-LINE 795
 5261 00000514 FFFFFF00                   DATA FOR SOURCE-LINE 800
 5262 00000518 00000004                   DATA FOR SOURCE-LINE 806,815
 5263 0000051C 00000000                   DATA FOR SOURCE-LINE 817
 5264 00000520 00000000                   DATA FOR SOURCE-LINE 824
 5265 00000524 00000002                   DATA FOR SOURCE-LINE 828
 5266                                     ***** END-POOL *****
 5267 00000528                    835     _ORN_C80:
 5268 00000528 9002               836             MOV.W   #_SQ_ERR_END,R0                 ; ERR END
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    26
PROGRAM NAME =

 5269                             837     
 5270 0000052A                    838     _ORN_CHG_EX:
 5271                             839             SUB_END
 5272                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 5273 0000052A 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 5274                             840             M_RTS
 5275 0000052C 000B                   M           RTS                             ;RTSの後ろの
 5276 0000052E 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 5277                             841     
 5278                             842     
 5279                             843     
 5280                             844     
 5281                             845     ;       *******************************************
 5282                             846     ;       *****   PLS CODE CHANGE ROUTINE         ***
 5283                             847     ;       *******************************************
 5284                                     ***** BEGIN-POOL *****
 5285 00000530 FF00                       DATA FOR SOURCE-LINE 836
 5286                                     ***** END-POOL *****
 5287 00000532                    848     _PLS_CHG:                       ; 00001000B     8
 5288                             849             SUB_START
 5289 00000532 4F22                   M           STS.L   PR,@-R15                ;[必要]
 5290                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 5291                             850     
 5292                             851             _SEQ_PLS_PLF_CMD        _PLS_CODE,_PLS_CODE_END,BIT_AREA=0,ADR_AREA=2,COD_AREA1=4
 5293                                 M   
 5294 00000534 D112                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 5295 00000536 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 5296 00000538 8936                   M           BT      _JMP_C8000005                   ; IF ADR >= 127 THEN JUMP
 5297                                 M   ;
 5298 0000053A D012                   M           MOV.L   #(_PLS_CODE_END-_PLS_CODE),R0           ; 転送 BYTE長
 5299 0000053C D312                   M           MOV.L   #_PLS_CODE,R3                   ; Read CODE MOVE        (12 BYTE)
 5300                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 5301 0000053E 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 5302                                 M   
 5303                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 5304 00000540 D112                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 5305 00000542 410B                   M           JSR     @R1                     ;
 5306 00000544 0009                   M           NOP                                     ;
 5307                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 5308                                 M   ;       *** BIT SET ***
 5309 00000546 D112                   M           MOV.L   #0,R1                   ; ﾒﾓﾘのところ
 5310 00000548 341C                   M           ADD     R1,R4                           ;
 5311 0000054A D112                   M           MOV.L   #_SEQ_BBIT_CHG_TBL,R1           ;
 5312 0000054C 4A00                   M           SHLL    R10                             ; *2
 5313 0000054E 31AC                   M           ADD     R10,R1                          ;
 5314 00000550 6111                   M           MOV.W   @R1,R1                          ;
 5315 00000552 6241                   M           MOV.W   @R4,R2                          ; ﾒﾓﾘのところの命令LOAD
 5316 00000554 D010                   M           MOV.L   #H'FFFFFF00,R0                  ;
 5317 00000556 2209                   M           AND     R0,R2                           ; BITﾃﾞｰﾀのところをｸﾘｱ
 5318 00000558 221B                   M           OR      R1,R2                           ;
 5319 0000055A 2421                   M           MOV.W   R2,@R4                          ; BIT SET
 5320                                 M   
 5321                                 M   ;       *** SHLL命令はBIT7以下ならNOPに置換える ***
 5322 0000055C D20F                   M           MOV.L   #_NOP_SHLL8_R2_TBL0,R2          ;
 5323 0000055E 32AC                   M           ADD     R10,R2                          ;
 5324 00000560 6221                   M           MOV.W   @R2,R2                          ; NOP or SHLL8命令LOAD
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    27
PROGRAM NAME =

 5325                                 M   
 5326 00000562 D10F                   M           MOV.L   #4,R1                           ; ﾒﾓﾘのところ
 5327 00000564 341C                   M           ADD     R1,R4                           ; 8+2=10  SWAP.Bの命令 LOAD
 5328 00000566 2421                   M           MOV.W   R2,@R4                          ; NOP or SWAP命令 WRITE
 5329                                 M   
 5330                                 M   ;       *** ADR SET ***
 5331 00000568 D10E                   M           MOV.L   #2,R1                   ; ﾒﾓﾘのところ
 5332 0000056A 341C                   M           ADD     R1,R4                           ; 0+6=6
 5333 0000056C 6241                   M           MOV.W   @R4,R2                          ;
 5334 0000056E 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 5335 00000570 4800                   M           SHLL    R8                              ; ADR*2
 5336 00000572 228B                   M           OR      R8,R2                           ;
 5337 00000574 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 5338                                 M   
 5339 00000576 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 5340                                 M           M_BRA   _JMP_EX00005                    ;
 5341 00000578 A017                   M           BRA     _JMP_EX00005
 5342 0000057A 0009                   M           NOP
 5343                                 M   ;
 5344                                 M   ***** BEGIN-POOL *****
 5345 0000057C 0000                   M   DATA FOR SOURCE-LINE 851
 5346 0000057E 0000                   M   ALIGNMENT CODE
 5347 00000580 0000007F               M   DATA FOR SOURCE-LINE 851
 5348 00000584 00000000               M   DATA FOR SOURCE-LINE 851
 5349 00000588 00000000               M   DATA FOR SOURCE-LINE 851
 5350 0000058C 00000000               M   DATA FOR SOURCE-LINE 851
 5351 00000590 00000000               M   DATA FOR SOURCE-LINE 851
 5352 00000594 00000000               M   DATA FOR SOURCE-LINE 851
 5353 00000598 FFFFFF00               M   DATA FOR SOURCE-LINE 851
 5354 0000059C 00000000               M   DATA FOR SOURCE-LINE 851
 5355 000005A0 00000004               M   DATA FOR SOURCE-LINE 851
 5356 000005A4 00000002               M   DATA FOR SOURCE-LINE 851
 5357                                 M   ***** END-POOL *****
 5358 000005A8                        M   _JMP_C8000005:
 5359 000005A8 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 5360                                 M   
 5361 000005AA                        M   _JMP_EX00005:
 5362                             852     
 5363                             853             SUB_END
 5364                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 5365 000005AA 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 5366                             854             M_RTS
 5367 000005AC 000B                   M           RTS                             ;RTSの後ろの
 5368 000005AE 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 5369                             855     
 5370                             856     ;;;;;   消すのもったいないので動いたら削除する
 5371                             857     ;;;;;_PLS_CHG:                  ; 00001000B     8
 5372                                     ***** BEGIN-POOL *****
 5373 000005B0 FF00                       DATA FOR SOURCE-LINE 851
 5374                                     ***** END-POOL *****
 5375 000005B2 D112               858             MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 5376 000005B4 3813               859             CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 5377 000005B6 8935               860             BT      _PLS_C80                                ; IF ADR >= 127 THEN JUMP
 5378                             861     ;
 5379 000005B8 D011               862             MOV.L   #(_PLS_CODE_END-_PLS_CODE),R0   ; 転送 BYTE長
 5380 000005BA D312               863             MOV.L   #_PLS_CODE,R3                   ; Read CODE MOVE        (12 BYTE)
 5381                             864     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    28
PROGRAM NAME =

 5382 000005BC 64D3               865             MOV     R13,R4                          ; SEQ ADR. KEEP
 5383                             866     
 5384                             867             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 5385 000005BE D112                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 5386 000005C0 410B                   M           JSR     @R1                     ;
 5387 000005C2 0009                   M           NOP                                     ;
 5388                             868                                                     ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 5389                             869     ;       *** BIT SET ***
 5390 000005C4 D111               870             MOV.L   #D'0,R1                         ; ﾒﾓﾘのところ
 5391 000005C6 341C               871             ADD     R1,R4                           ; +0
 5392 000005C8 D111               872             MOV.L   #_SEQ_BBIT_CHG_TBL,R1           ;
 5393 000005CA 4A00               873             SHLL    R10                             ; *2
 5394 000005CC 31AC               874             ADD     R10,R1                          ;
 5395 000005CE 6111               875             MOV.W   @R1,R1                          ;
 5396 000005D0 6241               876             MOV.W   @R4,R2                          ; ﾒﾓﾘのところの命令LOAD
 5397 000005D2 D010               877             MOV.L   #H'FFFFFF00,R0                  ;
 5398 000005D4 2209               878             AND     R0,R2                           ; BITﾃﾞｰﾀのところをｸﾘｱ
 5399 000005D6 221B               879             OR      R1,R2                           ;
 5400 000005D8 2421               880             MOV.W   R2,@R4                          ; BIT SET
 5401                             881     
 5402                             882     ;       *** SWAP命令はBIT7以下ならNOPに置換える ***
 5403 000005DA D00F               883             MOV.L   #_NOP_SHLL8_R2_TBL0,R0          ;
 5404 000005DC 30AC               884             ADD     R10,R0                          ;
 5405 000005DE 6001               885             MOV.W   @R0,R0                          ; NOP or SHLL8命令LOAD
 5406                             886     
 5407 000005E0 D10E               887             MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 5408 000005E2 341C               888             ADD     R1,R4                           ; 0+4=4  SWAP.Bの命令 LOAD
 5409 000005E4 2401               889             MOV.W   R0,@R4                          ; NOP or SWAP命令 WRITE
 5410                             890     
 5411                             891     ;       *** ADR SET ***
 5412 000005E6 D10E               892             MOV.L   #D'2,R1                         ; ﾒﾓﾘのところ
 5413 000005E8 341C               893             ADD     R1,R4                           ; 4+2=6
 5414 000005EA 6241               894             MOV.W   @R4,R2                          ;
 5415 000005EC 2209               895             AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 5416 000005EE 4800               896             SHLL    R8                              ; ADR*2
 5417 000005F0 228B               897             OR      R8,R2                           ;
 5418 000005F2 2421               898             MOV.W   R2,@R4                          ; RAM ADR SET
 5419                             899     
 5420 000005F4 9001               900             MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 5421                             901             M_BRA   _PLS_CHG_EX                     ;
 5422 000005F6 A016                   M           BRA     _PLS_CHG_EX
 5423 000005F8 0009                   M           NOP
 5424                             902     ;
 5425                                     ***** BEGIN-POOL *****
 5426 000005FA 0000                       DATA FOR SOURCE-LINE 900
 5427 000005FC 0000007F                   DATA FOR SOURCE-LINE 858
 5428 00000600 00000000                   DATA FOR SOURCE-LINE 862
 5429 00000604 00000000                   DATA FOR SOURCE-LINE 863
 5430 00000608 00000000                   DATA FOR SOURCE-LINE 867
 5431 0000060C 00000000                   DATA FOR SOURCE-LINE 870
 5432 00000610 00000000                   DATA FOR SOURCE-LINE 872
 5433 00000614 FFFFFF00                   DATA FOR SOURCE-LINE 877
 5434 00000618 00000000                   DATA FOR SOURCE-LINE 883
 5435 0000061C 00000004                   DATA FOR SOURCE-LINE 887
 5436 00000620 00000002                   DATA FOR SOURCE-LINE 892
 5437                                     ***** END-POOL *****
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    29
PROGRAM NAME =

 5438 00000624                    903     _PLS_C80:
 5439 00000624 9002               904             MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 5440                             905     
 5441 00000626                    906     _PLS_CHG_EX:
 5442                             907     
 5443                             908             SUB_END
 5444                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 5445 00000626 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 5446                             909             M_RTS
 5447 00000628 000B                   M           RTS                             ;RTSの後ろの
 5448 0000062A 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 5449                             910     
 5450                             911     
 5451                             912     ;       *******************************************
 5452                             913     ;       *****   PLF CODE CHANGE ROUTINE         ***
 5453                             914     ;       *******************************************
 5454                                     ***** BEGIN-POOL *****
 5455 0000062C FF00                       DATA FOR SOURCE-LINE 904
 5456                                     ***** END-POOL *****
 5457 0000062E                    915     _PLF_CHG:                                       ; 00001001B     9
 5458                             916             SUB_START
 5459 0000062E 4F22                   M           STS.L   PR,@-R15                ;[必要]
 5460                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 5461                             917     
 5462                             918             _SEQ_PLS_PLF_CMD        _PLF_CODE,_PLF_CODE_END,BIT_AREA=0,ADR_AREA=2,COD_AREA1=4
 5463                                 M   
 5464 00000630 D112                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 5465 00000632 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 5466 00000634 8936                   M           BT      _JMP_C8000006                   ; IF ADR >= 127 THEN JUMP
 5467                                 M   ;
 5468 00000636 D012                   M           MOV.L   #(_PLF_CODE_END-_PLF_CODE),R0           ; 転送 BYTE長
 5469 00000638 D312                   M           MOV.L   #_PLF_CODE,R3                   ; Read CODE MOVE        (12 BYTE)
 5470                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 5471 0000063A 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 5472                                 M   
 5473                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 5474 0000063C D112                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 5475 0000063E 410B                   M           JSR     @R1                     ;
 5476 00000640 0009                   M           NOP                                     ;
 5477                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 5478                                 M   ;       *** BIT SET ***
 5479 00000642 D112                   M           MOV.L   #0,R1                   ; ﾒﾓﾘのところ
 5480 00000644 341C                   M           ADD     R1,R4                           ;
 5481 00000646 D112                   M           MOV.L   #_SEQ_BBIT_CHG_TBL,R1           ;
 5482 00000648 4A00                   M           SHLL    R10                             ; *2
 5483 0000064A 31AC                   M           ADD     R10,R1                          ;
 5484 0000064C 6111                   M           MOV.W   @R1,R1                          ;
 5485 0000064E 6241                   M           MOV.W   @R4,R2                          ; ﾒﾓﾘのところの命令LOAD
 5486 00000650 D010                   M           MOV.L   #H'FFFFFF00,R0                  ;
 5487 00000652 2209                   M           AND     R0,R2                           ; BITﾃﾞｰﾀのところをｸﾘｱ
 5488 00000654 221B                   M           OR      R1,R2                           ;
 5489 00000656 2421                   M           MOV.W   R2,@R4                          ; BIT SET
 5490                                 M   
 5491                                 M   ;       *** SHLL命令はBIT7以下ならNOPに置換える ***
 5492 00000658 D20F                   M           MOV.L   #_NOP_SHLL8_R2_TBL0,R2          ;
 5493 0000065A 32AC                   M           ADD     R10,R2                          ;
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    30
PROGRAM NAME =

 5494 0000065C 6221                   M           MOV.W   @R2,R2                          ; NOP or SHLL8命令LOAD
 5495                                 M   
 5496 0000065E D10F                   M           MOV.L   #4,R1                           ; ﾒﾓﾘのところ
 5497 00000660 341C                   M           ADD     R1,R4                           ; 8+2=10  SWAP.Bの命令 LOAD
 5498 00000662 2421                   M           MOV.W   R2,@R4                          ; NOP or SWAP命令 WRITE
 5499                                 M   
 5500                                 M   ;       *** ADR SET ***
 5501 00000664 D10E                   M           MOV.L   #2,R1                   ; ﾒﾓﾘのところ
 5502 00000666 341C                   M           ADD     R1,R4                           ; 0+6=6
 5503 00000668 6241                   M           MOV.W   @R4,R2                          ;
 5504 0000066A 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 5505 0000066C 4800                   M           SHLL    R8                              ; ADR*2
 5506 0000066E 228B                   M           OR      R8,R2                           ;
 5507 00000670 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 5508                                 M   
 5509 00000672 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 5510                                 M           M_BRA   _JMP_EX00006                    ;
 5511 00000674 A017                   M           BRA     _JMP_EX00006
 5512 00000676 0009                   M           NOP
 5513                                 M   ;
 5514                                 M   ***** BEGIN-POOL *****
 5515 00000678 0000                   M   DATA FOR SOURCE-LINE 918
 5516 0000067A 0000                   M   ALIGNMENT CODE
 5517 0000067C 0000007F               M   DATA FOR SOURCE-LINE 918
 5518 00000680 00000000               M   DATA FOR SOURCE-LINE 918
 5519 00000684 00000000               M   DATA FOR SOURCE-LINE 918
 5520 00000688 00000000               M   DATA FOR SOURCE-LINE 918
 5521 0000068C 00000000               M   DATA FOR SOURCE-LINE 918
 5522 00000690 00000000               M   DATA FOR SOURCE-LINE 918
 5523 00000694 FFFFFF00               M   DATA FOR SOURCE-LINE 918
 5524 00000698 00000000               M   DATA FOR SOURCE-LINE 918
 5525 0000069C 00000004               M   DATA FOR SOURCE-LINE 918
 5526 000006A0 00000002               M   DATA FOR SOURCE-LINE 918
 5527                                 M   ***** END-POOL *****
 5528 000006A4                        M   _JMP_C8000006:
 5529 000006A4 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 5530                                 M   
 5531 000006A6                        M   _JMP_EX00006:
 5532                             919     
 5533                             920             SUB_END
 5534                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 5535 000006A6 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 5536                             921             M_RTS
 5537 000006A8 000B                   M           RTS                             ;RTSの後ろの
 5538 000006AA 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 5539                             922     
 5540                             923     ;       *******************************************
 5541                             924     ;       *****   BIT STORE CODE CHANGE ROUTINE   ***
 5542                             925     ;       *******************************************
 5543                                     ***** BEGIN-POOL *****
 5544 000006AC FF00                       DATA FOR SOURCE-LINE 918
 5545                                     ***** END-POOL *****
 5546 000006AE                    926     _ST_CHG:                                        ; 00001010B     A
 5547                             927             SUB_START
 5548 000006AE 4F22                   M           STS.L   PR,@-R15                ;[必要]
 5549                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 5550                             928     
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    31
PROGRAM NAME =

 5551 000006B0 D118               929             MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 5552 000006B2 3813               930             CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 5553 000006B4 8946               931             BT      _ST_C80                         ; IF ADR >= 127 THEN JUMP
 5554                             932     ;
 5555 000006B6 D018               933             MOV.L   #(_ST_CODE_END-_ST_CODE),R0     ; 転送 BYTE長
 5556 000006B8 D318               934             MOV.L   #_ST_CODE,R3                    ; Read CODE MOVE        (12 BYTE)
 5557                             935     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 5558 000006BA 64D3               936             MOV     R13,R4                          ; SEQ ADR. KEEP
 5559                             937     
 5560                             938             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 5561 000006BC D118                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 5562 000006BE 410B                   M           JSR     @R1                     ;
 5563 000006C0 0009                   M           NOP                                     ;
 5564                             939                                                     ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 5565                             940     ;       *** BIT SET ***
 5566 000006C2 D118               941             MOV.L   #D'2,R1                         ; ﾒﾓﾘのところ
 5567 000006C4 341C               942             ADD     R1,R4                           ;
 5568 000006C6 D118               943             MOV.L   #_SEQ_BBIT_CHG_TBL,R1           ;
 5569 000006C8 4A00               944             SHLL    R10                             ; *2
 5570 000006CA 31AC               945             ADD     R10,R1                          ;
 5571 000006CC 6111               946             MOV.W   @R1,R1                          ;
 5572 000006CE 6241               947             MOV.W   @R4,R2                          ; ﾒﾓﾘのところの命令LOAD
 5573 000006D0 D016               948             MOV.L   #H'FFFFFF00,R0                  ;
 5574 000006D2 2209               949             AND     R0,R2                           ; BITﾃﾞｰﾀのところをｸﾘｱ
 5575 000006D4 221B               950             OR      R1,R2                           ;
 5576 000006D6 2421               951             MOV.W   R2,@R4                          ; BIT SET
 5577                             952     
 5578                             953     ;       *** SWAP命令はBIT7以下ならNOPに置換える ***
 5579 000006D8 D215               954             MOV.L   #_NOP_SHLL8_R3_TBL0,R2          ;
 5580 000006DA 32AC               955             ADD     R10,R2                          ;
 5581 000006DC 6221               956             MOV.W   @R2,R2                          ; NOP or SHLL8命令LOAD
 5582                             957     
 5583 000006DE D115               958             MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 5584 000006E0 341C               959             ADD     R1,R4                           ; 0+4=4  SWAP.Bの命令 LOAD
 5585 000006E2 2421               960             MOV.W   R2,@R4                          ; NOP or SWAP命令 WRITE
 5586                             961     
 5587                             962     ;       *** ADR SET ***
 5588 000006E4 D113               963             MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 5589 000006E6 341C               964             ADD     R1,R4                           ; 2+8=10
 5590 000006E8 6241               965             MOV.W   @R4,R2                          ;
 5591 000006EA 2209               966             AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 5592 000006EC 4800               967             SHLL    R8                              ; ADR*2
 5593 000006EE 228B               968             OR      R8,R2                           ;
 5594 000006F0 2421               969             MOV.W   R2,@R4                          ; RAM ADR SET
 5595                             970     
 5596                             971     ;       *** OFFSET SET ***
 5597 000006F2 D110               972             MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 5598 000006F4 341C               973             ADD     R1,R4                           ; 10+4=14  MOV.B @(R0,R*),R1の命令 LOAD
 5599 000006F6 D010               974             MOV.L   #_SEQ_MOVCMD_R1RD_TBL,R0        ;
 5600 000006F8 4900               975             SHLL    R9                              ; OFFSET*2
 5601 000006FA 309C               976             ADD     R9,R0                           ;
 5602 000006FC 6001               977             MOV.W   @R0,R0                          ;
 5603 000006FE 2401               978             MOV.W   R0,@R4                          ; 命令置換え
 5604                             979     
 5605                             980     ;       *** OFFSET SET ***
 5606 00000700 D10E               981             MOV.L   #D'10,R1                        ; ﾒﾓﾘのところ
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    32
PROGRAM NAME =

 5607 00000702 341C               982             ADD     R1,R4                           ; 14+10=24  MOV.B R1,@(R0,R*)の命令 LOAD
 5608 00000704 D00E               983             MOV.L   #_SEQ_MOVCMD_R1WR_TBL,R0        ;
 5609 00000706 309C               984             ADD     R9,R0                           ;
 5610 00000708 6001               985             MOV.W   @R0,R0                          ;
 5611 0000070A 2401               986             MOV.W   R0,@R4                          ; 命令置換え
 5612                             987     
 5613 0000070C 9001               988             MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 5614                             989             M_BRA   _ST_CHG_EX                      ;
 5615 0000070E A01A                   M           BRA     _ST_CHG_EX
 5616 00000710 0009                   M           NOP
 5617                             990     ;
 5618                                     ***** BEGIN-POOL *****
 5619 00000712 0000                       DATA FOR SOURCE-LINE 988
 5620 00000714 0000007F                   DATA FOR SOURCE-LINE 929
 5621 00000718 00000000                   DATA FOR SOURCE-LINE 933
 5622 0000071C 00000000                   DATA FOR SOURCE-LINE 934
 5623 00000720 00000000                   DATA FOR SOURCE-LINE 938
 5624 00000724 00000002                   DATA FOR SOURCE-LINE 941
 5625 00000728 00000000                   DATA FOR SOURCE-LINE 943
 5626 0000072C FFFFFF00                   DATA FOR SOURCE-LINE 948
 5627 00000730 00000000                   DATA FOR SOURCE-LINE 954
 5628 00000734 00000004                   DATA FOR SOURCE-LINE 958,963,972
 5629 00000738 00000000                   DATA FOR SOURCE-LINE 974
 5630 0000073C 0000000A                   DATA FOR SOURCE-LINE 981
 5631 00000740 00000000                   DATA FOR SOURCE-LINE 983
 5632                                     ***** END-POOL *****
 5633 00000744                    991     _ST_C80:
 5634 00000744 9002               992             MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 5635                             993     
 5636 00000746                    994     _ST_CHG_EX:
 5637                             995             SUB_END
 5638                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 5639 00000746 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 5640                             996             M_RTS
 5641 00000748 000B                   M           RTS                             ;RTSの後ろの
 5642 0000074A 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 5643                             997     
 5644                             998     
 5645                             999     
 5646                            1000     ;       *******************************************
 5647                            1001     ;       *****   WSC CODE CHANGE ROUTINE         ***
 5648                            1002     ;       *******************************************
 5649                                     ***** BEGIN-POOL *****
 5650 0000074C FF00                       DATA FOR SOURCE-LINE 992
 5651                                     ***** END-POOL *****
 5652 0000074E                   1003     _WSC_CHG:                       ; 00001100B     C
 5653                            1004             SUB_START
 5654 0000074E 4F22                   M           STS.L   PR,@-R15                ;[必要]
 5655                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 5656                            1005     
 5657 00000750 D114              1006             MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 5658 00000752 3813              1007             CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 5659 00000754 893A              1008             BT      _WSC_C80                        ; IF ADR >= 127 THEN JUMP
 5660                            1009     ;
 5661 00000756 D014              1010             MOV.L   #(_WSC_CODE_END-_WSC_CODE),R0   ; 転送 BYTE長
 5662 00000758 D314              1011             MOV.L   #_WSC_CODE,R3                   ; Read CODE MOVE        (12 BYTE)
 5663                            1012     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    33
PROGRAM NAME =

 5664 0000075A 64D3              1013             MOV     R13,R4                          ; SEQ ADR. KEEP
 5665                            1014     
 5666                            1015             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 5667 0000075C D114                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 5668 0000075E 410B                   M           JSR     @R1                     ;
 5669 00000760 0009                   M           NOP                                     ;
 5670                            1016                                                     ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 5671                            1017     ;       *** BIT SET ***
 5672 00000762 D114              1018             MOV.L   #_SEQ_BBIT_CHG_TBL,R1           ; ﾒﾓﾘのところ +0
 5673 00000764 4A00              1019             SHLL    R10                             ; *2
 5674 00000766 31AC              1020             ADD     R10,R1                          ;
 5675 00000768 6111              1021             MOV.W   @R1,R1                          ; BIT LOAD
 5676 0000076A 6241              1022             MOV.W   @R4,R2                          ; ﾒﾓﾘのところの命令LOAD
 5677 0000076C D012              1023             MOV.L   #H'FFFFFF00,R0                  ;
 5678 0000076E 2209              1024             AND     R0,R2                           ; BITﾃﾞｰﾀのところをｸﾘｱ
 5679 00000770 221B              1025             OR      R1,R2                           ;
 5680 00000772 2421              1026             MOV.W   R2,@R4                          ; BIT SET
 5681                            1027     
 5682                            1028     ;       *** SWAP命令はBIT7以下ならNOPに置換える ***
 5683 00000774 D111              1029             MOV.L   #_NOP_SWAP_TBL0,R1              ;
 5684 00000776 31AC              1030             ADD     R10,R1                          ;
 5685 00000778 6111              1031             MOV.W   @R1,R1                          ; NOP or SWAP命令LOAD
 5686                            1032     
 5687 0000077A D211              1033             MOV.L   #D'4,R2                         ; ﾒﾓﾘのところ
 5688 0000077C 342C              1034             ADD     R2,R4                           ; 0+4=4  SWAP.Bの命令 LOAD
 5689 0000077E 2411              1035             MOV.W   R1,@R4                          ; NOP or SWAP命令 WRITE
 5690                            1036     
 5691                            1037     ;       *** ADR SET ***
 5692 00000780 D110              1038             MOV.L   #D'8,R1                         ; ﾒﾓﾘのところ
 5693 00000782 341C              1039             ADD     R1,R4                           ; 2+8=10
 5694 00000784 6241              1040             MOV.W   @R4,R2                          ;
 5695 00000786 2209              1041             AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 5696 00000788 4800              1042             SHLL    R8                              ; ADR*2
 5697 0000078A 228B              1043             OR      R8,R2                           ;
 5698 0000078C 2421              1044             MOV.W   R2,@R4                          ; RAM ADR SET
 5699                            1045     
 5700                            1046     ;       *** OFFSET SET ***
 5701 0000078E D10C              1047             MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 5702 00000790 341C              1048             ADD     R1,R4                           ; 10+4=14  MOV.B @(R0,R*),R1の命令 LOAD
 5703 00000792 D00D              1049             MOV.L   #_SEQ_MOVCMD_R1WR_TBL,R0        ;
 5704 00000794 4900              1050             SHLL    R9                              ; OFFSET*2
 5705 00000796 309C              1051             ADD     R9,R0                           ;
 5706 00000798 6001              1052             MOV.W   @R0,R0                          ;
 5707 0000079A 2401              1053             MOV.W   R0,@R4                          ; 命令置換え
 5708                            1054     
 5709 0000079C 9001              1055             MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 5710                            1056             M_BRA   _WSC_CHG_EX                     ;
 5711 0000079E A016                   M           BRA     _WSC_CHG_EX
 5712 000007A0 0009                   M           NOP
 5713                            1057     ;
 5714                                     ***** BEGIN-POOL *****
 5715 000007A2 0000                       DATA FOR SOURCE-LINE 1055
 5716 000007A4 0000007F                   DATA FOR SOURCE-LINE 1006
 5717 000007A8 00000000                   DATA FOR SOURCE-LINE 1010
 5718 000007AC 00000000                   DATA FOR SOURCE-LINE 1011
 5719 000007B0 00000000                   DATA FOR SOURCE-LINE 1015
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    34
PROGRAM NAME =

 5720 000007B4 00000000                   DATA FOR SOURCE-LINE 1018
 5721 000007B8 FFFFFF00                   DATA FOR SOURCE-LINE 1023
 5722 000007BC 00000000                   DATA FOR SOURCE-LINE 1029
 5723 000007C0 00000004                   DATA FOR SOURCE-LINE 1033,1047
 5724 000007C4 00000008                   DATA FOR SOURCE-LINE 1038
 5725 000007C8 00000000                   DATA FOR SOURCE-LINE 1049
 5726                                     ***** END-POOL *****
 5727 000007CC                   1058     _WSC_C80:
 5728 000007CC 9002              1059             MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 5729                            1060     
 5730 000007CE                   1061     _WSC_CHG_EX:
 5731                            1062     
 5732                            1063             SUB_END
 5733                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 5734 000007CE 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 5735                            1064             M_RTS
 5736 000007D0 000B                   M           RTS                             ;RTSの後ろの
 5737 000007D2 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 5738                            1065     
 5739                            1066     ;       *******************************************
 5740                            1067     ;       *****   BIT SET CODE CHANGE ROUTINE     ***
 5741                            1068     ;       *******************************************
 5742                                     ***** BEGIN-POOL *****
 5743 000007D4 FF00                       DATA FOR SOURCE-LINE 1059
 5744                                     ***** END-POOL *****
 5745 000007D6                   1069     _SET_CHG:                                       ; 00001110B     E
 5746                            1070             SUB_START
 5747 000007D6 4F22                   M           STS.L   PR,@-R15                ;[必要]
 5748                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 5749                            1071     
 5750                            1072             _SEQ_SET_RST_CMD        _SET_CODE,_SET_CODE_END,BIT_AREA=2,ADR_AREA=2,COD_AREA1=4,
                                          COD_AREA2=4,COD_AREA3=8
 5751                                 M   
 5752 000007D8 D118                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 5753 000007DA 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 5754 000007DC 8946                   M           BT      _JMP_C8000007                   ; IF ADR >= 127 THEN JUMP
 5755                                 M   ;
 5756 000007DE D018                   M           MOV.L   #(_SET_CODE_END-_SET_CODE),R0           ; 転送 BYTE長
 5757 000007E0 D318                   M           MOV.L   #_SET_CODE,R3                   ; Read CODE MOVE        (12 BYTE)
 5758                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 5759 000007E2 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 5760                                 M   
 5761                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 5762 000007E4 D118                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 5763 000007E6 410B                   M           JSR     @R1                     ;
 5764 000007E8 0009                   M           NOP                                     ;
 5765                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 5766                                 M   
 5767 000007EA D018                   M           MOV.L   #H'FFFFFF00,R0                  ;
 5768                                 M   
 5769                                 M   ;       *** BIT SET ***
 5770 000007EC D118                   M           MOV.L   #2,R1                   ; ﾒﾓﾘのところ
 5771 000007EE 341C                   M           ADD     R1,R4                           ; +2
 5772 000007F0 D118                   M           MOV.L   #_SEQ_BBIT_CHG_TBL,R1           ; ﾒﾓﾘのところ +0
 5773 000007F2 4A00                   M           SHLL    R10                             ; *2
 5774 000007F4 31AC                   M           ADD     R10,R1                          ;
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    35
PROGRAM NAME =

 5775 000007F6 6111                   M           MOV.W   @R1,R1                          ; BIT LOAD
 5776 000007F8 6241                   M           MOV.W   @R4,R2                          ; ﾒﾓﾘのところの命令LOAD
 5777 000007FA 2209                   M           AND     R0,R2                           ; BITﾃﾞｰﾀのところをｸﾘｱ
 5778 000007FC 221B                   M           OR      R1,R2                           ;
 5779 000007FE 2421                   M           MOV.W   R2,@R4                          ; BIT SET
 5780                                 M   
 5781                                 M   ;       *** SHLL命令はBIT7以下ならNOPに置換える ***
 5782 00000800 D215                   M           MOV.L   #_NOP_SHLL8_R3_TBL0,R2          ;
 5783 00000802 32AC                   M           ADD     R10,R2                          ;
 5784 00000804 6221                   M           MOV.W   @R2,R2                          ; NOP or SHLL8命令LOAD
 5785 00000806 D115                   M           MOV.L   #4,R1                           ; ﾒﾓﾘのところ
 5786 00000808 341C                   M           ADD     R1,R4                           ; 8+2=10  SWAP.Bの命令 LOAD
 5787 0000080A 2421                   M           MOV.W   R2,@R4                          ; NOP or SWAP命令 WRITE
 5788                                 M   
 5789                                 M   ;       *** ADR SET ***
 5790 0000080C D110                   M           MOV.L   #2,R1                   ; ﾒﾓﾘのところ
 5791 0000080E 341C                   M           ADD     R1,R4                           ; 2+6=8
 5792 00000810 6241                   M           MOV.W   @R4,R2                          ;
 5793 00000812 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 5794 00000814 4800                   M           SHLL    R8                              ; ADR*2
 5795 00000816 228B                   M           OR      R8,R2                           ;
 5796 00000818 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 5797                                 M   
 5798                                 M   ;       *** OFFSET SET ***
 5799 0000081A D110                   M           MOV.L   #4,R1                   ; ﾒﾓﾘのところ
 5800 0000081C 341C                   M           ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 5801 0000081E D010                   M           MOV.L   #_SEQ_MOVCMD_R1RD_TBL,R0        ;
 5802 00000820 4900                   M           SHLL    R9                              ; OFFSET*2
 5803 00000822 309C                   M           ADD     R9,R0                           ;
 5804 00000824 6001                   M           MOV.W   @R0,R0                          ;
 5805 00000826 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 5806                                 M   
 5807                                 M   ;       *** OFFSET SET ***
 5808 00000828 D10E                   M           MOV.L   #8,R1                   ; ﾒﾓﾘのところ
 5809 0000082A 341C                   M           ADD     R1,R4                           ; 12+4=16  MOV.B R1,@(R0,R*)の命令 LOAD
 5810 0000082C D00E                   M           MOV.L   #_SEQ_MOVCMD_R1WR_TBL,R0        ;
 5811 0000082E 309C                   M           ADD     R9,R0                           ;
 5812 00000830 6001                   M           MOV.W   @R0,R0                          ;
 5813 00000832 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 5814                                 M   
 5815 00000834 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 5816                                 M           M_BRA   _JMP_EX00007                    ;
 5817 00000836 A01A                   M           BRA     _JMP_EX00007
 5818 00000838 0009                   M           NOP
 5819                                 M   ;
 5820                                 M   ***** BEGIN-POOL *****
 5821 0000083A 0000                   M   DATA FOR SOURCE-LINE 1072
 5822 0000083C 0000007F               M   DATA FOR SOURCE-LINE 1072
 5823 00000840 00000000               M   DATA FOR SOURCE-LINE 1072
 5824 00000844 00000000               M   DATA FOR SOURCE-LINE 1072
 5825 00000848 00000000               M   DATA FOR SOURCE-LINE 1072
 5826 0000084C FFFFFF00               M   DATA FOR SOURCE-LINE 1072
 5827 00000850 00000002               M   DATA FOR SOURCE-LINE 1072,1072
 5828 00000854 00000000               M   DATA FOR SOURCE-LINE 1072
 5829 00000858 00000000               M   DATA FOR SOURCE-LINE 1072
 5830 0000085C 00000004               M   DATA FOR SOURCE-LINE 1072,1072
 5831 00000860 00000000               M   DATA FOR SOURCE-LINE 1072
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    36
PROGRAM NAME =

 5832 00000864 00000008               M   DATA FOR SOURCE-LINE 1072
 5833 00000868 00000000               M   DATA FOR SOURCE-LINE 1072
 5834                                 M   ***** END-POOL *****
 5835 0000086C                        M   _JMP_C8000007:
 5836 0000086C 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 5837                                 M   
 5838 0000086E                        M   _JMP_EX00007:
 5839                            1073     
 5840                            1074             SUB_END
 5841                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 5842 0000086E 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 5843                            1075             M_RTS
 5844 00000870 000B                   M           RTS                             ;RTSの後ろの
 5845 00000872 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 5846                            1076     
 5847                            1077     
 5848                            1078     ;;;;;   消すのもったいないので動いたら削除する
 5849                            1079     ;;;;;_SET_CHG:                                  ; 00001110B     E
 5850                                     ***** BEGIN-POOL *****
 5851 00000874 FF00                       DATA FOR SOURCE-LINE 1072
 5852                                     ***** END-POOL *****
 5853 00000876 D116              1080             MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 5854 00000878 3813              1081             CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 5855 0000087A 893F              1082             BT      _SET_C80                        ; IF ADR >= 127 THEN JUMP
 5856                            1083     ;
 5857 0000087C D015              1084             MOV.L   #(_SET_CODE_END-_SET_CODE),R0   ; 転送 BYTE長
 5858 0000087E D316              1085             MOV.L   #_SET_CODE,R3                   ; Read CODE MOVE        (12 BYTE)
 5859                            1086     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 5860 00000880 64D3              1087             MOV     R13,R4                          ; SEQ ADR. KEEP
 5861                            1088     
 5862                            1089             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 5863 00000882 D116                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 5864 00000884 410B                   M           JSR     @R1                     ;
 5865 00000886 0009                   M           NOP                                     ;
 5866                            1090                                                     ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 5867                            1091     ;       *** BIT SET ***
 5868 00000888 D115              1092             MOV.L   #D'2,R1                         ; ﾒﾓﾘのところ
 5869 0000088A 341C              1093             ADD     R1,R4                           ; +2
 5870 0000088C D115              1094             MOV.L   #_SEQ_BBIT_CHG_TBL,R1           ; ﾒﾓﾘのところ +0
 5871 0000088E 4A00              1095             SHLL    R10                             ; *2
 5872 00000890 31AC              1096             ADD     R10,R1                          ;
 5873 00000892 6111              1097             MOV.W   @R1,R1                          ; BIT LOAD
 5874 00000894 6241              1098             MOV.W   @R4,R2                          ; ﾒﾓﾘのところの命令LOAD
 5875 00000896 D014              1099             MOV.L   #H'FFFFFF00,R0                  ;
 5876 00000898 2209              1100             AND     R0,R2                           ; BITﾃﾞｰﾀのところをｸﾘｱ
 5877 0000089A 221B              1101             OR      R1,R2                           ;
 5878 0000089C 2421              1102             MOV.W   R2,@R4                          ; BIT SET
 5879                            1103     
 5880                            1104     ;       *** ADR SET ***
 5881 0000089E D113              1105             MOV.L   #D'6,R1                         ; ﾒﾓﾘのところ
 5882 000008A0 341C              1106             ADD     R1,R4                           ; 2+6=8
 5883 000008A2 6241              1107             MOV.W   @R4,R2                          ;
 5884 000008A4 2209              1108             AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 5885 000008A6 4800              1109             SHLL    R8                              ; ADR*2
 5886 000008A8 228B              1110             OR      R8,R2                           ;
 5887 000008AA 2421              1111             MOV.W   R2,@R4                          ; RAM ADR SET
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    37
PROGRAM NAME =

 5888                            1112     
 5889                            1113     ;       *** OFFSET SET ***
 5890 000008AC D110              1114             MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 5891 000008AE 341C              1115             ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 5892 000008B0 D010              1116             MOV.L   #_SEQ_MOVCMD_R1RD_TBL,R0        ;
 5893 000008B2 4900              1117             SHLL    R9                              ; OFFSET*2
 5894 000008B4 309C              1118             ADD     R9,R0                           ;
 5895 000008B6 6001              1119             MOV.W   @R0,R0                          ;
 5896 000008B8 2401              1120             MOV.W   R0,@R4                          ; 命令置換え
 5897                            1121     
 5898                            1122     ;       *** OFFSET SET ***
 5899 000008BA D10D              1123             MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 5900 000008BC 341C              1124             ADD     R1,R4                           ; 12+4=16  MOV.B R1,@(R0,R*)の命令 LOAD
 5901 000008BE D00E              1125             MOV.L   #_SEQ_MOVCMD_R1WR_TBL,R0        ;
 5902 000008C0 309C              1126             ADD     R9,R0                           ;
 5903 000008C2 6001              1127             MOV.W   @R0,R0                          ;
 5904 000008C4 2401              1128             MOV.W   R0,@R4                          ; 命令置換え
 5905                            1129     
 5906 000008C6 9001              1130             MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 5907                            1131             M_BRA   _SET_CHG_EX                     ;
 5908 000008C8 A019                   M           BRA     _SET_CHG_EX
 5909 000008CA 0009                   M           NOP
 5910                            1132     ;
 5911                                     ***** BEGIN-POOL *****
 5912 000008CC 0000                       DATA FOR SOURCE-LINE 1130
 5913 000008CE 0000                       ALIGNMENT CODE
 5914 000008D0 0000007F                   DATA FOR SOURCE-LINE 1080
 5915 000008D4 00000000                   DATA FOR SOURCE-LINE 1084
 5916 000008D8 00000000                   DATA FOR SOURCE-LINE 1085
 5917 000008DC 00000000                   DATA FOR SOURCE-LINE 1089
 5918 000008E0 00000002                   DATA FOR SOURCE-LINE 1092
 5919 000008E4 00000000                   DATA FOR SOURCE-LINE 1094
 5920 000008E8 FFFFFF00                   DATA FOR SOURCE-LINE 1099
 5921 000008EC 00000006                   DATA FOR SOURCE-LINE 1105
 5922 000008F0 00000004                   DATA FOR SOURCE-LINE 1114,1123
 5923 000008F4 00000000                   DATA FOR SOURCE-LINE 1116
 5924 000008F8 00000000                   DATA FOR SOURCE-LINE 1125
 5925                                     ***** END-POOL *****
 5926 000008FC                   1133     _SET_C80:
 5927 000008FC 9002              1134             MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 5928                            1135     
 5929 000008FE                   1136     _SET_CHG_EX:
 5930                            1137     
 5931                            1138             SUB_END
 5932                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 5933 000008FE 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 5934                            1139             M_RTS
 5935 00000900 000B                   M           RTS                             ;RTSの後ろの
 5936 00000902 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 5937                            1140     
 5938                            1141     
 5939                            1142     ;       *******************************************
 5940                            1143     ;       *****   BIT RESET CODE CHANGE ROUTINE   ***
 5941                            1144     ;       *******************************************
 5942                                     ***** BEGIN-POOL *****
 5943 00000904 FF00                       DATA FOR SOURCE-LINE 1134
 5944                                     ***** END-POOL *****
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    38
PROGRAM NAME =

 5945 00000906                   1145     _RST_CHG:                                       ; 00001111B     F
 5946                            1146             SUB_START
 5947 00000906 4F22                   M           STS.L   PR,@-R15                ;[必要]
 5948                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 5949                            1147     
 5950                            1148             _SEQ_SET_RST_CMD        _RST_CODE,_RST_CODE_END,BIT_AREA=2,ADR_AREA=8,COD_AREA1=4,
                                          COD_AREA2=4,COD_AREA3=4
 5951                                 M   
 5952 00000908 D118                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 5953 0000090A 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 5954 0000090C 8946                   M           BT      _JMP_C8000008                   ; IF ADR >= 127 THEN JUMP
 5955                                 M   ;
 5956 0000090E D018                   M           MOV.L   #(_RST_CODE_END-_RST_CODE),R0           ; 転送 BYTE長
 5957 00000910 D318                   M           MOV.L   #_RST_CODE,R3                   ; Read CODE MOVE        (12 BYTE)
 5958                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 5959 00000912 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 5960                                 M   
 5961                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 5962 00000914 D118                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 5963 00000916 410B                   M           JSR     @R1                     ;
 5964 00000918 0009                   M           NOP                                     ;
 5965                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 5966                                 M   
 5967 0000091A D018                   M           MOV.L   #H'FFFFFF00,R0                  ;
 5968                                 M   
 5969                                 M   ;       *** BIT SET ***
 5970 0000091C D118                   M           MOV.L   #2,R1                   ; ﾒﾓﾘのところ
 5971 0000091E 341C                   M           ADD     R1,R4                           ; +2
 5972 00000920 D118                   M           MOV.L   #_SEQ_BBIT_CHG_TBL,R1           ; ﾒﾓﾘのところ +0
 5973 00000922 4A00                   M           SHLL    R10                             ; *2
 5974 00000924 31AC                   M           ADD     R10,R1                          ;
 5975 00000926 6111                   M           MOV.W   @R1,R1                          ; BIT LOAD
 5976 00000928 6241                   M           MOV.W   @R4,R2                          ; ﾒﾓﾘのところの命令LOAD
 5977 0000092A 2209                   M           AND     R0,R2                           ; BITﾃﾞｰﾀのところをｸﾘｱ
 5978 0000092C 221B                   M           OR      R1,R2                           ;
 5979 0000092E 2421                   M           MOV.W   R2,@R4                          ; BIT SET
 5980                                 M   
 5981                                 M   ;       *** SHLL命令はBIT7以下ならNOPに置換える ***
 5982 00000930 D215                   M           MOV.L   #_NOP_SHLL8_R3_TBL0,R2          ;
 5983 00000932 32AC                   M           ADD     R10,R2                          ;
 5984 00000934 6221                   M           MOV.W   @R2,R2                          ; NOP or SHLL8命令LOAD
 5985 00000936 D115                   M           MOV.L   #4,R1                           ; ﾒﾓﾘのところ
 5986 00000938 341C                   M           ADD     R1,R4                           ; 8+2=10  SWAP.Bの命令 LOAD
 5987 0000093A 2421                   M           MOV.W   R2,@R4                          ; NOP or SWAP命令 WRITE
 5988                                 M   
 5989                                 M   ;       *** ADR SET ***
 5990 0000093C D114                   M           MOV.L   #8,R1                   ; ﾒﾓﾘのところ
 5991 0000093E 341C                   M           ADD     R1,R4                           ; 2+6=8
 5992 00000940 6241                   M           MOV.W   @R4,R2                          ;
 5993 00000942 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 5994 00000944 4800                   M           SHLL    R8                              ; ADR*2
 5995 00000946 228B                   M           OR      R8,R2                           ;
 5996 00000948 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 5997                                 M   
 5998                                 M   ;       *** OFFSET SET ***
 5999 0000094A D110                   M           MOV.L   #4,R1                   ; ﾒﾓﾘのところ
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    39
PROGRAM NAME =

 6000 0000094C 341C                   M           ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 6001 0000094E D011                   M           MOV.L   #_SEQ_MOVCMD_R1RD_TBL,R0        ;
 6002 00000950 4900                   M           SHLL    R9                              ; OFFSET*2
 6003 00000952 309C                   M           ADD     R9,R0                           ;
 6004 00000954 6001                   M           MOV.W   @R0,R0                          ;
 6005 00000956 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 6006                                 M   
 6007                                 M   ;       *** OFFSET SET ***
 6008 00000958 D10C                   M           MOV.L   #4,R1                   ; ﾒﾓﾘのところ
 6009 0000095A 341C                   M           ADD     R1,R4                           ; 12+4=16  MOV.B R1,@(R0,R*)の命令 LOAD
 6010 0000095C D00E                   M           MOV.L   #_SEQ_MOVCMD_R1WR_TBL,R0        ;
 6011 0000095E 309C                   M           ADD     R9,R0                           ;
 6012 00000960 6001                   M           MOV.W   @R0,R0                          ;
 6013 00000962 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 6014                                 M   
 6015 00000964 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 6016                                 M           M_BRA   _JMP_EX00008                    ;
 6017 00000966 A01A                   M           BRA     _JMP_EX00008
 6018 00000968 0009                   M           NOP
 6019                                 M   ;
 6020                                 M   ***** BEGIN-POOL *****
 6021 0000096A 0000                   M   DATA FOR SOURCE-LINE 1148
 6022 0000096C 0000007F               M   DATA FOR SOURCE-LINE 1148
 6023 00000970 00000000               M   DATA FOR SOURCE-LINE 1148
 6024 00000974 00000000               M   DATA FOR SOURCE-LINE 1148
 6025 00000978 00000000               M   DATA FOR SOURCE-LINE 1148
 6026 0000097C FFFFFF00               M   DATA FOR SOURCE-LINE 1148
 6027 00000980 00000002               M   DATA FOR SOURCE-LINE 1148
 6028 00000984 00000000               M   DATA FOR SOURCE-LINE 1148
 6029 00000988 00000000               M   DATA FOR SOURCE-LINE 1148
 6030 0000098C 00000004               M   DATA FOR SOURCE-LINE 1148,1148,1148
 6031 00000990 00000008               M   DATA FOR SOURCE-LINE 1148
 6032 00000994 00000000               M   DATA FOR SOURCE-LINE 1148
 6033 00000998 00000000               M   DATA FOR SOURCE-LINE 1148
 6034                                 M   ***** END-POOL *****
 6035 0000099C                        M   _JMP_C8000008:
 6036 0000099C 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 6037                                 M   
 6038 0000099E                        M   _JMP_EX00008:
 6039                            1149     
 6040                            1150             SUB_END
 6041                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 6042 0000099E 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 6043                            1151             M_RTS
 6044 000009A0 000B                   M           RTS                             ;RTSの後ろの
 6045 000009A2 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 6046                            1152     
 6047                            1153     ;       *******************************************
 6048                            1154     ;       *****   WTMR CODE CHANGE ROUTINE        ***
 6049                            1155     ;       *******************************************
 6050                                     ***** BEGIN-POOL *****
 6051 000009A4 FF00                       DATA FOR SOURCE-LINE 1148
 6052                                     ***** END-POOL *****
 6053 000009A6                   1156     _WTMR_CHG:                      ; 00010000B     10
 6054                            1157             SUB_START
 6055 000009A6 4F22                   M           STS.L   PR,@-R15                ;[必要]
 6056                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    40
PROGRAM NAME =

 6057                            1158     
 6058                            1159             _SEQ_WTMR_WCTR_CMD      _WTMR_CODE,_WTMR_CODE_END,ADR_AREA=0
 6059                                 M   
 6060 000009A8 D109                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 6061 000009AA 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 6062 000009AC 891C                   M           BT      _JMP_C8000009                   ; IF ADR >= 127 THEN JUMP
 6063                                 M   ;
 6064 000009AE D009                   M           MOV.L   #(_WTMR_CODE_END-_WTMR_CODE),R0         ; 転送 BYTE長
 6065 000009B0 D309                   M           MOV.L   #_WTMR_CODE,R3                  ; Read CODE MOVE        (12 BYTE)
 6066                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 6067 000009B2 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 6068                                 M   
 6069                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 6070 000009B4 D109                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 6071 000009B6 410B                   M           JSR     @R1                     ;
 6072 000009B8 0009                   M           NOP                                     ;
 6073                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 6074                                 M   
 6075 000009BA D009                   M           MOV.L   #H'FFFFFF00,R0                  ;
 6076                                 M   ;       *** ADR SET ***
 6077 000009BC D109                   M           MOV.L   #0,R1                   ; ﾒﾓﾘのところ
 6078 000009BE 341C                   M           ADD     R1,R4                           ; +0
 6079 000009C0 6241                   M           MOV.W   @R4,R2                          ;
 6080 000009C2 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 6081                                 M   ;;;;;   SHLL    R8                              ; ADR*2
 6082 000009C4 228B                   M           OR      R8,R2                           ;
 6083 000009C6 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 6084                                 M   
 6085 000009C8 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 6086                                 M           M_BRA   _JMP_EX00009                    ;
 6087 000009CA A00E                   M           BRA     _JMP_EX00009
 6088 000009CC 0009                   M           NOP
 6089                                 M   ;
 6090                                 M   ***** BEGIN-POOL *****
 6091 000009CE 0000                   M   DATA FOR SOURCE-LINE 1159
 6092 000009D0 0000007F               M   DATA FOR SOURCE-LINE 1159
 6093 000009D4 00000000               M   DATA FOR SOURCE-LINE 1159
 6094 000009D8 00000000               M   DATA FOR SOURCE-LINE 1159
 6095 000009DC 00000000               M   DATA FOR SOURCE-LINE 1159
 6096 000009E0 FFFFFF00               M   DATA FOR SOURCE-LINE 1159
 6097 000009E4 00000000               M   DATA FOR SOURCE-LINE 1159
 6098                                 M   ***** END-POOL *****
 6099 000009E8                        M   _JMP_C8000009:
 6100 000009E8 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 6101                                 M   
 6102 000009EA                        M   _JMP_EX00009:
 6103                            1160     
 6104                            1161             SUB_END
 6105                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 6106 000009EA 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 6107                            1162             M_RTS
 6108 000009EC 000B                   M           RTS                             ;RTSの後ろの
 6109 000009EE 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 6110                            1163     
 6111                            1164     
 6112                            1165     
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    41
PROGRAM NAME =

 6113                            1166     ;       *******************************************
 6114                            1167     ;       *****   WCTR CODE CHANGE ROUTINE        ***
 6115                            1168     ;       *******************************************
 6116                                     ***** BEGIN-POOL *****
 6117 000009F0 FF00                       DATA FOR SOURCE-LINE 1159
 6118                                     ***** END-POOL *****
 6119 000009F2                   1169     _WCTR_CHG:                      ; 00010010B     12
 6120                            1170             SUB_START
 6121 000009F2 4F22                   M           STS.L   PR,@-R15                ;[必要]
 6122                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 6123                            1171     
 6124                            1172             _SEQ_WTMR_WCTR_CMD      _WCTR_CODE,_WCTR_CODE_END,ADR_AREA=0
 6125                                 M   
 6126 000009F4 D109                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 6127 000009F6 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 6128 000009F8 891C                   M           BT      _JMP_C8000010                   ; IF ADR >= 127 THEN JUMP
 6129                                 M   ;
 6130 000009FA D009                   M           MOV.L   #(_WCTR_CODE_END-_WCTR_CODE),R0         ; 転送 BYTE長
 6131 000009FC D309                   M           MOV.L   #_WCTR_CODE,R3                  ; Read CODE MOVE        (12 BYTE)
 6132                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 6133 000009FE 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 6134                                 M   
 6135                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 6136 00000A00 D109                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 6137 00000A02 410B                   M           JSR     @R1                     ;
 6138 00000A04 0009                   M           NOP                                     ;
 6139                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 6140                                 M   
 6141 00000A06 D009                   M           MOV.L   #H'FFFFFF00,R0                  ;
 6142                                 M   ;       *** ADR SET ***
 6143 00000A08 D109                   M           MOV.L   #0,R1                   ; ﾒﾓﾘのところ
 6144 00000A0A 341C                   M           ADD     R1,R4                           ; +0
 6145 00000A0C 6241                   M           MOV.W   @R4,R2                          ;
 6146 00000A0E 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 6147                                 M   ;;;;;   SHLL    R8                              ; ADR*2
 6148 00000A10 228B                   M           OR      R8,R2                           ;
 6149 00000A12 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 6150                                 M   
 6151 00000A14 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 6152                                 M           M_BRA   _JMP_EX00010                    ;
 6153 00000A16 A00E                   M           BRA     _JMP_EX00010
 6154 00000A18 0009                   M           NOP
 6155                                 M   ;
 6156                                 M   ***** BEGIN-POOL *****
 6157 00000A1A 0000                   M   DATA FOR SOURCE-LINE 1172
 6158 00000A1C 0000007F               M   DATA FOR SOURCE-LINE 1172
 6159 00000A20 00000000               M   DATA FOR SOURCE-LINE 1172
 6160 00000A24 00000000               M   DATA FOR SOURCE-LINE 1172
 6161 00000A28 00000000               M   DATA FOR SOURCE-LINE 1172
 6162 00000A2C FFFFFF00               M   DATA FOR SOURCE-LINE 1172
 6163 00000A30 00000000               M   DATA FOR SOURCE-LINE 1172
 6164                                 M   ***** END-POOL *****
 6165 00000A34                        M   _JMP_C8000010:
 6166 00000A34 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 6167                                 M   
 6168 00000A36                        M   _JMP_EX00010:
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    42
PROGRAM NAME =

 6169                            1173     
 6170                            1174             SUB_END
 6171                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 6172 00000A36 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 6173                            1175             M_RTS
 6174 00000A38 000B                   M           RTS                             ;RTSの後ろの
 6175 00000A3A 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 6176                            1176     
 6177                            1177     ;       *******************************************
 6178                            1178     ;       *****   WSR CODE CHANGE ROUTINE         ***
 6179                            1179     ;       *******************************************
 6180                                     ***** BEGIN-POOL *****
 6181 00000A3C FF00                       DATA FOR SOURCE-LINE 1172
 6182                                     ***** END-POOL *****
 6183 00000A3E                   1180     _WSR_CHG:                       ; 00010100B     14
 6184                            1181             SUB_START
 6185 00000A3E 4F22                   M           STS.L   PR,@-R15                ;[必要]
 6186                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 6187                            1182     
 6188 00000A40 D00B              1183             MOV.L   #(_WSR_CODE_END-_WSR_CODE),R0   ; 転送 BYTE長
 6189 00000A42 D30C              1184             MOV.L   #_WSR_CODE,R3                   ; Read CODE MOVE        (12 BYTE)
 6190                            1185     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 6191 00000A44 64D3              1186             MOV     R13,R4                          ; SEQ ADR. KEEP
 6192                            1187     
 6193                            1188             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 6194 00000A46 D10C                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 6195 00000A48 410B                   M           JSR     @R1                     ;
 6196 00000A4A 0009                   M           NOP                                     ;
 6197                            1189                                                     ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 6198                            1190     
 6199 00000A4C D00B              1191             MOV.L   #H'FFFFFF00,R0                  ;
 6200                            1192     ;       *** DATA_LO SET ***
 6201 00000A4E D10C              1193             MOV.L   #0,R1                           ; ﾒﾓﾘのところ
 6202 00000A50 341C              1194             ADD     R1,R4                           ; +0
 6203 00000A52 6241              1195             MOV.W   @R4,R2                          ;
 6204 00000A54 2209              1196             AND     R0,R2                           ; ﾃﾞｰﾀのところをｸﾘｱ
 6205 00000A56 228B              1197             OR      R8,R2                           ; 下位ﾃﾞｰﾀ
 6206 00000A58 2421              1198             MOV.W   R2,@R4                          ; RAM ADR SET
 6207                            1199     
 6208                            1200     ;       *** DATA_HI SET ***
 6209 00000A5A D10A              1201             MOV.L   #4,R1                           ; ﾒﾓﾘのところ
 6210 00000A5C 341C              1202             ADD     R1,R4                           ; 0+4=4
 6211 00000A5E 6241              1203             MOV.W   @R4,R2                          ;
 6212 00000A60 2209              1204             AND     R0,R2                           ; ﾃﾞｰﾀのところをｸﾘｱ
 6213 00000A62 229B              1205             OR      R9,R2                           ; 上位ﾃﾞｰﾀ
 6214 00000A64 2421              1206             MOV.W   R2,@R4                          ; RAM ADR SET
 6215                            1207     
 6216 00000A66 9002              1208             MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 6217                            1209     
 6218                            1210             SUB_END
 6219                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 6220 00000A68 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 6221                            1211             M_RTS
 6222 00000A6A 000B                   M           RTS                             ;RTSの後ろの
 6223 00000A6C 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 6224                            1212     
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    43
PROGRAM NAME =

 6225                            1213     
 6226                            1214     
 6227                            1215     ;       *******************************************
 6228                            1216     ;       *****   Clear CODE CHANGE ROUTINE       ***
 6229                            1217     ;       *******************************************
 6230                                     ***** BEGIN-POOL *****
 6231 00000A6E 0000                       DATA FOR SOURCE-LINE 1208
 6232 00000A70 00000000                   DATA FOR SOURCE-LINE 1183
 6233 00000A74 00000000                   DATA FOR SOURCE-LINE 1184
 6234 00000A78 00000000                   DATA FOR SOURCE-LINE 1188
 6235 00000A7C FFFFFF00                   DATA FOR SOURCE-LINE 1191
 6236 00000A80 00000000                   DATA FOR SOURCE-LINE 1193
 6237 00000A84 00000004                   DATA FOR SOURCE-LINE 1201
 6238                                     ***** END-POOL *****
 6239 00000A88                   1218     _CLR_CHG:                                       ; 00010110B     16
 6240                            1219             SUB_START
 6241 00000A88 4F22                   M           STS.L   PR,@-R15                ;[必要]
 6242                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 6243                            1220     
 6244                            1221             _SEQ_STW_CLR_CMD        _CLR_CODE,_CLR_CODE_END,ADR_AREA=0,COD_AREA1=4
 6245                                 M   
 6246 00000A8A D10E                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 6247 00000A8C 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 6248 00000A8E 8929                   M           BT      _JMP_C8000011                   ; IF ADR >= 127 THEN JUMP
 6249                                 M   ;
 6250 00000A90 D00D                   M           MOV.L   #(_CLR_CODE_END-_CLR_CODE),R0           ; 転送 BYTE長
 6251 00000A92 D30E                   M           MOV.L   #_CLR_CODE,R3                   ; Read CODE MOVE        (12 BYTE)
 6252                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 6253 00000A94 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 6254                                 M   
 6255                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 6256 00000A96 D10E                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 6257 00000A98 410B                   M           JSR     @R1                     ;
 6258 00000A9A 0009                   M           NOP                                     ;
 6259                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 6260 00000A9C D00D                   M           MOV.L   #H'FFFFFF00,R0                  ;
 6261                                 M   ;       *** ADR SET ***
 6262 00000A9E D10E                   M           MOV.L   #0,R1                   ; ﾒﾓﾘのところ
 6263 00000AA0 341C                   M           ADD     R1,R4                           ; +0
 6264 00000AA2 6241                   M           MOV.W   @R4,R2                          ;
 6265 00000AA4 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 6266 00000AA6 4800                   M           SHLL    R8                              ; ADR*2
 6267 00000AA8 228B                   M           OR      R8,R2                           ;
 6268 00000AAA 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 6269                                 M   
 6270                                 M   ;       *** OFFSET SET ***
 6271 00000AAC D10B                   M           MOV.L   #4,R1                   ; ﾒﾓﾘのところ
 6272 00000AAE 341C                   M           ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 6273 00000AB0 D00B                   M           MOV.L   #_SEQ_ADDCMD_R0_TBL,R0  ;
 6274 00000AB2 4900                   M           SHLL    R9                              ; OFFSET*2
 6275 00000AB4 309C                   M           ADD     R9,R0                           ;
 6276 00000AB6 6001                   M           MOV.W   @R0,R0                          ;
 6277 00000AB8 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 6278                                 M   
 6279 00000ABA 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 6280                                 M           M_BRA   _JMP_EX00011                    ;
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    44
PROGRAM NAME =

 6281 00000ABC A013                   M           BRA     _JMP_EX00011
 6282 00000ABE 0009                   M           NOP
 6283                                 M   ;
 6284                                 M   ***** BEGIN-POOL *****
 6285 00000AC0 0000                   M   DATA FOR SOURCE-LINE 1221
 6286 00000AC2 0000                   M   ALIGNMENT CODE
 6287 00000AC4 0000007F               M   DATA FOR SOURCE-LINE 1221
 6288 00000AC8 00000000               M   DATA FOR SOURCE-LINE 1221
 6289 00000ACC 00000000               M   DATA FOR SOURCE-LINE 1221
 6290 00000AD0 00000000               M   DATA FOR SOURCE-LINE 1221
 6291 00000AD4 FFFFFF00               M   DATA FOR SOURCE-LINE 1221
 6292 00000AD8 00000000               M   DATA FOR SOURCE-LINE 1221
 6293 00000ADC 00000004               M   DATA FOR SOURCE-LINE 1221
 6294 00000AE0 00000000               M   DATA FOR SOURCE-LINE 1221
 6295                                 M   ***** END-POOL *****
 6296 00000AE4                        M   _JMP_C8000011:
 6297 00000AE4 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 6298                                 M   
 6299 00000AE6                        M   _JMP_EX00011:
 6300                            1222     
 6301                            1223             SUB_END
 6302                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 6303 00000AE6 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 6304                            1224             M_RTS
 6305 00000AE8 000B                   M           RTS                             ;RTSの後ろの
 6306 00000AEA 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 6307                            1225     
 6308                                     ***** BEGIN-POOL *****
 6309 00000AEC FF00                       DATA FOR SOURCE-LINE 1221
 6310                                     ***** END-POOL *****
 6311 00000AEE                   1226     _DSET_CHG:                      ; 00011010B     1A
 6312                            1227             SUB_START
 6313 00000AEE 4F22                   M           STS.L   PR,@-R15                ;[必要]
 6314                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 6315                            1228     
 6316 00000AF0 D00B              1229             MOV.L   #(_DS_CODE_END-_DS_CODE),R0     ; 転送 BYTE長
 6317 00000AF2 D30C              1230             MOV.L   #_DS_CODE,R3                    ; Read CODE MOVE        (12 BYTE)
 6318                            1231     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 6319 00000AF4 64D3              1232             MOV     R13,R4                          ; SEQ ADR. KEEP
 6320                            1233     
 6321                            1234             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 6322 00000AF6 D10C                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 6323 00000AF8 410B                   M           JSR     @R1                     ;
 6324 00000AFA 0009                   M           NOP                                     ;
 6325                            1235                                                     ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 6326                            1236     
 6327 00000AFC D00B              1237             MOV.L   #H'FFFFFF00,R0                  ;
 6328                            1238     ;       *** DATA_LO SET ***
 6329 00000AFE D10C              1239             MOV.L   #0,R1                           ; ﾒﾓﾘのところ
 6330 00000B00 341C              1240             ADD     R1,R4                           ; +0
 6331 00000B02 6241              1241             MOV.W   @R4,R2                          ;
 6332 00000B04 2209              1242             AND     R0,R2                           ; ﾃﾞｰﾀのところをｸﾘｱ
 6333 00000B06 228B              1243             OR      R8,R2                           ; 下位ﾃﾞｰﾀ
 6334 00000B08 2421              1244             MOV.W   R2,@R4                          ; RAM ADR SET
 6335                            1245     
 6336                            1246     ;       *** DATA_HI SET ***
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    45
PROGRAM NAME =

 6337 00000B0A D10A              1247             MOV.L   #4,R1                           ; ﾒﾓﾘのところ
 6338 00000B0C 341C              1248             ADD     R1,R4                           ; 0+4=4
 6339 00000B0E 6241              1249             MOV.W   @R4,R2                          ;
 6340 00000B10 2209              1250             AND     R0,R2                           ; ﾃﾞｰﾀのところをｸﾘｱ
 6341 00000B12 229B              1251             OR      R9,R2                           ; 上位ﾃﾞｰﾀ
 6342 00000B14 2421              1252             MOV.W   R2,@R4                          ; RAM ADR SET
 6343                            1253     
 6344 00000B16 9002              1254             MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 6345                            1255     ;
 6346                            1256             SUB_END
 6347                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 6348 00000B18 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 6349                            1257             M_RTS
 6350 00000B1A 000B                   M           RTS                             ;RTSの後ろの
 6351 00000B1C 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 6352                            1258     
 6353                            1259     
 6354                            1260     ;       *******************************************
 6355                            1261     ;       *****   ARG And MRG CODE CHANGE ROUTINE ***
 6356                            1262     ;       *******************************************
 6357                                     ***** BEGIN-POOL *****
 6358 00000B1E 0000                       DATA FOR SOURCE-LINE 1254
 6359 00000B20 00000000                   DATA FOR SOURCE-LINE 1229
 6360 00000B24 00000000                   DATA FOR SOURCE-LINE 1230
 6361 00000B28 00000000                   DATA FOR SOURCE-LINE 1234
 6362 00000B2C FFFFFF00                   DATA FOR SOURCE-LINE 1237
 6363 00000B30 00000000                   DATA FOR SOURCE-LINE 1239
 6364 00000B34 00000004                   DATA FOR SOURCE-LINE 1247
 6365                                     ***** END-POOL *****
 6366 00000B38                   1263     _AMRG_CHG:                      ; 00100000B     20
 6367                            1264             SUB_START
 6368 00000B38 4F22                   M           STS.L   PR,@-R15                ;[必要]
 6369                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 6370                            1265     
 6371 00000B3A D004              1266             MOV.L   #(_AMRG_CODE_END-_AMRG_CODE),R0 ; 転送 BYTE長
 6372 00000B3C D304              1267             MOV.L   #_AMRG_CODE,R3                  ; Read CODE MOVE        (12 BYTE)
 6373                            1268     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 6374 00000B3E 64D3              1269             MOV     R13,R4                          ; SEQ ADR. KEEP
 6375                            1270     
 6376                            1271             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 6377 00000B40 D104                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 6378 00000B42 410B                   M           JSR     @R1                     ;
 6379 00000B44 0009                   M           NOP                                     ;
 6380                            1272     
 6381                            1273             SUB_END
 6382                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 6383 00000B46 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 6384                            1274             M_RTS
 6385 00000B48 000B                   M           RTS                             ;RTSの後ろの
 6386 00000B4A 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 6387                            1275     
 6388                            1276     ;       *******************************************
 6389                            1277     ;       *****   ARG Or MRG CODE CHANGE ROUTINE  ***
 6390                            1278     ;       *******************************************
 6391                                     ***** BEGIN-POOL *****
 6392 00000B4C 00000000                   DATA FOR SOURCE-LINE 1266
 6393 00000B50 00000000                   DATA FOR SOURCE-LINE 1267
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    46
PROGRAM NAME =

 6394 00000B54 00000000                   DATA FOR SOURCE-LINE 1271
 6395                                     ***** END-POOL *****
 6396 00000B58                   1279     _OMRG_CHG:                      ; 00100010B     22
 6397                            1280             SUB_START
 6398 00000B58 4F22                   M           STS.L   PR,@-R15                ;[必要]
 6399                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 6400                            1281     
 6401 00000B5A D004              1282             MOV.L   #(_OMRG_CODE_END-_OMRG_CODE),R0 ; 転送 BYTE長
 6402 00000B5C D304              1283             MOV.L   #_OMRG_CODE,R3                  ; Read CODE MOVE        (12 BYTE)
 6403                            1284     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 6404 00000B5E 64D3              1285             MOV     R13,R4                          ; SEQ ADR. KEEP
 6405                            1286     
 6406                            1287             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 6407 00000B60 D104                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 6408 00000B62 410B                   M           JSR     @R1                     ;
 6409 00000B64 0009                   M           NOP                                     ;
 6410                            1288     
 6411                            1289             SUB_END
 6412                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 6413 00000B66 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 6414                            1290             M_RTS
 6415 00000B68 000B                   M           RTS                             ;RTSの後ろの
 6416 00000B6A 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 6417                            1291     
 6418                            1292     
 6419                            1293     ;       *******************************************
 6420                            1294     ;       *****   Write NRG CODE CHANGE ROUTINE   ***
 6421                            1295     ;       *******************************************
 6422                                     ***** BEGIN-POOL *****
 6423 00000B6C 00000000                   DATA FOR SOURCE-LINE 1282
 6424 00000B70 00000000                   DATA FOR SOURCE-LINE 1283
 6425 00000B74 00000000                   DATA FOR SOURCE-LINE 1287
 6426                                     ***** END-POOL *****
 6427 00000B78                   1296     _WNRG_CHG:                      ; 00100100B     24
 6428                            1297             SUB_START
 6429 00000B78 4F22                   M           STS.L   PR,@-R15                ;[必要]
 6430                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 6431                            1298     
 6432 00000B7A D004              1299             MOV.L   #(_WNRG_CODE_END-_WNRG_CODE),R0 ; 転送 BYTE長
 6433 00000B7C D304              1300             MOV.L   #_WNRG_CODE,R3                  ; Read CODE MOVE        (12 BYTE)
 6434                            1301     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 6435 00000B7E 64D3              1302             MOV     R13,R4                          ; SEQ ADR. KEEP
 6436                            1303     
 6437                            1304             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 6438 00000B80 D104                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 6439 00000B82 410B                   M           JSR     @R1                     ;
 6440 00000B84 0009                   M           NOP                                     ;
 6441                            1305     
 6442                            1306             SUB_END
 6443                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 6444 00000B86 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 6445                            1307             M_RTS
 6446 00000B88 000B                   M           RTS                             ;RTSの後ろの
 6447 00000B8A 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 6448                            1308     
 6449                            1309     ;       ***************************************************
 6450                            1310     ;       *****   Write Not NRG CODE CHANGE ROUTINE       ***
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    47
PROGRAM NAME =

 6451                            1311     ;       ***************************************************
 6452                                     ***** BEGIN-POOL *****
 6453 00000B8C 00000000                   DATA FOR SOURCE-LINE 1299
 6454 00000B90 00000000                   DATA FOR SOURCE-LINE 1300
 6455 00000B94 00000000                   DATA FOR SOURCE-LINE 1304
 6456                                     ***** END-POOL *****
 6457 00000B98                   1312     _WNNRG_CHG:                     ; 00100101B     25
 6458                            1313             SUB_START
 6459 00000B98 4F22                   M           STS.L   PR,@-R15                ;[必要]
 6460                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 6461                            1314     
 6462 00000B9A D004              1315             MOV.L   #(_WNNRG_CODE_END-_WNNRG_CODE),R0       ; 転送 BYTE長
 6463 00000B9C D304              1316             MOV.L   #_WNNRG_CODE,R3                         ; Read CODE MOVE        (12 BYTE)
 6464                            1317     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 6465 00000B9E 64D3              1318             MOV     R13,R4                          ; SEQ ADR. KEEP
 6466                            1319     
 6467                            1320             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1                  ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 6468 00000BA0 D104                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 6469 00000BA2 410B                   M           JSR     @R1                     ;
 6470 00000BA4 0009                   M           NOP                                     ;
 6471                            1321     
 6472                            1322             SUB_END
 6473                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 6474 00000BA6 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 6475                            1323             M_RTS
 6476 00000BA8 000B                   M           RTS                             ;RTSの後ろの
 6477 00000BAA 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 6478                            1324     
 6479                            1325     ;       ***************************************************
 6480                            1326     ;       *****   Program End CODE CHANGE ROUTINE         ***
 6481                            1327     ;       ***************************************************
 6482                                     ***** BEGIN-POOL *****
 6483 00000BAC 00000000                   DATA FOR SOURCE-LINE 1315
 6484 00000BB0 00000000                   DATA FOR SOURCE-LINE 1316
 6485 00000BB4 00000000                   DATA FOR SOURCE-LINE 1320
 6486                                     ***** END-POOL *****
 6487 00000BB8                   1328     _END_CHG:                       ; 00101010B     2A
 6488                            1329             SUB_START
 6489 00000BB8 4F22                   M           STS.L   PR,@-R15                ;[必要]
 6490                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 6491                            1330     
 6492 00000BBA D005              1331             MOV.L   #(_END_CODE_END-_END_CODE),R0   ; 転送 BYTE長
 6493 00000BBC D305              1332             MOV.L   #_END_CODE,R3                   ; Read CODE MOVE        (12 BYTE)
 6494                            1333     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 6495 00000BBE 64D3              1334             MOV     R13,R4                          ; SEQ ADR. KEEP
 6496                            1335     
 6497                            1336             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 6498 00000BC0 D105                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 6499 00000BC2 410B                   M           JSR     @R1                     ;
 6500 00000BC4 0009                   M           NOP                                     ;
 6501                            1337     
 6502 00000BC6 9002              1338             MOV.W   #_SQ_NML_END,R0                 ; END CODE SET
 6503                            1339     
 6504                            1340             SUB_END
 6505                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 6506 00000BC8 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 6507                            1341             M_RTS
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    48
PROGRAM NAME =

 6508 00000BCA 000B                   M           RTS                             ;RTSの後ろの
 6509 00000BCC 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 6510                            1342     
 6511                            1343     
 6512                            1344     ;       ***************************************************
 6513                            1345     ;       *****   CARD DATA LOAD CODE CHANGE ROUTINE      ***
 6514                            1346     ;       ***************************************************
 6515                                     ***** BEGIN-POOL *****
 6516 00000BCE 0055                       DATA FOR SOURCE-LINE 1338
 6517 00000BD0 00000000                   DATA FOR SOURCE-LINE 1331
 6518 00000BD4 00000000                   DATA FOR SOURCE-LINE 1332
 6519 00000BD8 00000000                   DATA FOR SOURCE-LINE 1336
 6520                                     ***** END-POOL *****
 6521 00000BDC                   1347     _LDW_CHG:                       ; 00110000B     30
 6522                            1348             SUB_START
 6523 00000BDC 4F22                   M           STS.L   PR,@-R15                ;[必要]
 6524                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 6525                            1349     
 6526                            1350             _SEQ_LDW_CMP_OPE_CMD    _LDW_CODE,_LDW_CODE_END,ADR_AREA=0,COD_AREA1=4
 6527                                 M   
 6528 00000BDE D10E                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 6529 00000BE0 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 6530 00000BE2 8929                   M           BT      _JMP_C8000012                   ; IF ADR >= 127 THEN JUMP
 6531                                 M   ;
 6532 00000BE4 D00D                   M           MOV.L   #(_LDW_CODE_END-_LDW_CODE),R0           ; 転送 BYTE長
 6533 00000BE6 D30E                   M           MOV.L   #_LDW_CODE,R3                   ; Read CODE MOVE        (12 BYTE)
 6534                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 6535 00000BE8 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 6536                                 M   
 6537                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 6538 00000BEA D10E                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 6539 00000BEC 410B                   M           JSR     @R1                     ;
 6540 00000BEE 0009                   M           NOP                                     ;
 6541                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 6542                                 M   
 6543 00000BF0 D00D                   M           MOV.L   #H'FFFFFF00,R0                  ;
 6544                                 M   ;       *** ADR SET ***
 6545 00000BF2 D10E                   M           MOV.L   #0,R1                   ; ﾒﾓﾘのところ
 6546 00000BF4 341C                   M           ADD     R1,R4                           ; +0
 6547 00000BF6 6241                   M           MOV.W   @R4,R2                          ;
 6548 00000BF8 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 6549 00000BFA 4800                   M           SHLL    R8                              ; ADR*2
 6550 00000BFC 228B                   M           OR      R8,R2                           ;
 6551 00000BFE 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 6552                                 M   
 6553                                 M   ;       *** OFFSET SET ***
 6554 00000C00 D10B                   M           MOV.L   #4,R1                   ; ﾒﾓﾘのところ
 6555 00000C02 341C                   M           ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 6556 00000C04 D00B                   M           MOV.L   #_SEQ_MOVCMD_R3RD_TBL,R0        ;
 6557 00000C06 4900                   M           SHLL    R9                              ; OFFSET*2
 6558 00000C08 309C                   M           ADD     R9,R0                           ;
 6559 00000C0A 6001                   M           MOV.W   @R0,R0                          ;
 6560 00000C0C 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 6561                                 M   
 6562 00000C0E 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 6563                                 M           M_BRA   _JMP_EX00012                    ;
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    49
PROGRAM NAME =

 6564 00000C10 A013                   M           BRA     _JMP_EX00012
 6565 00000C12 0009                   M           NOP
 6566                                 M   ;
 6567                                 M   ***** BEGIN-POOL *****
 6568 00000C14 0000                   M   DATA FOR SOURCE-LINE 1350
 6569 00000C16 0000                   M   ALIGNMENT CODE
 6570 00000C18 0000007F               M   DATA FOR SOURCE-LINE 1350
 6571 00000C1C 00000000               M   DATA FOR SOURCE-LINE 1350
 6572 00000C20 00000000               M   DATA FOR SOURCE-LINE 1350
 6573 00000C24 00000000               M   DATA FOR SOURCE-LINE 1350
 6574 00000C28 FFFFFF00               M   DATA FOR SOURCE-LINE 1350
 6575 00000C2C 00000000               M   DATA FOR SOURCE-LINE 1350
 6576 00000C30 00000004               M   DATA FOR SOURCE-LINE 1350
 6577 00000C34 00000000               M   DATA FOR SOURCE-LINE 1350
 6578                                 M   ***** END-POOL *****
 6579 00000C38                        M   _JMP_C8000012:
 6580 00000C38 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 6581                                 M   
 6582 00000C3A                        M   _JMP_EX00012:
 6583                            1351     
 6584                            1352             SUB_END
 6585                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 6586 00000C3A 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 6587                            1353             M_RTS
 6588 00000C3C 000B                   M           RTS                             ;RTSの後ろの
 6589 00000C3E 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 6590                            1354     
 6591                            1355     
 6592                            1356     
 6593                            1357     ;       ***********************************************************
 6594                            1358     ;       *****   条件なしCARD DATA LOAD CODE CHANGE ROUTINE      ***
 6595                            1359     ;       ***********************************************************
 6596                                     ***** BEGIN-POOL *****
 6597 00000C40 FF00                       DATA FOR SOURCE-LINE 1350
 6598                                     ***** END-POOL *****
 6599 00000C42                   1360     _LDWU_CHG:                      ; 00110010B     32
 6600                            1361             SUB_START
 6601 00000C42 4F22                   M           STS.L   PR,@-R15                ;[必要]
 6602                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 6603                            1362     
 6604                            1363             _SEQ_LDW_CMP_OPE_CMD    _LDWU_CODE,_LDWU_CODE_END,ADR_AREA=0,COD_AREA1=4
 6605                                 M   
 6606 00000C44 D10D                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 6607 00000C46 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 6608 00000C48 8928                   M           BT      _JMP_C8000013                   ; IF ADR >= 127 THEN JUMP
 6609                                 M   ;
 6610 00000C4A D00D                   M           MOV.L   #(_LDWU_CODE_END-_LDWU_CODE),R0         ; 転送 BYTE長
 6611 00000C4C D30D                   M           MOV.L   #_LDWU_CODE,R3                  ; Read CODE MOVE        (12 BYTE)
 6612                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 6613 00000C4E 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 6614                                 M   
 6615                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 6616 00000C50 D10D                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 6617 00000C52 410B                   M           JSR     @R1                     ;
 6618 00000C54 0009                   M           NOP                                     ;
 6619                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    50
PROGRAM NAME =

 6620                                 M   
 6621 00000C56 D00D                   M           MOV.L   #H'FFFFFF00,R0                  ;
 6622                                 M   ;       *** ADR SET ***
 6623 00000C58 D10D                   M           MOV.L   #0,R1                   ; ﾒﾓﾘのところ
 6624 00000C5A 341C                   M           ADD     R1,R4                           ; +0
 6625 00000C5C 6241                   M           MOV.W   @R4,R2                          ;
 6626 00000C5E 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 6627 00000C60 4800                   M           SHLL    R8                              ; ADR*2
 6628 00000C62 228B                   M           OR      R8,R2                           ;
 6629 00000C64 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 6630                                 M   
 6631                                 M   ;       *** OFFSET SET ***
 6632 00000C66 D10B                   M           MOV.L   #4,R1                   ; ﾒﾓﾘのところ
 6633 00000C68 341C                   M           ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 6634 00000C6A D00B                   M           MOV.L   #_SEQ_MOVCMD_R3RD_TBL,R0        ;
 6635 00000C6C 4900                   M           SHLL    R9                              ; OFFSET*2
 6636 00000C6E 309C                   M           ADD     R9,R0                           ;
 6637 00000C70 6001                   M           MOV.W   @R0,R0                          ;
 6638 00000C72 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 6639                                 M   
 6640 00000C74 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 6641                                 M           M_BRA   _JMP_EX00013                    ;
 6642 00000C76 A012                   M           BRA     _JMP_EX00013
 6643 00000C78 0009                   M           NOP
 6644                                 M   ;
 6645                                 M   ***** BEGIN-POOL *****
 6646 00000C7A 0000                   M   DATA FOR SOURCE-LINE 1363
 6647 00000C7C 0000007F               M   DATA FOR SOURCE-LINE 1363
 6648 00000C80 00000000               M   DATA FOR SOURCE-LINE 1363
 6649 00000C84 00000000               M   DATA FOR SOURCE-LINE 1363
 6650 00000C88 00000000               M   DATA FOR SOURCE-LINE 1363
 6651 00000C8C FFFFFF00               M   DATA FOR SOURCE-LINE 1363
 6652 00000C90 00000000               M   DATA FOR SOURCE-LINE 1363
 6653 00000C94 00000004               M   DATA FOR SOURCE-LINE 1363
 6654 00000C98 00000000               M   DATA FOR SOURCE-LINE 1363
 6655                                 M   ***** END-POOL *****
 6656 00000C9C                        M   _JMP_C8000013:
 6657 00000C9C 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 6658                                 M   
 6659 00000C9E                        M   _JMP_EX00013:
 6660                            1364     
 6661                            1365             SUB_END
 6662                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 6663 00000C9E 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 6664                            1366             M_RTS
 6665 00000CA0 000B                   M           RTS                             ;RTSの後ろの
 6666 00000CA2 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 6667                            1367     
 6668                            1368     
 6669                            1369     ;       ***************************************************
 6670                            1370     ;       *****   CARD DATA STORE CODE CHANGE ROUTINE     ***
 6671                            1371     ;       ***************************************************
 6672                                     ***** BEGIN-POOL *****
 6673 00000CA4 FF00                       DATA FOR SOURCE-LINE 1363
 6674                                     ***** END-POOL *****
 6675 00000CA6                   1372     _STW_CHG:                       ; 00111110B     3E
 6676                            1373             SUB_START
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    51
PROGRAM NAME =

 6677 00000CA6 4F22                   M           STS.L   PR,@-R15                ;[必要]
 6678                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 6679                            1374     
 6680                            1375             _SEQ_STW_CLR_CMD        _STW_CODE,_STW_CODE_END,ADR_AREA=0,COD_AREA1=4
 6681                                 M   
 6682 00000CA8 D10D                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 6683 00000CAA 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 6684 00000CAC 8928                   M           BT      _JMP_C8000014                   ; IF ADR >= 127 THEN JUMP
 6685                                 M   ;
 6686 00000CAE D00D                   M           MOV.L   #(_STW_CODE_END-_STW_CODE),R0           ; 転送 BYTE長
 6687 00000CB0 D30D                   M           MOV.L   #_STW_CODE,R3                   ; Read CODE MOVE        (12 BYTE)
 6688                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 6689 00000CB2 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 6690                                 M   
 6691                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 6692 00000CB4 D10D                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 6693 00000CB6 410B                   M           JSR     @R1                     ;
 6694 00000CB8 0009                   M           NOP                                     ;
 6695                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 6696 00000CBA D00D                   M           MOV.L   #H'FFFFFF00,R0                  ;
 6697                                 M   ;       *** ADR SET ***
 6698 00000CBC D10D                   M           MOV.L   #0,R1                   ; ﾒﾓﾘのところ
 6699 00000CBE 341C                   M           ADD     R1,R4                           ; +0
 6700 00000CC0 6241                   M           MOV.W   @R4,R2                          ;
 6701 00000CC2 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 6702 00000CC4 4800                   M           SHLL    R8                              ; ADR*2
 6703 00000CC6 228B                   M           OR      R8,R2                           ;
 6704 00000CC8 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 6705                                 M   
 6706                                 M   ;       *** OFFSET SET ***
 6707 00000CCA D10B                   M           MOV.L   #4,R1                   ; ﾒﾓﾘのところ
 6708 00000CCC 341C                   M           ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 6709 00000CCE D00B                   M           MOV.L   #_SEQ_ADDCMD_R0_TBL,R0  ;
 6710 00000CD0 4900                   M           SHLL    R9                              ; OFFSET*2
 6711 00000CD2 309C                   M           ADD     R9,R0                           ;
 6712 00000CD4 6001                   M           MOV.W   @R0,R0                          ;
 6713 00000CD6 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 6714                                 M   
 6715 00000CD8 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 6716                                 M           M_BRA   _JMP_EX00014                    ;
 6717 00000CDA A012                   M           BRA     _JMP_EX00014
 6718 00000CDC 0009                   M           NOP
 6719                                 M   ;
 6720                                 M   ***** BEGIN-POOL *****
 6721 00000CDE 0000                   M   DATA FOR SOURCE-LINE 1375
 6722 00000CE0 0000007F               M   DATA FOR SOURCE-LINE 1375
 6723 00000CE4 00000000               M   DATA FOR SOURCE-LINE 1375
 6724 00000CE8 00000000               M   DATA FOR SOURCE-LINE 1375
 6725 00000CEC 00000000               M   DATA FOR SOURCE-LINE 1375
 6726 00000CF0 FFFFFF00               M   DATA FOR SOURCE-LINE 1375
 6727 00000CF4 00000000               M   DATA FOR SOURCE-LINE 1375
 6728 00000CF8 00000004               M   DATA FOR SOURCE-LINE 1375
 6729 00000CFC 00000000               M   DATA FOR SOURCE-LINE 1375
 6730                                 M   ***** END-POOL *****
 6731 00000D00                        M   _JMP_C8000014:
 6732 00000D00 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    52
PROGRAM NAME =

 6733                                 M   
 6734 00000D02                        M   _JMP_EX00014:
 6735                            1376     
 6736                            1377             SUB_END
 6737                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 6738 00000D02 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 6739                            1378             M_RTS
 6740 00000D04 000B                   M           RTS                             ;RTSの後ろの
 6741 00000D06 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 6742                            1379     
 6743                            1380     ;       ***********************************************************
 6744                            1381     ;       *****   条件なしCARD DATA STORE CODE CHANGE ROUTINE     ***
 6745                            1382     ;       ***********************************************************
 6746                                     ***** BEGIN-POOL *****
 6747 00000D08 FF00                       DATA FOR SOURCE-LINE 1375
 6748                                     ***** END-POOL *****
 6749 00000D0A                   1383     _STWU_CHG:                      ; 00111100B     3E
 6750                            1384             SUB_START
 6751 00000D0A 4F22                   M           STS.L   PR,@-R15                ;[必要]
 6752                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 6753                            1385     
 6754                            1386             _SEQ_STW_CLR_CMD        _STWU_CODE,_STWU_CODE_END,ADR_AREA=0,COD_AREA1=4
 6755                                 M   
 6756 00000D0C D10D                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 6757 00000D0E 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 6758 00000D10 8928                   M           BT      _JMP_C8000015                   ; IF ADR >= 127 THEN JUMP
 6759                                 M   ;
 6760 00000D12 D00D                   M           MOV.L   #(_STWU_CODE_END-_STWU_CODE),R0         ; 転送 BYTE長
 6761 00000D14 D30D                   M           MOV.L   #_STWU_CODE,R3                  ; Read CODE MOVE        (12 BYTE)
 6762                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 6763 00000D16 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 6764                                 M   
 6765                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 6766 00000D18 D10D                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 6767 00000D1A 410B                   M           JSR     @R1                     ;
 6768 00000D1C 0009                   M           NOP                                     ;
 6769                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 6770 00000D1E D00D                   M           MOV.L   #H'FFFFFF00,R0                  ;
 6771                                 M   ;       *** ADR SET ***
 6772 00000D20 D10D                   M           MOV.L   #0,R1                   ; ﾒﾓﾘのところ
 6773 00000D22 341C                   M           ADD     R1,R4                           ; +0
 6774 00000D24 6241                   M           MOV.W   @R4,R2                          ;
 6775 00000D26 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 6776 00000D28 4800                   M           SHLL    R8                              ; ADR*2
 6777 00000D2A 228B                   M           OR      R8,R2                           ;
 6778 00000D2C 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 6779                                 M   
 6780                                 M   ;       *** OFFSET SET ***
 6781 00000D2E D10B                   M           MOV.L   #4,R1                   ; ﾒﾓﾘのところ
 6782 00000D30 341C                   M           ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 6783 00000D32 D00B                   M           MOV.L   #_SEQ_ADDCMD_R0_TBL,R0  ;
 6784 00000D34 4900                   M           SHLL    R9                              ; OFFSET*2
 6785 00000D36 309C                   M           ADD     R9,R0                           ;
 6786 00000D38 6001                   M           MOV.W   @R0,R0                          ;
 6787 00000D3A 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 6788                                 M   
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    53
PROGRAM NAME =

 6789 00000D3C 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 6790                                 M           M_BRA   _JMP_EX00015                    ;
 6791 00000D3E A012                   M           BRA     _JMP_EX00015
 6792 00000D40 0009                   M           NOP
 6793                                 M   ;
 6794                                 M   ***** BEGIN-POOL *****
 6795 00000D42 0000                   M   DATA FOR SOURCE-LINE 1386
 6796 00000D44 0000007F               M   DATA FOR SOURCE-LINE 1386
 6797 00000D48 00000000               M   DATA FOR SOURCE-LINE 1386
 6798 00000D4C 00000000               M   DATA FOR SOURCE-LINE 1386
 6799 00000D50 00000000               M   DATA FOR SOURCE-LINE 1386
 6800 00000D54 FFFFFF00               M   DATA FOR SOURCE-LINE 1386
 6801 00000D58 00000000               M   DATA FOR SOURCE-LINE 1386
 6802 00000D5C 00000004               M   DATA FOR SOURCE-LINE 1386
 6803 00000D60 00000000               M   DATA FOR SOURCE-LINE 1386
 6804                                 M   ***** END-POOL *****
 6805 00000D64                        M   _JMP_C8000015:
 6806 00000D64 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 6807                                 M   
 6808 00000D66                        M   _JMP_EX00015:
 6809                            1387     
 6810                            1388             SUB_END
 6811                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 6812 00000D66 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 6813                            1389             M_RTS
 6814 00000D68 000B                   M           RTS                             ;RTSの後ろの
 6815 00000D6A 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 6816                            1390     
 6817                            1391     ;       ***************************************************
 6818                            1392     ;       *****   CMP EQ CODE CHANGE ROUTINE              ***
 6819                            1393     ;       ***************************************************
 6820                                     ***** BEGIN-POOL *****
 6821 00000D6C FF00                       DATA FOR SOURCE-LINE 1386
 6822                                     ***** END-POOL *****
 6823 00000D6E                   1394     _EQ_CHG:                        ; 01000000B     40
 6824                            1395             SUB_START
 6825 00000D6E 4F22                   M           STS.L   PR,@-R15                ;[必要]
 6826                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 6827                            1396     
 6828                            1397             _SEQ_LDW_CMP_OPE_CMD    _EQ_CODE,_EQ_CODE_END,ADR_AREA=0,COD_AREA1=4
 6829                                 M   
 6830 00000D70 D10D                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 6831 00000D72 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 6832 00000D74 8928                   M           BT      _JMP_C8000016                   ; IF ADR >= 127 THEN JUMP
 6833                                 M   ;
 6834 00000D76 D00D                   M           MOV.L   #(_EQ_CODE_END-_EQ_CODE),R0             ; 転送 BYTE長
 6835 00000D78 D30D                   M           MOV.L   #_EQ_CODE,R3                    ; Read CODE MOVE        (12 BYTE)
 6836                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 6837 00000D7A 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 6838                                 M   
 6839                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 6840 00000D7C D10D                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 6841 00000D7E 410B                   M           JSR     @R1                     ;
 6842 00000D80 0009                   M           NOP                                     ;
 6843                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 6844                                 M   
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    54
PROGRAM NAME =

 6845 00000D82 D00D                   M           MOV.L   #H'FFFFFF00,R0                  ;
 6846                                 M   ;       *** ADR SET ***
 6847 00000D84 D10D                   M           MOV.L   #0,R1                   ; ﾒﾓﾘのところ
 6848 00000D86 341C                   M           ADD     R1,R4                           ; +0
 6849 00000D88 6241                   M           MOV.W   @R4,R2                          ;
 6850 00000D8A 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 6851 00000D8C 4800                   M           SHLL    R8                              ; ADR*2
 6852 00000D8E 228B                   M           OR      R8,R2                           ;
 6853 00000D90 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 6854                                 M   
 6855                                 M   ;       *** OFFSET SET ***
 6856 00000D92 D10B                   M           MOV.L   #4,R1                   ; ﾒﾓﾘのところ
 6857 00000D94 341C                   M           ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 6858 00000D96 D00B                   M           MOV.L   #_SEQ_MOVCMD_R3RD_TBL,R0        ;
 6859 00000D98 4900                   M           SHLL    R9                              ; OFFSET*2
 6860 00000D9A 309C                   M           ADD     R9,R0                           ;
 6861 00000D9C 6001                   M           MOV.W   @R0,R0                          ;
 6862 00000D9E 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 6863                                 M   
 6864 00000DA0 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 6865                                 M           M_BRA   _JMP_EX00016                    ;
 6866 00000DA2 A012                   M           BRA     _JMP_EX00016
 6867 00000DA4 0009                   M           NOP
 6868                                 M   ;
 6869                                 M   ***** BEGIN-POOL *****
 6870 00000DA6 0000                   M   DATA FOR SOURCE-LINE 1397
 6871 00000DA8 0000007F               M   DATA FOR SOURCE-LINE 1397
 6872 00000DAC 00000000               M   DATA FOR SOURCE-LINE 1397
 6873 00000DB0 00000000               M   DATA FOR SOURCE-LINE 1397
 6874 00000DB4 00000000               M   DATA FOR SOURCE-LINE 1397
 6875 00000DB8 FFFFFF00               M   DATA FOR SOURCE-LINE 1397
 6876 00000DBC 00000000               M   DATA FOR SOURCE-LINE 1397
 6877 00000DC0 00000004               M   DATA FOR SOURCE-LINE 1397
 6878 00000DC4 00000000               M   DATA FOR SOURCE-LINE 1397
 6879                                 M   ***** END-POOL *****
 6880 00000DC8                        M   _JMP_C8000016:
 6881 00000DC8 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 6882                                 M   
 6883 00000DCA                        M   _JMP_EX00016:
 6884                            1398     
 6885                            1399             SUB_END
 6886                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 6887 00000DCA 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 6888                            1400             M_RTS
 6889 00000DCC 000B                   M           RTS                             ;RTSの後ろの
 6890 00000DCE 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 6891                            1401     
 6892                            1402     
 6893                            1403     ;       ***************************************************
 6894                            1404     ;       *****   CMP NE CODE CHANGE ROUTINE              ***
 6895                            1405     ;       ***************************************************
 6896                                     ***** BEGIN-POOL *****
 6897 00000DD0 FF00                       DATA FOR SOURCE-LINE 1397
 6898                                     ***** END-POOL *****
 6899 00000DD2                   1406     _NE_CHG:                        ; 01000010B     42
 6900                            1407             SUB_START
 6901 00000DD2 4F22                   M           STS.L   PR,@-R15                ;[必要]
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    55
PROGRAM NAME =

 6902                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 6903                            1408     
 6904                            1409             _SEQ_LDW_CMP_OPE_CMD    _NE_CODE,_NE_CODE_END,ADR_AREA=0,COD_AREA1=4
 6905                                 M   
 6906 00000DD4 D10D                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 6907 00000DD6 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 6908 00000DD8 8928                   M           BT      _JMP_C8000017                   ; IF ADR >= 127 THEN JUMP
 6909                                 M   ;
 6910 00000DDA D00D                   M           MOV.L   #(_NE_CODE_END-_NE_CODE),R0             ; 転送 BYTE長
 6911 00000DDC D30D                   M           MOV.L   #_NE_CODE,R3                    ; Read CODE MOVE        (12 BYTE)
 6912                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 6913 00000DDE 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 6914                                 M   
 6915                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 6916 00000DE0 D10D                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 6917 00000DE2 410B                   M           JSR     @R1                     ;
 6918 00000DE4 0009                   M           NOP                                     ;
 6919                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 6920                                 M   
 6921 00000DE6 D00D                   M           MOV.L   #H'FFFFFF00,R0                  ;
 6922                                 M   ;       *** ADR SET ***
 6923 00000DE8 D10D                   M           MOV.L   #0,R1                   ; ﾒﾓﾘのところ
 6924 00000DEA 341C                   M           ADD     R1,R4                           ; +0
 6925 00000DEC 6241                   M           MOV.W   @R4,R2                          ;
 6926 00000DEE 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 6927 00000DF0 4800                   M           SHLL    R8                              ; ADR*2
 6928 00000DF2 228B                   M           OR      R8,R2                           ;
 6929 00000DF4 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 6930                                 M   
 6931                                 M   ;       *** OFFSET SET ***
 6932 00000DF6 D10B                   M           MOV.L   #4,R1                   ; ﾒﾓﾘのところ
 6933 00000DF8 341C                   M           ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 6934 00000DFA D00B                   M           MOV.L   #_SEQ_MOVCMD_R3RD_TBL,R0        ;
 6935 00000DFC 4900                   M           SHLL    R9                              ; OFFSET*2
 6936 00000DFE 309C                   M           ADD     R9,R0                           ;
 6937 00000E00 6001                   M           MOV.W   @R0,R0                          ;
 6938 00000E02 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 6939                                 M   
 6940 00000E04 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 6941                                 M           M_BRA   _JMP_EX00017                    ;
 6942 00000E06 A012                   M           BRA     _JMP_EX00017
 6943 00000E08 0009                   M           NOP
 6944                                 M   ;
 6945                                 M   ***** BEGIN-POOL *****
 6946 00000E0A 0000                   M   DATA FOR SOURCE-LINE 1409
 6947 00000E0C 0000007F               M   DATA FOR SOURCE-LINE 1409
 6948 00000E10 00000000               M   DATA FOR SOURCE-LINE 1409
 6949 00000E14 00000000               M   DATA FOR SOURCE-LINE 1409
 6950 00000E18 00000000               M   DATA FOR SOURCE-LINE 1409
 6951 00000E1C FFFFFF00               M   DATA FOR SOURCE-LINE 1409
 6952 00000E20 00000000               M   DATA FOR SOURCE-LINE 1409
 6953 00000E24 00000004               M   DATA FOR SOURCE-LINE 1409
 6954 00000E28 00000000               M   DATA FOR SOURCE-LINE 1409
 6955                                 M   ***** END-POOL *****
 6956 00000E2C                        M   _JMP_C8000017:
 6957 00000E2C 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    56
PROGRAM NAME =

 6958                                 M   
 6959 00000E2E                        M   _JMP_EX00017:
 6960                            1410     
 6961                            1411             SUB_END
 6962                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 6963 00000E2E 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 6964                            1412             M_RTS
 6965 00000E30 000B                   M           RTS                             ;RTSの後ろの
 6966 00000E32 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 6967                            1413     
 6968                            1414     
 6969                            1415     ;       ***************************************************
 6970                            1416     ;       *****   CMP GT CODE CHANGE ROUTINE              ***
 6971                            1417     ;       ***************************************************
 6972                                     ***** BEGIN-POOL *****
 6973 00000E34 FF00                       DATA FOR SOURCE-LINE 1409
 6974                                     ***** END-POOL *****
 6975 00000E36                   1418     _GT_CHG:                        ; 01000100B     44
 6976                            1419             SUB_START
 6977 00000E36 4F22                   M           STS.L   PR,@-R15                ;[必要]
 6978                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 6979                            1420     
 6980                            1421             _SEQ_LDW_CMP_OPE_CMD    _GT_CODE,_GT_CODE_END,ADR_AREA=0,COD_AREA1=4
 6981                                 M   
 6982 00000E38 D10D                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 6983 00000E3A 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 6984 00000E3C 8928                   M           BT      _JMP_C8000018                   ; IF ADR >= 127 THEN JUMP
 6985                                 M   ;
 6986 00000E3E D00D                   M           MOV.L   #(_GT_CODE_END-_GT_CODE),R0             ; 転送 BYTE長
 6987 00000E40 D30D                   M           MOV.L   #_GT_CODE,R3                    ; Read CODE MOVE        (12 BYTE)
 6988                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 6989 00000E42 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 6990                                 M   
 6991                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 6992 00000E44 D10D                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 6993 00000E46 410B                   M           JSR     @R1                     ;
 6994 00000E48 0009                   M           NOP                                     ;
 6995                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 6996                                 M   
 6997 00000E4A D00D                   M           MOV.L   #H'FFFFFF00,R0                  ;
 6998                                 M   ;       *** ADR SET ***
 6999 00000E4C D10D                   M           MOV.L   #0,R1                   ; ﾒﾓﾘのところ
 7000 00000E4E 341C                   M           ADD     R1,R4                           ; +0
 7001 00000E50 6241                   M           MOV.W   @R4,R2                          ;
 7002 00000E52 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 7003 00000E54 4800                   M           SHLL    R8                              ; ADR*2
 7004 00000E56 228B                   M           OR      R8,R2                           ;
 7005 00000E58 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 7006                                 M   
 7007                                 M   ;       *** OFFSET SET ***
 7008 00000E5A D10B                   M           MOV.L   #4,R1                   ; ﾒﾓﾘのところ
 7009 00000E5C 341C                   M           ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 7010 00000E5E D00B                   M           MOV.L   #_SEQ_MOVCMD_R3RD_TBL,R0        ;
 7011 00000E60 4900                   M           SHLL    R9                              ; OFFSET*2
 7012 00000E62 309C                   M           ADD     R9,R0                           ;
 7013 00000E64 6001                   M           MOV.W   @R0,R0                          ;
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    57
PROGRAM NAME =

 7014 00000E66 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 7015                                 M   
 7016 00000E68 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 7017                                 M           M_BRA   _JMP_EX00018                    ;
 7018 00000E6A A012                   M           BRA     _JMP_EX00018
 7019 00000E6C 0009                   M           NOP
 7020                                 M   ;
 7021                                 M   ***** BEGIN-POOL *****
 7022 00000E6E 0000                   M   DATA FOR SOURCE-LINE 1421
 7023 00000E70 0000007F               M   DATA FOR SOURCE-LINE 1421
 7024 00000E74 00000000               M   DATA FOR SOURCE-LINE 1421
 7025 00000E78 00000000               M   DATA FOR SOURCE-LINE 1421
 7026 00000E7C 00000000               M   DATA FOR SOURCE-LINE 1421
 7027 00000E80 FFFFFF00               M   DATA FOR SOURCE-LINE 1421
 7028 00000E84 00000000               M   DATA FOR SOURCE-LINE 1421
 7029 00000E88 00000004               M   DATA FOR SOURCE-LINE 1421
 7030 00000E8C 00000000               M   DATA FOR SOURCE-LINE 1421
 7031                                 M   ***** END-POOL *****
 7032 00000E90                        M   _JMP_C8000018:
 7033 00000E90 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 7034                                 M   
 7035 00000E92                        M   _JMP_EX00018:
 7036                            1422     
 7037                            1423             SUB_END
 7038                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 7039 00000E92 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 7040                            1424             M_RTS
 7041 00000E94 000B                   M           RTS                             ;RTSの後ろの
 7042 00000E96 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 7043                            1425     
 7044                            1426     
 7045                            1427     ;       ***************************************************
 7046                            1428     ;       *****   CMP LE CODE CHANGE ROUTINE              ***
 7047                            1429     ;       ***************************************************
 7048                                     ***** BEGIN-POOL *****
 7049 00000E98 FF00                       DATA FOR SOURCE-LINE 1421
 7050                                     ***** END-POOL *****
 7051 00000E9A                   1430     _LE_CHG:                        ; 01001000B     48
 7052                            1431             SUB_START
 7053 00000E9A 4F22                   M           STS.L   PR,@-R15                ;[必要]
 7054                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 7055                            1432     
 7056                            1433             _SEQ_LDW_CMP_OPE_CMD    _LE_CODE,_LE_CODE_END,ADR_AREA=0,COD_AREA1=4
 7057                                 M   
 7058 00000E9C D10D                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 7059 00000E9E 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 7060 00000EA0 8928                   M           BT      _JMP_C8000019                   ; IF ADR >= 127 THEN JUMP
 7061                                 M   ;
 7062 00000EA2 D00D                   M           MOV.L   #(_LE_CODE_END-_LE_CODE),R0             ; 転送 BYTE長
 7063 00000EA4 D30D                   M           MOV.L   #_LE_CODE,R3                    ; Read CODE MOVE        (12 BYTE)
 7064                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 7065 00000EA6 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 7066                                 M   
 7067                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 7068 00000EA8 D10D                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 7069 00000EAA 410B                   M           JSR     @R1                     ;
 7070 00000EAC 0009                   M           NOP                                     ;
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    58
PROGRAM NAME =

 7071                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 7072                                 M   
 7073 00000EAE D00D                   M           MOV.L   #H'FFFFFF00,R0                  ;
 7074                                 M   ;       *** ADR SET ***
 7075 00000EB0 D10D                   M           MOV.L   #0,R1                   ; ﾒﾓﾘのところ
 7076 00000EB2 341C                   M           ADD     R1,R4                           ; +0
 7077 00000EB4 6241                   M           MOV.W   @R4,R2                          ;
 7078 00000EB6 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 7079 00000EB8 4800                   M           SHLL    R8                              ; ADR*2
 7080 00000EBA 228B                   M           OR      R8,R2                           ;
 7081 00000EBC 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 7082                                 M   
 7083                                 M   ;       *** OFFSET SET ***
 7084 00000EBE D10B                   M           MOV.L   #4,R1                   ; ﾒﾓﾘのところ
 7085 00000EC0 341C                   M           ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 7086 00000EC2 D00B                   M           MOV.L   #_SEQ_MOVCMD_R3RD_TBL,R0        ;
 7087 00000EC4 4900                   M           SHLL    R9                              ; OFFSET*2
 7088 00000EC6 309C                   M           ADD     R9,R0                           ;
 7089 00000EC8 6001                   M           MOV.W   @R0,R0                          ;
 7090 00000ECA 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 7091                                 M   
 7092 00000ECC 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 7093                                 M           M_BRA   _JMP_EX00019                    ;
 7094 00000ECE A012                   M           BRA     _JMP_EX00019
 7095 00000ED0 0009                   M           NOP
 7096                                 M   ;
 7097                                 M   ***** BEGIN-POOL *****
 7098 00000ED2 0000                   M   DATA FOR SOURCE-LINE 1433
 7099 00000ED4 0000007F               M   DATA FOR SOURCE-LINE 1433
 7100 00000ED8 00000000               M   DATA FOR SOURCE-LINE 1433
 7101 00000EDC 00000000               M   DATA FOR SOURCE-LINE 1433
 7102 00000EE0 00000000               M   DATA FOR SOURCE-LINE 1433
 7103 00000EE4 FFFFFF00               M   DATA FOR SOURCE-LINE 1433
 7104 00000EE8 00000000               M   DATA FOR SOURCE-LINE 1433
 7105 00000EEC 00000004               M   DATA FOR SOURCE-LINE 1433
 7106 00000EF0 00000000               M   DATA FOR SOURCE-LINE 1433
 7107                                 M   ***** END-POOL *****
 7108 00000EF4                        M   _JMP_C8000019:
 7109 00000EF4 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 7110                                 M   
 7111 00000EF6                        M   _JMP_EX00019:
 7112                            1434     
 7113                            1435             SUB_END
 7114                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 7115 00000EF6 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 7116                            1436             M_RTS
 7117 00000EF8 000B                   M           RTS                             ;RTSの後ろの
 7118 00000EFA 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 7119                            1437     
 7120                            1438     
 7121                            1439     ;       ***************************************************
 7122                            1440     ;       *****   ADD CODE CHANGE ROUTINE                 ***
 7123                            1441     ;       ***************************************************
 7124                                     ***** BEGIN-POOL *****
 7125 00000EFC FF00                       DATA FOR SOURCE-LINE 1433
 7126                                     ***** END-POOL *****
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    59
PROGRAM NAME =

 7127 00000EFE                   1442     _ADD_CHG:                       ; 01010000B     50
 7128                            1443             SUB_START
 7129 00000EFE 4F22                   M           STS.L   PR,@-R15                ;[必要]
 7130                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 7131                            1444     
 7132                            1445             _SEQ_LDW_CMP_OPE_CMD    _ADD_CODE,_ADD_CODE_END,ADR_AREA=0,COD_AREA1=4
 7133                                 M   
 7134 00000F00 D10D                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 7135 00000F02 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 7136 00000F04 8928                   M           BT      _JMP_C8000020                   ; IF ADR >= 127 THEN JUMP
 7137                                 M   ;
 7138 00000F06 D00D                   M           MOV.L   #(_ADD_CODE_END-_ADD_CODE),R0           ; 転送 BYTE長
 7139 00000F08 D30D                   M           MOV.L   #_ADD_CODE,R3                   ; Read CODE MOVE        (12 BYTE)
 7140                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 7141 00000F0A 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 7142                                 M   
 7143                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 7144 00000F0C D10D                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 7145 00000F0E 410B                   M           JSR     @R1                     ;
 7146 00000F10 0009                   M           NOP                                     ;
 7147                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 7148                                 M   
 7149 00000F12 D00D                   M           MOV.L   #H'FFFFFF00,R0                  ;
 7150                                 M   ;       *** ADR SET ***
 7151 00000F14 D10D                   M           MOV.L   #0,R1                   ; ﾒﾓﾘのところ
 7152 00000F16 341C                   M           ADD     R1,R4                           ; +0
 7153 00000F18 6241                   M           MOV.W   @R4,R2                          ;
 7154 00000F1A 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 7155 00000F1C 4800                   M           SHLL    R8                              ; ADR*2
 7156 00000F1E 228B                   M           OR      R8,R2                           ;
 7157 00000F20 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 7158                                 M   
 7159                                 M   ;       *** OFFSET SET ***
 7160 00000F22 D10B                   M           MOV.L   #4,R1                   ; ﾒﾓﾘのところ
 7161 00000F24 341C                   M           ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 7162 00000F26 D00B                   M           MOV.L   #_SEQ_MOVCMD_R3RD_TBL,R0        ;
 7163 00000F28 4900                   M           SHLL    R9                              ; OFFSET*2
 7164 00000F2A 309C                   M           ADD     R9,R0                           ;
 7165 00000F2C 6001                   M           MOV.W   @R0,R0                          ;
 7166 00000F2E 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 7167                                 M   
 7168 00000F30 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 7169                                 M           M_BRA   _JMP_EX00020                    ;
 7170 00000F32 A012                   M           BRA     _JMP_EX00020
 7171 00000F34 0009                   M           NOP
 7172                                 M   ;
 7173                                 M   ***** BEGIN-POOL *****
 7174 00000F36 0000                   M   DATA FOR SOURCE-LINE 1445
 7175 00000F38 0000007F               M   DATA FOR SOURCE-LINE 1445
 7176 00000F3C 00000000               M   DATA FOR SOURCE-LINE 1445
 7177 00000F40 00000000               M   DATA FOR SOURCE-LINE 1445
 7178 00000F44 00000000               M   DATA FOR SOURCE-LINE 1445
 7179 00000F48 FFFFFF00               M   DATA FOR SOURCE-LINE 1445
 7180 00000F4C 00000000               M   DATA FOR SOURCE-LINE 1445
 7181 00000F50 00000004               M   DATA FOR SOURCE-LINE 1445
 7182 00000F54 00000000               M   DATA FOR SOURCE-LINE 1445
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    60
PROGRAM NAME =

 7183                                 M   ***** END-POOL *****
 7184 00000F58                        M   _JMP_C8000020:
 7185 00000F58 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 7186                                 M   
 7187 00000F5A                        M   _JMP_EX00020:
 7188                            1446     
 7189                            1447             SUB_END
 7190                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 7191 00000F5A 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 7192                            1448             M_RTS
 7193 00000F5C 000B                   M           RTS                             ;RTSの後ろの
 7194 00000F5E 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 7195                            1449     
 7196                            1450     
 7197                            1451     ;       ***************************************************
 7198                            1452     ;       *****   SUB CODE CHANGE ROUTINE                 ***
 7199                            1453     ;       ***************************************************
 7200                                     ***** BEGIN-POOL *****
 7201 00000F60 FF00                       DATA FOR SOURCE-LINE 1445
 7202                                     ***** END-POOL *****
 7203 00000F62                   1454     _SUB_CHG:                       ; 01010010B     52
 7204                            1455             SUB_START
 7205 00000F62 4F22                   M           STS.L   PR,@-R15                ;[必要]
 7206                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 7207                            1456     
 7208                            1457             _SEQ_LDW_CMP_OPE_CMD    _SUB_CODE,_SUB_CODE_END,ADR_AREA=0,COD_AREA1=4
 7209                                 M   
 7210 00000F64 D10D                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 7211 00000F66 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 7212 00000F68 8928                   M           BT      _JMP_C8000021                   ; IF ADR >= 127 THEN JUMP
 7213                                 M   ;
 7214 00000F6A D00D                   M           MOV.L   #(_SUB_CODE_END-_SUB_CODE),R0           ; 転送 BYTE長
 7215 00000F6C D30D                   M           MOV.L   #_SUB_CODE,R3                   ; Read CODE MOVE        (12 BYTE)
 7216                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 7217 00000F6E 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 7218                                 M   
 7219                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 7220 00000F70 D10D                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 7221 00000F72 410B                   M           JSR     @R1                     ;
 7222 00000F74 0009                   M           NOP                                     ;
 7223                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 7224                                 M   
 7225 00000F76 D00D                   M           MOV.L   #H'FFFFFF00,R0                  ;
 7226                                 M   ;       *** ADR SET ***
 7227 00000F78 D10D                   M           MOV.L   #0,R1                   ; ﾒﾓﾘのところ
 7228 00000F7A 341C                   M           ADD     R1,R4                           ; +0
 7229 00000F7C 6241                   M           MOV.W   @R4,R2                          ;
 7230 00000F7E 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 7231 00000F80 4800                   M           SHLL    R8                              ; ADR*2
 7232 00000F82 228B                   M           OR      R8,R2                           ;
 7233 00000F84 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 7234                                 M   
 7235                                 M   ;       *** OFFSET SET ***
 7236 00000F86 D10B                   M           MOV.L   #4,R1                   ; ﾒﾓﾘのところ
 7237 00000F88 341C                   M           ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 7238 00000F8A D00B                   M           MOV.L   #_SEQ_MOVCMD_R3RD_TBL,R0        ;
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    61
PROGRAM NAME =

 7239 00000F8C 4900                   M           SHLL    R9                              ; OFFSET*2
 7240 00000F8E 309C                   M           ADD     R9,R0                           ;
 7241 00000F90 6001                   M           MOV.W   @R0,R0                          ;
 7242 00000F92 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 7243                                 M   
 7244 00000F94 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 7245                                 M           M_BRA   _JMP_EX00021                    ;
 7246 00000F96 A012                   M           BRA     _JMP_EX00021
 7247 00000F98 0009                   M           NOP
 7248                                 M   ;
 7249                                 M   ***** BEGIN-POOL *****
 7250 00000F9A 0000                   M   DATA FOR SOURCE-LINE 1457
 7251 00000F9C 0000007F               M   DATA FOR SOURCE-LINE 1457
 7252 00000FA0 00000000               M   DATA FOR SOURCE-LINE 1457
 7253 00000FA4 00000000               M   DATA FOR SOURCE-LINE 1457
 7254 00000FA8 00000000               M   DATA FOR SOURCE-LINE 1457
 7255 00000FAC FFFFFF00               M   DATA FOR SOURCE-LINE 1457
 7256 00000FB0 00000000               M   DATA FOR SOURCE-LINE 1457
 7257 00000FB4 00000004               M   DATA FOR SOURCE-LINE 1457
 7258 00000FB8 00000000               M   DATA FOR SOURCE-LINE 1457
 7259                                 M   ***** END-POOL *****
 7260 00000FBC                        M   _JMP_C8000021:
 7261 00000FBC 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 7262                                 M   
 7263 00000FBE                        M   _JMP_EX00021:
 7264                            1458     
 7265                            1459             SUB_END
 7266                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 7267 00000FBE 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 7268                            1460             M_RTS
 7269 00000FC0 000B                   M           RTS                             ;RTSの後ろの
 7270 00000FC2 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 7271                            1461     
 7272                            1462     ;       ***************************************************
 7273                            1463     ;       *****   ANDW CODE CHANGE ROUTINE                ***
 7274                            1464     ;       ***************************************************
 7275                                     ***** BEGIN-POOL *****
 7276 00000FC4 FF00                       DATA FOR SOURCE-LINE 1457
 7277                                     ***** END-POOL *****
 7278 00000FC6                   1465     _ANDW_CHG:                      ; 01011010B     5A
 7279                            1466             SUB_START
 7280 00000FC6 4F22                   M           STS.L   PR,@-R15                ;[必要]
 7281                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 7282                            1467     
 7283                            1468             _SEQ_LDW_CMP_OPE_CMD    _ANDW_CODE,_ANDW_CODE_END,ADR_AREA=0,COD_AREA1=4
 7284                                 M   
 7285 00000FC8 D10D                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 7286 00000FCA 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 7287 00000FCC 8928                   M           BT      _JMP_C8000022                   ; IF ADR >= 127 THEN JUMP
 7288                                 M   ;
 7289 00000FCE D00D                   M           MOV.L   #(_ANDW_CODE_END-_ANDW_CODE),R0         ; 転送 BYTE長
 7290 00000FD0 D30D                   M           MOV.L   #_ANDW_CODE,R3                  ; Read CODE MOVE        (12 BYTE)
 7291                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 7292 00000FD2 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 7293                                 M   
 7294                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 7295 00000FD4 D10D                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    62
PROGRAM NAME =

 7296 00000FD6 410B                   M           JSR     @R1                     ;
 7297 00000FD8 0009                   M           NOP                                     ;
 7298                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 7299                                 M   
 7300 00000FDA D00D                   M           MOV.L   #H'FFFFFF00,R0                  ;
 7301                                 M   ;       *** ADR SET ***
 7302 00000FDC D10D                   M           MOV.L   #0,R1                   ; ﾒﾓﾘのところ
 7303 00000FDE 341C                   M           ADD     R1,R4                           ; +0
 7304 00000FE0 6241                   M           MOV.W   @R4,R2                          ;
 7305 00000FE2 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 7306 00000FE4 4800                   M           SHLL    R8                              ; ADR*2
 7307 00000FE6 228B                   M           OR      R8,R2                           ;
 7308 00000FE8 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 7309                                 M   
 7310                                 M   ;       *** OFFSET SET ***
 7311 00000FEA D10B                   M           MOV.L   #4,R1                   ; ﾒﾓﾘのところ
 7312 00000FEC 341C                   M           ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 7313 00000FEE D00B                   M           MOV.L   #_SEQ_MOVCMD_R3RD_TBL,R0        ;
 7314 00000FF0 4900                   M           SHLL    R9                              ; OFFSET*2
 7315 00000FF2 309C                   M           ADD     R9,R0                           ;
 7316 00000FF4 6001                   M           MOV.W   @R0,R0                          ;
 7317 00000FF6 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 7318                                 M   
 7319 00000FF8 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 7320                                 M           M_BRA   _JMP_EX00022                    ;
 7321 00000FFA A012                   M           BRA     _JMP_EX00022
 7322 00000FFC 0009                   M           NOP
 7323                                 M   ;
 7324                                 M   ***** BEGIN-POOL *****
 7325 00000FFE 0000                   M   DATA FOR SOURCE-LINE 1468
 7326 00001000 0000007F               M   DATA FOR SOURCE-LINE 1468
 7327 00001004 00000000               M   DATA FOR SOURCE-LINE 1468
 7328 00001008 00000000               M   DATA FOR SOURCE-LINE 1468
 7329 0000100C 00000000               M   DATA FOR SOURCE-LINE 1468
 7330 00001010 FFFFFF00               M   DATA FOR SOURCE-LINE 1468
 7331 00001014 00000000               M   DATA FOR SOURCE-LINE 1468
 7332 00001018 00000004               M   DATA FOR SOURCE-LINE 1468
 7333 0000101C 00000000               M   DATA FOR SOURCE-LINE 1468
 7334                                 M   ***** END-POOL *****
 7335 00001020                        M   _JMP_C8000022:
 7336 00001020 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 7337                                 M   
 7338 00001022                        M   _JMP_EX00022:
 7339                            1469     
 7340                            1470             SUB_END
 7341                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 7342 00001022 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 7343                            1471             M_RTS
 7344 00001024 000B                   M           RTS                             ;RTSの後ろの
 7345 00001026 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 7346                            1472     
 7347                            1473     
 7348                            1474     ;       ***************************************************
 7349                            1475     ;       *****   ORW CODE CHANGE ROUTINE                 ***
 7350                            1476     ;       ***************************************************
 7351                                     ***** BEGIN-POOL *****
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    63
PROGRAM NAME =

 7352 00001028 FF00                       DATA FOR SOURCE-LINE 1468
 7353                                     ***** END-POOL *****
 7354 0000102A                   1477     _ORW_CHG:                       ; 01011100B     5C
 7355                            1478             SUB_START
 7356 0000102A 4F22                   M           STS.L   PR,@-R15                ;[必要]
 7357                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 7358                            1479     
 7359                            1480             _SEQ_LDW_CMP_OPE_CMD    _ORW_CODE,_ORW_CODE_END,ADR_AREA=0,COD_AREA1=4
 7360                                 M   
 7361 0000102C D10D                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 7362 0000102E 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 7363 00001030 8928                   M           BT      _JMP_C8000023                   ; IF ADR >= 127 THEN JUMP
 7364                                 M   ;
 7365 00001032 D00D                   M           MOV.L   #(_ORW_CODE_END-_ORW_CODE),R0           ; 転送 BYTE長
 7366 00001034 D30D                   M           MOV.L   #_ORW_CODE,R3                   ; Read CODE MOVE        (12 BYTE)
 7367                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 7368 00001036 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 7369                                 M   
 7370                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 7371 00001038 D10D                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 7372 0000103A 410B                   M           JSR     @R1                     ;
 7373 0000103C 0009                   M           NOP                                     ;
 7374                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 7375                                 M   
 7376 0000103E D00D                   M           MOV.L   #H'FFFFFF00,R0                  ;
 7377                                 M   ;       *** ADR SET ***
 7378 00001040 D10D                   M           MOV.L   #0,R1                   ; ﾒﾓﾘのところ
 7379 00001042 341C                   M           ADD     R1,R4                           ; +0
 7380 00001044 6241                   M           MOV.W   @R4,R2                          ;
 7381 00001046 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 7382 00001048 4800                   M           SHLL    R8                              ; ADR*2
 7383 0000104A 228B                   M           OR      R8,R2                           ;
 7384 0000104C 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 7385                                 M   
 7386                                 M   ;       *** OFFSET SET ***
 7387 0000104E D10B                   M           MOV.L   #4,R1                   ; ﾒﾓﾘのところ
 7388 00001050 341C                   M           ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 7389 00001052 D00B                   M           MOV.L   #_SEQ_MOVCMD_R3RD_TBL,R0        ;
 7390 00001054 4900                   M           SHLL    R9                              ; OFFSET*2
 7391 00001056 309C                   M           ADD     R9,R0                           ;
 7392 00001058 6001                   M           MOV.W   @R0,R0                          ;
 7393 0000105A 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 7394                                 M   
 7395 0000105C 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 7396                                 M           M_BRA   _JMP_EX00023                    ;
 7397 0000105E A012                   M           BRA     _JMP_EX00023
 7398 00001060 0009                   M           NOP
 7399                                 M   ;
 7400                                 M   ***** BEGIN-POOL *****
 7401 00001062 0000                   M   DATA FOR SOURCE-LINE 1480
 7402 00001064 0000007F               M   DATA FOR SOURCE-LINE 1480
 7403 00001068 00000000               M   DATA FOR SOURCE-LINE 1480
 7404 0000106C 00000000               M   DATA FOR SOURCE-LINE 1480
 7405 00001070 00000000               M   DATA FOR SOURCE-LINE 1480
 7406 00001074 FFFFFF00               M   DATA FOR SOURCE-LINE 1480
 7407 00001078 00000000               M   DATA FOR SOURCE-LINE 1480
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    64
PROGRAM NAME =

 7408 0000107C 00000004               M   DATA FOR SOURCE-LINE 1480
 7409 00001080 00000000               M   DATA FOR SOURCE-LINE 1480
 7410                                 M   ***** END-POOL *****
 7411 00001084                        M   _JMP_C8000023:
 7412 00001084 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 7413                                 M   
 7414 00001086                        M   _JMP_EX00023:
 7415                            1481     
 7416                            1482             SUB_END
 7417                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 7418 00001086 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 7419                            1483             M_RTS
 7420 00001088 000B                   M           RTS                             ;RTSの後ろの
 7421 0000108A 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 7422                            1484     
 7423                            1485     
 7424                            1486     ;       ***************************************************
 7425                            1487     ;       *****   XORW CODE CHANGE ROUTINE                ***
 7426                            1488     ;       ***************************************************
 7427                                     ***** BEGIN-POOL *****
 7428 0000108C FF00                       DATA FOR SOURCE-LINE 1480
 7429                                     ***** END-POOL *****
 7430 0000108E                   1489     _XORW_CHG:                      ; 01011110B     5E
 7431                            1490             SUB_START
 7432 0000108E 4F22                   M           STS.L   PR,@-R15                ;[必要]
 7433                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 7434                            1491     
 7435                            1492             _SEQ_LDW_CMP_OPE_CMD    _XORW_CODE,_XORW_CODE_END,ADR_AREA=0,COD_AREA1=4
 7436                                 M   
 7437 00001090 D10D                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 7438 00001092 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 7439 00001094 8928                   M           BT      _JMP_C8000024                   ; IF ADR >= 127 THEN JUMP
 7440                                 M   ;
 7441 00001096 D00D                   M           MOV.L   #(_XORW_CODE_END-_XORW_CODE),R0         ; 転送 BYTE長
 7442 00001098 D30D                   M           MOV.L   #_XORW_CODE,R3                  ; Read CODE MOVE        (12 BYTE)
 7443                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 7444 0000109A 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 7445                                 M   
 7446                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 7447 0000109C D10D                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 7448 0000109E 410B                   M           JSR     @R1                     ;
 7449 000010A0 0009                   M           NOP                                     ;
 7450                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 7451                                 M   
 7452 000010A2 D00D                   M           MOV.L   #H'FFFFFF00,R0                  ;
 7453                                 M   ;       *** ADR SET ***
 7454 000010A4 D10D                   M           MOV.L   #0,R1                   ; ﾒﾓﾘのところ
 7455 000010A6 341C                   M           ADD     R1,R4                           ; +0
 7456 000010A8 6241                   M           MOV.W   @R4,R2                          ;
 7457 000010AA 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 7458 000010AC 4800                   M           SHLL    R8                              ; ADR*2
 7459 000010AE 228B                   M           OR      R8,R2                           ;
 7460 000010B0 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 7461                                 M   
 7462                                 M   ;       *** OFFSET SET ***
 7463 000010B2 D10B                   M           MOV.L   #4,R1                   ; ﾒﾓﾘのところ
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    65
PROGRAM NAME =

 7464 000010B4 341C                   M           ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 7465 000010B6 D00B                   M           MOV.L   #_SEQ_MOVCMD_R3RD_TBL,R0        ;
 7466 000010B8 4900                   M           SHLL    R9                              ; OFFSET*2
 7467 000010BA 309C                   M           ADD     R9,R0                           ;
 7468 000010BC 6001                   M           MOV.W   @R0,R0                          ;
 7469 000010BE 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 7470                                 M   
 7471 000010C0 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 7472                                 M           M_BRA   _JMP_EX00024                    ;
 7473 000010C2 A012                   M           BRA     _JMP_EX00024
 7474 000010C4 0009                   M           NOP
 7475                                 M   ;
 7476                                 M   ***** BEGIN-POOL *****
 7477 000010C6 0000                   M   DATA FOR SOURCE-LINE 1492
 7478 000010C8 0000007F               M   DATA FOR SOURCE-LINE 1492
 7479 000010CC 00000000               M   DATA FOR SOURCE-LINE 1492
 7480 000010D0 00000000               M   DATA FOR SOURCE-LINE 1492
 7481 000010D4 00000000               M   DATA FOR SOURCE-LINE 1492
 7482 000010D8 FFFFFF00               M   DATA FOR SOURCE-LINE 1492
 7483 000010DC 00000000               M   DATA FOR SOURCE-LINE 1492
 7484 000010E0 00000004               M   DATA FOR SOURCE-LINE 1492
 7485 000010E4 00000000               M   DATA FOR SOURCE-LINE 1492
 7486                                 M   ***** END-POOL *****
 7487 000010E8                        M   _JMP_C8000024:
 7488 000010E8 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 7489                                 M   
 7490 000010EA                        M   _JMP_EX00024:
 7491                            1493     
 7492                            1494             SUB_END
 7493                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 7494 000010EA 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 7495                            1495             M_RTS
 7496 000010EC 000B                   M           RTS                             ;RTSの後ろの
 7497 000010EE 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 7498                            1496     
 7499                            1497     ;       ***********************************
 7500                            1498     ;       ***     ｺｰﾄﾞのﾌﾞﾛｯｸ転送         ***
 7501                            1499     ;       ***********************************
 7502                            1500     ;       INPUT   R0,R3,R13
 7503                            1501     ;       USE     R1
 7504                            1502     
 7505                                     ***** BEGIN-POOL *****
 7506 000010F0 FF00                       DATA FOR SOURCE-LINE 1492
 7507                                     ***** END-POOL *****
 7508 000010F2                   1503     _SEQ_CODE_BLOCK_MV:
 7509                            1504             SUB_START
 7510 000010F2 4F22                   M           STS.L   PR,@-R15                ;[必要]
 7511                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 7512                            1505     
 7513 000010F4                   1506     _SEQ_CODE_BLOCK_LOOP:
 7514 000010F4 2008              1507             TST     R0,R0                           ; COUNTER CHECK
 7515 000010F6 8909              1508             BT      _SEQ_CD_BLOCK_MV_EXIT           ; 0 THEN EXIT
 7516                            1509     
 7517 000010F8 6131              1510             MOV.W   @R3,R1                          ; SEQ_ROM
 7518 000010FA 2D11              1511             MOV.W   R1,@R13                         ; SEQ_RAM
 7519 000010FC D102              1512             MOV.L   #2,R1                           ;
 7520 000010FE 3018              1513             SUB     R1,R0                           ; COUNTER -2
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    66
PROGRAM NAME =

 7521 00001100 331C              1514             ADD     R1,R3                           ; ROM ADR. +2
 7522 00001102 3D1C              1515             ADD     R1,R13                          ; RAM ADR. +2
 7523                            1516             M_BRA   _SEQ_CODE_BLOCK_LOOP            ;
 7524 00001104 AFF6                   M           BRA     _SEQ_CODE_BLOCK_LOOP
 7525 00001106 0009                   M           NOP
 7526                            1517     
 7527                                     ***** BEGIN-POOL *****
 7528 00001108 00000002                   DATA FOR SOURCE-LINE 1512
 7529                                     ***** END-POOL *****
 7530 0000110C                   1518     _SEQ_CD_BLOCK_MV_EXIT:
 7531                            1519     
 7532                            1520             SUB_END
 7533                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 7534 0000110C 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 7535                            1521             M_RTS
 7536 0000110E 000B                   M           RTS                             ;RTSの後ろの
 7537 00001110 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 7538                            1522     
 7539                            1523     
 7540                            1524             .END
  *****TOTAL ERRORS       0
  *****TOTAL WARNINGS     0
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    67

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

BIT0                                      EQU  00000001     15*
BIT1                                      EQU  00000002     16*
BIT10                                     EQU  00000400     25*
BIT11                                     EQU  00000800     26*
BIT12                                     EQU  00001000     27*
BIT13                                     EQU  00002000     28*
BIT14                                     EQU  00004000     29*
BIT15                                     EQU  00008000     30*
BIT16                                     EQU  00010000     31*
BIT17                                     EQU  00020000     32*
BIT18                                     EQU  00040000     33*
BIT19                                     EQU  00080000     34*
BIT2                                      EQU  00000004     17* 4429 
BIT20                                     EQU  00100000     35*
BIT21                                     EQU  00200000     36*
BIT22                                     EQU  00400000     37*
BIT23                                     EQU  00800000     38*
BIT24                                     EQU  01000000     39*
BIT25                                     EQU  02000000     40*
BIT26                                     EQU  04000000     41*
BIT27                                     EQU  08000000     42*
BIT28                                     EQU  10000000     43*
BIT29                                     EQU  20000000     44*
BIT3                                      EQU  00000008     18*
BIT30                                     EQU  40000000     45*
BIT31                                     EQU  80000000     46*
BIT4                                      EQU  00000010     19*
BIT5                                      EQU  00000020     20*
BIT6                                      EQU  00000040     21*
BIT7                                      EQU  00000080     22*
BIT8                                      EQU  00000100     23*
BIT9                                      EQU  00000200     24*
DREG                                      EQU  00000000   3055*
GA1_PFEX                                  EQU  00000084   2171*
GA1_PGEX                                  EQU  00000000   2198*
GA1_PHEX                                  EQU  00000000   2210*
GA2_PFEX                                  EQU  000000D0   2658*
GA2_PGEX                                  EQU  00000061   2695*
GA2_PHEX                                  EQU  00000000   2719*
H_BYTE                                    EQU  00000000     82*
L_BYTE                                    EQU  00000001     81*
NBIT0                                     EQU  000000FE     49*
NBIT1                                     EQU  000000FD     50*
NBIT10                                    EQU  0000FBFF     60*
NBIT11                                    EQU  0000F7FF     61*
NBIT12                                    EQU  0000EFFF     62*
NBIT13                                    EQU  0000DFFF     63*
NBIT14                                    EQU  0000BFFF     64*
NBIT15                                    EQU  00007FFF     65*
NBIT2                                     EQU  000000FB     51*
NBIT3                                     EQU  000000F7     52*
NBIT4                                     EQU  000000EF     53*
NBIT5                                     EQU  000000DF     54*
NBIT6                                     EQU  000000BF     55*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    68

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

NBIT7                                     EQU  0000007F     56*
NBIT8                                     EQU  0000FEFF     58*
NBIT9                                     EQU  0000FDFF     59*
P                                P        SCT  00000000   4277*
SEQ_RUN_CHG1_DBE                 P             0000012C   4505  4507*
XBIT0                                     EQU  00000000     68*
XBIT1                                     EQU  00000001     69*
XBIT2                                     EQU  00000002     70*
XBIT3                                     EQU  00000003     71*
XBIT4                                     EQU  00000004     72*
XBIT5                                     EQU  00000005     73*
XBIT6                                     EQU  00000006     74*
XBIT7                                     EQU  00000007     75*
_ADD_CHG                         P        EXPT 00000EFE   2984  7127*
_ADD_CMD                                  EQU  00000044   3074*
_ADD_CODE                                 IMPT 00000000   2939  7138  7139 
_ADD_CODE_END                             IMPT 00000000   2940  7138 
_ADD_SUB                                  IMPT 00000000   2864 
_AMRG_CHG                        P        EXPT 00000B38   2971  6366*
_AMRG_CODE                                IMPT 00000000   2897  6371  6372 
_AMRG_CODE_END                            IMPT 00000000   2898  6371 
_ANDN_CHG                        P        EXPT 00000312   2957  4897*
_ANDN_CODE                                IMPT 00000000   2881  4912  4913 
_ANDN_CODE_END                            IMPT 00000000   2882  4912 
_ANDW_CHG                        P        EXPT 00000FC6   2986  7278*
_ANDW_CMD                                 EQU  00000038   3071*
_ANDW_CODE                                IMPT 00000000   2933  7289  7290 
_ANDW_CODE_END                            IMPT 00000000   2934  7289 
_ANDW_SUB                                 IMPT 00000000   2861 
_AND_CHG                         P        EXPT 0000028A   2956  4797*
_AND_CODE                                 IMPT 00000000   2879  4812  4813 
_AND_CODE_END                             IMPT 00000000   2880  4812 
_BAMRA                                    IMPT 00000000    293 
_BAMRB                                    IMPT 00000000    296 
_BARA                                     IMPT 00000000    292 
_BARB                                     IMPT 00000000    295 
_BASRA                                    IMPT 00000000    281 
_BASRB                                    IMPT 00000000    282 
_BBIT_CHG_TBL                             IMPT 00000000   3001 
_BBRA                                     IMPT 00000000    294 
_BBRB                                     IMPT 00000000    297 
_BCR1                                     IMPT 00000000    303 
_BCR2                                     IMPT 00000000    304 
_BDMRB                                    IMPT 00000000    299 
_BDRB                                     IMPT 00000000    298 
_BRCR                                     IMPT 00000000    300 
_CB_BAKUP_CMD1                            EQU  00005678    114*
_CB_BAKUP_CMD2                            EQU  00001234    115*
_CB_BAK_SUM_COD1                          EQU  5AA51234    112*
_CB_BAK_SUM_COD2                          EQU  A55A4321    113*
_CB_ERR_INFO_MEM                          EQU  00000040    137*
_CB_STS_BUF_1BLK                          EQU  00000040    117*  119 
_CB_STS_BUF_BLKMAX                        EQU  00000008    118*  119 
_CB_STS_BUF_MAX                           EQU  00000200    119*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    69

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_CB_TRD_BEFORE                            EQU  00000060    127*
_CB_TRD_BUF_DP_MAX                        EQU  00000080    131*
_CB_TRD_BUF_MAX                           EQU  00000800    128*
_CB_TRD_DP_1CNT                           EQU  00000008    130*
_CB_TRD_DP_CH                             EQU  00000004    123*
_CB_TRD_SMP_CNT                           EQU  00000080    126*
_CCR                                      IMPT 00000000    283 
_CHCR0                                    IMPT 00000000    324 
_CHCR1                                    IMPT 00000000    328 
_CHCR2                                    IMPT 00000000    332 
_CHCR3                                    IMPT 00000000    336 
_CLR_CHG                         P        EXPT 00000A88   2969  6239*
_CLR_CMD                                  EQU  0000000C   3060*
_CLR_CODE                                 IMPT 00000000   2907  6250  6251 
_CLR_CODE_END                             IMPT 00000000   2908  6250 
_CLR_SUB                                  IMPT 00000000   2850 
_CTR_CMD                                  EQU  00000014   3062*
_DAR0                                     IMPT 00000000    322 
_DAR1                                     IMPT 00000000    326 
_DAR2                                     IMPT 00000000    330 
_DAR3                                     IMPT 00000000    334 
_DA_CNV_DT0                               IMPT 00000000   2833 
_DMAOR                                    IMPT 00000000    337 
_DMATCR0                                  IMPT 00000000    323 
_DMATCR1                                  IMPT 00000000    327 
_DMATCR2                                  IMPT 00000000    331 
_DMATCR3                                  IMPT 00000000    335 
_DSET_CHG                        P        EXPT 00000AEE   2970  6311*
_DS_CODE                                  IMPT 00000000   2905  6316  6317 
_DS_CODE_END                              IMPT 00000000   2906  6316 
_DUMMY_SUM_CODE                           EQU  5AA53CC3    105*
_END_CHG                         P        EXPT 00000BB8   2975  6487*
_END_CMD                                  EQU  0000004C   3076*
_END_CODE                                 IMPT 00000000   2943  6492  6493 
_END_CODE_END                             IMPT 00000000   2944  6492 
_END_SUB                                  IMPT 00000000   2866 
_EQ_CHG                          P        EXPT 00000D6E   2980  6823*
_EQ_CMD                                   EQU  00000028   3067*
_EQ_CODE                                  IMPT 00000000   2925  6834  6835 
_EQ_CODE_END                              IMPT 00000000   2926  6834 
_EQ_SUB                                   IMPT 00000000   2857 
_EXPEVT                                   IMPT 00000000    285 
_FRQCR                                    IMPT 00000000    340 
_GPIOIC                                   IMPT 00000000    318 
_GT_CHG                          P        EXPT 00000E36   2982  6975*
_GT_CMD                                   EQU  00000030   3069*
_GT_CODE                                  IMPT 00000000   2929  6986  6987 
_GT_CODE_END                              IMPT 00000000   2930  6986 
_GT_SUB                                   IMPT 00000000   2859 
_ICR                                      IMPT 00000000    347 
_INTEVT                                   IMPT 00000000    286 
_INT_2MS_SEL                              IMPT 00000000   2801 
_IPRA                                     IMPT 00000000    348 
_IPRB                                     IMPT 00000000    349 
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    70

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_IPRC                                     IMPT 00000000    350 
_IPRD                                     IMPT 00000000    351 
_JMP_C8000000                    P             00000280   4708  4779*
_JMP_C8000001                    P             00000308   4810  4878*
_JMP_C8000002                    P             00000390   4910  4978*
_JMP_C8000003                    P             00000418   5009  5077*
_JMP_C8000004                    P             000004A0   5108  5176*
_JMP_C8000005                    P             000005A8   5296  5358*
_JMP_C8000006                    P             000006A4   5466  5528*
_JMP_C8000007                    P             0000086C   5754  5835*
_JMP_C8000008                    P             0000099C   5954  6035*
_JMP_C8000009                    P             000009E8   6062  6099*
_JMP_C8000010                    P             00000A34   6128  6165*
_JMP_C8000011                    P             00000AE4   6248  6296*
_JMP_C8000012                    P             00000C38   6530  6579*
_JMP_C8000013                    P             00000C9C   6608  6656*
_JMP_C8000014                    P             00000D00   6684  6731*
_JMP_C8000015                    P             00000D64   6758  6805*
_JMP_C8000016                    P             00000DC8   6832  6880*
_JMP_C8000017                    P             00000E2C   6908  6956*
_JMP_C8000018                    P             00000E90   6984  7032*
_JMP_C8000019                    P             00000EF4   7060  7108*
_JMP_C8000020                    P             00000F58   7136  7184*
_JMP_C8000021                    P             00000FBC   7212  7260*
_JMP_C8000022                    P             00001020   7287  7335*
_JMP_C8000023                    P             00001084   7363  7411*
_JMP_C8000024                    P             000010E8   7439  7487*
_JMP_EX00000                     P             00000282   4762  4782*
_JMP_EX00001                     P             0000030A   4862  4881*
_JMP_EX00002                     P             00000392   4962  4981*
_JMP_EX00003                     P             0000041A   5061  5080*
_JMP_EX00004                     P             000004A2   5160  5179*
_JMP_EX00005                     P             000005AA   5341  5361*
_JMP_EX00006                     P             000006A6   5511  5531*
_JMP_EX00007                     P             0000086E   5817  5838*
_JMP_EX00008                     P             0000099E   6017  6038*
_JMP_EX00009                     P             000009EA   6087  6102*
_JMP_EX00010                     P             00000A36   6153  6168*
_JMP_EX00011                     P             00000AE6   6281  6299*
_JMP_EX00012                     P             00000C3A   6564  6582*
_JMP_EX00013                     P             00000C9E   6642  6659*
_JMP_EX00014                     P             00000D02   6717  6734*
_JMP_EX00015                     P             00000D66   6791  6808*
_JMP_EX00016                     P             00000DCA   6866  6883*
_JMP_EX00017                     P             00000E2E   6942  6959*
_JMP_EX00018                     P             00000E92   7018  7035*
_JMP_EX00019                     P             00000EF6   7094  7111*
_JMP_EX00020                     P             00000F5A   7170  7187*
_JMP_EX00021                     P             00000FBE   7246  7263*
_JMP_EX00022                     P             00001022   7321  7338*
_JMP_EX00023                     P             00001086   7397  7414*
_JMP_EX00024                     P             000010EA   7473  7490*
_LDN_CHG                         P        EXPT 000001FA   2955  4699*
_LDN_CODE                                 IMPT 00000000   2877  4710  4711 
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    71

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_LDN_CODE_END                             IMPT 00000000   2878  4710 
_LDWU_CHG                        P        EXPT 00000C42   2977  6599*
_LDWU_CODE                                IMPT 00000000   2919  6610  6611 
_LDWU_CODE_END                            IMPT 00000000   2920  6610 
_LDW_CHG                         P        EXPT 00000BDC   2976  6521*
_LDW_CMD                                  EQU  00000020   3065*
_LDW_CODE                                 IMPT 00000000   2917  6532  6533 
_LDW_CODE_END                             IMPT 00000000   2918  6532 
_LDW_SUB                                  IMPT 00000000   2855 
_LD_C80                          P             000001F0   4610  4682*
_LD_CHG                          P        EXPT 00000168   2954  4596*
_LD_CHG_EX                       P             000001F2   4664  4685*
_LD_CODE                                  IMPT 00000000   2875  4612  4613 
_LD_CODE_END                              IMPT 00000000   2876  4612 
_LE_CHG                          P        EXPT 00000E9A   2983  7051*
_LE_CMD                                   EQU  00000034   3070*
_LE_CODE                                  IMPT 00000000   2931  7062  7063 
_LE_CODE_END                              IMPT 00000000   2932  7062 
_LE_SUB                                   IMPT 00000000   2860 
_MCR                                      IMPT 00000000    308 
_MMUCR                                    IMPT 00000000    280 
_NE_CHG                          P        EXPT 00000DD2   2981  6899*
_NE_CMD                                   EQU  0000002C   3068*
_NE_CODE                                  IMPT 00000000   2927  6910  6911 
_NE_CODE_END                              IMPT 00000000   2928  6910 
_NE_SUB                                   IMPT 00000000   2858 
_NOP_CHG                         P        EXPT 00000148   2953  4559*
_NOP_CODE                                 IMPT 00000000   2873  4564 
_NOP_CODE_END                             IMPT 00000000   2874 
_NOP_SHLL8_R0_TBL0                        IMPT 00000000   3013 
_NOP_SHLL8_R1_TBL0                        IMPT 00000000   3014 
_NOP_SHLL8_R2_TBL0                        IMPT 00000000   3015  5322  5403  5492 
_NOP_SHLL8_R3_TBL0                        IMPT 00000000   3016  5579  5782  5982 
_NOP_SHLL8_R4_TBL0                        IMPT 00000000   3017 
_NOP_SWAP_TBL0                            IMPT 00000000   3012  4654  4752  4852  4952  5051  5150  5241  5683 
_OMRG_CHG                        P        EXPT 00000B58   2972  6396*
_OMRG_CODE                                IMPT 00000000   2899  6401  6402 
_OMRG_CODE_END                            IMPT 00000000   2900  6401 
_ORN_C80                         P             00000528   5199  5267*
_ORN_CHG                         P        EXPT 00000422   2959  5095*
_ORN_CHG_EX                      P             0000052A   5251  5270*
_ORN_CODE                                 IMPT 00000000   2885  5110  5111  5201  5202 
_ORN_CODE_END                             IMPT 00000000   2886  5110  5201 
_ORW_CHG                         P        EXPT 0000102A   2987  7354*
_ORW_CMD                                  EQU  0000003C   3072*
_ORW_CODE                                 IMPT 00000000   2935  7365  7366 
_ORW_CODE_END                             IMPT 00000000   2936  7365 
_ORW_SUB                                  IMPT 00000000   2862 
_OR_CHG                          P        EXPT 0000039A   2958  4996*
_OR_CODE                                  IMPT 00000000   2883  5011  5012 
_OR_CODE_END                              IMPT 00000000   2884  5011 
_PCR                                      IMPT 00000000    309 
_PCTRA                                    IMPT 00000000    314 
_PCTRB                                    IMPT 00000000    316 
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    72

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_PDTRA                                    IMPT 00000000    315 
_PDTRB                                    IMPT 00000000    317  4427 
_PLF_CHG                         P        EXPT 0000062E   2961  5457*
_PLF_CMD                                  EQU  00000008   3059*
_PLF_CODE                                 IMPT 00000000   2895  5468  5469 
_PLF_CODE_END                             IMPT 00000000   2896  5468 
_PLF_SUB                                  IMPT 00000000   2849 
_PLS_C80                         P             00000624   5377  5438*
_PLS_CHG                         P        EXPT 00000532   2960  5287*
_PLS_CHG_EX                      P             00000626   5422  5441*
_PLS_CMD                                  EQU  00000004   3058*
_PLS_CODE                                 IMPT 00000000   2893  5298  5299  5379  5380 
_PLS_CODE_END                             IMPT 00000000   2894  5298  5379 
_PLS_SUB                                  IMPT 00000000   2848 
_PTEA                                     IMPT 00000000    287 
_PTEH                                     IMPT 00000000    276 
_PTEL                                     IMPT 00000000    277 
_PVP_COM_ADR                              IMPT 00000000   4305  4337 
_PVP_COM_ERR                              IMPT 00000000   4306  4339 
_QACR0                                    IMPT 00000000    288 
_QACR1                                    IMPT 00000000    289 
_RFCR                                     IMPT 00000000    313 
_RMIO2_IN_DATA                            IMPT 00000000   2831 
_RMIO_IN_DATA                             IMPT 00000000   2830 
_RST_CHG                         P        EXPT 00000906   2965  5945*
_RST_CODE                                 IMPT 00000000   2891  5956  5957 
_RST_CODE_END                             IMPT 00000000   2892  5956 
_RTCNT                                    IMPT 00000000    311 
_RTCOR                                    IMPT 00000000    312 
_RTCSR                                    IMPT 00000000    310 
_SAR0                                     IMPT 00000000    321 
_SAR1                                     IMPT 00000000    325 
_SAR2                                     IMPT 00000000    329 
_SAR3                                     IMPT 00000000    333 
_SCBRR1                                   IMPT 00000000    369 
_SCBRR2                                   IMPT 00000000    379 
_SCFCR2                                   IMPT 00000000    384 
_SCFDR2                                   IMPT 00000000    385 
_SCFRDR2                                  IMPT 00000000    383 
_SCFSR2                                   IMPT 00000000    382 
_SCFTDR2                                  IMPT 00000000    381 
_SCLSR2                                   IMPT 00000000    387 
_SCRDR1                                   IMPT 00000000    373 
_SCSCMR1                                  IMPT 00000000    374 
_SCSCR1                                   IMPT 00000000    370 
_SCSCR2                                   IMPT 00000000    380 
_SCSMR1                                   IMPT 00000000    368 
_SCSMR2                                   IMPT 00000000    378 
_SCSPTR1                                  IMPT 00000000    375 
_SCSPTR2                                  IMPT 00000000    386 
_SCSSR1                                   IMPT 00000000    372 
_SCTDR1                                   IMPT 00000000    371 
_SEQ_ADDCMD_R0_TBL                        IMPT 00000000   3010  6273  6709  6783 
_SEQ_ADR                                  EQU  00000000   3036*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    73

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_SEQ_ADR_HI                               EQU  00000000   3041*
_SEQ_ADR_LO                               EQU  00000000   3042*
_SEQ_ARG1_DATA                            IMPT 00000000    431  4368 
_SEQ_ASM_RAM_TOP                          IMPT 00000000    400 
_SEQ_BBIT_CHG_TBL                         IMPT 00000000   3002  4625  4723  4823  4923  5022  5121  5212  5311  5392  5481  5568 
                                                          5672  5772  5870  5972 
_SEQ_BIT                                  EQU  00000000   3035*
_SEQ_CARD_MAX                             EQU  0000007F   3032* 4608  4706  4808  4908  5007  5106  5197  5294  5375  5464  5551 
                                                          5657  5752  5853  5952  6060  6126  6246  6528  6606  6682  6756  6830 
                                                          6906  6982  7058  7134  7210  7285  7361  7437 
_SEQ_CARD_RAM                             IMPT 00000000    415 
_SEQ_CD_BLOCK_MV_EXIT            P             0000110C   7515  7530*
_SEQ_CHG_TBL0                             IMPT 00000000   2998  4463 
_SEQ_CMP_ERR                              IMPT 00000000    430  4343 
_SEQ_CMP_ERR_ADR                          IMPT 00000000    436  4333 
_SEQ_CODE_BLOCK_LOOP             P             000010F4   7513* 7524 
_SEQ_CODE_BLOCK_MV               P             000010F2   4618  4716  4818  4918  5017  5116  5207  5304  5385  5474  5561  5667 
                                                          5762  5863  5962  6070  6136  6194  6256  6322  6377  6407  6438  6468 
                                                          6498  6538  6616  6692  6766  6840  6916  6992  7068  7144  7220  7295 
                                                          7371  7447  7508*
_SEQ_COM1_END                             IMPT 00000000   4279  4416 
_SEQ_COM1_TOP                             IMPT 00000000   4278  4408 
_SEQ_CTR_CARD_TOP                         EQU  00000430   3080*
_SEQ_CTR_DATA                             IMPT 00000000    424 
_SEQ_CTR_DT                               EQU  00000000   3039*
_SEQ_DRG1_DATA                            IMPT 00000000    434 
_SEQ_DT_HI                                EQU  00000000   3045*
_SEQ_DT_LO                                EQU  00000000   3044*
_SEQ_END_CODE                    P             00000004   4291* 4350 
_SEQ_GBR_TBL                              IMPT 00000000   3000 
_SEQ_MAX_BYTE                             EQU  0000001C   3027* 4412 
_SEQ_MOVCMD_R0RD_TBL                      IMPT 00000000   3003  4647  4745  4845  4945  5044  5143  5234 
_SEQ_MOVCMD_R1RD_TBL                      IMPT 00000000   3004  5599  5801  5892  6001 
_SEQ_MOVCMD_R1WR_TBL                      IMPT 00000000   3005  5608  5703  5810  5901  6010 
_SEQ_MOVCMD_R3RD_TBL                      IMPT 00000000   3007  6556  6634  6858  6934  7010  7086  7162  7238  7313  7389  7465 
_SEQ_MOVCMD_R3WR_TBL                      IMPT 00000000   3008 
_SEQ_MRG1_DATA                            IMPT 00000000    432  4370 
_SEQ_NRG1_DATA                            IMPT 00000000    433  4373 
_SEQ_OFFSET_ADR1                          EQU  00000000   3047*
_SEQ_OFFSET_ADR2                          EQU  000000C8   3048*
_SEQ_OFFSET_ADR3                          EQU  00000190   3049*
_SEQ_OFFSET_ADR4                          EQU  0000021C   3050*
_SEQ_OFFSET_ADR5                          EQU  000002F8   3051*
_SEQ_OFFSET_ADR6                          EQU  00000384   3052*
_SEQ_OFFSET_ADR7                          EQU  00000424   3053*
_SEQ_RUN1                                 IMPT 00000000    407  4409 
_SEQ_RUN1_END                             IMPT 00000000    408  4410 
_SEQ_RUN1_TOP                             IMPT 00000000    406  4318 
_SEQ_RUN_CHG1                    P             0000009C   4329  4403*
_SEQ_RUN_CHG1_100                P             000000AC   4418* 4519 
_SEQ_RUN_CHG1_300                P             000000E0   4460*
_SEQ_RUN_CHG1_800                P             00000124   4478  4500*
_SEQ_RUN_CHG1_END                P             00000138   4481  4526*
_SEQ_RUN_CHG1_ERR_END            P        EXPT 0000013E   2989  4446  4449  4483  4533*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    74

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_SEQ_RUN_CHG1_EXIT               P             00000140   4530  4536*
_SEQ_RUN_CHG_MAIN                P        EXPT 0000000A   4281  4312*
_SEQ_RUN_CHG_MAIN020             P             00000052   4347  4364*
_SEQ_SEEK_CARD_TBL                        IMPT 00000000   3020 
_SEQ_SEEK_WBIT_TBL                        IMPT 00000000   3019 
_SEQ_SR_FLG                               IMPT 00000000    427 
_SEQ_START_CODE                  P             00000000   4285* 4319 
_SEQ_TMR_CARD_TOP                         EQU  00000424   3079*
_SEQ_TMR_DATA                             IMPT 00000000    420 
_SEQ_TMR_DT                               EQU  00000000   3038*
_SET_C80                         P             000008FC   5855  5926*
_SET_CHG                         P        EXPT 000007D6   2964  5745*
_SET_CHG_EX                      P             000008FE   5908  5929*
_SET_CODE                                 IMPT 00000000   2889  5756  5757  5857  5858 
_SET_CODE_END                             IMPT 00000000   2890  5756  5857 
_SQ000                                    EQU  00000000   3159*
_SQ001                                    EQU  00000002   3160*
_SQ002                                    EQU  00000004   3161*
_SQ003                                    EQU  00000006   3162*
_SQ004                                    EQU  00000008   3163*
_SQ005                                    EQU  0000000A   3164*
_SQ006                                    EQU  0000000C   3165*
_SQ007                                    EQU  0000000E   3166*
_SQ008                                    EQU  00000010   3167*
_SQ009                                    EQU  00000012   3168*
_SQ010                                    EQU  00000014   3169*
_SQ011                                    EQU  00000016   3170*
_SQ012                                    EQU  00000018   3171*
_SQ013                                    EQU  0000001A   3172*
_SQ014                                    EQU  0000001C   3173*
_SQ015                                    EQU  0000001E   3174*
_SQ016                                    EQU  00000020   3175*
_SQ017                                    EQU  00000022   3176*
_SQ018                                    EQU  00000024   3177*
_SQ019                                    EQU  00000026   3178*
_SQ020                                    EQU  00000028   3179*
_SQ021                                    EQU  0000002A   3180*
_SQ022                                    EQU  0000002C   3181*
_SQ023                                    EQU  0000002E   3182*
_SQ024                                    EQU  00000030   3183*
_SQ025                                    EQU  00000032   3184*
_SQ026                                    EQU  00000034   3185*
_SQ027                                    EQU  00000036   3186*
_SQ028                                    EQU  00000038   3187*
_SQ029                                    EQU  0000003A   3188*
_SQ030                                    EQU  0000003C   3189*
_SQ031                                    EQU  0000003E   3190*
_SQ032                                    EQU  00000040   3191*
_SQ033                                    EQU  00000042   3192*
_SQ034                                    EQU  00000044   3193*
_SQ035                                    EQU  00000046   3194*
_SQ036                                    EQU  00000048   3195*
_SQ037                                    EQU  0000004A   3196*
_SQ038                                    EQU  0000004C   3197*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    75

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_SQ039                                    EQU  0000004E   3198*
_SQ040                                    EQU  00000050   3199*
_SQ041                                    EQU  00000052   3200*
_SQ042                                    EQU  00000054   3201*
_SQ043                                    EQU  00000056   3202*
_SQ044                                    EQU  00000058   3203*
_SQ045                                    EQU  0000005A   3204*
_SQ046                                    EQU  0000005C   3205*
_SQ047                                    EQU  0000005E   3206*
_SQ048                                    EQU  00000060   3207*
_SQ049                                    EQU  00000062   3208*
_SQ050                                    EQU  00000064   3209*
_SQ051                                    EQU  00000066   3210*
_SQ052                                    EQU  00000068   3211*
_SQ053                                    EQU  0000006A   3212*
_SQ054                                    EQU  0000006C   3213*
_SQ055                                    EQU  0000006E   3214*
_SQ056                                    EQU  00000070   3215*
_SQ057                                    EQU  00000072   3216*
_SQ058                                    EQU  00000074   3217*
_SQ059                                    EQU  00000076   3218*
_SQ060                                    EQU  00000078   3219*
_SQ061                                    EQU  0000007A   3220*
_SQ062                                    EQU  0000007C   3221*
_SQ063                                    EQU  0000007E   3222*
_SQ064                                    EQU  00000080   3223*
_SQ065                                    EQU  00000082   3224*
_SQ066                                    EQU  00000084   3225*
_SQ067                                    EQU  00000086   3226*
_SQ068                                    EQU  00000088   3227*
_SQ069                                    EQU  0000008A   3228*
_SQ070                                    EQU  0000008C   3229*
_SQ071                                    EQU  0000008E   3230*
_SQ072                                    EQU  00000090   3231*
_SQ073                                    EQU  00000092   3232*
_SQ074                                    EQU  00000094   3233*
_SQ075                                    EQU  00000096   3234*
_SQ076                                    EQU  00000098   3235*
_SQ077                                    EQU  0000009A   3236*
_SQ078                                    EQU  0000009C   3237*
_SQ079                                    EQU  0000009E   3238*
_SQ080                                    EQU  000000A0   3239*
_SQ081                                    EQU  000000A2   3240*
_SQ082                                    EQU  000000A4   3241*
_SQ083                                    EQU  000000A6   3242*
_SQ084                                    EQU  000000A8   3243*
_SQ085                                    EQU  000000AA   3244*
_SQ086                                    EQU  000000AC   3245*
_SQ087                                    EQU  000000AE   3246*
_SQ088                                    EQU  000000B0   3247*
_SQ089                                    EQU  000000B2   3248*
_SQ090                                    EQU  000000B4   3249*
_SQ091                                    EQU  000000B6   3250*
_SQ092                                    EQU  000000B8   3251*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    76

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_SQ093                                    EQU  000000BA   3252*
_SQ094                                    EQU  000000BC   3253*
_SQ095                                    EQU  000000BE   3254*
_SQ096                                    EQU  000000C0   3255*
_SQ097                                    EQU  000000C2   3256*
_SQ098                                    EQU  000000C4   3257*
_SQ099                                    EQU  000000C6   3258*
_SQ100                                    EQU  000000C8   3260*
_SQ101                                    EQU  000000CA   3261*
_SQ102                                    EQU  000000CC   3262*
_SQ103                                    EQU  000000CE   3263*
_SQ104                                    EQU  000000D0   3264*
_SQ105                                    EQU  000000D2   3265*
_SQ106                                    EQU  000000D4   3266*
_SQ107                                    EQU  000000D6   3267*
_SQ108                                    EQU  000000D8   3268*
_SQ109                                    EQU  000000DA   3269*
_SQ110                                    EQU  000000DC   3270*
_SQ111                                    EQU  000000DE   3271*
_SQ112                                    EQU  000000E0   3272*
_SQ113                                    EQU  000000E2   3273*
_SQ114                                    EQU  000000E4   3274*
_SQ115                                    EQU  000000E6   3275*
_SQ116                                    EQU  000000E8   3276*
_SQ117                                    EQU  000000EA   3277*
_SQ118                                    EQU  000000EC   3278*
_SQ119                                    EQU  000000EE   3279*
_SQ120                                    EQU  000000F0   3280*
_SQ121                                    EQU  000000F2   3281*
_SQ122                                    EQU  000000F4   3282*
_SQ123                                    EQU  000000F6   3283*
_SQ124                                    EQU  000000F8   3284*
_SQ125                                    EQU  000000FA   3285*
_SQ126                                    EQU  000000FC   3286*
_SQ127                                    EQU  000000FE   3287*
_SQ128                                    EQU  00000100   3288*
_SQ129                                    EQU  00000102   3289*
_SQ130                                    EQU  00000104   3290*
_SQ131                                    EQU  00000106   3291*
_SQ132                                    EQU  00000108   3292*
_SQ133                                    EQU  0000010A   3293*
_SQ134                                    EQU  0000010C   3294*
_SQ135                                    EQU  0000010E   3295*
_SQ136                                    EQU  00000110   3296*
_SQ137                                    EQU  00000112   3297*
_SQ138                                    EQU  00000114   3298*
_SQ139                                    EQU  00000116   3299*
_SQ140                                    EQU  00000118   3300*
_SQ141                                    EQU  0000011A   3301*
_SQ142                                    EQU  0000011C   3302*
_SQ143                                    EQU  0000011E   3303*
_SQ144                                    EQU  00000120   3304*
_SQ145                                    EQU  00000122   3305*
_SQ146                                    EQU  00000124   3306*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    77

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_SQ147                                    EQU  00000126   3307*
_SQ148                                    EQU  00000128   3308*
_SQ149                                    EQU  0000012A   3309*
_SQ150                                    EQU  0000012C   3310*
_SQ151                                    EQU  0000012E   3311*
_SQ152                                    EQU  00000130   3312*
_SQ153                                    EQU  00000132   3313*
_SQ154                                    EQU  00000134   3314*
_SQ155                                    EQU  00000136   3315*
_SQ156                                    EQU  00000138   3316*
_SQ157                                    EQU  0000013A   3317*
_SQ158                                    EQU  0000013C   3318*
_SQ159                                    EQU  0000013E   3319*
_SQ160                                    EQU  00000140   3320*
_SQ161                                    EQU  00000142   3321*
_SQ162                                    EQU  00000144   3322*
_SQ163                                    EQU  00000146   3323*
_SQ164                                    EQU  00000148   3324*
_SQ165                                    EQU  0000014A   3325*
_SQ166                                    EQU  0000014C   3326*
_SQ167                                    EQU  0000014E   3327*
_SQ168                                    EQU  00000150   3328*
_SQ169                                    EQU  00000152   3329*
_SQ170                                    EQU  00000154   3330*
_SQ171                                    EQU  00000156   3331*
_SQ172                                    EQU  00000158   3332*
_SQ173                                    EQU  0000015A   3333*
_SQ174                                    EQU  0000015C   3334*
_SQ175                                    EQU  0000015E   3335*
_SQ176                                    EQU  00000160   3336*
_SQ177                                    EQU  00000162   3337*
_SQ178                                    EQU  00000164   3338*
_SQ179                                    EQU  00000166   3339*
_SQ180                                    EQU  00000168   3340*
_SQ181                                    EQU  0000016A   3341*
_SQ182                                    EQU  0000016C   3342*
_SQ183                                    EQU  0000016E   3343*
_SQ184                                    EQU  00000170   3344*
_SQ185                                    EQU  00000172   3345*
_SQ186                                    EQU  00000174   3346*
_SQ187                                    EQU  00000176   3347*
_SQ188                                    EQU  00000178   3348*
_SQ189                                    EQU  0000017A   3349*
_SQ190                                    EQU  0000017C   3350*
_SQ191                                    EQU  0000017E   3351*
_SQ192                                    EQU  00000180   3352*
_SQ193                                    EQU  00000182   3353*
_SQ194                                    EQU  00000184   3354*
_SQ195                                    EQU  00000186   3355*
_SQ196                                    EQU  00000188   3356*
_SQ197                                    EQU  0000018A   3357*
_SQ198                                    EQU  0000018C   3358*
_SQ199                                    EQU  0000018E   3359*
_SQ200                                    EQU  00000190   3361*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    78

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_SQ201                                    EQU  00000192   3362*
_SQ202                                    EQU  00000194   3363*
_SQ203                                    EQU  00000196   3364*
_SQ204                                    EQU  00000198   3365*
_SQ205                                    EQU  0000019A   3366*
_SQ206                                    EQU  0000019C   3367*
_SQ207                                    EQU  0000019E   3368*
_SQ208                                    EQU  000001A0   3369*
_SQ209                                    EQU  000001A2   3370*
_SQ210                                    EQU  000001A4   3371*
_SQ211                                    EQU  000001A6   3372*
_SQ212                                    EQU  000001A8   3373*
_SQ213                                    EQU  000001AA   3374*
_SQ214                                    EQU  000001AC   3375*
_SQ215                                    EQU  000001AE   3376*
_SQ216                                    EQU  000001B0   3377*
_SQ217                                    EQU  000001B2   3378*
_SQ218                                    EQU  000001B4   3379*
_SQ219                                    EQU  000001B6   3380*
_SQ220                                    EQU  000001B8   3381*
_SQ221                                    EQU  000001BA   3382*
_SQ222                                    EQU  000001BC   3383*
_SQ223                                    EQU  000001BE   3384*
_SQ224                                    EQU  000001C0   3385*
_SQ225                                    EQU  000001C2   3386*
_SQ226                                    EQU  000001C4   3387*
_SQ227                                    EQU  000001C6   3388*
_SQ228                                    EQU  000001C8   3389*
_SQ229                                    EQU  000001CA   3390*
_SQ230                                    EQU  000001CC   3391*
_SQ231                                    EQU  000001CE   3392*
_SQ232                                    EQU  000001D0   3393*
_SQ233                                    EQU  000001D2   3394*
_SQ234                                    EQU  000001D4   3395*
_SQ235                                    EQU  000001D6   3396*
_SQ236                                    EQU  000001D8   3397*
_SQ237                                    EQU  000001DA   3398*
_SQ238                                    EQU  000001DC   3399*
_SQ239                                    EQU  000001DE   3400*
_SQ240                                    EQU  000001E0   3401*
_SQ241                                    EQU  000001E2   3402*
_SQ242                                    EQU  000001E4   3403*
_SQ243                                    EQU  000001E6   3404*
_SQ244                                    EQU  000001E8   3405*
_SQ245                                    EQU  000001EA   3406*
_SQ246                                    EQU  000001EC   3407*
_SQ247                                    EQU  000001EE   3408*
_SQ248                                    EQU  000001F0   3409*
_SQ249                                    EQU  000001F2   3410*
_SQ250                                    EQU  000001F4   3411*
_SQ251                                    EQU  000001F6   3412*
_SQ252                                    EQU  000001F8   3413*
_SQ253                                    EQU  000001FA   3414*
_SQ254                                    EQU  000001FC   3415*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    79

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_SQ255                                    EQU  000001FE   3416*
_SQ256                                    EQU  00000200   3417*
_SQ257                                    EQU  00000202   3418*
_SQ258                                    EQU  00000204   3419*
_SQ259                                    EQU  00000206   3420*
_SQ260                                    EQU  00000208   3421*
_SQ261                                    EQU  0000020A   3422*
_SQ262                                    EQU  0000020C   3423*
_SQ263                                    EQU  0000020E   3424*
_SQ264                                    EQU  00000210   3425*
_SQ265                                    EQU  00000212   3426*
_SQ266                                    EQU  00000214   3427*
_SQ267                                    EQU  00000216   3428*
_SQ268                                    EQU  00000218   3429*
_SQ269                                    EQU  0000021A   3430*
_SQ270                                    EQU  0000021C   3431*
_SQ271                                    EQU  0000021E   3432*
_SQ272                                    EQU  00000220   3433*
_SQ273                                    EQU  00000222   3434*
_SQ274                                    EQU  00000224   3435*
_SQ275                                    EQU  00000226   3436*
_SQ276                                    EQU  00000228   3437*
_SQ277                                    EQU  0000022A   3438*
_SQ278                                    EQU  0000022C   3439*
_SQ279                                    EQU  0000022E   3440*
_SQ280                                    EQU  00000230   3441*
_SQ281                                    EQU  00000232   3442*
_SQ282                                    EQU  00000234   3443*
_SQ283                                    EQU  00000236   3444*
_SQ284                                    EQU  00000238   3445*
_SQ285                                    EQU  0000023A   3446*
_SQ286                                    EQU  0000023C   3447*
_SQ287                                    EQU  0000023E   3448*
_SQ288                                    EQU  00000240   3449*
_SQ289                                    EQU  00000242   3450*
_SQ290                                    EQU  00000244   3451*
_SQ291                                    EQU  00000246   3452*
_SQ292                                    EQU  00000248   3453*
_SQ293                                    EQU  0000024A   3454*
_SQ294                                    EQU  0000024C   3455*
_SQ295                                    EQU  0000024E   3456*
_SQ296                                    EQU  00000250   3457*
_SQ297                                    EQU  00000252   3458*
_SQ298                                    EQU  00000254   3459*
_SQ299                                    EQU  00000256   3460*
_SQ300                                    EQU  00000258   3462*
_SQ301                                    EQU  0000025A   3463*
_SQ302                                    EQU  0000025C   3464*
_SQ303                                    EQU  0000025E   3465*
_SQ304                                    EQU  00000260   3466*
_SQ305                                    EQU  00000262   3467*
_SQ306                                    EQU  00000264   3468*
_SQ307                                    EQU  00000266   3469*
_SQ308                                    EQU  00000268   3470*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    80

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_SQ309                                    EQU  0000026A   3471*
_SQ310                                    EQU  0000026C   3472*
_SQ311                                    EQU  0000026E   3473*
_SQ312                                    EQU  00000270   3474*
_SQ313                                    EQU  00000272   3475*
_SQ314                                    EQU  00000274   3476*
_SQ315                                    EQU  00000276   3477*
_SQ316                                    EQU  00000278   3478*
_SQ317                                    EQU  0000027A   3479*
_SQ318                                    EQU  0000027C   3480*
_SQ319                                    EQU  0000027E   3481*
_SQ320                                    EQU  00000280   3482*
_SQ321                                    EQU  00000282   3483*
_SQ322                                    EQU  00000284   3484*
_SQ323                                    EQU  00000286   3485*
_SQ324                                    EQU  00000288   3486*
_SQ325                                    EQU  0000028A   3487*
_SQ326                                    EQU  0000028C   3488*
_SQ327                                    EQU  0000028E   3489*
_SQ328                                    EQU  00000290   3490*
_SQ329                                    EQU  00000292   3491*
_SQ330                                    EQU  00000294   3492*
_SQ331                                    EQU  00000296   3493*
_SQ332                                    EQU  00000298   3494*
_SQ333                                    EQU  0000029A   3495*
_SQ334                                    EQU  0000029C   3496*
_SQ335                                    EQU  0000029E   3497*
_SQ336                                    EQU  000002A0   3498*
_SQ337                                    EQU  000002A2   3499*
_SQ338                                    EQU  000002A4   3500*
_SQ339                                    EQU  000002A6   3501*
_SQ340                                    EQU  000002A8   3502*
_SQ341                                    EQU  000002AA   3503*
_SQ342                                    EQU  000002AC   3504*
_SQ343                                    EQU  000002AE   3505*
_SQ344                                    EQU  000002B0   3506*
_SQ345                                    EQU  000002B2   3507*
_SQ346                                    EQU  000002B4   3508*
_SQ347                                    EQU  000002B6   3509*
_SQ348                                    EQU  000002B8   3510*
_SQ349                                    EQU  000002BA   3511*
_SQ350                                    EQU  000002BC   3512*
_SQ351                                    EQU  000002BE   3513*
_SQ352                                    EQU  000002C0   3514*
_SQ353                                    EQU  000002C2   3515*
_SQ354                                    EQU  000002C4   3516*
_SQ355                                    EQU  000002C6   3517*
_SQ356                                    EQU  000002C8   3518*
_SQ357                                    EQU  000002CA   3519*
_SQ358                                    EQU  000002CC   3520*
_SQ359                                    EQU  000002CE   3521*
_SQ360                                    EQU  000002D0   3522*
_SQ361                                    EQU  000002D2   3523*
_SQ362                                    EQU  000002D4   3524*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    81

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_SQ363                                    EQU  000002D6   3525*
_SQ364                                    EQU  000002D8   3526*
_SQ365                                    EQU  000002DA   3527*
_SQ366                                    EQU  000002DC   3528*
_SQ367                                    EQU  000002DE   3529*
_SQ368                                    EQU  000002E0   3530*
_SQ369                                    EQU  000002E2   3531*
_SQ370                                    EQU  000002E4   3532*
_SQ371                                    EQU  000002E6   3533*
_SQ372                                    EQU  000002E8   3534*
_SQ373                                    EQU  000002EA   3535*
_SQ374                                    EQU  000002EC   3536*
_SQ375                                    EQU  000002EE   3537*
_SQ376                                    EQU  000002F0   3538*
_SQ377                                    EQU  000002F2   3539*
_SQ378                                    EQU  000002F4   3540*
_SQ379                                    EQU  000002F6   3541*
_SQ380                                    EQU  000002F8   3542*
_SQ381                                    EQU  000002FA   3543*
_SQ382                                    EQU  000002FC   3544*
_SQ383                                    EQU  000002FE   3545*
_SQ384                                    EQU  00000300   3546*
_SQ385                                    EQU  00000302   3547*
_SQ386                                    EQU  00000304   3548*
_SQ387                                    EQU  00000306   3549*
_SQ388                                    EQU  00000308   3550*
_SQ389                                    EQU  0000030A   3551*
_SQ390                                    EQU  0000030C   3552*
_SQ391                                    EQU  0000030E   3553*
_SQ392                                    EQU  00000310   3554*
_SQ393                                    EQU  00000312   3555*
_SQ394                                    EQU  00000314   3556*
_SQ395                                    EQU  00000316   3557*
_SQ396                                    EQU  00000318   3558*
_SQ397                                    EQU  0000031A   3559*
_SQ398                                    EQU  0000031C   3560*
_SQ399                                    EQU  0000031E   3561*
_SQ400                                    EQU  00000320   3563*
_SQ401                                    EQU  00000322   3564*
_SQ402                                    EQU  00000324   3565*
_SQ403                                    EQU  00000326   3566*
_SQ404                                    EQU  00000328   3567*
_SQ405                                    EQU  0000032A   3568*
_SQ406                                    EQU  0000032C   3569*
_SQ407                                    EQU  0000032E   3570*
_SQ408                                    EQU  00000330   3571*
_SQ409                                    EQU  00000332   3572*
_SQ410                                    EQU  00000334   3573*
_SQ411                                    EQU  00000336   3574*
_SQ412                                    EQU  00000338   3575*
_SQ413                                    EQU  0000033A   3576*
_SQ414                                    EQU  0000033C   3577*
_SQ415                                    EQU  0000033E   3578*
_SQ416                                    EQU  00000340   3579*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    82

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_SQ417                                    EQU  00000342   3580*
_SQ418                                    EQU  00000344   3581*
_SQ419                                    EQU  00000346   3582*
_SQ420                                    EQU  00000348   3583*
_SQ421                                    EQU  0000034A   3584*
_SQ422                                    EQU  0000034C   3585*
_SQ423                                    EQU  0000034E   3586*
_SQ424                                    EQU  00000350   3587*
_SQ425                                    EQU  00000352   3588*
_SQ426                                    EQU  00000354   3589*
_SQ427                                    EQU  00000356   3590*
_SQ428                                    EQU  00000358   3591*
_SQ429                                    EQU  0000035A   3592*
_SQ430                                    EQU  0000035C   3593*
_SQ431                                    EQU  0000035E   3594*
_SQ432                                    EQU  00000360   3595*
_SQ433                                    EQU  00000362   3596*
_SQ434                                    EQU  00000364   3597*
_SQ435                                    EQU  00000366   3598*
_SQ436                                    EQU  00000368   3599*
_SQ437                                    EQU  0000036A   3600*
_SQ438                                    EQU  0000036C   3601*
_SQ439                                    EQU  0000036E   3602*
_SQ440                                    EQU  00000370   3603*
_SQ441                                    EQU  00000372   3604*
_SQ442                                    EQU  00000374   3605*
_SQ443                                    EQU  00000376   3606*
_SQ444                                    EQU  00000378   3607*
_SQ445                                    EQU  0000037A   3608*
_SQ446                                    EQU  0000037C   3609*
_SQ447                                    EQU  0000037E   3610*
_SQ448                                    EQU  00000380   3611*
_SQ449                                    EQU  00000382   3612*
_SQ450                                    EQU  00000384   3613*
_SQ451                                    EQU  00000386   3614*
_SQ452                                    EQU  00000388   3615*
_SQ453                                    EQU  0000038A   3616*
_SQ454                                    EQU  0000038C   3617*
_SQ455                                    EQU  0000038E   3618*
_SQ456                                    EQU  00000390   3619*
_SQ457                                    EQU  00000392   3620*
_SQ458                                    EQU  00000394   3621*
_SQ459                                    EQU  00000396   3622*
_SQ460                                    EQU  00000398   3623*
_SQ461                                    EQU  0000039A   3624*
_SQ462                                    EQU  0000039C   3625*
_SQ463                                    EQU  0000039E   3626*
_SQ464                                    EQU  000003A0   3627*
_SQ465                                    EQU  000003A2   3628*
_SQ466                                    EQU  000003A4   3629*
_SQ467                                    EQU  000003A6   3630*
_SQ468                                    EQU  000003A8   3631*
_SQ469                                    EQU  000003AA   3632*
_SQ470                                    EQU  000003AC   3633*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    83

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_SQ471                                    EQU  000003AE   3634*
_SQ472                                    EQU  000003B0   3635*
_SQ473                                    EQU  000003B2   3636*
_SQ474                                    EQU  000003B4   3637*
_SQ475                                    EQU  000003B6   3638*
_SQ476                                    EQU  000003B8   3639*
_SQ477                                    EQU  000003BA   3640*
_SQ478                                    EQU  000003BC   3641*
_SQ479                                    EQU  000003BE   3642*
_SQ480                                    EQU  000003C0   3643*
_SQ481                                    EQU  000003C2   3644*
_SQ482                                    EQU  000003C4   3645*
_SQ483                                    EQU  000003C6   3646*
_SQ484                                    EQU  000003C8   3647*
_SQ485                                    EQU  000003CA   3648*
_SQ486                                    EQU  000003CC   3649*
_SQ487                                    EQU  000003CE   3650*
_SQ488                                    EQU  000003D0   3651*
_SQ489                                    EQU  000003D2   3652*
_SQ490                                    EQU  000003D4   3653*
_SQ491                                    EQU  000003D6   3654*
_SQ492                                    EQU  000003D8   3655*
_SQ493                                    EQU  000003DA   3656*
_SQ494                                    EQU  000003DC   3657*
_SQ495                                    EQU  000003DE   3658*
_SQ496                                    EQU  000003E0   3659*
_SQ497                                    EQU  000003E2   3660*
_SQ498                                    EQU  000003E4   3661*
_SQ499                                    EQU  000003E6   3662*
_SQ500                                    EQU  000003E8   3664*
_SQ501                                    EQU  000003EA   3665*
_SQ502                                    EQU  000003EC   3666*
_SQ503                                    EQU  000003EE   3667*
_SQ504                                    EQU  000003F0   3668*
_SQ505                                    EQU  000003F2   3669*
_SQ506                                    EQU  000003F4   3670*
_SQ507                                    EQU  000003F6   3671*
_SQ508                                    EQU  000003F8   3672*
_SQ509                                    EQU  000003FA   3673*
_SQ510                                    EQU  000003FC   3674*
_SQ511                                    EQU  000003FE   3675*
_SQ512                                    EQU  00000400   3676*
_SQ513                                    EQU  00000402   3677*
_SQ514                                    EQU  00000404   3678*
_SQ515                                    EQU  00000406   3679*
_SQ516                                    EQU  00000408   3680*
_SQ517                                    EQU  0000040A   3681*
_SQ518                                    EQU  0000040C   3682*
_SQ519                                    EQU  0000040E   3683*
_SQ520                                    EQU  00000410   3684*
_SQ521                                    EQU  00000412   3685*
_SQ522                                    EQU  00000414   3686*
_SQ523                                    EQU  00000416   3687*
_SQ524                                    EQU  00000418   3688*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    84

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_SQ525                                    EQU  0000041A   3689*
_SQ526                                    EQU  0000041C   3690*
_SQ527                                    EQU  0000041E   3691*
_SQ528                                    EQU  00000420   3692*
_SQ529                                    EQU  00000422   3693*
_SQ530                                    EQU  00000424   3694*
_SQ531                                    EQU  00000426   3695*
_SQ532                                    EQU  00000428   3696*
_SQ533                                    EQU  0000042A   3697*
_SQ534                                    EQU  0000042C   3698*
_SQ535                                    EQU  0000042E   3699*
_SQ536                                    EQU  00000430   3700*
_SQ537                                    EQU  00000432   3701*
_SQ538                                    EQU  00000434   3702*
_SQ539                                    EQU  00000436   3703*
_SQ540                                    EQU  00000438   3704*
_SQ541                                    EQU  0000043A   3705*
_SQ542                                    EQU  0000043C   3706*
_SQ543                                    EQU  0000043E   3707*
_SQ544                                    EQU  00000440   3708*
_SQ545                                    EQU  00000442   3709*
_SQ546                                    EQU  00000444   3710*
_SQ547                                    EQU  00000446   3711*
_SQ548                                    EQU  00000448   3712*
_SQ549                                    EQU  0000044A   3713*
_SQ550                                    EQU  0000044C   3714*
_SQ551                                    EQU  0000044E   3715*
_SQ552                                    EQU  00000450   3716*
_SQ553                                    EQU  00000452   3717*
_SQ554                                    EQU  00000454   3718*
_SQ555                                    EQU  00000456   3719*
_SQ556                                    EQU  00000458   3720*
_SQ557                                    EQU  0000045A   3721*
_SQ558                                    EQU  0000045C   3722*
_SQ559                                    EQU  0000045E   3723*
_SQ560                                    EQU  00000460   3724*
_SQ561                                    EQU  00000462   3725*
_SQ562                                    EQU  00000464   3726*
_SQ563                                    EQU  00000466   3727*
_SQ564                                    EQU  00000468   3728*
_SQ565                                    EQU  0000046A   3729*
_SQ566                                    EQU  0000046C   3730*
_SQ567                                    EQU  0000046E   3731*
_SQ568                                    EQU  00000470   3732*
_SQ569                                    EQU  00000472   3733*
_SQ570                                    EQU  00000474   3734*
_SQ571                                    EQU  00000476   3735*
_SQ572                                    EQU  00000478   3736*
_SQ573                                    EQU  0000047A   3737*
_SQ574                                    EQU  0000047C   3738*
_SQ575                                    EQU  0000047E   3739*
_SQ576                                    EQU  00000480   3740*
_SQ577                                    EQU  00000482   3741*
_SQ578                                    EQU  00000484   3742*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    85

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_SQ579                                    EQU  00000486   3743*
_SQ580                                    EQU  00000488   3744*
_SQ581                                    EQU  0000048A   3745*
_SQ582                                    EQU  0000048C   3746*
_SQ583                                    EQU  0000048E   3747*
_SQ584                                    EQU  00000490   3748*
_SQ585                                    EQU  00000492   3749*
_SQ586                                    EQU  00000494   3750*
_SQ587                                    EQU  00000496   3751*
_SQ588                                    EQU  00000498   3752*
_SQ589                                    EQU  0000049A   3753*
_SQ590                                    EQU  0000049C   3754*
_SQ591                                    EQU  0000049E   3755*
_SQ592                                    EQU  000004A0   3756*
_SQ593                                    EQU  000004A2   3757*
_SQ594                                    EQU  000004A4   3758*
_SQ595                                    EQU  000004A6   3759*
_SQ596                                    EQU  000004A8   3760*
_SQ597                                    EQU  000004AA   3761*
_SQ598                                    EQU  000004AC   3762*
_SQ599                                    EQU  000004AE   3763*
_SQ600                                    EQU  000004B0   3765*
_SQ601                                    EQU  000004B2   3766*
_SQ602                                    EQU  000004B4   3767*
_SQ603                                    EQU  000004B6   3768*
_SQ604                                    EQU  000004B8   3769*
_SQ605                                    EQU  000004BA   3770*
_SQ606                                    EQU  000004BC   3771*
_SQ607                                    EQU  000004BE   3772*
_SQ608                                    EQU  000004C0   3773*
_SQ609                                    EQU  000004C2   3774*
_SQ610                                    EQU  000004C4   3775*
_SQ611                                    EQU  000004C6   3776*
_SQ612                                    EQU  000004C8   3777*
_SQ613                                    EQU  000004CA   3778*
_SQ614                                    EQU  000004CC   3779*
_SQ615                                    EQU  000004CE   3780*
_SQ616                                    EQU  000004D0   3781*
_SQ617                                    EQU  000004D2   3782*
_SQ618                                    EQU  000004D4   3783*
_SQ619                                    EQU  000004D6   3784*
_SQ620                                    EQU  000004D8   3785*
_SQ621                                    EQU  000004DA   3786*
_SQ622                                    EQU  000004DC   3787*
_SQ623                                    EQU  000004DE   3788*
_SQ624                                    EQU  000004E0   3789*
_SQ625                                    EQU  000004E2   3790*
_SQ626                                    EQU  000004E4   3791*
_SQ627                                    EQU  000004E6   3792*
_SQ628                                    EQU  000004E8   3793*
_SQ629                                    EQU  000004EA   3794*
_SQ630                                    EQU  000004EC   3795*
_SQ631                                    EQU  000004EE   3796*
_SQ632                                    EQU  000004F0   3797*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    86

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_SQ633                                    EQU  000004F2   3798*
_SQ634                                    EQU  000004F4   3799*
_SQ635                                    EQU  000004F6   3800*
_SQ636                                    EQU  000004F8   3801*
_SQ637                                    EQU  000004FA   3802*
_SQ638                                    EQU  000004FC   3803*
_SQ639                                    EQU  000004FE   3804*
_SQ640                                    EQU  00000500   3805*
_SQ641                                    EQU  00000502   3806*
_SQ642                                    EQU  00000504   3807*
_SQ643                                    EQU  00000506   3808*
_SQ644                                    EQU  00000508   3809*
_SQ645                                    EQU  0000050A   3810*
_SQ646                                    EQU  0000050C   3811*
_SQ647                                    EQU  0000050E   3812*
_SQ648                                    EQU  00000510   3813*
_SQ649                                    EQU  00000512   3814*
_SQ650                                    EQU  00000514   3815*
_SQ651                                    EQU  00000516   3816*
_SQ652                                    EQU  00000518   3817*
_SQ653                                    EQU  0000051A   3818*
_SQ654                                    EQU  0000051C   3819*
_SQ655                                    EQU  0000051E   3820*
_SQ656                                    EQU  00000520   3821*
_SQ657                                    EQU  00000522   3822*
_SQ658                                    EQU  00000524   3823*
_SQ659                                    EQU  00000526   3824*
_SQ660                                    EQU  00000528   3825*
_SQ661                                    EQU  0000052A   3826*
_SQ662                                    EQU  0000052C   3827*
_SQ663                                    EQU  0000052E   3828*
_SQ664                                    EQU  00000530   3829*
_SQ665                                    EQU  00000532   3830*
_SQ666                                    EQU  00000534   3831*
_SQ667                                    EQU  00000536   3832*
_SQ668                                    EQU  00000538   3833*
_SQ669                                    EQU  0000053A   3834*
_SQ670                                    EQU  0000053C   3835*
_SQ671                                    EQU  0000053E   3836*
_SQ672                                    EQU  00000540   3837*
_SQ673                                    EQU  00000542   3838*
_SQ674                                    EQU  00000544   3839*
_SQ675                                    EQU  00000546   3840*
_SQ676                                    EQU  00000548   3841*
_SQ677                                    EQU  0000054A   3842*
_SQ678                                    EQU  0000054C   3843*
_SQ679                                    EQU  0000054E   3844*
_SQ680                                    EQU  00000550   3845*
_SQ681                                    EQU  00000552   3846*
_SQ682                                    EQU  00000554   3847*
_SQ683                                    EQU  00000556   3848*
_SQ684                                    EQU  00000558   3849*
_SQ685                                    EQU  0000055A   3850*
_SQ686                                    EQU  0000055C   3851*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    87

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_SQ687                                    EQU  0000055E   3852*
_SQ688                                    EQU  00000560   3853*
_SQ689                                    EQU  00000562   3854*
_SQ690                                    EQU  00000564   3855*
_SQ691                                    EQU  00000566   3856*
_SQ692                                    EQU  00000568   3857*
_SQ693                                    EQU  0000056A   3858*
_SQ694                                    EQU  0000056C   3859*
_SQ695                                    EQU  0000056E   3860*
_SQ696                                    EQU  00000570   3861*
_SQ697                                    EQU  00000572   3862*
_SQ698                                    EQU  00000574   3863*
_SQ699                                    EQU  00000576   3864*
_SQCB200                                  EQU  00000000   3086*
_SQCB201                                  EQU  00000002   3087*
_SQCB202                                  EQU  00000004   3088*
_SQCB203                                  EQU  00000006   3089*
_SQCB204                                  EQU  00000008   3090*
_SQCB205                                  EQU  0000000A   3091*
_SQCB206                                  EQU  0000000C   3092*
_SQCB207                                  EQU  0000000E   3093*
_SQCB208                                  EQU  00000010   3094*
_SQCB209                                  EQU  00000012   3095*
_SQCB210                                  EQU  00000014   3096*
_SQCB211                                  EQU  00000016   3097*
_SQCB212                                  EQU  00000018   3098*
_SQCB213                                  EQU  0000001A   3099*
_SQCB214                                  EQU  0000001C   3100*
_SQCB215                                  EQU  0000001E   3101*
_SQCB216                                  EQU  00000020   3102*
_SQCB217                                  EQU  00000022   3103*
_SQCB218                                  EQU  00000024   3104*
_SQCB219                                  EQU  00000026   3105*
_SQCB220                                  EQU  00000028   3106*
_SQCB221                                  EQU  0000002A   3107*
_SQCB222                                  EQU  0000002C   3108*
_SQCB223                                  EQU  0000002E   3109*
_SQCB224                                  EQU  00000030   3110*
_SQCB225                                  EQU  00000032   3111*
_SQCB226                                  EQU  00000034   3112*
_SQCB227                                  EQU  00000036   3113*
_SQCB228                                  EQU  00000038   3114*
_SQCB229                                  EQU  0000003A   3115*
_SQCB230                                  EQU  0000003C   3116*
_SQCB231                                  EQU  0000003E   3117*
_SQCB232                                  EQU  00000040   3118*
_SQCB233                                  EQU  00000042   3119*
_SQCB234                                  EQU  00000044   3120*
_SQCB235                                  EQU  00000046   3121*
_SQCB236                                  EQU  00000048   3122*
_SQCB237                                  EQU  0000004A   3123*
_SQCB238                                  EQU  0000004C   3124*
_SQCB239                                  EQU  0000004E   3125*
_SQCB240                                  EQU  00000050   3126*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    88

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_SQCB241                                  EQU  00000052   3127*
_SQCB242                                  EQU  00000054   3128*
_SQCB243                                  EQU  00000056   3129*
_SQCB244                                  EQU  00000058   3130*
_SQCB245                                  EQU  0000005A   3131*
_SQCB246                                  EQU  0000005C   3132*
_SQCB247                                  EQU  0000005E   3133*
_SQCB248                                  EQU  00000060   3134*
_SQCB249                                  EQU  00000062   3135*
_SQCB250                                  EQU  00000064   3136*
_SQCB251                                  EQU  00000066   3137*
_SQCB252                                  EQU  00000068   3138*
_SQCB253                                  EQU  0000006A   3139*
_SQCB254                                  EQU  0000006C   3140*
_SQCB255                                  EQU  0000006E   3141*
_SQCB256                                  EQU  00000070   3142*
_SQCB257                                  EQU  00000072   3143*
_SQCB258                                  EQU  00000074   3144*
_SQCB259                                  EQU  00000076   3145*
_SQCB260                                  EQU  00000078   3146*
_SQCB261                                  EQU  0000007A   3147*
_SQCB262                                  EQU  0000007C   3148*
_SQCB263                                  EQU  0000007E   3149*
_SQCB264                                  EQU  00000080   3150*
_SQCB265                                  EQU  00000082   3151*
_SQCB266                                  EQU  00000084   3152*
_SQCB267                                  EQU  00000086   3153*
_SQCB268                                  EQU  00000088   3154*
_SQCB269                                  EQU  0000008A   3155*
_SQ_CB_DAT1                               EQU  00000046   3082*
_SQ_ERR_END                               EQU  0000FF00   3031* 4534  4683  4780  4879  4979  5078  5177  5268  5359  5439  5529 
                                                          5634  5728  5836  5927  6036  6100  6166  6297  6580  6657  6732  6806 
                                                          6881  6957  7033  7109  7185  7261  7336  7412  7488 
_SQ_NML_COD                               EQU  00000000   3029* 4477  4569  4662  4760  4860  4960  5059  5158  5249  5339  5420 
                                                          5509  5613  5709  5815  5906  6015  6085  6151  6216  6279  6344  6562 
                                                          6640  6715  6789  6864  6940  7016  7092  7168  7244  7319  7395  7471 
_SQ_NML_END                               EQU  00000055   3030* 4480  6502 
_START_ACK_COD                            EQU  00004321    211*
_START_REQ_COD                            EQU  00009876    210*
_STBCR                                    IMPT 00000000    341 
_STBCR2                                   IMPT 00000000    344 
_STWU_CHG                        P        EXPT 00000D0A   2978  6749*
_STWU_CODE                                IMPT 00000000   2921  6760  6761 
_STWU_CODE_END                            IMPT 00000000   2922  6760 
_STW_CHG                         P        EXPT 00000CA6   2979  6675*
_STW_CMD                                  EQU  00000024   3066*
_STW_CODE                                 IMPT 00000000   2923  6686  6687 
_STW_CODE_END                             IMPT 00000000   2924  6686 
_STW_SUB                                  IMPT 00000000   2856 
_ST_C80                          P             00000744   5553  5633*
_ST_CHG                          P        EXPT 000006AE   2962  5546*
_ST_CHG_EX                       P             00000746   5615  5636*
_ST_CODE                                  IMPT 00000000   2887  5555  5556 
_ST_CODE_END                              IMPT 00000000   2888  5555 
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    89

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_SUB_CHG                         P        EXPT 00000F62   2985  7203*
_SUB_CMD                                  EQU  00000048   3075*
_SUB_CODE                                 IMPT 00000000   2941  7214  7215 
_SUB_CODE_END                             IMPT 00000000   2942  7214 
_SUB_SUB                                  IMPT 00000000   2865 
_TCNT0                                    IMPT 00000000    357 
_TCNT1                                    IMPT 00000000    360 
_TCNT2                                    IMPT 00000000    363 
_TCOR0                                    IMPT 00000000    356 
_TCOR1                                    IMPT 00000000    359 
_TCOR2                                    IMPT 00000000    362 
_TCPR2                                    IMPT 00000000    365 
_TCR0                                     IMPT 00000000    358 
_TCR1                                     IMPT 00000000    361 
_TCR2                                     IMPT 00000000    364 
_TEA                                      IMPT 00000000    279 
_TMR_CMD                                  EQU  00000010   3061*
_TOCR                                     IMPT 00000000    354 
_TRA                                      IMPT 00000000    284 
_TSTR                                     IMPT 00000000    355 
_TTB                                      IMPT 00000000    278 
_VUPCHECK_EQU                             EQU  11AB3739     98*
_WCR1                                     IMPT 00000000    305 
_WCR2                                     IMPT 00000000    306 
_WCR3                                     IMPT 00000000    307 
_WCTR_CHG                        P        EXPT 000009F2   2967  6119*
_WCTR_CODE                                IMPT 00000000   2911  6130  6131 
_WCTR_CODE_END                            IMPT 00000000   2912  6130 
_WCTR_SUB                                 IMPT 00000000   2852 
_WNNRG_CHG                       P        EXPT 00000B98   2974  6457*
_WNNRG_CODE                               IMPT 00000000   2903  6462  6463 
_WNNRG_CODE_END                           IMPT 00000000   2904  6462 
_WNRG_CHG                        P        EXPT 00000B78   2973  6427*
_WNRG_CODE                                IMPT 00000000   2901  6432  6433 
_WNRG_CODE_END                            IMPT 00000000   2902  6432 
_WSC_C80                         P             000007CC   5659  5727*
_WSC_CHG                         P        EXPT 0000074E   2963  5652*
_WSC_CHG_EX                      P             000007CE   5711  5730*
_WSC_CMD                                  EQU  00000018   3063*
_WSC_CODE                                 IMPT 00000000   2913  5661  5662 
_WSC_CODE_END                             IMPT 00000000   2914  5661 
_WSC_SUB                                  IMPT 00000000   2853 
_WSR_CHG                         P        EXPT 00000A3E   2968  6183*
_WSR_CMD                                  EQU  0000001C   3064*
_WSR_CODE                                 IMPT 00000000   2915  6188  6189 
_WSR_CODE_END                             IMPT 00000000   2916  6188 
_WSR_SUB                                  IMPT 00000000   2854 
_WTCNT                                    IMPT 00000000    342 
_WTCSR                                    IMPT 00000000    343 
_WTMR_CHG                        P        EXPT 000009A6   2966  6053*
_WTMR_CODE                                IMPT 00000000   2909  6064  6065 
_WTMR_CODE_END                            IMPT 00000000   2910  6064 
_WTMR_SUB                                 IMPT 00000000   2851 
_XORW_CHG                        P        EXPT 0000108E   2988  7430*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    90

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_XORW_CMD                                 EQU  00000040   3073*
_XORW_CODE                                IMPT 00000000   2937  7441  7442 
_XORW_CODE_END                            IMPT 00000000   2938  7441 
_XORW_SUB                                 IMPT 00000000   2863 
_data_init2_timer                         IMPT 00000000   2798 
_mem_chk_flg                              IMPT 00000000   2800 
_sram_top                                 IMPT 00000000   2796 
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    12/12/17 19:19:43                                                  PAGE    91

*** SECTION DATA LIST

SECTION                          ATTRIBUTE    SIZE             START

P                                REL-CODE    000001112        
