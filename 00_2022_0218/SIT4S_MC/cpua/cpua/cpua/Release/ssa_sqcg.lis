*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE     1
PROGRAM NAME =

    1                               1     ;       ***************************************************
    2                               2     ;       ***                                             ***
    3                               3     ;       ***                                             ***
    4                               4     ;       ***     シーケンスコード変換ソフト              ***
    5                               5     ;       ***                                             ***
    6                               6     ;       ***                                             ***
    7                               7     ;       ***************************************************
 3870                              20     
 3871                              21     
 3872                              22     ;       ***************************************************
 3873                              23     ;       *****   AND,ANDN,OR,ORN CODE CHANGE MACRO       ***
 3874                              24     ;       ***************************************************
 3875                              25     
 3876                              26             .MACRO  _SEQ_LD_LDN_CMD TOP_ADR,END_ADR
 3877                              27     
 3878                              28             MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 3879                              29             CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 3880                              30             BT      _JMP_C80\@                              ; IF ADR >= 127 THEN JUMP
 3881                              31     ;
 3882                              32             MOV.L   #(\END_ADR-\TOP_ADR),R0         ; 転送 BYTE長
 3883                              33             MOV.L   #\TOP_ADR,R3                    ; Read CODE MOVE        (12 BYTE)
 3884                              34     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 3885                              35             MOV     R13,R4                          ; SEQ ADR. KEEP
 3886                              36     
 3887                              37             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 3888                              38                                                     ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 3889                              39     ;       *** BIT SET ***
 3890                              40             MOV.L   #D'6,R1                         ; ﾒﾓﾘのところ
 3891                              41             ADD     R1,R4                           ;
 3892                              42             MOV.L   #_SEQ_BBIT_CHG_TBL,R1           ;
 3893                              43             SHLL    R10                             ; *2
 3894                              44             ADD     R10,R1                          ;
 3895                              45             MOV.W   @R1,R1                          ;
 3896                              46             MOV.W   @R4,R2                          ; ﾒﾓﾘのところの命令LOAD
 3897                              47             MOV.L   #H'FFFFFF00,R0                  ;
 3898                              48             AND     R0,R2                           ; BITﾃﾞｰﾀのところをｸﾘｱ
 3899                              49             OR      R1,R2                           ;
 3900                              50             MOV.W   R2,@R4                          ; BIT SET
 3901                              51     
 3902                              52     ;       *** ADR SET ***
 3903                              53             MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 3904                              54             ADD     R1,R4                           ; 6+4=10
 3905                              55             MOV.W   @R4,R2                          ;
 3906                              56             AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 3907                              57             SHLL    R8                              ; ADR*2
 3908                              58             OR      R8,R2                           ;
 3909                              59             MOV.W   R2,@R4                          ; RAM ADR SET
 3910                              60     
 3911                              61     ;       *** OFFSET SET ***
 3912                              62             MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 3913                              63             ADD     R1,R4                           ; 10+4=14  MOV.B @(R0,R*),R0の命令 LOAD
 3914                              64             MOV.L   #_SEQ_MOVCMD_R0RD_TBL,R0        ;
 3915                              65             SHLL    R9                              ; OFFSET*2
 3916                              66             ADD     R9,R0                           ;
 3917                              67             MOV.W   @R0,R0                          ;
 3918                              68             MOV.W   R0,@R4                          ; 命令置換え
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE     2
PROGRAM NAME =

 3919                              69     
 3920                              70     ;       *** SWAP命令はBIT7以下ならNOPに置換える ***
 3921                              71             MOV.L   #_NOP_SWAP_TBL0,R0              ;
 3922                              72             ADD     R10,R0                          ;
 3923                              73             MOV.W   @R0,R0                          ; NOP or SWAP命令LOAD
 3924                              74     
 3925                              75             MOV.L   #D'2,R1                         ; ﾒﾓﾘのところ
 3926                              76             ADD     R1,R4                           ; 14+2=16  SWAP.Bの命令 LOAD
 3927                              77             MOV.W   R0,@R4                          ; NOP or SWAP命令 WRITE
 3928                              78     
 3929                              79             MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 3930                              80             M_BRA   _JMP_EX\@                       ;
 3931                              81     ;
 3932                              82     _JMP_C80\@:
 3933                              83             MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 3934                              84     
 3935                              85     _JMP_EX\@:
 3936                              86             .ENDM
 3937                              87     
 3938                              88     ;       ***************************************************
 3939                              89     ;       *****   AND,ANDN,OR,ORN CODE CHANGE MACRO       ***
 3940                              90     ;       ***************************************************
 3941                              91     
 3942                              92             .MACRO  _SEQ_A_AN_O_ON_CMD      TOP_ADR,END_ADR
 3943                              93     
 3944                              94     ;_AND_CHG:                                      ; 00000100B     4
 3945                              95     ;_ANDN_CHG:                                     ; 00000101B     5
 3946                              96     ;_OR_CHG:                                       ; 00000110B     6
 3947                              97     ;_ORN_CHG:                                      ; 00000111B     7
 3948                              98             MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 3949                              99             CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 3950                             100             BT      _JMP_C80\@                      ; IF ADR >= 127 THEN JUMP
 3951                             101     ;
 3952                             102             MOV.L   #(\END_ADR-\TOP_ADR),R0         ; 転送 BYTE長
 3953                             103             MOV.L   #\TOP_ADR,R3                    ; Read CODE MOVE        (12 BYTE)
 3954                             104     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 3955                             105             MOV     R13,R4                          ; SEQ ADR. KEEP
 3956                             106     
 3957                             107             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 3958                             108                                                     ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 3959                             109     ;       *** BIT SET ***
 3960                             110             MOV.L   #_SEQ_BBIT_CHG_TBL,R1           ; ﾒﾓﾘのところ +0
 3961                             111             SHLL    R10                             ; *2
 3962                             112             ADD     R10,R1                          ;
 3963                             113             MOV.W   @R1,R1                          ; BIT LOAD
 3964                             114             MOV.W   @R4,R2                          ; ﾒﾓﾘのところの命令LOAD
 3965                             115             MOV.L   #H'FFFFFF00,R0                  ;
 3966                             116             AND     R0,R2                           ; BITﾃﾞｰﾀのところをｸﾘｱ
 3967                             117             OR      R1,R2                           ;
 3968                             118             MOV.W   R2,@R4                          ; BIT SET
 3969                             119     
 3970                             120     ;       *** ADR SET ***
 3971                             121             MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 3972                             122             ADD     R1,R4                           ; 0+4=4
 3973                             123             MOV.W   @R4,R2                          ;
 3974                             124             AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE     3
PROGRAM NAME =

 3975                             125             SHLL    R8                              ; ADR*2
 3976                             126             OR      R8,R2                           ;
 3977                             127             MOV.W   R2,@R4                          ; RAM ADR SET
 3978                             128     
 3979                             129     ;       *** OFFSET SET ***
 3980                             130             MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 3981                             131             ADD     R1,R4                           ; 4+4=8  MOV.B @(R0,R*),R0の命令 LOAD
 3982                             132             MOV.L   #_SEQ_MOVCMD_R0RD_TBL,R0        ;
 3983                             133             SHLL    R9                              ; OFFSET*2
 3984                             134             ADD     R9,R0                           ;
 3985                             135             MOV.W   @R0,R0                          ;
 3986                             136             MOV.W   R0,@R4                          ; 命令置換え
 3987                             137     
 3988                             138     ;       *** SWAP命令はBIT7以下ならNOPに置換える ***
 3989                             139             MOV.L   #_NOP_SWAP_TBL0,R0              ;
 3990                             140             ADD     R10,R0                          ;
 3991                             141             MOV.W   @R0,R0                          ; NOP or SWAP命令LOAD
 3992                             142     
 3993                             143             MOV.L   #D'2,R1                         ; ﾒﾓﾘのところ
 3994                             144             ADD     R1,R4                           ; 8+2=10  SWAP.Bの命令 LOAD
 3995                             145             MOV.W   R0,@R4                          ; NOP or SWAP命令 WRITE
 3996                             146     
 3997                             147             MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 3998                             148             M_BRA   _JMP_EX\@                       ;
 3999                             149     ;
 4000                             150     _JMP_C80\@:
 4001                             151             MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 4002                             152     
 4003                             153     _JMP_EX\@:
 4004                             154             .ENDM
 4005                             155     
 4006                             156     
 4007                             157     
 4008                             158     ;       ***************************************************
 4009                             159     ;       *****   SET,RST CODE CHANGE MACRO               ***
 4010                             160     ;       ***************************************************
 4011                             161     
 4012                             162             .MACRO  _SEQ_SET_RST_CMD        TOP_ADR,END_ADR,BIT_AREA,ADR_AREA,COD_AREA1,COD_AR
                                          EA2,COD_AREA3
 4013                             163     
 4014                             164             MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 4015                             165             CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 4016                             166             BT      _JMP_C80\@                      ; IF ADR >= 127 THEN JUMP
 4017                             167     ;
 4018                             168             MOV.L   #(\END_ADR-\TOP_ADR),R0         ; 転送 BYTE長
 4019                             169             MOV.L   #\TOP_ADR,R3                    ; Read CODE MOVE        (12 BYTE)
 4020                             170     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 4021                             171             MOV     R13,R4                          ; SEQ ADR. KEEP
 4022                             172     
 4023                             173             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 4024                             174                                                     ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 4025                             175     
 4026                             176             MOV.L   #H'FFFFFF00,R0                  ;
 4027                             177     
 4028                             178     ;       *** BIT SET ***
 4029                             179             MOV.L   #\BIT_AREA,R1                   ; ﾒﾓﾘのところ
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE     4
PROGRAM NAME =

 4030                             180             ADD     R1,R4                           ; +2
 4031                             181             MOV.L   #_SEQ_BBIT_CHG_TBL,R1           ; ﾒﾓﾘのところ +0
 4032                             182             SHLL    R10                             ; *2
 4033                             183             ADD     R10,R1                          ;
 4034                             184             MOV.W   @R1,R1                          ; BIT LOAD
 4035                             185             MOV.W   @R4,R2                          ; ﾒﾓﾘのところの命令LOAD
 4036                             186             AND     R0,R2                           ; BITﾃﾞｰﾀのところをｸﾘｱ
 4037                             187             OR      R1,R2                           ;
 4038                             188             MOV.W   R2,@R4                          ; BIT SET
 4039                             189     
 4040                             190     ;       *** SHLL命令はBIT7以下ならNOPに置換える ***
 4041                             191             MOV.L   #_NOP_SHLL8_R3_TBL0,R2          ;
 4042                             192             ADD     R10,R2                          ;
 4043                             193             MOV.W   @R2,R2                          ; NOP or SHLL8命令LOAD
 4044                             194             MOV.L   #\COD_AREA1,R1                          ; ﾒﾓﾘのところ
 4045                             195             ADD     R1,R4                           ; 8+2=10  SWAP.Bの命令 LOAD
 4046                             196             MOV.W   R2,@R4                          ; NOP or SWAP命令 WRITE
 4047                             197     
 4048                             198     ;       *** ADR SET ***
 4049                             199             MOV.L   #\ADR_AREA,R1                   ; ﾒﾓﾘのところ
 4050                             200             ADD     R1,R4                           ; 2+6=8
 4051                             201             MOV.W   @R4,R2                          ;
 4052                             202             AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 4053                             203             SHLL    R8                              ; ADR*2
 4054                             204             OR      R8,R2                           ;
 4055                             205             MOV.W   R2,@R4                          ; RAM ADR SET
 4056                             206     
 4057                             207     ;       *** OFFSET SET ***
 4058                             208             MOV.L   #\COD_AREA2,R1                  ; ﾒﾓﾘのところ
 4059                             209             ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 4060                             210             MOV.L   #_SEQ_MOVCMD_R1RD_TBL,R0        ;
 4061                             211             SHLL    R9                              ; OFFSET*2
 4062                             212             ADD     R9,R0                           ;
 4063                             213             MOV.W   @R0,R0                          ;
 4064                             214             MOV.W   R0,@R4                          ; 命令置換え
 4065                             215     
 4066                             216     ;       *** OFFSET SET ***
 4067                             217             MOV.L   #\COD_AREA3,R1                  ; ﾒﾓﾘのところ
 4068                             218             ADD     R1,R4                           ; 12+4=16  MOV.B R1,@(R0,R*)の命令 LOAD
 4069                             219             MOV.L   #_SEQ_MOVCMD_R1WR_TBL,R0        ;
 4070                             220             ADD     R9,R0                           ;
 4071                             221             MOV.W   @R0,R0                          ;
 4072                             222             MOV.W   R0,@R4                          ; 命令置換え
 4073                             223     
 4074                             224             MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 4075                             225             M_BRA   _JMP_EX\@                       ;
 4076                             226     ;
 4077                             227     _JMP_C80\@:
 4078                             228             MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 4079                             229     
 4080                             230     _JMP_EX\@:
 4081                             231             .ENDM
 4082                             232     
 4083                             233     
 4084                             234     ;       ***************************************************
 4085                             235     ;       *****   PLS PLF DS CODE CHANGE MACRO            ***
 4086                             236     ;       ***************************************************
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE     5
PROGRAM NAME =

 4087                             237     
 4088                             238             .MACRO  _SEQ_PLS_PLF_CMD        TOP_ADR,END_ADR,BIT_AREA,ADR_AREA,COD_AREA1
 4089                             239     
 4090                             240             MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 4091                             241             CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 4092                             242             BT      _JMP_C80\@                      ; IF ADR >= 127 THEN JUMP
 4093                             243     ;
 4094                             244             MOV.L   #(\END_ADR-\TOP_ADR),R0         ; 転送 BYTE長
 4095                             245             MOV.L   #\TOP_ADR,R3                    ; Read CODE MOVE        (12 BYTE)
 4096                             246     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 4097                             247             MOV     R13,R4                          ; SEQ ADR. KEEP
 4098                             248     
 4099                             249             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 4100                             250                                                     ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 4101                             251     ;       *** BIT SET ***
 4102                             252             MOV.L   #\BIT_AREA,R1                   ; ﾒﾓﾘのところ
 4103                             253             ADD     R1,R4                           ;
 4104                             254             MOV.L   #_SEQ_BBIT_CHG_TBL,R1           ;
 4105                             255             SHLL    R10                             ; *2
 4106                             256             ADD     R10,R1                          ;
 4107                             257             MOV.W   @R1,R1                          ;
 4108                             258             MOV.W   @R4,R2                          ; ﾒﾓﾘのところの命令LOAD
 4109                             259             MOV.L   #H'FFFFFF00,R0                  ;
 4110                             260             AND     R0,R2                           ; BITﾃﾞｰﾀのところをｸﾘｱ
 4111                             261             OR      R1,R2                           ;
 4112                             262             MOV.W   R2,@R4                          ; BIT SET
 4113                             263     
 4114                             264     ;       *** SHLL命令はBIT7以下ならNOPに置換える ***
 4115                             265             MOV.L   #_NOP_SHLL8_R2_TBL0,R2          ;
 4116                             266             ADD     R10,R2                          ;
 4117                             267             MOV.W   @R2,R2                          ; NOP or SHLL8命令LOAD
 4118                             268     
 4119                             269             MOV.L   #\COD_AREA1,R1                          ; ﾒﾓﾘのところ
 4120                             270             ADD     R1,R4                           ; 8+2=10  SWAP.Bの命令 LOAD
 4121                             271             MOV.W   R2,@R4                          ; NOP or SWAP命令 WRITE
 4122                             272     
 4123                             273     ;       *** ADR SET ***
 4124                             274             MOV.L   #\ADR_AREA,R1                   ; ﾒﾓﾘのところ
 4125                             275             ADD     R1,R4                           ; 0+6=6
 4126                             276             MOV.W   @R4,R2                          ;
 4127                             277             AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 4128                             278             SHLL    R8                              ; ADR*2
 4129                             279             OR      R8,R2                           ;
 4130                             280             MOV.W   R2,@R4                          ; RAM ADR SET
 4131                             281     
 4132                             282             MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 4133                             283             M_BRA   _JMP_EX\@                       ;
 4134                             284     ;
 4135                             285     _JMP_C80\@:
 4136                             286             MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 4137                             287     
 4138                             288     _JMP_EX\@:
 4139                             289             .ENDM
 4140                             290     
 4141                             291     
 4142                             292     ;       *********************************************************************
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE     6
PROGRAM NAME =

 4143                             293     ;       *****   LDW,EQ,NE,GT,LE,ANDW,ORW,XORW,ADD,SUB命令変換 ﾏｸﾛ       *****
 4144                             294     ;       *********************************************************************
 4145                             295             .MACRO  _SEQ_LDW_CMP_OPE_CMD    TOP_ADR,END_ADR,ADR_AREA,COD_AREA1
 4146                             296     
 4147                             297             MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 4148                             298             CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 4149                             299             BT      _JMP_C80\@                      ; IF ADR >= 127 THEN JUMP
 4150                             300     ;
 4151                             301             MOV.L   #(\END_ADR-\TOP_ADR),R0         ; 転送 BYTE長
 4152                             302             MOV.L   #\TOP_ADR,R3                    ; Read CODE MOVE        (12 BYTE)
 4153                             303     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 4154                             304             MOV     R13,R4                          ; SEQ ADR. KEEP
 4155                             305     
 4156                             306             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 4157                             307                                                     ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 4158                             308     
 4159                             309             MOV.L   #H'FFFFFF00,R0                  ;
 4160                             310     ;       *** ADR SET ***
 4161                             311             MOV.L   #\ADR_AREA,R1                   ; ﾒﾓﾘのところ
 4162                             312             ADD     R1,R4                           ; +0
 4163                             313             MOV.W   @R4,R2                          ;
 4164                             314             AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 4165                             315             SHLL    R8                              ; ADR*2
 4166                             316             OR      R8,R2                           ;
 4167                             317             MOV.W   R2,@R4                          ; RAM ADR SET
 4168                             318     
 4169                             319     ;       *** OFFSET SET ***
 4170                             320             MOV.L   #\COD_AREA1,R1                  ; ﾒﾓﾘのところ
 4171                             321             ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 4172                             322             MOV.L   #_SEQ_MOVCMD_R3RD_TBL,R0        ;
 4173                             323             SHLL    R9                              ; OFFSET*2
 4174                             324             ADD     R9,R0                           ;
 4175                             325             MOV.W   @R0,R0                          ;
 4176                             326             MOV.W   R0,@R4                          ; 命令置換え
 4177                             327     
 4178                             328             MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 4179                             329             M_BRA   _JMP_EX\@                       ;
 4180                             330     ;
 4181                             331     _JMP_C80\@:
 4182                             332             MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 4183                             333     
 4184                             334     _JMP_EX\@:
 4185                             335             .ENDM
 4186                             336     
 4187                             337     
 4188                             338     ;       *****************************************************
 4189                             339     ;       *****   STW,CLR命令変換 ﾏｸﾛ                     *****
 4190                             340     ;       *****************************************************
 4191                             341             .MACRO  _SEQ_STW_CLR_CMD        TOP_ADR,END_ADR,ADR_AREA,COD_AREA1
 4192                             342     
 4193                             343             MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 4194                             344             CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 4195                             345             BT      _JMP_C80\@                      ; IF ADR >= 127 THEN JUMP
 4196                             346     ;
 4197                             347             MOV.L   #(\END_ADR-\TOP_ADR),R0         ; 転送 BYTE長
 4198                             348             MOV.L   #\TOP_ADR,R3                    ; Read CODE MOVE        (12 BYTE)
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE     7
PROGRAM NAME =

 4199                             349     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 4200                             350             MOV     R13,R4                          ; SEQ ADR. KEEP
 4201                             351     
 4202                             352             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 4203                             353                                                     ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 4204                             354             MOV.L   #H'FFFFFF00,R0                  ;
 4205                             355     ;       *** ADR SET ***
 4206                             356             MOV.L   #\ADR_AREA,R1                   ; ﾒﾓﾘのところ
 4207                             357             ADD     R1,R4                           ; +0
 4208                             358             MOV.W   @R4,R2                          ;
 4209                             359             AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 4210                             360             SHLL    R8                              ; ADR*2
 4211                             361             OR      R8,R2                           ;
 4212                             362             MOV.W   R2,@R4                          ; RAM ADR SET
 4213                             363     
 4214                             364     ;       *** OFFSET SET ***
 4215                             365             MOV.L   #\COD_AREA1,R1                  ; ﾒﾓﾘのところ
 4216                             366             ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 4217                             367             MOV.L   #_SEQ_ADDCMD_R0_TBL,R0  ;
 4218                             368             SHLL    R9                              ; OFFSET*2
 4219                             369             ADD     R9,R0                           ;
 4220                             370             MOV.W   @R0,R0                          ;
 4221                             371             MOV.W   R0,@R4                          ; 命令置換え
 4222                             372     
 4223                             373             MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 4224                             374             M_BRA   _JMP_EX\@                       ;
 4225                             375     ;
 4226                             376     _JMP_C80\@:
 4227                             377             MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 4228                             378     
 4229                             379     _JMP_EX\@:
 4230                             380             .ENDM
 4231                             381     
 4232                             382     
 4233                             383     
 4234                             384     
 4235                             385     ;       *****************************************************
 4236                             386     ;       *****   WTMR,WCTR命令変換 ﾏｸﾛ                   *****
 4237                             387     ;       *****************************************************
 4238                             388             .MACRO  _SEQ_WTMR_WCTR_CMD      TOP_ADR,END_ADR,ADR_AREA,COD_AREA1
 4239                             389     
 4240                             390             MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 4241                             391             CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 4242                             392             BT      _JMP_C80\@                      ; IF ADR >= 127 THEN JUMP
 4243                             393     ;
 4244                             394             MOV.L   #(\END_ADR-\TOP_ADR),R0         ; 転送 BYTE長
 4245                             395             MOV.L   #\TOP_ADR,R3                    ; Read CODE MOVE        (12 BYTE)
 4246                             396     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 4247                             397             MOV     R13,R4                          ; SEQ ADR. KEEP
 4248                             398     
 4249                             399             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 4250                             400                                                     ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 4251                             401     
 4252                             402             MOV.L   #H'FFFFFF00,R0                  ;
 4253                             403     ;       *** ADR SET ***
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE     8
PROGRAM NAME =

 4254                             404             MOV.L   #\ADR_AREA,R1                   ; ﾒﾓﾘのところ
 4255                             405             ADD     R1,R4                           ; +0
 4256                             406             MOV.W   @R4,R2                          ;
 4257                             407             AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 4258                             408     ;;;;;   SHLL    R8                              ; ADR*2
 4259                             409             OR      R8,R2                           ;
 4260                             410             MOV.W   R2,@R4                          ; RAM ADR SET
 4261                             411     
 4262                             412             MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 4263                             413             M_BRA   _JMP_EX\@                       ;
 4264                             414     ;
 4265                             415     _JMP_C80\@:
 4266                             416             MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 4267                             417     
 4268                             418     _JMP_EX\@:
 4269                             419             .ENDM
 4270                             420     
 4271                             421     
 4272                             422     ;       ***************************************************
 4273                             423     ;       ***                                             ***
 4274                             424     ;       ***                                             ***
 4275                             425     ;       ***     シーケンスコード変換ソフト              ***
 4276                             426     ;       ***                                             ***
 4277                             427     ;       ***                                             ***
 4278                             428     ;       ***************************************************
 4279 00000000                    429             .SECTION        P,CODE                  ;
 4280                             430             .import _SEQ_COM1_TOP                   ; SEQUENCE COMMAND AREA TOP ADR.
 4281                             431             .import _SEQ_COM1_END                   ; SEQUENCE COMMAND AREA END ADR.
 4282                             432     
 4283                             433             .EXPORT _SEQ_RUN_CHG_MAIN               ; ｼｰｹﾝｽFROM->SDRAM命令変換
 4284                             434     
 4285                             435     
 4286                             436     
 4287 00000000                    437     _SEQ_START_CODE:
 4288                             438             SUB_START
 4289 00000000 4F22                   M           STS.L   PR,@-R15                ;[必要]
 4290                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 4291 00000002 0009               439             NOP
 4292                             440     
 4293 00000004                    441     _SEQ_END_CODE:
 4294                             442             SUB_END
 4295                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 4296 00000004 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 4297                             443             M_RTS
 4298 00000006 000B                   M           RTS                             ;RTSの後ろの
 4299 00000008 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 4300                             444     
 4301                             445     
 4302                             446     
 4303                             447     ;
 4304                             448     ;       /********************************************************
 4305                             449     ;       /**********     SEQUENCE COMMAND CHANGE        **********
 4306                             450     ;       /********************************************************
 4307                             451             .IMPORT _PVP_COM_ADR            ;word
 4308                             452             .IMPORT _PVP_COM_ERR            ;ｺﾝﾊﾟｲﾙ異常有り／無し
 4309                             453     
 4310                             454     
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE     9
PROGRAM NAME =

 4311                             455     ;SEQ_COMPILE :FLAG IF data  ==0 THEN MAIN-SEQ 0~4000?[EQU=MAIN_SEQ_STP] STEP
 4312                             456     ;                  IF data  !=0 THEN INT -SEQ 0~100? [EQU=INT_SEQ_STP] STEP
 4313                             457     
 4314 0000000A                    458     _SEQ_RUN_CHG_MAIN:
 4315                             459             SUB_START
 4316 0000000A 4F22                   M           STS.L   PR,@-R15                ;[必要]
 4317                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 4318                             460     
 4319                             461     ;       *** ｼｰｹﾝｽの始まりはSUB_STARTを入れる ***
 4320 0000000C DD17               462             MOV.L   #_SEQ_RUN1_TOP,R13              ; RUN COMMAND STORE AREA TOP ADR.
 4321 0000000E DC18               463             MOV.L   #_SEQ_START_CODE,R12            ;
 4322 00000010 60C1               464             MOV.W   @R12,R0                         ; SUB_START CODE SET
 4323 00000012 2D01               465             MOV.W   R0,@R13                         ;
 4324 00000014 D017               466             MOV.L   #2,R0                           ;
 4325 00000016 3D0C               467             ADD     R0,R13                          ; ADDRESS INC
 4326 00000018 3C0C               468             ADD     R0,R12                          ; ADDRESS INC
 4327 0000001A 60C1               469             MOV.W   @R12,R0                         ;
 4328 0000001C 2D01               470             MOV.W   R0,@R13                         ; NOP CODE SET
 4329                             471     
 4330                             472             FAR_JSR #_SEQ_RUN_CHG1,R1               ;
 4331 0000001E D116                   M           MOV.L   #_SEQ_RUN_CHG1,R1               ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 4332 00000020 410B                   M           JSR     @R1                     ;
 4333 00000022 0009                   M           NOP                                     ;
 4334                             473     
 4335 00000024 D115               474             MOV.L   #_SEQ_CMP_ERR_ADR,R1            ;
 4336 00000026 2172               475             MOV.L   R7,@R1                          ; compile error adr set
 4337                             476     
 4338                             477     ;       ===========================
 4339 00000028 D115               478             MOV.L   #_PVP_COM_ADR,R1                ;word
 4340 0000002A 2171               479             MOV.W   R7,@R1                          ;
 4341 0000002C D115               480             MOV.L   #_PVP_COM_ERR,R1                ;ｺﾝﾊﾟｲﾙ異常有り／無し
 4342 0000002E 2101               481             MOV.W   R0,@R1                          ;
 4343                             482     ;       ============================
 4344                             483     
 4345 00000030 D115               484             MOV.L   #_SEQ_CMP_ERR,R1                ;
 4346 00000032 2101               485             MOV.W   R0,@R1                          ; CMP OK = R0:0000 , CMP NG = R0:FFFF
 4347                             486     
 4348 00000034 2008               487             TST     R0,R0                           ;
 4349 00000036 890C               488             BT      _SEQ_RUN_CHG_MAIN020            ;
 4350                             489     
 4351                             490     ;       *** 異常終了時はSUB_END,M_RTSをつける ***
 4352 00000038 DC14               491             MOV.L   #_SEQ_END_CODE,R12              ;
 4353 0000003A 60C1               492             MOV.W   @R12,R0                         ; SUB_END CODE SET
 4354 0000003C 2D01               493             MOV.W   R0,@R13                         ;
 4355 0000003E D00D               494             MOV.L   #2,R0                           ;
 4356 00000040 3D0C               495             ADD     R0,R13                          ; ADDRESS INC
 4357 00000042 3C0C               496             ADD     R0,R12                          ; ADDRESS INC
 4358 00000044 60C1               497             MOV.W   @R12,R0                         ;
 4359 00000046 2D01               498             MOV.W   R0,@R13                         ; M_RTS SET
 4360 00000048 D00A               499             MOV.L   #2,R0                           ;
 4361 0000004A 3D0C               500             ADD     R0,R13                          ; ADDRESS INC
 4362 0000004C 3C0C               501             ADD     R0,R12                          ; ADDRESS INC
 4363 0000004E 60C1               502             MOV.W   @R12,R0                         ;
 4364 00000050 2D01               503             MOV.W   R0,@R13                         ; M_RTS SET
 4365                             504     
 4366 00000052                    505     _SEQ_RUN_CHG_MAIN020:
 4367                             506     
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    10
PROGRAM NAME =

 4368 00000052 222A               507             XOR     R2,R2                           ;
 4369                             508     
 4370 00000054 D10E               509             MOV.L   #_SEQ_ARG1_DATA,R1              ; ARG clear
 4371 00000056 2121               510             MOV.W   R2,@R1                          ;
 4372 00000058 D10E               511             MOV.L   #_SEQ_MRG1_DATA,R1              ; MRG clear
 4373 0000005A 2121               512             MOV.W   R2,@R1                          ;
 4374 0000005C 9204               513             MOV.W   #H'01,R2                        ; NRG 1 set
 4375 0000005E D10E               514             MOV.L   #_SEQ_NRG1_DATA,R1              ;
 4376 00000060 2121               515             MOV.W   R2,@R1                          ;
 4377                             516     
 4378                             517             SUB_END
 4379                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 4380 00000062 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 4381                             518             M_RTS
 4382 00000064 000B                   M           RTS                             ;RTSの後ろの
 4383 00000066 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 4384                             519     
 4385                             520     ;       ***********************************
 4386                             521     ;       ***     ｺﾝﾊﾟｲﾙｻﾌﾞﾙｰﾁﾝ           ***
 4387                             522     ;       ***********************************
 4388                             523     ;
 4389                                     ***** BEGIN-POOL *****
 4390 00000068 0001                       DATA FOR SOURCE-LINE 513
 4391 0000006A 0000                       ALIGNMENT CODE
 4392 0000006C 00000000                   DATA FOR SOURCE-LINE 462
 4393 00000070 00000000                   DATA FOR SOURCE-LINE 463
 4394 00000074 00000002                   DATA FOR SOURCE-LINE 466,494,499
 4395 00000078 00000000                   DATA FOR SOURCE-LINE 472
 4396 0000007C 00000000                   DATA FOR SOURCE-LINE 474
 4397 00000080 00000000                   DATA FOR SOURCE-LINE 478
 4398 00000084 00000000                   DATA FOR SOURCE-LINE 480
 4399 00000088 00000000                   DATA FOR SOURCE-LINE 484
 4400 0000008C 00000000                   DATA FOR SOURCE-LINE 491
 4401 00000090 00000000                   DATA FOR SOURCE-LINE 509
 4402 00000094 00000000                   DATA FOR SOURCE-LINE 511
 4403 00000098 00000000                   DATA FOR SOURCE-LINE 514
 4404                                     ***** END-POOL *****
 4405 0000009C                    524     _SEQ_RUN_CHG1:
 4406                             525             SUB_START
 4407 0000009C 4F22                   M           STS.L   PR,@-R15                ;[必要]
 4408                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 4409                             526     
 4410 0000009E DC1A               527             MOV.L   #_SEQ_COM1_TOP,R12              ; SEQUENCE COMMAND AREA TOP ADR.
 4411 000000A0 DD1A               528             MOV.L   #_SEQ_RUN1,R13                  ; RUN COMMAND STORE AREA TOP ADR.
 4412 000000A2 DE1B               529             MOV.L   #_SEQ_RUN1_END,R14              ; RUN COMMAND STORE AREA TOP ADR.
 4413                             530     
 4414 000000A4 D01B               531             MOV.L   #_SEQ_MAX_BYTE,R0               ; 最大命令数28BYTE
 4415 000000A6 3E08               532             SUB     R0,R14                          ; 最大命令数28BYTE
 4416 000000A8 277A               533             XOR     R7,R7                           ; 異常ｽﾃｯﾌﾟ検出ｶｳﾝﾀ
 4417                             534     
 4418 000000AA D61B               535             MOV.L   #_SEQ_COM1_END,R6               ; SEQUENCE COMMAND AREA END ADR.
 4419                             536     
 4420 000000AC                    537     _SEQ_RUN_CHG1_100:
 4421                             538             _WDT_CLR R0,R1,R2                       ;
 4422                                 M           DI_PUSH_SR_SH3  R0, R1
 4423 000000AC 0002                   M           STC     SR,R0                   ;
 4424 000000AE 9127                   M           MOV.W   #H'000000F0,R1          ;
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    11
PROGRAM NAME =

 4425 000000B0 201B                   M           OR      R1,R0           ;INT15
 4426 000000B2 4F03                   M           STC.L   SR,@-R15                        ;PUSH SR
 4427 000000B4 400E                   M           LDC     R0,SR                   ;割込禁止（15）
 4428                                 M   
 4429 000000B6 D119                   M           MOV.L   #_PDTRB,R1
 4430 000000B8 6011                   M           MOV.W   @R1,R0  ;R0:
 4431 000000BA 9222                   M           MOV.W   #BIT2,R2                ;
 4432 000000BC 202A                   M           XOR     R2,R0   ;
 4433 000000BE 2101                   M           MOV.W   R0,@R1  ;output
 4434                                 M   
 4435 000000C0 202A                   M           XOR     R2,R0   ;
 4436 000000C2 2101                   M           MOV.W   R0,@R1  ;output
 4437                                 M   
 4438 000000C4 202A                   M           XOR     R2,R0   ;
 4439 000000C6 2101                   M           MOV.W   R0,@R1  ;output
 4440                                 M   
 4441                                 M           EI_POP_SR_SH3                   ;
 4442 000000C8 4F07                   M           LDC.L   @R15+,SR                        ;POP SR
 4443                             539                                                     ; R12:ﾕ-ｻﾞ命令ｺｰﾄﾞ
 4444                             540                                                     ; R12:ｲﾝｸﾘﾒﾝﾄ
 4445                             541                                                     ; R13:SEQ-展開命令-WORK
 4446                             542                                                     ; R13:ｲﾝｸﾘﾒﾝﾄ
 4447 000000CA 3DE3               543             CMP/GE  R14,R13                         ; ﾜｰｸﾒﾓﾘｵｰﾊﾞﾁｪｯｸ IF OVER THEN ERR R13 >= R
                                          14
 4448 000000CC 8937               544             BT      _SEQ_RUN_CHG1_ERR_END           ; R13>=R14 JUMP
 4449                             545     
 4450 000000CE 3C63               546             CMP/GE  R6,R12                          ; ｼｰｹﾝｽｺｰﾄﾞ領域ﾁｪｯｸ IF OVER THEN ERR R12 >
                                          = R6
 4451 000000D0 8935               547             BT      _SEQ_RUN_CHG1_ERR_END           ; R13>=R14 JUMP
 4452                             548     
 4453 000000D2 6AC5               549             MOV.W   @R12+,R10                       ; OP CODE , BIT CODE LOAD
 4454 000000D4 68C5               550             MOV.W   @R12+,R8                        ; DATA CODE LOAD
 4455                             551     
 4456 000000D6 69A8               552             SWAP.B  R10,R9                          ;
 4457 000000D8 699C               553             EXTU.B  R9,R9                           ; OP CODE
 4458 000000DA 9013               554             MOV.W   #H'007F,R0                      ;
 4459 000000DC 2909               555             AND     R0,R9                           ;
 4460 000000DE 6AAC               556             EXTU.B  R10,R10                         ; BIT CODE
 4461                             557     
 4462 000000E0                    558     _SEQ_RUN_CHG1_300:
 4463                             559     ;                                               ; SEQUENCE COMMAND
 4464 000000E0 4908               560             SHLL2   R9                              ; OP CODE * 4
 4465 000000E2 D10F               561             MOV.L   #_SEQ_CHG_TBL0,R1               ;
 4466 000000E4 319C               562             ADD     R9,R1                           ;
 4467                             563     
 4468 000000E6 6983               564             MOV     R8,R9                           ;
 4469 000000E8 6998               565             SWAP.B  R9,R9                           ;
 4470 000000EA 688C               566             EXTU.B  R8,R8                           ; R8=ADR
 4471 000000EC 699C               567             EXTU.B  R9,R9                           ; R9=OFFSET
 4472                             568     
 4473 000000EE 6112               569             MOV.L   @R1,R1                          ; ADDRESS LOAD
 4474 000000F0 410B               570             JSR     @R1                             ; ｺﾏﾝﾄﾞから展開する
 4475 000000F2 0009               571             NOP                                     ; ER0,ER1,ER2,ER3,ER4 BREAK OK!
 4476                             572                                                     ; IF ERR THEN R0=FFFFH ELSE "0"
 4477                             573                                                     ; IF END THEN R0=0000H ELSE "0"
 4478                             574     
 4479 000000F4 8800               575             CMP/EQ  #_SQ_NML_COD,R0                 ;
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    12
PROGRAM NAME =

 4480 000000F6 8915               576             BT      _SEQ_RUN_CHG1_800               ; NO ERR THEN JUMP
 4481                             577     
 4482 000000F8 8855               578             CMP/EQ  #_SQ_NML_END,R0                 ;
 4483 000000FA 891D               579             BT      _SEQ_RUN_CHG1_END               ; NORMAL END
 4484                             580             M_BRA   _SEQ_RUN_CHG1_ERR_END           ; ERR[ｵﾍﾟｺｰﾄﾞ異常または
 4485 000000FC A01F                   M           BRA     _SEQ_RUN_CHG1_ERR_END
 4486 000000FE 0009                   M           NOP
 4487                             581                                                     ;    [ENDなし異常=内部RAMに収まらない]
 4488                             582     
 4489                                     ***** BEGIN-POOL *****
 4490 00000100 00F0                       DATA FOR SOURCE-LINE 538
 4491 00000102 0004                       DATA FOR SOURCE-LINE 538
 4492 00000104 007F                       DATA FOR SOURCE-LINE 554
 4493 00000106 0000                       ALIGNMENT CODE
 4494 00000108 00000000                   DATA FOR SOURCE-LINE 527
 4495 0000010C 00000000                   DATA FOR SOURCE-LINE 528
 4496 00000110 00000000                   DATA FOR SOURCE-LINE 529
 4497 00000114 0000001C                   DATA FOR SOURCE-LINE 531
 4498 00000118 00000000                   DATA FOR SOURCE-LINE 535
 4499 0000011C 00000000                   DATA FOR SOURCE-LINE 538
 4500 00000120 00000000                   DATA FOR SOURCE-LINE 561
 4501                                     ***** END-POOL *****
 4502 00000124                    583     _SEQ_RUN_CHG1_800:                              ; CODE SET END
 4503                             584     
 4504                             585     ;--- 2013-06-17 DEBUG機能追加
 4505 00000124 9106               586             MOV.W   #D'3460,R1                      ;
 4506 00000126 3710               587             CMP/EQ  R1,R7                           ;
 4507 00000128 8B00               588             BF      SEQ_RUN_CHG1_DBE                ;
 4508 0000012A 0009               589             NOP
 4509 0000012C                    590     SEQ_RUN_CHG1_DBE
 4510                             591     
 4511                             592     
 4512                             593     
 4513                             594     
 4514                             595     
 4515                             596     
 4516                             597     
 4517                             598     
 4518 0000012C 9103               599             MOV.W   #1,R1                           ;
 4519 0000012E 371C               600             ADD     R1,R7                           ; STEP COUNTER + 1
 4520                             601             M_BRA   _SEQ_RUN_CHG1_100               ; LOOP
 4521 00000130 AFBC                   M           BRA     _SEQ_RUN_CHG1_100
 4522 00000132 0009                   M           NOP
 4523                             602     
 4524                                     ***** BEGIN-POOL *****
 4525 00000134 0D84                       DATA FOR SOURCE-LINE 586
 4526 00000136 0001                       DATA FOR SOURCE-LINE 599
 4527                                     ***** END-POOL *****
 4528 00000138                    603     _SEQ_RUN_CHG1_END:
 4529 00000138 200A               604             XOR     R0,R0                           ; 0 --> R0 = NOMAL
 4530                             605                                                     ; ANS.R7 ROMｽﾃｯﾌﾟ数
 4531                             606             M_BRA   _SEQ_RUN_CHG1_EXIT              ;
 4532 0000013A A001                   M           BRA     _SEQ_RUN_CHG1_EXIT
 4533 0000013C 0009                   M           NOP
 4534                             607     
 4535 0000013E                    608     _SEQ_RUN_CHG1_ERR_END:
 4536 0000013E 9002               609             MOV.W   #_SQ_ERR_END,R0                 ; FFFF-->R0 = ERR
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    13
PROGRAM NAME =

 4537                             610                                                     ; ANS.R7 ROMｽﾃｯﾌﾟ数
 4538 00000140                    611     _SEQ_RUN_CHG1_EXIT:
 4539                             612             SUB_END
 4540                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 4541 00000140 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 4542                             613             M_RTS
 4543 00000142 000B                   M           RTS                             ;RTSの後ろの
 4544 00000144 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 4545                             614     ;
 4546                             615     
 4547                             616     ;       /****************************************************
 4548                             617     ;       /*****    R11 ＝　ＯＰ　ＣＯＤＥ                *****
 4549                             618     ;       /*****    R10 ＝　ＢＩＴ　ＣＯＤＥ              *****
 4550                             619     ;       /*****    R9  ＝　ＯＦＦＳＥＴ　ＣＯＤＥ        *****
 4551                             620     ;       /*****    R8  ＝　ＡＤＲ　ＣＯＤＥ              *****
 4552                             621     ;       /****************************************************
 4553                             622     ;
 4554                             623     ;       *******************************************
 4555                             624     ;       ***     NOP CODE CHANGE ROUTINE         ***
 4556                             625     ;       *******************************************
 4557                                     ***** BEGIN-POOL *****
 4558 00000146 FF00                       DATA FOR SOURCE-LINE 609
 4559                                     ***** END-POOL *****
 4560 00000148                    626             .ALIGN  4
 4561 00000148                    627     _NOP_CHG:                               ; 00000000B
 4562                             628             SUB_START
 4563 00000148 4F22                   M           STS.L   PR,@-R15                ;[必要]
 4564                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 4565                             629     
 4566 0000014A D105               630             MOV.L   #_NOP_CODE,R1           ; NOP CODE MOVE
 4567 0000014C 6011               631             MOV.W   @R1,R0                  ; *** NOP *** LOAD
 4568 0000014E 2D01               632             MOV.W   R0,@R13                 ;
 4569 00000150 D104               633             MOV.L   #2,R1                   ;
 4570 00000152 3D1C               634             ADD     R1,R13                  ; SDRAM ADRESS +2
 4571 00000154 9002               635             MOV.W   #_SQ_NML_COD,R0         ;
 4572                             636     
 4573                             637             SUB_END
 4574                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 4575 00000156 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 4576                             638             M_RTS                           ; NORMAL END
 4577 00000158 000B                   M           RTS                             ;RTSの後ろの
 4578 0000015A 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 4579                             639     ;
 4580                             640     
 4581                             641     ;       /****************************************************
 4582                             642     ;       /*****    R11 ＝　ＯＰ　ＣＯＤＥ                *****
 4583                             643     ;       /*****    R10 ＝　ＢＩＴ　ＣＯＤＥ              *****
 4584                             644     ;       /*****    R9  ＝　ＯＦＦＳＥＴ　ＣＯＤＥ        *****
 4585                             645     ;       /*****    R8  ＝　ＡＤＲ　ＣＯＤＥ              *****
 4586                             646     ;       /****************************************************
 4587                             647     ;       *******************************************
 4588                             648     ;       ***     Read CODE CHANGE ROUTINE        ***
 4589                             649     ;       *******************************************
 4590                             650     ;
 4591                                     ***** BEGIN-POOL *****
 4592 0000015C 0000                       DATA FOR SOURCE-LINE 635
 4593 0000015E 0000                       ALIGNMENT CODE
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    14
PROGRAM NAME =

 4594 00000160 00000000                   DATA FOR SOURCE-LINE 630
 4595 00000164 00000002                   DATA FOR SOURCE-LINE 633
 4596                                     ***** END-POOL *****
 4597 00000168                    651             .ALIGN  4
 4598 00000168                    652     _LD_CHG:                                        ; 00000010B
 4599                             653             SUB_START
 4600 00000168 4F22                   M           STS.L   PR,@-R15                ;[必要]
 4601                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 4602                             654     
 4603                             655     ;;;;;   _SEQ_LD_LDN_CMD _LD_CODE,_LD_CODE_END
 4604                             656     ;;;;;
 4605                             657     ;;;;;   SUB_END
 4606                             658     ;;;;;   M_RTS
 4607                             659     
 4608                             660     ;;;;;   消すのもったいないので動いたら削除する
 4609                             661     ;;;;;_LD_CHG:                                   ; 00000010B
 4610 0000016A D116               662             MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 4611 0000016C 3813               663             CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 4612 0000016E 893F               664             BT      _LD_C80                         ; IF ADR >= 127 THEN JUMP
 4613                             665     ;
 4614 00000170 D015               666             MOV.L   #(_LD_CODE_END-_LD_CODE),R0     ; 転送 BYTE長
 4615 00000172 D316               667             MOV.L   #_LD_CODE,R3                    ; Read CODE MOVE        (12 BYTE)
 4616                             668     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 4617 00000174 64D3               669             MOV     R13,R4                          ; SEQ ADR. KEEP
 4618                             670     
 4619                             671             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 4620 00000176 D116                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 4621 00000178 410B                   M           JSR     @R1                     ;
 4622 0000017A 0009                   M           NOP                                     ;
 4623                             672                                                     ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 4624                             673     ;       *** BIT SET ***
 4625 0000017C D115               674             MOV.L   #D'6,R1                         ; ﾒﾓﾘのところ
 4626 0000017E 341C               675             ADD     R1,R4                           ;
 4627 00000180 D115               676             MOV.L   #_SEQ_BBIT_CHG_TBL,R1           ;
 4628 00000182 4A00               677             SHLL    R10                             ; *2
 4629 00000184 31AC               678             ADD     R10,R1                          ;
 4630 00000186 6111               679             MOV.W   @R1,R1                          ;
 4631 00000188 6241               680             MOV.W   @R4,R2                          ; ﾒﾓﾘのところの命令LOAD
 4632 0000018A D014               681             MOV.L   #H'FFFFFF00,R0                  ;
 4633 0000018C 2209               682             AND     R0,R2                           ; BITﾃﾞｰﾀのところをｸﾘｱ
 4634 0000018E 221B               683             OR      R1,R2                           ;
 4635 00000190 2421               684             MOV.W   R2,@R4                          ; BIT SET
 4636                             685     
 4637                             686     ;       *** ADR SET ***
 4638 00000192 D113               687             MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 4639 00000194 341C               688             ADD     R1,R4                           ; 6+4=10
 4640 00000196 6241               689             MOV.W   @R4,R2                          ;
 4641 00000198 2209               690             AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 4642 0000019A 4800               691             SHLL    R8                              ; ADR*2
 4643 0000019C 228B               692             OR      R8,R2                           ;
 4644 0000019E 2421               693             MOV.W   R2,@R4                          ; RAM ADR SET
 4645                             694     
 4646                             695     ;       *** OFFSET SET ***
 4647 000001A0 D10F               696             MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 4648 000001A2 341C               697             ADD     R1,R4                           ; 10+4=14  MOV.B @(R0,R*),R0の命令 LOAD
 4649 000001A4 D00F               698             MOV.L   #_SEQ_MOVCMD_R0RD_TBL,R0        ;
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    15
PROGRAM NAME =

 4650 000001A6 4900               699             SHLL    R9                              ; OFFSET*2
 4651 000001A8 309C               700             ADD     R9,R0                           ;
 4652 000001AA 6001               701             MOV.W   @R0,R0                          ;
 4653 000001AC 2401               702             MOV.W   R0,@R4                          ; 命令置換え
 4654                             703     
 4655                             704     ;       *** SWAP命令はBIT7以下ならNOPに置換える ***
 4656 000001AE D00E               705             MOV.L   #_NOP_SWAP_TBL0,R0              ;
 4657 000001B0 30AC               706             ADD     R10,R0                          ;
 4658 000001B2 6001               707             MOV.W   @R0,R0                          ; NOP or SWAP命令LOAD
 4659                             708     
 4660 000001B4 D10D               709             MOV.L   #D'2,R1                         ; ﾒﾓﾘのところ
 4661 000001B6 341C               710             ADD     R1,R4                           ; 14+2=16  SWAP.Bの命令 LOAD
 4662 000001B8 2401               711             MOV.W   R0,@R4                          ; NOP or SWAP命令 WRITE
 4663                             712     
 4664 000001BA 9001               713             MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 4665                             714             M_BRA   _LD_CHG_EX                      ;
 4666 000001BC A019                   M           BRA     _LD_CHG_EX
 4667 000001BE 0009                   M           NOP
 4668                             715     ;
 4669                                     ***** BEGIN-POOL *****
 4670 000001C0 0000                       DATA FOR SOURCE-LINE 713
 4671 000001C2 0000                       ALIGNMENT CODE
 4672 000001C4 0000007F                   DATA FOR SOURCE-LINE 662
 4673 000001C8 00000000                   DATA FOR SOURCE-LINE 666
 4674 000001CC 00000000                   DATA FOR SOURCE-LINE 667
 4675 000001D0 00000000                   DATA FOR SOURCE-LINE 671
 4676 000001D4 00000006                   DATA FOR SOURCE-LINE 674
 4677 000001D8 00000000                   DATA FOR SOURCE-LINE 676
 4678 000001DC FFFFFF00                   DATA FOR SOURCE-LINE 681
 4679 000001E0 00000004                   DATA FOR SOURCE-LINE 687,696
 4680 000001E4 00000000                   DATA FOR SOURCE-LINE 698
 4681 000001E8 00000000                   DATA FOR SOURCE-LINE 705
 4682 000001EC 00000002                   DATA FOR SOURCE-LINE 709
 4683                                     ***** END-POOL *****
 4684 000001F0                    716     _LD_C80:
 4685 000001F0 9002               717             MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 4686                             718     
 4687 000001F2                    719     _LD_CHG_EX:
 4688                             720             SUB_END
 4689                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 4690 000001F2 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 4691                             721             M_RTS
 4692 000001F4 000B                   M           RTS                             ;RTSの後ろの
 4693 000001F6 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 4694                             722     
 4695                             723     ;       *******************************************
 4696                             724     ;       ***     Read Not CODE CHANGE ROUTINE    ***
 4697                             725     ;       *******************************************
 4698                                     ***** BEGIN-POOL *****
 4699 000001F8 FF00                       DATA FOR SOURCE-LINE 717
 4700                                     ***** END-POOL *****
 4701 000001FA                    726     _LDN_CHG:                                       ; 00000011B
 4702                             727             SUB_START
 4703 000001FA 4F22                   M           STS.L   PR,@-R15                ;[必要]
 4704                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 4705                             728     
 4706                             729             _SEQ_LD_LDN_CMD _LDN_CODE,_LDN_CODE_END
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    16
PROGRAM NAME =

 4707                                 M   
 4708 000001FC D115                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 4709 000001FE 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 4710 00000200 893E                   M           BT      _JMP_C8000000                           ; IF ADR >= 127 THEN JUMP
 4711                                 M   ;
 4712 00000202 D015                   M           MOV.L   #(_LDN_CODE_END-_LDN_CODE),R0           ; 転送 BYTE長
 4713 00000204 D315                   M           MOV.L   #_LDN_CODE,R3                   ; Read CODE MOVE        (12 BYTE)
 4714                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 4715 00000206 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 4716                                 M   
 4717                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 4718 00000208 D115                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 4719 0000020A 410B                   M           JSR     @R1                     ;
 4720 0000020C 0009                   M           NOP                                     ;
 4721                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 4722                                 M   ;       *** BIT SET ***
 4723 0000020E D115                   M           MOV.L   #D'6,R1                         ; ﾒﾓﾘのところ
 4724 00000210 341C                   M           ADD     R1,R4                           ;
 4725 00000212 D115                   M           MOV.L   #_SEQ_BBIT_CHG_TBL,R1           ;
 4726 00000214 4A00                   M           SHLL    R10                             ; *2
 4727 00000216 31AC                   M           ADD     R10,R1                          ;
 4728 00000218 6111                   M           MOV.W   @R1,R1                          ;
 4729 0000021A 6241                   M           MOV.W   @R4,R2                          ; ﾒﾓﾘのところの命令LOAD
 4730 0000021C D013                   M           MOV.L   #H'FFFFFF00,R0                  ;
 4731 0000021E 2209                   M           AND     R0,R2                           ; BITﾃﾞｰﾀのところをｸﾘｱ
 4732 00000220 221B                   M           OR      R1,R2                           ;
 4733 00000222 2421                   M           MOV.W   R2,@R4                          ; BIT SET
 4734                                 M   
 4735                                 M   ;       *** ADR SET ***
 4736 00000224 D112                   M           MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 4737 00000226 341C                   M           ADD     R1,R4                           ; 6+4=10
 4738 00000228 6241                   M           MOV.W   @R4,R2                          ;
 4739 0000022A 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 4740 0000022C 4800                   M           SHLL    R8                              ; ADR*2
 4741 0000022E 228B                   M           OR      R8,R2                           ;
 4742 00000230 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 4743                                 M   
 4744                                 M   ;       *** OFFSET SET ***
 4745 00000232 D10F                   M           MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 4746 00000234 341C                   M           ADD     R1,R4                           ; 10+4=14  MOV.B @(R0,R*),R0の命令 LOAD
 4747 00000236 D00F                   M           MOV.L   #_SEQ_MOVCMD_R0RD_TBL,R0        ;
 4748 00000238 4900                   M           SHLL    R9                              ; OFFSET*2
 4749 0000023A 309C                   M           ADD     R9,R0                           ;
 4750 0000023C 6001                   M           MOV.W   @R0,R0                          ;
 4751 0000023E 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 4752                                 M   
 4753                                 M   ;       *** SWAP命令はBIT7以下ならNOPに置換える ***
 4754 00000240 D00D                   M           MOV.L   #_NOP_SWAP_TBL0,R0              ;
 4755 00000242 30AC                   M           ADD     R10,R0                          ;
 4756 00000244 6001                   M           MOV.W   @R0,R0                          ; NOP or SWAP命令LOAD
 4757                                 M   
 4758 00000246 D10D                   M           MOV.L   #D'2,R1                         ; ﾒﾓﾘのところ
 4759 00000248 341C                   M           ADD     R1,R4                           ; 14+2=16  SWAP.Bの命令 LOAD
 4760 0000024A 2401                   M           MOV.W   R0,@R4                          ; NOP or SWAP命令 WRITE
 4761                                 M   
 4762 0000024C 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    17
PROGRAM NAME =

 4763                                 M           M_BRA   _JMP_EX00000                    ;
 4764 0000024E A018                   M           BRA     _JMP_EX00000
 4765 00000250 0009                   M           NOP
 4766                                 M   ;
 4767                                 M   ***** BEGIN-POOL *****
 4768 00000252 0000                   M   DATA FOR SOURCE-LINE 729
 4769 00000254 0000007F               M   DATA FOR SOURCE-LINE 729
 4770 00000258 00000000               M   DATA FOR SOURCE-LINE 729
 4771 0000025C 00000000               M   DATA FOR SOURCE-LINE 729
 4772 00000260 00000000               M   DATA FOR SOURCE-LINE 729
 4773 00000264 00000006               M   DATA FOR SOURCE-LINE 729
 4774 00000268 00000000               M   DATA FOR SOURCE-LINE 729
 4775 0000026C FFFFFF00               M   DATA FOR SOURCE-LINE 729
 4776 00000270 00000004               M   DATA FOR SOURCE-LINE 729,729
 4777 00000274 00000000               M   DATA FOR SOURCE-LINE 729
 4778 00000278 00000000               M   DATA FOR SOURCE-LINE 729
 4779 0000027C 00000002               M   DATA FOR SOURCE-LINE 729
 4780                                 M   ***** END-POOL *****
 4781 00000280                        M   _JMP_C8000000:
 4782 00000280 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 4783                                 M   
 4784 00000282                        M   _JMP_EX00000:
 4785                             730     
 4786                             731             SUB_END
 4787                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 4788 00000282 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 4789                             732             M_RTS
 4790 00000284 000B                   M           RTS                             ;RTSの後ろの
 4791 00000286 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 4792                             733     
 4793                             734     ;       *******************************************
 4794                             735     ;       *****   And CODE CHANGE ROUTINE         ***
 4795                             736     ;       *******************************************
 4796                                     ***** BEGIN-POOL *****
 4797 00000288 FF00                       DATA FOR SOURCE-LINE 729
 4798                                     ***** END-POOL *****
 4799 0000028A                    737     _AND_CHG:                                       ; 00000100B     4
 4800                             738             SUB_START
 4801 0000028A 4F22                   M           STS.L   PR,@-R15                ;[必要]
 4802                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 4803                             739     
 4804                             740             _SEQ_A_AN_O_ON_CMD      _AND_CODE,_AND_CODE_END
 4805                                 M   
 4806                                 M   ;_AND_CHG:                                      ; 00000100B     4
 4807                                 M   ;_ANDN_CHG:                                     ; 00000101B     5
 4808                                 M   ;_OR_CHG:                                       ; 00000110B     6
 4809                                 M   ;_ORN_CHG:                                      ; 00000111B     7
 4810 0000028C D114                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 4811 0000028E 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 4812 00000290 893A                   M           BT      _JMP_C8000001                   ; IF ADR >= 127 THEN JUMP
 4813                                 M   ;
 4814 00000292 D014                   M           MOV.L   #(_AND_CODE_END-_AND_CODE),R0           ; 転送 BYTE長
 4815 00000294 D314                   M           MOV.L   #_AND_CODE,R3                   ; Read CODE MOVE        (12 BYTE)
 4816                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 4817 00000296 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 4818                                 M   
 4819                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    18
PROGRAM NAME =

 4820 00000298 D114                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 4821 0000029A 410B                   M           JSR     @R1                     ;
 4822 0000029C 0009                   M           NOP                                     ;
 4823                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 4824                                 M   ;       *** BIT SET ***
 4825 0000029E D114                   M           MOV.L   #_SEQ_BBIT_CHG_TBL,R1           ; ﾒﾓﾘのところ +0
 4826 000002A0 4A00                   M           SHLL    R10                             ; *2
 4827 000002A2 31AC                   M           ADD     R10,R1                          ;
 4828 000002A4 6111                   M           MOV.W   @R1,R1                          ; BIT LOAD
 4829 000002A6 6241                   M           MOV.W   @R4,R2                          ; ﾒﾓﾘのところの命令LOAD
 4830 000002A8 D012                   M           MOV.L   #H'FFFFFF00,R0                  ;
 4831 000002AA 2209                   M           AND     R0,R2                           ; BITﾃﾞｰﾀのところをｸﾘｱ
 4832 000002AC 221B                   M           OR      R1,R2                           ;
 4833 000002AE 2421                   M           MOV.W   R2,@R4                          ; BIT SET
 4834                                 M   
 4835                                 M   ;       *** ADR SET ***
 4836 000002B0 D111                   M           MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 4837 000002B2 341C                   M           ADD     R1,R4                           ; 0+4=4
 4838 000002B4 6241                   M           MOV.W   @R4,R2                          ;
 4839 000002B6 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 4840 000002B8 4800                   M           SHLL    R8                              ; ADR*2
 4841 000002BA 228B                   M           OR      R8,R2                           ;
 4842 000002BC 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 4843                                 M   
 4844                                 M   ;       *** OFFSET SET ***
 4845 000002BE D10E                   M           MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 4846 000002C0 341C                   M           ADD     R1,R4                           ; 4+4=8  MOV.B @(R0,R*),R0の命令 LOAD
 4847 000002C2 D00E                   M           MOV.L   #_SEQ_MOVCMD_R0RD_TBL,R0        ;
 4848 000002C4 4900                   M           SHLL    R9                              ; OFFSET*2
 4849 000002C6 309C                   M           ADD     R9,R0                           ;
 4850 000002C8 6001                   M           MOV.W   @R0,R0                          ;
 4851 000002CA 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 4852                                 M   
 4853                                 M   ;       *** SWAP命令はBIT7以下ならNOPに置換える ***
 4854 000002CC D00C                   M           MOV.L   #_NOP_SWAP_TBL0,R0              ;
 4855 000002CE 30AC                   M           ADD     R10,R0                          ;
 4856 000002D0 6001                   M           MOV.W   @R0,R0                          ; NOP or SWAP命令LOAD
 4857                                 M   
 4858 000002D2 D10C                   M           MOV.L   #D'2,R1                         ; ﾒﾓﾘのところ
 4859 000002D4 341C                   M           ADD     R1,R4                           ; 8+2=10  SWAP.Bの命令 LOAD
 4860 000002D6 2401                   M           MOV.W   R0,@R4                          ; NOP or SWAP命令 WRITE
 4861                                 M   
 4862 000002D8 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 4863                                 M           M_BRA   _JMP_EX00001                    ;
 4864 000002DA A016                   M           BRA     _JMP_EX00001
 4865 000002DC 0009                   M           NOP
 4866                                 M   ;
 4867                                 M   ***** BEGIN-POOL *****
 4868 000002DE 0000                   M   DATA FOR SOURCE-LINE 740
 4869 000002E0 0000007F               M   DATA FOR SOURCE-LINE 740
 4870 000002E4 00000000               M   DATA FOR SOURCE-LINE 740
 4871 000002E8 00000000               M   DATA FOR SOURCE-LINE 740
 4872 000002EC 00000000               M   DATA FOR SOURCE-LINE 740
 4873 000002F0 00000000               M   DATA FOR SOURCE-LINE 740
 4874 000002F4 FFFFFF00               M   DATA FOR SOURCE-LINE 740
 4875 000002F8 00000004               M   DATA FOR SOURCE-LINE 740,740
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    19
PROGRAM NAME =

 4876 000002FC 00000000               M   DATA FOR SOURCE-LINE 740
 4877 00000300 00000000               M   DATA FOR SOURCE-LINE 740
 4878 00000304 00000002               M   DATA FOR SOURCE-LINE 740
 4879                                 M   ***** END-POOL *****
 4880 00000308                        M   _JMP_C8000001:
 4881 00000308 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 4882                                 M   
 4883 0000030A                        M   _JMP_EX00001:
 4884                             741     
 4885                             742             SUB_END
 4886                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 4887 0000030A 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 4888                             743             M_RTS
 4889 0000030C 000B                   M           RTS                             ;RTSの後ろの
 4890 0000030E 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 4891                             744     
 4892                             745     
 4893                             746     ;       *******************************************
 4894                             747     ;       *****   And Not CODE CHANGE ROUTINE     ***
 4895                             748     ;       *******************************************
 4896                                     ***** BEGIN-POOL *****
 4897 00000310 FF00                       DATA FOR SOURCE-LINE 740
 4898                                     ***** END-POOL *****
 4899 00000312                    749     _ANDN_CHG:                                      ; 00000101B     5
 4900                             750             SUB_START
 4901 00000312 4F22                   M           STS.L   PR,@-R15                ;[必要]
 4902                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 4903                             751     
 4904                             752             _SEQ_A_AN_O_ON_CMD      _ANDN_CODE,_ANDN_CODE_END
 4905                                 M   
 4906                                 M   ;_AND_CHG:                                      ; 00000100B     4
 4907                                 M   ;_ANDN_CHG:                                     ; 00000101B     5
 4908                                 M   ;_OR_CHG:                                       ; 00000110B     6
 4909                                 M   ;_ORN_CHG:                                      ; 00000111B     7
 4910 00000314 D114                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 4911 00000316 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 4912 00000318 893A                   M           BT      _JMP_C8000002                   ; IF ADR >= 127 THEN JUMP
 4913                                 M   ;
 4914 0000031A D014                   M           MOV.L   #(_ANDN_CODE_END-_ANDN_CODE),R0         ; 転送 BYTE長
 4915 0000031C D314                   M           MOV.L   #_ANDN_CODE,R3                  ; Read CODE MOVE        (12 BYTE)
 4916                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 4917 0000031E 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 4918                                 M   
 4919                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 4920 00000320 D114                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 4921 00000322 410B                   M           JSR     @R1                     ;
 4922 00000324 0009                   M           NOP                                     ;
 4923                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 4924                                 M   ;       *** BIT SET ***
 4925 00000326 D114                   M           MOV.L   #_SEQ_BBIT_CHG_TBL,R1           ; ﾒﾓﾘのところ +0
 4926 00000328 4A00                   M           SHLL    R10                             ; *2
 4927 0000032A 31AC                   M           ADD     R10,R1                          ;
 4928 0000032C 6111                   M           MOV.W   @R1,R1                          ; BIT LOAD
 4929 0000032E 6241                   M           MOV.W   @R4,R2                          ; ﾒﾓﾘのところの命令LOAD
 4930 00000330 D012                   M           MOV.L   #H'FFFFFF00,R0                  ;
 4931 00000332 2209                   M           AND     R0,R2                           ; BITﾃﾞｰﾀのところをｸﾘｱ
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    20
PROGRAM NAME =

 4932 00000334 221B                   M           OR      R1,R2                           ;
 4933 00000336 2421                   M           MOV.W   R2,@R4                          ; BIT SET
 4934                                 M   
 4935                                 M   ;       *** ADR SET ***
 4936 00000338 D111                   M           MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 4937 0000033A 341C                   M           ADD     R1,R4                           ; 0+4=4
 4938 0000033C 6241                   M           MOV.W   @R4,R2                          ;
 4939 0000033E 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 4940 00000340 4800                   M           SHLL    R8                              ; ADR*2
 4941 00000342 228B                   M           OR      R8,R2                           ;
 4942 00000344 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 4943                                 M   
 4944                                 M   ;       *** OFFSET SET ***
 4945 00000346 D10E                   M           MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 4946 00000348 341C                   M           ADD     R1,R4                           ; 4+4=8  MOV.B @(R0,R*),R0の命令 LOAD
 4947 0000034A D00E                   M           MOV.L   #_SEQ_MOVCMD_R0RD_TBL,R0        ;
 4948 0000034C 4900                   M           SHLL    R9                              ; OFFSET*2
 4949 0000034E 309C                   M           ADD     R9,R0                           ;
 4950 00000350 6001                   M           MOV.W   @R0,R0                          ;
 4951 00000352 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 4952                                 M   
 4953                                 M   ;       *** SWAP命令はBIT7以下ならNOPに置換える ***
 4954 00000354 D00C                   M           MOV.L   #_NOP_SWAP_TBL0,R0              ;
 4955 00000356 30AC                   M           ADD     R10,R0                          ;
 4956 00000358 6001                   M           MOV.W   @R0,R0                          ; NOP or SWAP命令LOAD
 4957                                 M   
 4958 0000035A D10C                   M           MOV.L   #D'2,R1                         ; ﾒﾓﾘのところ
 4959 0000035C 341C                   M           ADD     R1,R4                           ; 8+2=10  SWAP.Bの命令 LOAD
 4960 0000035E 2401                   M           MOV.W   R0,@R4                          ; NOP or SWAP命令 WRITE
 4961                                 M   
 4962 00000360 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 4963                                 M           M_BRA   _JMP_EX00002                    ;
 4964 00000362 A016                   M           BRA     _JMP_EX00002
 4965 00000364 0009                   M           NOP
 4966                                 M   ;
 4967                                 M   ***** BEGIN-POOL *****
 4968 00000366 0000                   M   DATA FOR SOURCE-LINE 752
 4969 00000368 0000007F               M   DATA FOR SOURCE-LINE 752
 4970 0000036C 00000000               M   DATA FOR SOURCE-LINE 752
 4971 00000370 00000000               M   DATA FOR SOURCE-LINE 752
 4972 00000374 00000000               M   DATA FOR SOURCE-LINE 752
 4973 00000378 00000000               M   DATA FOR SOURCE-LINE 752
 4974 0000037C FFFFFF00               M   DATA FOR SOURCE-LINE 752
 4975 00000380 00000004               M   DATA FOR SOURCE-LINE 752,752
 4976 00000384 00000000               M   DATA FOR SOURCE-LINE 752
 4977 00000388 00000000               M   DATA FOR SOURCE-LINE 752
 4978 0000038C 00000002               M   DATA FOR SOURCE-LINE 752
 4979                                 M   ***** END-POOL *****
 4980 00000390                        M   _JMP_C8000002:
 4981 00000390 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 4982                                 M   
 4983 00000392                        M   _JMP_EX00002:
 4984                             753     
 4985                             754             SUB_END
 4986                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 4987 00000392 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 4988                             755             M_RTS
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    21
PROGRAM NAME =

 4989 00000394 000B                   M           RTS                             ;RTSの後ろの
 4990 00000396 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 4991                             756     
 4992                             757     ;       *******************************************
 4993                             758     ;       *****   Or CODE CHANGE ROUTINE          ***
 4994                             759     ;       *******************************************
 4995                                     ***** BEGIN-POOL *****
 4996 00000398 FF00                       DATA FOR SOURCE-LINE 752
 4997                                     ***** END-POOL *****
 4998 0000039A                    760     _OR_CHG:                                        ; 00000110B     6
 4999                             761             SUB_START
 5000 0000039A 4F22                   M           STS.L   PR,@-R15                ;[必要]
 5001                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 5002                             762     
 5003                             763             _SEQ_A_AN_O_ON_CMD      _OR_CODE,_OR_CODE_END
 5004                                 M   
 5005                                 M   ;_AND_CHG:                                      ; 00000100B     4
 5006                                 M   ;_ANDN_CHG:                                     ; 00000101B     5
 5007                                 M   ;_OR_CHG:                                       ; 00000110B     6
 5008                                 M   ;_ORN_CHG:                                      ; 00000111B     7
 5009 0000039C D114                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 5010 0000039E 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 5011 000003A0 893A                   M           BT      _JMP_C8000003                   ; IF ADR >= 127 THEN JUMP
 5012                                 M   ;
 5013 000003A2 D014                   M           MOV.L   #(_OR_CODE_END-_OR_CODE),R0             ; 転送 BYTE長
 5014 000003A4 D314                   M           MOV.L   #_OR_CODE,R3                    ; Read CODE MOVE        (12 BYTE)
 5015                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 5016 000003A6 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 5017                                 M   
 5018                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 5019 000003A8 D114                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 5020 000003AA 410B                   M           JSR     @R1                     ;
 5021 000003AC 0009                   M           NOP                                     ;
 5022                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 5023                                 M   ;       *** BIT SET ***
 5024 000003AE D114                   M           MOV.L   #_SEQ_BBIT_CHG_TBL,R1           ; ﾒﾓﾘのところ +0
 5025 000003B0 4A00                   M           SHLL    R10                             ; *2
 5026 000003B2 31AC                   M           ADD     R10,R1                          ;
 5027 000003B4 6111                   M           MOV.W   @R1,R1                          ; BIT LOAD
 5028 000003B6 6241                   M           MOV.W   @R4,R2                          ; ﾒﾓﾘのところの命令LOAD
 5029 000003B8 D012                   M           MOV.L   #H'FFFFFF00,R0                  ;
 5030 000003BA 2209                   M           AND     R0,R2                           ; BITﾃﾞｰﾀのところをｸﾘｱ
 5031 000003BC 221B                   M           OR      R1,R2                           ;
 5032 000003BE 2421                   M           MOV.W   R2,@R4                          ; BIT SET
 5033                                 M   
 5034                                 M   ;       *** ADR SET ***
 5035 000003C0 D111                   M           MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 5036 000003C2 341C                   M           ADD     R1,R4                           ; 0+4=4
 5037 000003C4 6241                   M           MOV.W   @R4,R2                          ;
 5038 000003C6 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 5039 000003C8 4800                   M           SHLL    R8                              ; ADR*2
 5040 000003CA 228B                   M           OR      R8,R2                           ;
 5041 000003CC 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 5042                                 M   
 5043                                 M   ;       *** OFFSET SET ***
 5044 000003CE D10E                   M           MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    22
PROGRAM NAME =

 5045 000003D0 341C                   M           ADD     R1,R4                           ; 4+4=8  MOV.B @(R0,R*),R0の命令 LOAD
 5046 000003D2 D00E                   M           MOV.L   #_SEQ_MOVCMD_R0RD_TBL,R0        ;
 5047 000003D4 4900                   M           SHLL    R9                              ; OFFSET*2
 5048 000003D6 309C                   M           ADD     R9,R0                           ;
 5049 000003D8 6001                   M           MOV.W   @R0,R0                          ;
 5050 000003DA 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 5051                                 M   
 5052                                 M   ;       *** SWAP命令はBIT7以下ならNOPに置換える ***
 5053 000003DC D00C                   M           MOV.L   #_NOP_SWAP_TBL0,R0              ;
 5054 000003DE 30AC                   M           ADD     R10,R0                          ;
 5055 000003E0 6001                   M           MOV.W   @R0,R0                          ; NOP or SWAP命令LOAD
 5056                                 M   
 5057 000003E2 D10C                   M           MOV.L   #D'2,R1                         ; ﾒﾓﾘのところ
 5058 000003E4 341C                   M           ADD     R1,R4                           ; 8+2=10  SWAP.Bの命令 LOAD
 5059 000003E6 2401                   M           MOV.W   R0,@R4                          ; NOP or SWAP命令 WRITE
 5060                                 M   
 5061 000003E8 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 5062                                 M           M_BRA   _JMP_EX00003                    ;
 5063 000003EA A016                   M           BRA     _JMP_EX00003
 5064 000003EC 0009                   M           NOP
 5065                                 M   ;
 5066                                 M   ***** BEGIN-POOL *****
 5067 000003EE 0000                   M   DATA FOR SOURCE-LINE 763
 5068 000003F0 0000007F               M   DATA FOR SOURCE-LINE 763
 5069 000003F4 00000000               M   DATA FOR SOURCE-LINE 763
 5070 000003F8 00000000               M   DATA FOR SOURCE-LINE 763
 5071 000003FC 00000000               M   DATA FOR SOURCE-LINE 763
 5072 00000400 00000000               M   DATA FOR SOURCE-LINE 763
 5073 00000404 FFFFFF00               M   DATA FOR SOURCE-LINE 763
 5074 00000408 00000004               M   DATA FOR SOURCE-LINE 763,763
 5075 0000040C 00000000               M   DATA FOR SOURCE-LINE 763
 5076 00000410 00000000               M   DATA FOR SOURCE-LINE 763
 5077 00000414 00000002               M   DATA FOR SOURCE-LINE 763
 5078                                 M   ***** END-POOL *****
 5079 00000418                        M   _JMP_C8000003:
 5080 00000418 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 5081                                 M   
 5082 0000041A                        M   _JMP_EX00003:
 5083                             764     
 5084                             765             SUB_END
 5085                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 5086 0000041A 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 5087                             766             M_RTS
 5088 0000041C 000B                   M           RTS                             ;RTSの後ろの
 5089 0000041E 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 5090                             767     
 5091                             768     ;       *******************************************
 5092                             769     ;       *****   Or Not CODE CHANGE ROUTINE      ***
 5093                             770     ;       *******************************************
 5094                                     ***** BEGIN-POOL *****
 5095 00000420 FF00                       DATA FOR SOURCE-LINE 763
 5096                                     ***** END-POOL *****
 5097 00000422                    771     _ORN_CHG:                                       ; 00000111B     7
 5098                             772             SUB_START
 5099 00000422 4F22                   M           STS.L   PR,@-R15                ;[必要]
 5100                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 5101                             773     
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    23
PROGRAM NAME =

 5102                             774             _SEQ_A_AN_O_ON_CMD      _ORN_CODE,_ORN_CODE_END
 5103                                 M   
 5104                                 M   ;_AND_CHG:                                      ; 00000100B     4
 5105                                 M   ;_ANDN_CHG:                                     ; 00000101B     5
 5106                                 M   ;_OR_CHG:                                       ; 00000110B     6
 5107                                 M   ;_ORN_CHG:                                      ; 00000111B     7
 5108 00000424 D114                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 5109 00000426 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 5110 00000428 893A                   M           BT      _JMP_C8000004                   ; IF ADR >= 127 THEN JUMP
 5111                                 M   ;
 5112 0000042A D014                   M           MOV.L   #(_ORN_CODE_END-_ORN_CODE),R0           ; 転送 BYTE長
 5113 0000042C D314                   M           MOV.L   #_ORN_CODE,R3                   ; Read CODE MOVE        (12 BYTE)
 5114                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 5115 0000042E 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 5116                                 M   
 5117                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 5118 00000430 D114                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 5119 00000432 410B                   M           JSR     @R1                     ;
 5120 00000434 0009                   M           NOP                                     ;
 5121                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 5122                                 M   ;       *** BIT SET ***
 5123 00000436 D114                   M           MOV.L   #_SEQ_BBIT_CHG_TBL,R1           ; ﾒﾓﾘのところ +0
 5124 00000438 4A00                   M           SHLL    R10                             ; *2
 5125 0000043A 31AC                   M           ADD     R10,R1                          ;
 5126 0000043C 6111                   M           MOV.W   @R1,R1                          ; BIT LOAD
 5127 0000043E 6241                   M           MOV.W   @R4,R2                          ; ﾒﾓﾘのところの命令LOAD
 5128 00000440 D012                   M           MOV.L   #H'FFFFFF00,R0                  ;
 5129 00000442 2209                   M           AND     R0,R2                           ; BITﾃﾞｰﾀのところをｸﾘｱ
 5130 00000444 221B                   M           OR      R1,R2                           ;
 5131 00000446 2421                   M           MOV.W   R2,@R4                          ; BIT SET
 5132                                 M   
 5133                                 M   ;       *** ADR SET ***
 5134 00000448 D111                   M           MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 5135 0000044A 341C                   M           ADD     R1,R4                           ; 0+4=4
 5136 0000044C 6241                   M           MOV.W   @R4,R2                          ;
 5137 0000044E 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 5138 00000450 4800                   M           SHLL    R8                              ; ADR*2
 5139 00000452 228B                   M           OR      R8,R2                           ;
 5140 00000454 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 5141                                 M   
 5142                                 M   ;       *** OFFSET SET ***
 5143 00000456 D10E                   M           MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 5144 00000458 341C                   M           ADD     R1,R4                           ; 4+4=8  MOV.B @(R0,R*),R0の命令 LOAD
 5145 0000045A D00E                   M           MOV.L   #_SEQ_MOVCMD_R0RD_TBL,R0        ;
 5146 0000045C 4900                   M           SHLL    R9                              ; OFFSET*2
 5147 0000045E 309C                   M           ADD     R9,R0                           ;
 5148 00000460 6001                   M           MOV.W   @R0,R0                          ;
 5149 00000462 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 5150                                 M   
 5151                                 M   ;       *** SWAP命令はBIT7以下ならNOPに置換える ***
 5152 00000464 D00C                   M           MOV.L   #_NOP_SWAP_TBL0,R0              ;
 5153 00000466 30AC                   M           ADD     R10,R0                          ;
 5154 00000468 6001                   M           MOV.W   @R0,R0                          ; NOP or SWAP命令LOAD
 5155                                 M   
 5156 0000046A D10C                   M           MOV.L   #D'2,R1                         ; ﾒﾓﾘのところ
 5157 0000046C 341C                   M           ADD     R1,R4                           ; 8+2=10  SWAP.Bの命令 LOAD
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    24
PROGRAM NAME =

 5158 0000046E 2401                   M           MOV.W   R0,@R4                          ; NOP or SWAP命令 WRITE
 5159                                 M   
 5160 00000470 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 5161                                 M           M_BRA   _JMP_EX00004                    ;
 5162 00000472 A016                   M           BRA     _JMP_EX00004
 5163 00000474 0009                   M           NOP
 5164                                 M   ;
 5165                                 M   ***** BEGIN-POOL *****
 5166 00000476 0000                   M   DATA FOR SOURCE-LINE 774
 5167 00000478 0000007F               M   DATA FOR SOURCE-LINE 774
 5168 0000047C 00000000               M   DATA FOR SOURCE-LINE 774
 5169 00000480 00000000               M   DATA FOR SOURCE-LINE 774
 5170 00000484 00000000               M   DATA FOR SOURCE-LINE 774
 5171 00000488 00000000               M   DATA FOR SOURCE-LINE 774
 5172 0000048C FFFFFF00               M   DATA FOR SOURCE-LINE 774
 5173 00000490 00000004               M   DATA FOR SOURCE-LINE 774,774
 5174 00000494 00000000               M   DATA FOR SOURCE-LINE 774
 5175 00000498 00000000               M   DATA FOR SOURCE-LINE 774
 5176 0000049C 00000002               M   DATA FOR SOURCE-LINE 774
 5177                                 M   ***** END-POOL *****
 5178 000004A0                        M   _JMP_C8000004:
 5179 000004A0 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 5180                                 M   
 5181 000004A2                        M   _JMP_EX00004:
 5182                             775     
 5183                             776             SUB_END
 5184                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 5185 000004A2 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 5186                             777             M_RTS
 5187 000004A4 000B                   M           RTS                             ;RTSの後ろの
 5188 000004A6 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 5189                             778     
 5190                             779     ;;;;;   消すのもったいないので動いたら削除する
 5191                             780     ;;;;;_ORN_CHG:                                  ; 00000111B     7
 5192                             781             SUB_START
 5193                                 M   ***** BEGIN-POOL *****
 5194 000004A8 FF00                   M   DATA FOR SOURCE-LINE 774
 5195                                 M   ***** END-POOL *****
 5196 000004AA 4F22                   M           STS.L   PR,@-R15                ;[必要]
 5197                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 5198                             782     
 5199 000004AC D114               783             MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 5200 000004AE 3813               784             CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 5201 000004B0 893A               785             BT      _ORN_C80                        ; IF ADR >= 127 THEN JUMP
 5202                             786     ;
 5203 000004B2 D014               787             MOV.L   #(_ORN_CODE_END-_ORN_CODE),R0   ; 転送 BYTE長
 5204 000004B4 D314               788             MOV.L   #_ORN_CODE,R3                   ; Read CODE MOVE        (12 BYTE)
 5205                             789     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 5206 000004B6 64D3               790             MOV     R13,R4                          ; SEQ ADR. KEEP
 5207                             791     
 5208                             792             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 5209 000004B8 D114                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 5210 000004BA 410B                   M           JSR     @R1                     ;
 5211 000004BC 0009                   M           NOP                                     ;
 5212                             793                                                     ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 5213                             794     ;       *** BIT SET ***
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    25
PROGRAM NAME =

 5214 000004BE D114               795             MOV.L   #_SEQ_BBIT_CHG_TBL,R1           ; ﾒﾓﾘのところ +0
 5215 000004C0 4A00               796             SHLL    R10                             ; *2
 5216 000004C2 31AC               797             ADD     R10,R1                          ;
 5217 000004C4 6111               798             MOV.W   @R1,R1                          ; BIT LOAD
 5218 000004C6 6241               799             MOV.W   @R4,R2                          ; ﾒﾓﾘのところの命令LOAD
 5219 000004C8 D012               800             MOV.L   #H'FFFFFF00,R0                  ;
 5220 000004CA 2209               801             AND     R0,R2                           ; BITﾃﾞｰﾀのところをｸﾘｱ
 5221 000004CC 221B               802             OR      R1,R2                           ;
 5222 000004CE 2421               803             MOV.W   R2,@R4                          ; BIT SET
 5223                             804     
 5224                             805     ;       *** ADR SET ***
 5225 000004D0 D111               806             MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 5226 000004D2 341C               807             ADD     R1,R4                           ; 0+4=4
 5227 000004D4 6241               808             MOV.W   @R4,R2                          ;
 5228 000004D6 2209               809             AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 5229 000004D8 4800               810             SHLL    R8                              ; ADR*2
 5230 000004DA 228B               811             OR      R8,R2                           ;
 5231 000004DC 2421               812             MOV.W   R2,@R4                          ; RAM ADR SET
 5232                             813     
 5233                             814     ;       *** OFFSET SET ***
 5234 000004DE D10E               815             MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 5235 000004E0 341C               816             ADD     R1,R4                           ; 4+4=8  MOV.B @(R0,R*),R0の命令 LOAD
 5236 000004E2 D00E               817             MOV.L   #_SEQ_MOVCMD_R0RD_TBL,R0        ;
 5237 000004E4 4900               818             SHLL    R9                              ; OFFSET*2
 5238 000004E6 309C               819             ADD     R9,R0                           ;
 5239 000004E8 6001               820             MOV.W   @R0,R0                          ;
 5240 000004EA 2401               821             MOV.W   R0,@R4                          ; 命令置換え
 5241                             822     
 5242                             823     ;       *** SWAP命令はBIT7以下ならNOPに置換える ***
 5243 000004EC D00C               824             MOV.L   #_NOP_SWAP_TBL0,R0              ;
 5244 000004EE 30AC               825             ADD     R10,R0                          ;
 5245 000004F0 6001               826             MOV.W   @R0,R0                          ; NOP or SWAP命令LOAD
 5246                             827     
 5247 000004F2 D10C               828             MOV.L   #D'2,R1                         ; ﾒﾓﾘのところ
 5248 000004F4 341C               829             ADD     R1,R4                           ; 8+2=10  SWAP.Bの命令 LOAD
 5249 000004F6 2401               830             MOV.W   R0,@R4                          ; NOP or SWAP命令 WRITE
 5250                             831     
 5251 000004F8 9001               832             MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 5252                             833             M_BRA   _ORN_CHG_EX                     ;
 5253 000004FA A016                   M           BRA     _ORN_CHG_EX
 5254 000004FC 0009                   M           NOP
 5255                             834     ;
 5256                                     ***** BEGIN-POOL *****
 5257 000004FE 0000                       DATA FOR SOURCE-LINE 832
 5258 00000500 0000007F                   DATA FOR SOURCE-LINE 783
 5259 00000504 00000000                   DATA FOR SOURCE-LINE 787
 5260 00000508 00000000                   DATA FOR SOURCE-LINE 788
 5261 0000050C 00000000                   DATA FOR SOURCE-LINE 792
 5262 00000510 00000000                   DATA FOR SOURCE-LINE 795
 5263 00000514 FFFFFF00                   DATA FOR SOURCE-LINE 800
 5264 00000518 00000004                   DATA FOR SOURCE-LINE 806,815
 5265 0000051C 00000000                   DATA FOR SOURCE-LINE 817
 5266 00000520 00000000                   DATA FOR SOURCE-LINE 824
 5267 00000524 00000002                   DATA FOR SOURCE-LINE 828
 5268                                     ***** END-POOL *****
 5269 00000528                    835     _ORN_C80:
 5270 00000528 9002               836             MOV.W   #_SQ_ERR_END,R0                 ; ERR END
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    26
PROGRAM NAME =

 5271                             837     
 5272 0000052A                    838     _ORN_CHG_EX:
 5273                             839             SUB_END
 5274                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 5275 0000052A 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 5276                             840             M_RTS
 5277 0000052C 000B                   M           RTS                             ;RTSの後ろの
 5278 0000052E 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 5279                             841     
 5280                             842     
 5281                             843     
 5282                             844     
 5283                             845     ;       *******************************************
 5284                             846     ;       *****   PLS CODE CHANGE ROUTINE         ***
 5285                             847     ;       *******************************************
 5286                                     ***** BEGIN-POOL *****
 5287 00000530 FF00                       DATA FOR SOURCE-LINE 836
 5288                                     ***** END-POOL *****
 5289 00000532                    848     _PLS_CHG:                       ; 00001000B     8
 5290                             849             SUB_START
 5291 00000532 4F22                   M           STS.L   PR,@-R15                ;[必要]
 5292                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 5293                             850     
 5294                             851             _SEQ_PLS_PLF_CMD        _PLS_CODE,_PLS_CODE_END,BIT_AREA=0,ADR_AREA=2,COD_AREA1=4
 5295                                 M   
 5296 00000534 D112                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 5297 00000536 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 5298 00000538 8936                   M           BT      _JMP_C8000005                   ; IF ADR >= 127 THEN JUMP
 5299                                 M   ;
 5300 0000053A D012                   M           MOV.L   #(_PLS_CODE_END-_PLS_CODE),R0           ; 転送 BYTE長
 5301 0000053C D312                   M           MOV.L   #_PLS_CODE,R3                   ; Read CODE MOVE        (12 BYTE)
 5302                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 5303 0000053E 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 5304                                 M   
 5305                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 5306 00000540 D112                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 5307 00000542 410B                   M           JSR     @R1                     ;
 5308 00000544 0009                   M           NOP                                     ;
 5309                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 5310                                 M   ;       *** BIT SET ***
 5311 00000546 D112                   M           MOV.L   #0,R1                   ; ﾒﾓﾘのところ
 5312 00000548 341C                   M           ADD     R1,R4                           ;
 5313 0000054A D112                   M           MOV.L   #_SEQ_BBIT_CHG_TBL,R1           ;
 5314 0000054C 4A00                   M           SHLL    R10                             ; *2
 5315 0000054E 31AC                   M           ADD     R10,R1                          ;
 5316 00000550 6111                   M           MOV.W   @R1,R1                          ;
 5317 00000552 6241                   M           MOV.W   @R4,R2                          ; ﾒﾓﾘのところの命令LOAD
 5318 00000554 D010                   M           MOV.L   #H'FFFFFF00,R0                  ;
 5319 00000556 2209                   M           AND     R0,R2                           ; BITﾃﾞｰﾀのところをｸﾘｱ
 5320 00000558 221B                   M           OR      R1,R2                           ;
 5321 0000055A 2421                   M           MOV.W   R2,@R4                          ; BIT SET
 5322                                 M   
 5323                                 M   ;       *** SHLL命令はBIT7以下ならNOPに置換える ***
 5324 0000055C D20F                   M           MOV.L   #_NOP_SHLL8_R2_TBL0,R2          ;
 5325 0000055E 32AC                   M           ADD     R10,R2                          ;
 5326 00000560 6221                   M           MOV.W   @R2,R2                          ; NOP or SHLL8命令LOAD
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    27
PROGRAM NAME =

 5327                                 M   
 5328 00000562 D10F                   M           MOV.L   #4,R1                           ; ﾒﾓﾘのところ
 5329 00000564 341C                   M           ADD     R1,R4                           ; 8+2=10  SWAP.Bの命令 LOAD
 5330 00000566 2421                   M           MOV.W   R2,@R4                          ; NOP or SWAP命令 WRITE
 5331                                 M   
 5332                                 M   ;       *** ADR SET ***
 5333 00000568 D10E                   M           MOV.L   #2,R1                   ; ﾒﾓﾘのところ
 5334 0000056A 341C                   M           ADD     R1,R4                           ; 0+6=6
 5335 0000056C 6241                   M           MOV.W   @R4,R2                          ;
 5336 0000056E 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 5337 00000570 4800                   M           SHLL    R8                              ; ADR*2
 5338 00000572 228B                   M           OR      R8,R2                           ;
 5339 00000574 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 5340                                 M   
 5341 00000576 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 5342                                 M           M_BRA   _JMP_EX00005                    ;
 5343 00000578 A017                   M           BRA     _JMP_EX00005
 5344 0000057A 0009                   M           NOP
 5345                                 M   ;
 5346                                 M   ***** BEGIN-POOL *****
 5347 0000057C 0000                   M   DATA FOR SOURCE-LINE 851
 5348 0000057E 0000                   M   ALIGNMENT CODE
 5349 00000580 0000007F               M   DATA FOR SOURCE-LINE 851
 5350 00000584 00000000               M   DATA FOR SOURCE-LINE 851
 5351 00000588 00000000               M   DATA FOR SOURCE-LINE 851
 5352 0000058C 00000000               M   DATA FOR SOURCE-LINE 851
 5353 00000590 00000000               M   DATA FOR SOURCE-LINE 851
 5354 00000594 00000000               M   DATA FOR SOURCE-LINE 851
 5355 00000598 FFFFFF00               M   DATA FOR SOURCE-LINE 851
 5356 0000059C 00000000               M   DATA FOR SOURCE-LINE 851
 5357 000005A0 00000004               M   DATA FOR SOURCE-LINE 851
 5358 000005A4 00000002               M   DATA FOR SOURCE-LINE 851
 5359                                 M   ***** END-POOL *****
 5360 000005A8                        M   _JMP_C8000005:
 5361 000005A8 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 5362                                 M   
 5363 000005AA                        M   _JMP_EX00005:
 5364                             852     
 5365                             853             SUB_END
 5366                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 5367 000005AA 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 5368                             854             M_RTS
 5369 000005AC 000B                   M           RTS                             ;RTSの後ろの
 5370 000005AE 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 5371                             855     
 5372                             856     ;;;;;   消すのもったいないので動いたら削除する
 5373                             857     ;;;;;_PLS_CHG:                  ; 00001000B     8
 5374                                     ***** BEGIN-POOL *****
 5375 000005B0 FF00                       DATA FOR SOURCE-LINE 851
 5376                                     ***** END-POOL *****
 5377 000005B2 D112               858             MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 5378 000005B4 3813               859             CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 5379 000005B6 8935               860             BT      _PLS_C80                                ; IF ADR >= 127 THEN JUMP
 5380                             861     ;
 5381 000005B8 D011               862             MOV.L   #(_PLS_CODE_END-_PLS_CODE),R0   ; 転送 BYTE長
 5382 000005BA D312               863             MOV.L   #_PLS_CODE,R3                   ; Read CODE MOVE        (12 BYTE)
 5383                             864     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    28
PROGRAM NAME =

 5384 000005BC 64D3               865             MOV     R13,R4                          ; SEQ ADR. KEEP
 5385                             866     
 5386                             867             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 5387 000005BE D112                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 5388 000005C0 410B                   M           JSR     @R1                     ;
 5389 000005C2 0009                   M           NOP                                     ;
 5390                             868                                                     ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 5391                             869     ;       *** BIT SET ***
 5392 000005C4 D111               870             MOV.L   #D'0,R1                         ; ﾒﾓﾘのところ
 5393 000005C6 341C               871             ADD     R1,R4                           ; +0
 5394 000005C8 D111               872             MOV.L   #_SEQ_BBIT_CHG_TBL,R1           ;
 5395 000005CA 4A00               873             SHLL    R10                             ; *2
 5396 000005CC 31AC               874             ADD     R10,R1                          ;
 5397 000005CE 6111               875             MOV.W   @R1,R1                          ;
 5398 000005D0 6241               876             MOV.W   @R4,R2                          ; ﾒﾓﾘのところの命令LOAD
 5399 000005D2 D010               877             MOV.L   #H'FFFFFF00,R0                  ;
 5400 000005D4 2209               878             AND     R0,R2                           ; BITﾃﾞｰﾀのところをｸﾘｱ
 5401 000005D6 221B               879             OR      R1,R2                           ;
 5402 000005D8 2421               880             MOV.W   R2,@R4                          ; BIT SET
 5403                             881     
 5404                             882     ;       *** SWAP命令はBIT7以下ならNOPに置換える ***
 5405 000005DA D00F               883             MOV.L   #_NOP_SHLL8_R2_TBL0,R0          ;
 5406 000005DC 30AC               884             ADD     R10,R0                          ;
 5407 000005DE 6001               885             MOV.W   @R0,R0                          ; NOP or SHLL8命令LOAD
 5408                             886     
 5409 000005E0 D10E               887             MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 5410 000005E2 341C               888             ADD     R1,R4                           ; 0+4=4  SWAP.Bの命令 LOAD
 5411 000005E4 2401               889             MOV.W   R0,@R4                          ; NOP or SWAP命令 WRITE
 5412                             890     
 5413                             891     ;       *** ADR SET ***
 5414 000005E6 D10E               892             MOV.L   #D'2,R1                         ; ﾒﾓﾘのところ
 5415 000005E8 341C               893             ADD     R1,R4                           ; 4+2=6
 5416 000005EA 6241               894             MOV.W   @R4,R2                          ;
 5417 000005EC 2209               895             AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 5418 000005EE 4800               896             SHLL    R8                              ; ADR*2
 5419 000005F0 228B               897             OR      R8,R2                           ;
 5420 000005F2 2421               898             MOV.W   R2,@R4                          ; RAM ADR SET
 5421                             899     
 5422 000005F4 9001               900             MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 5423                             901             M_BRA   _PLS_CHG_EX                     ;
 5424 000005F6 A016                   M           BRA     _PLS_CHG_EX
 5425 000005F8 0009                   M           NOP
 5426                             902     ;
 5427                                     ***** BEGIN-POOL *****
 5428 000005FA 0000                       DATA FOR SOURCE-LINE 900
 5429 000005FC 0000007F                   DATA FOR SOURCE-LINE 858
 5430 00000600 00000000                   DATA FOR SOURCE-LINE 862
 5431 00000604 00000000                   DATA FOR SOURCE-LINE 863
 5432 00000608 00000000                   DATA FOR SOURCE-LINE 867
 5433 0000060C 00000000                   DATA FOR SOURCE-LINE 870
 5434 00000610 00000000                   DATA FOR SOURCE-LINE 872
 5435 00000614 FFFFFF00                   DATA FOR SOURCE-LINE 877
 5436 00000618 00000000                   DATA FOR SOURCE-LINE 883
 5437 0000061C 00000004                   DATA FOR SOURCE-LINE 887
 5438 00000620 00000002                   DATA FOR SOURCE-LINE 892
 5439                                     ***** END-POOL *****
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    29
PROGRAM NAME =

 5440 00000624                    903     _PLS_C80:
 5441 00000624 9002               904             MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 5442                             905     
 5443 00000626                    906     _PLS_CHG_EX:
 5444                             907     
 5445                             908             SUB_END
 5446                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 5447 00000626 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 5448                             909             M_RTS
 5449 00000628 000B                   M           RTS                             ;RTSの後ろの
 5450 0000062A 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 5451                             910     
 5452                             911     
 5453                             912     ;       *******************************************
 5454                             913     ;       *****   PLF CODE CHANGE ROUTINE         ***
 5455                             914     ;       *******************************************
 5456                                     ***** BEGIN-POOL *****
 5457 0000062C FF00                       DATA FOR SOURCE-LINE 904
 5458                                     ***** END-POOL *****
 5459 0000062E                    915     _PLF_CHG:                                       ; 00001001B     9
 5460                             916             SUB_START
 5461 0000062E 4F22                   M           STS.L   PR,@-R15                ;[必要]
 5462                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 5463                             917     
 5464                             918             _SEQ_PLS_PLF_CMD        _PLF_CODE,_PLF_CODE_END,BIT_AREA=0,ADR_AREA=2,COD_AREA1=4
 5465                                 M   
 5466 00000630 D112                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 5467 00000632 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 5468 00000634 8936                   M           BT      _JMP_C8000006                   ; IF ADR >= 127 THEN JUMP
 5469                                 M   ;
 5470 00000636 D012                   M           MOV.L   #(_PLF_CODE_END-_PLF_CODE),R0           ; 転送 BYTE長
 5471 00000638 D312                   M           MOV.L   #_PLF_CODE,R3                   ; Read CODE MOVE        (12 BYTE)
 5472                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 5473 0000063A 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 5474                                 M   
 5475                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 5476 0000063C D112                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 5477 0000063E 410B                   M           JSR     @R1                     ;
 5478 00000640 0009                   M           NOP                                     ;
 5479                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 5480                                 M   ;       *** BIT SET ***
 5481 00000642 D112                   M           MOV.L   #0,R1                   ; ﾒﾓﾘのところ
 5482 00000644 341C                   M           ADD     R1,R4                           ;
 5483 00000646 D112                   M           MOV.L   #_SEQ_BBIT_CHG_TBL,R1           ;
 5484 00000648 4A00                   M           SHLL    R10                             ; *2
 5485 0000064A 31AC                   M           ADD     R10,R1                          ;
 5486 0000064C 6111                   M           MOV.W   @R1,R1                          ;
 5487 0000064E 6241                   M           MOV.W   @R4,R2                          ; ﾒﾓﾘのところの命令LOAD
 5488 00000650 D010                   M           MOV.L   #H'FFFFFF00,R0                  ;
 5489 00000652 2209                   M           AND     R0,R2                           ; BITﾃﾞｰﾀのところをｸﾘｱ
 5490 00000654 221B                   M           OR      R1,R2                           ;
 5491 00000656 2421                   M           MOV.W   R2,@R4                          ; BIT SET
 5492                                 M   
 5493                                 M   ;       *** SHLL命令はBIT7以下ならNOPに置換える ***
 5494 00000658 D20F                   M           MOV.L   #_NOP_SHLL8_R2_TBL0,R2          ;
 5495 0000065A 32AC                   M           ADD     R10,R2                          ;
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    30
PROGRAM NAME =

 5496 0000065C 6221                   M           MOV.W   @R2,R2                          ; NOP or SHLL8命令LOAD
 5497                                 M   
 5498 0000065E D10F                   M           MOV.L   #4,R1                           ; ﾒﾓﾘのところ
 5499 00000660 341C                   M           ADD     R1,R4                           ; 8+2=10  SWAP.Bの命令 LOAD
 5500 00000662 2421                   M           MOV.W   R2,@R4                          ; NOP or SWAP命令 WRITE
 5501                                 M   
 5502                                 M   ;       *** ADR SET ***
 5503 00000664 D10E                   M           MOV.L   #2,R1                   ; ﾒﾓﾘのところ
 5504 00000666 341C                   M           ADD     R1,R4                           ; 0+6=6
 5505 00000668 6241                   M           MOV.W   @R4,R2                          ;
 5506 0000066A 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 5507 0000066C 4800                   M           SHLL    R8                              ; ADR*2
 5508 0000066E 228B                   M           OR      R8,R2                           ;
 5509 00000670 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 5510                                 M   
 5511 00000672 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 5512                                 M           M_BRA   _JMP_EX00006                    ;
 5513 00000674 A017                   M           BRA     _JMP_EX00006
 5514 00000676 0009                   M           NOP
 5515                                 M   ;
 5516                                 M   ***** BEGIN-POOL *****
 5517 00000678 0000                   M   DATA FOR SOURCE-LINE 918
 5518 0000067A 0000                   M   ALIGNMENT CODE
 5519 0000067C 0000007F               M   DATA FOR SOURCE-LINE 918
 5520 00000680 00000000               M   DATA FOR SOURCE-LINE 918
 5521 00000684 00000000               M   DATA FOR SOURCE-LINE 918
 5522 00000688 00000000               M   DATA FOR SOURCE-LINE 918
 5523 0000068C 00000000               M   DATA FOR SOURCE-LINE 918
 5524 00000690 00000000               M   DATA FOR SOURCE-LINE 918
 5525 00000694 FFFFFF00               M   DATA FOR SOURCE-LINE 918
 5526 00000698 00000000               M   DATA FOR SOURCE-LINE 918
 5527 0000069C 00000004               M   DATA FOR SOURCE-LINE 918
 5528 000006A0 00000002               M   DATA FOR SOURCE-LINE 918
 5529                                 M   ***** END-POOL *****
 5530 000006A4                        M   _JMP_C8000006:
 5531 000006A4 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 5532                                 M   
 5533 000006A6                        M   _JMP_EX00006:
 5534                             919     
 5535                             920             SUB_END
 5536                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 5537 000006A6 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 5538                             921             M_RTS
 5539 000006A8 000B                   M           RTS                             ;RTSの後ろの
 5540 000006AA 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 5541                             922     
 5542                             923     ;       *******************************************
 5543                             924     ;       *****   BIT STORE CODE CHANGE ROUTINE   ***
 5544                             925     ;       *******************************************
 5545                                     ***** BEGIN-POOL *****
 5546 000006AC FF00                       DATA FOR SOURCE-LINE 918
 5547                                     ***** END-POOL *****
 5548 000006AE                    926     _ST_CHG:                                        ; 00001010B     A
 5549                             927             SUB_START
 5550 000006AE 4F22                   M           STS.L   PR,@-R15                ;[必要]
 5551                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 5552                             928     
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    31
PROGRAM NAME =

 5553 000006B0 D118               929             MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 5554 000006B2 3813               930             CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 5555 000006B4 8946               931             BT      _ST_C80                         ; IF ADR >= 127 THEN JUMP
 5556                             932     ;
 5557 000006B6 D018               933             MOV.L   #(_ST_CODE_END-_ST_CODE),R0     ; 転送 BYTE長
 5558 000006B8 D318               934             MOV.L   #_ST_CODE,R3                    ; Read CODE MOVE        (12 BYTE)
 5559                             935     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 5560 000006BA 64D3               936             MOV     R13,R4                          ; SEQ ADR. KEEP
 5561                             937     
 5562                             938             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 5563 000006BC D118                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 5564 000006BE 410B                   M           JSR     @R1                     ;
 5565 000006C0 0009                   M           NOP                                     ;
 5566                             939                                                     ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 5567                             940     ;       *** BIT SET ***
 5568 000006C2 D118               941             MOV.L   #D'2,R1                         ; ﾒﾓﾘのところ
 5569 000006C4 341C               942             ADD     R1,R4                           ;
 5570 000006C6 D118               943             MOV.L   #_SEQ_BBIT_CHG_TBL,R1           ;
 5571 000006C8 4A00               944             SHLL    R10                             ; *2
 5572 000006CA 31AC               945             ADD     R10,R1                          ;
 5573 000006CC 6111               946             MOV.W   @R1,R1                          ;
 5574 000006CE 6241               947             MOV.W   @R4,R2                          ; ﾒﾓﾘのところの命令LOAD
 5575 000006D0 D016               948             MOV.L   #H'FFFFFF00,R0                  ;
 5576 000006D2 2209               949             AND     R0,R2                           ; BITﾃﾞｰﾀのところをｸﾘｱ
 5577 000006D4 221B               950             OR      R1,R2                           ;
 5578 000006D6 2421               951             MOV.W   R2,@R4                          ; BIT SET
 5579                             952     
 5580                             953     ;       *** SWAP命令はBIT7以下ならNOPに置換える ***
 5581 000006D8 D215               954             MOV.L   #_NOP_SHLL8_R3_TBL0,R2          ;
 5582 000006DA 32AC               955             ADD     R10,R2                          ;
 5583 000006DC 6221               956             MOV.W   @R2,R2                          ; NOP or SHLL8命令LOAD
 5584                             957     
 5585 000006DE D115               958             MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 5586 000006E0 341C               959             ADD     R1,R4                           ; 0+4=4  SWAP.Bの命令 LOAD
 5587 000006E2 2421               960             MOV.W   R2,@R4                          ; NOP or SWAP命令 WRITE
 5588                             961     
 5589                             962     ;       *** ADR SET ***
 5590 000006E4 D113               963             MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 5591 000006E6 341C               964             ADD     R1,R4                           ; 2+8=10
 5592 000006E8 6241               965             MOV.W   @R4,R2                          ;
 5593 000006EA 2209               966             AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 5594 000006EC 4800               967             SHLL    R8                              ; ADR*2
 5595 000006EE 228B               968             OR      R8,R2                           ;
 5596 000006F0 2421               969             MOV.W   R2,@R4                          ; RAM ADR SET
 5597                             970     
 5598                             971     ;       *** OFFSET SET ***
 5599 000006F2 D110               972             MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 5600 000006F4 341C               973             ADD     R1,R4                           ; 10+4=14  MOV.B @(R0,R*),R1の命令 LOAD
 5601 000006F6 D010               974             MOV.L   #_SEQ_MOVCMD_R1RD_TBL,R0        ;
 5602 000006F8 4900               975             SHLL    R9                              ; OFFSET*2
 5603 000006FA 309C               976             ADD     R9,R0                           ;
 5604 000006FC 6001               977             MOV.W   @R0,R0                          ;
 5605 000006FE 2401               978             MOV.W   R0,@R4                          ; 命令置換え
 5606                             979     
 5607                             980     ;       *** OFFSET SET ***
 5608 00000700 D10E               981             MOV.L   #D'10,R1                        ; ﾒﾓﾘのところ
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    32
PROGRAM NAME =

 5609 00000702 341C               982             ADD     R1,R4                           ; 14+10=24  MOV.B R1,@(R0,R*)の命令 LOAD
 5610 00000704 D00E               983             MOV.L   #_SEQ_MOVCMD_R1WR_TBL,R0        ;
 5611 00000706 309C               984             ADD     R9,R0                           ;
 5612 00000708 6001               985             MOV.W   @R0,R0                          ;
 5613 0000070A 2401               986             MOV.W   R0,@R4                          ; 命令置換え
 5614                             987     
 5615 0000070C 9001               988             MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 5616                             989             M_BRA   _ST_CHG_EX                      ;
 5617 0000070E A01A                   M           BRA     _ST_CHG_EX
 5618 00000710 0009                   M           NOP
 5619                             990     ;
 5620                                     ***** BEGIN-POOL *****
 5621 00000712 0000                       DATA FOR SOURCE-LINE 988
 5622 00000714 0000007F                   DATA FOR SOURCE-LINE 929
 5623 00000718 00000000                   DATA FOR SOURCE-LINE 933
 5624 0000071C 00000000                   DATA FOR SOURCE-LINE 934
 5625 00000720 00000000                   DATA FOR SOURCE-LINE 938
 5626 00000724 00000002                   DATA FOR SOURCE-LINE 941
 5627 00000728 00000000                   DATA FOR SOURCE-LINE 943
 5628 0000072C FFFFFF00                   DATA FOR SOURCE-LINE 948
 5629 00000730 00000000                   DATA FOR SOURCE-LINE 954
 5630 00000734 00000004                   DATA FOR SOURCE-LINE 958,963,972
 5631 00000738 00000000                   DATA FOR SOURCE-LINE 974
 5632 0000073C 0000000A                   DATA FOR SOURCE-LINE 981
 5633 00000740 00000000                   DATA FOR SOURCE-LINE 983
 5634                                     ***** END-POOL *****
 5635 00000744                    991     _ST_C80:
 5636 00000744 9002               992             MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 5637                             993     
 5638 00000746                    994     _ST_CHG_EX:
 5639                             995             SUB_END
 5640                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 5641 00000746 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 5642                             996             M_RTS
 5643 00000748 000B                   M           RTS                             ;RTSの後ろの
 5644 0000074A 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 5645                             997     
 5646                             998     
 5647                             999     
 5648                            1000     ;       *******************************************
 5649                            1001     ;       *****   WSC CODE CHANGE ROUTINE         ***
 5650                            1002     ;       *******************************************
 5651                                     ***** BEGIN-POOL *****
 5652 0000074C FF00                       DATA FOR SOURCE-LINE 992
 5653                                     ***** END-POOL *****
 5654 0000074E                   1003     _WSC_CHG:                       ; 00001100B     C
 5655                            1004             SUB_START
 5656 0000074E 4F22                   M           STS.L   PR,@-R15                ;[必要]
 5657                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 5658                            1005     
 5659 00000750 D114              1006             MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 5660 00000752 3813              1007             CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 5661 00000754 893A              1008             BT      _WSC_C80                        ; IF ADR >= 127 THEN JUMP
 5662                            1009     ;
 5663 00000756 D014              1010             MOV.L   #(_WSC_CODE_END-_WSC_CODE),R0   ; 転送 BYTE長
 5664 00000758 D314              1011             MOV.L   #_WSC_CODE,R3                   ; Read CODE MOVE        (12 BYTE)
 5665                            1012     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    33
PROGRAM NAME =

 5666 0000075A 64D3              1013             MOV     R13,R4                          ; SEQ ADR. KEEP
 5667                            1014     
 5668                            1015             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 5669 0000075C D114                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 5670 0000075E 410B                   M           JSR     @R1                     ;
 5671 00000760 0009                   M           NOP                                     ;
 5672                            1016                                                     ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 5673                            1017     ;       *** BIT SET ***
 5674 00000762 D114              1018             MOV.L   #_SEQ_BBIT_CHG_TBL,R1           ; ﾒﾓﾘのところ +0
 5675 00000764 4A00              1019             SHLL    R10                             ; *2
 5676 00000766 31AC              1020             ADD     R10,R1                          ;
 5677 00000768 6111              1021             MOV.W   @R1,R1                          ; BIT LOAD
 5678 0000076A 6241              1022             MOV.W   @R4,R2                          ; ﾒﾓﾘのところの命令LOAD
 5679 0000076C D012              1023             MOV.L   #H'FFFFFF00,R0                  ;
 5680 0000076E 2209              1024             AND     R0,R2                           ; BITﾃﾞｰﾀのところをｸﾘｱ
 5681 00000770 221B              1025             OR      R1,R2                           ;
 5682 00000772 2421              1026             MOV.W   R2,@R4                          ; BIT SET
 5683                            1027     
 5684                            1028     ;       *** SWAP命令はBIT7以下ならNOPに置換える ***
 5685 00000774 D111              1029             MOV.L   #_NOP_SWAP_TBL0,R1              ;
 5686 00000776 31AC              1030             ADD     R10,R1                          ;
 5687 00000778 6111              1031             MOV.W   @R1,R1                          ; NOP or SWAP命令LOAD
 5688                            1032     
 5689 0000077A D211              1033             MOV.L   #D'4,R2                         ; ﾒﾓﾘのところ
 5690 0000077C 342C              1034             ADD     R2,R4                           ; 0+4=4  SWAP.Bの命令 LOAD
 5691 0000077E 2411              1035             MOV.W   R1,@R4                          ; NOP or SWAP命令 WRITE
 5692                            1036     
 5693                            1037     ;       *** ADR SET ***
 5694 00000780 D110              1038             MOV.L   #D'8,R1                         ; ﾒﾓﾘのところ
 5695 00000782 341C              1039             ADD     R1,R4                           ; 2+8=10
 5696 00000784 6241              1040             MOV.W   @R4,R2                          ;
 5697 00000786 2209              1041             AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 5698 00000788 4800              1042             SHLL    R8                              ; ADR*2
 5699 0000078A 228B              1043             OR      R8,R2                           ;
 5700 0000078C 2421              1044             MOV.W   R2,@R4                          ; RAM ADR SET
 5701                            1045     
 5702                            1046     ;       *** OFFSET SET ***
 5703 0000078E D10C              1047             MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 5704 00000790 341C              1048             ADD     R1,R4                           ; 10+4=14  MOV.B @(R0,R*),R1の命令 LOAD
 5705 00000792 D00D              1049             MOV.L   #_SEQ_MOVCMD_R1WR_TBL,R0        ;
 5706 00000794 4900              1050             SHLL    R9                              ; OFFSET*2
 5707 00000796 309C              1051             ADD     R9,R0                           ;
 5708 00000798 6001              1052             MOV.W   @R0,R0                          ;
 5709 0000079A 2401              1053             MOV.W   R0,@R4                          ; 命令置換え
 5710                            1054     
 5711 0000079C 9001              1055             MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 5712                            1056             M_BRA   _WSC_CHG_EX                     ;
 5713 0000079E A016                   M           BRA     _WSC_CHG_EX
 5714 000007A0 0009                   M           NOP
 5715                            1057     ;
 5716                                     ***** BEGIN-POOL *****
 5717 000007A2 0000                       DATA FOR SOURCE-LINE 1055
 5718 000007A4 0000007F                   DATA FOR SOURCE-LINE 1006
 5719 000007A8 00000000                   DATA FOR SOURCE-LINE 1010
 5720 000007AC 00000000                   DATA FOR SOURCE-LINE 1011
 5721 000007B0 00000000                   DATA FOR SOURCE-LINE 1015
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    34
PROGRAM NAME =

 5722 000007B4 00000000                   DATA FOR SOURCE-LINE 1018
 5723 000007B8 FFFFFF00                   DATA FOR SOURCE-LINE 1023
 5724 000007BC 00000000                   DATA FOR SOURCE-LINE 1029
 5725 000007C0 00000004                   DATA FOR SOURCE-LINE 1033,1047
 5726 000007C4 00000008                   DATA FOR SOURCE-LINE 1038
 5727 000007C8 00000000                   DATA FOR SOURCE-LINE 1049
 5728                                     ***** END-POOL *****
 5729 000007CC                   1058     _WSC_C80:
 5730 000007CC 9002              1059             MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 5731                            1060     
 5732 000007CE                   1061     _WSC_CHG_EX:
 5733                            1062     
 5734                            1063             SUB_END
 5735                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 5736 000007CE 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 5737                            1064             M_RTS
 5738 000007D0 000B                   M           RTS                             ;RTSの後ろの
 5739 000007D2 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 5740                            1065     
 5741                            1066     ;       *******************************************
 5742                            1067     ;       *****   BIT SET CODE CHANGE ROUTINE     ***
 5743                            1068     ;       *******************************************
 5744                                     ***** BEGIN-POOL *****
 5745 000007D4 FF00                       DATA FOR SOURCE-LINE 1059
 5746                                     ***** END-POOL *****
 5747 000007D6                   1069     _SET_CHG:                                       ; 00001110B     E
 5748                            1070             SUB_START
 5749 000007D6 4F22                   M           STS.L   PR,@-R15                ;[必要]
 5750                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 5751                            1071     
 5752                            1072             _SEQ_SET_RST_CMD        _SET_CODE,_SET_CODE_END,BIT_AREA=2,ADR_AREA=2,COD_AREA1=4,
                                          COD_AREA2=4,COD_AREA3=8
 5753                                 M   
 5754 000007D8 D118                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 5755 000007DA 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 5756 000007DC 8946                   M           BT      _JMP_C8000007                   ; IF ADR >= 127 THEN JUMP
 5757                                 M   ;
 5758 000007DE D018                   M           MOV.L   #(_SET_CODE_END-_SET_CODE),R0           ; 転送 BYTE長
 5759 000007E0 D318                   M           MOV.L   #_SET_CODE,R3                   ; Read CODE MOVE        (12 BYTE)
 5760                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 5761 000007E2 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 5762                                 M   
 5763                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 5764 000007E4 D118                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 5765 000007E6 410B                   M           JSR     @R1                     ;
 5766 000007E8 0009                   M           NOP                                     ;
 5767                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 5768                                 M   
 5769 000007EA D018                   M           MOV.L   #H'FFFFFF00,R0                  ;
 5770                                 M   
 5771                                 M   ;       *** BIT SET ***
 5772 000007EC D118                   M           MOV.L   #2,R1                   ; ﾒﾓﾘのところ
 5773 000007EE 341C                   M           ADD     R1,R4                           ; +2
 5774 000007F0 D118                   M           MOV.L   #_SEQ_BBIT_CHG_TBL,R1           ; ﾒﾓﾘのところ +0
 5775 000007F2 4A00                   M           SHLL    R10                             ; *2
 5776 000007F4 31AC                   M           ADD     R10,R1                          ;
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    35
PROGRAM NAME =

 5777 000007F6 6111                   M           MOV.W   @R1,R1                          ; BIT LOAD
 5778 000007F8 6241                   M           MOV.W   @R4,R2                          ; ﾒﾓﾘのところの命令LOAD
 5779 000007FA 2209                   M           AND     R0,R2                           ; BITﾃﾞｰﾀのところをｸﾘｱ
 5780 000007FC 221B                   M           OR      R1,R2                           ;
 5781 000007FE 2421                   M           MOV.W   R2,@R4                          ; BIT SET
 5782                                 M   
 5783                                 M   ;       *** SHLL命令はBIT7以下ならNOPに置換える ***
 5784 00000800 D215                   M           MOV.L   #_NOP_SHLL8_R3_TBL0,R2          ;
 5785 00000802 32AC                   M           ADD     R10,R2                          ;
 5786 00000804 6221                   M           MOV.W   @R2,R2                          ; NOP or SHLL8命令LOAD
 5787 00000806 D115                   M           MOV.L   #4,R1                           ; ﾒﾓﾘのところ
 5788 00000808 341C                   M           ADD     R1,R4                           ; 8+2=10  SWAP.Bの命令 LOAD
 5789 0000080A 2421                   M           MOV.W   R2,@R4                          ; NOP or SWAP命令 WRITE
 5790                                 M   
 5791                                 M   ;       *** ADR SET ***
 5792 0000080C D110                   M           MOV.L   #2,R1                   ; ﾒﾓﾘのところ
 5793 0000080E 341C                   M           ADD     R1,R4                           ; 2+6=8
 5794 00000810 6241                   M           MOV.W   @R4,R2                          ;
 5795 00000812 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 5796 00000814 4800                   M           SHLL    R8                              ; ADR*2
 5797 00000816 228B                   M           OR      R8,R2                           ;
 5798 00000818 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 5799                                 M   
 5800                                 M   ;       *** OFFSET SET ***
 5801 0000081A D110                   M           MOV.L   #4,R1                   ; ﾒﾓﾘのところ
 5802 0000081C 341C                   M           ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 5803 0000081E D010                   M           MOV.L   #_SEQ_MOVCMD_R1RD_TBL,R0        ;
 5804 00000820 4900                   M           SHLL    R9                              ; OFFSET*2
 5805 00000822 309C                   M           ADD     R9,R0                           ;
 5806 00000824 6001                   M           MOV.W   @R0,R0                          ;
 5807 00000826 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 5808                                 M   
 5809                                 M   ;       *** OFFSET SET ***
 5810 00000828 D10E                   M           MOV.L   #8,R1                   ; ﾒﾓﾘのところ
 5811 0000082A 341C                   M           ADD     R1,R4                           ; 12+4=16  MOV.B R1,@(R0,R*)の命令 LOAD
 5812 0000082C D00E                   M           MOV.L   #_SEQ_MOVCMD_R1WR_TBL,R0        ;
 5813 0000082E 309C                   M           ADD     R9,R0                           ;
 5814 00000830 6001                   M           MOV.W   @R0,R0                          ;
 5815 00000832 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 5816                                 M   
 5817 00000834 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 5818                                 M           M_BRA   _JMP_EX00007                    ;
 5819 00000836 A01A                   M           BRA     _JMP_EX00007
 5820 00000838 0009                   M           NOP
 5821                                 M   ;
 5822                                 M   ***** BEGIN-POOL *****
 5823 0000083A 0000                   M   DATA FOR SOURCE-LINE 1072
 5824 0000083C 0000007F               M   DATA FOR SOURCE-LINE 1072
 5825 00000840 00000000               M   DATA FOR SOURCE-LINE 1072
 5826 00000844 00000000               M   DATA FOR SOURCE-LINE 1072
 5827 00000848 00000000               M   DATA FOR SOURCE-LINE 1072
 5828 0000084C FFFFFF00               M   DATA FOR SOURCE-LINE 1072
 5829 00000850 00000002               M   DATA FOR SOURCE-LINE 1072,1072
 5830 00000854 00000000               M   DATA FOR SOURCE-LINE 1072
 5831 00000858 00000000               M   DATA FOR SOURCE-LINE 1072
 5832 0000085C 00000004               M   DATA FOR SOURCE-LINE 1072,1072
 5833 00000860 00000000               M   DATA FOR SOURCE-LINE 1072
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    36
PROGRAM NAME =

 5834 00000864 00000008               M   DATA FOR SOURCE-LINE 1072
 5835 00000868 00000000               M   DATA FOR SOURCE-LINE 1072
 5836                                 M   ***** END-POOL *****
 5837 0000086C                        M   _JMP_C8000007:
 5838 0000086C 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 5839                                 M   
 5840 0000086E                        M   _JMP_EX00007:
 5841                            1073     
 5842                            1074             SUB_END
 5843                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 5844 0000086E 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 5845                            1075             M_RTS
 5846 00000870 000B                   M           RTS                             ;RTSの後ろの
 5847 00000872 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 5848                            1076     
 5849                            1077     
 5850                            1078     ;;;;;   消すのもったいないので動いたら削除する
 5851                            1079     ;;;;;_SET_CHG:                                  ; 00001110B     E
 5852                                     ***** BEGIN-POOL *****
 5853 00000874 FF00                       DATA FOR SOURCE-LINE 1072
 5854                                     ***** END-POOL *****
 5855 00000876 D116              1080             MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 5856 00000878 3813              1081             CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 5857 0000087A 893F              1082             BT      _SET_C80                        ; IF ADR >= 127 THEN JUMP
 5858                            1083     ;
 5859 0000087C D015              1084             MOV.L   #(_SET_CODE_END-_SET_CODE),R0   ; 転送 BYTE長
 5860 0000087E D316              1085             MOV.L   #_SET_CODE,R3                   ; Read CODE MOVE        (12 BYTE)
 5861                            1086     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 5862 00000880 64D3              1087             MOV     R13,R4                          ; SEQ ADR. KEEP
 5863                            1088     
 5864                            1089             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 5865 00000882 D116                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 5866 00000884 410B                   M           JSR     @R1                     ;
 5867 00000886 0009                   M           NOP                                     ;
 5868                            1090                                                     ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 5869                            1091     ;       *** BIT SET ***
 5870 00000888 D115              1092             MOV.L   #D'2,R1                         ; ﾒﾓﾘのところ
 5871 0000088A 341C              1093             ADD     R1,R4                           ; +2
 5872 0000088C D115              1094             MOV.L   #_SEQ_BBIT_CHG_TBL,R1           ; ﾒﾓﾘのところ +0
 5873 0000088E 4A00              1095             SHLL    R10                             ; *2
 5874 00000890 31AC              1096             ADD     R10,R1                          ;
 5875 00000892 6111              1097             MOV.W   @R1,R1                          ; BIT LOAD
 5876 00000894 6241              1098             MOV.W   @R4,R2                          ; ﾒﾓﾘのところの命令LOAD
 5877 00000896 D014              1099             MOV.L   #H'FFFFFF00,R0                  ;
 5878 00000898 2209              1100             AND     R0,R2                           ; BITﾃﾞｰﾀのところをｸﾘｱ
 5879 0000089A 221B              1101             OR      R1,R2                           ;
 5880 0000089C 2421              1102             MOV.W   R2,@R4                          ; BIT SET
 5881                            1103     
 5882                            1104     ;       *** ADR SET ***
 5883 0000089E D113              1105             MOV.L   #D'6,R1                         ; ﾒﾓﾘのところ
 5884 000008A0 341C              1106             ADD     R1,R4                           ; 2+6=8
 5885 000008A2 6241              1107             MOV.W   @R4,R2                          ;
 5886 000008A4 2209              1108             AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 5887 000008A6 4800              1109             SHLL    R8                              ; ADR*2
 5888 000008A8 228B              1110             OR      R8,R2                           ;
 5889 000008AA 2421              1111             MOV.W   R2,@R4                          ; RAM ADR SET
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    37
PROGRAM NAME =

 5890                            1112     
 5891                            1113     ;       *** OFFSET SET ***
 5892 000008AC D110              1114             MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 5893 000008AE 341C              1115             ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 5894 000008B0 D010              1116             MOV.L   #_SEQ_MOVCMD_R1RD_TBL,R0        ;
 5895 000008B2 4900              1117             SHLL    R9                              ; OFFSET*2
 5896 000008B4 309C              1118             ADD     R9,R0                           ;
 5897 000008B6 6001              1119             MOV.W   @R0,R0                          ;
 5898 000008B8 2401              1120             MOV.W   R0,@R4                          ; 命令置換え
 5899                            1121     
 5900                            1122     ;       *** OFFSET SET ***
 5901 000008BA D10D              1123             MOV.L   #D'4,R1                         ; ﾒﾓﾘのところ
 5902 000008BC 341C              1124             ADD     R1,R4                           ; 12+4=16  MOV.B R1,@(R0,R*)の命令 LOAD
 5903 000008BE D00E              1125             MOV.L   #_SEQ_MOVCMD_R1WR_TBL,R0        ;
 5904 000008C0 309C              1126             ADD     R9,R0                           ;
 5905 000008C2 6001              1127             MOV.W   @R0,R0                          ;
 5906 000008C4 2401              1128             MOV.W   R0,@R4                          ; 命令置換え
 5907                            1129     
 5908 000008C6 9001              1130             MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 5909                            1131             M_BRA   _SET_CHG_EX                     ;
 5910 000008C8 A019                   M           BRA     _SET_CHG_EX
 5911 000008CA 0009                   M           NOP
 5912                            1132     ;
 5913                                     ***** BEGIN-POOL *****
 5914 000008CC 0000                       DATA FOR SOURCE-LINE 1130
 5915 000008CE 0000                       ALIGNMENT CODE
 5916 000008D0 0000007F                   DATA FOR SOURCE-LINE 1080
 5917 000008D4 00000000                   DATA FOR SOURCE-LINE 1084
 5918 000008D8 00000000                   DATA FOR SOURCE-LINE 1085
 5919 000008DC 00000000                   DATA FOR SOURCE-LINE 1089
 5920 000008E0 00000002                   DATA FOR SOURCE-LINE 1092
 5921 000008E4 00000000                   DATA FOR SOURCE-LINE 1094
 5922 000008E8 FFFFFF00                   DATA FOR SOURCE-LINE 1099
 5923 000008EC 00000006                   DATA FOR SOURCE-LINE 1105
 5924 000008F0 00000004                   DATA FOR SOURCE-LINE 1114,1123
 5925 000008F4 00000000                   DATA FOR SOURCE-LINE 1116
 5926 000008F8 00000000                   DATA FOR SOURCE-LINE 1125
 5927                                     ***** END-POOL *****
 5928 000008FC                   1133     _SET_C80:
 5929 000008FC 9002              1134             MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 5930                            1135     
 5931 000008FE                   1136     _SET_CHG_EX:
 5932                            1137     
 5933                            1138             SUB_END
 5934                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 5935 000008FE 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 5936                            1139             M_RTS
 5937 00000900 000B                   M           RTS                             ;RTSの後ろの
 5938 00000902 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 5939                            1140     
 5940                            1141     
 5941                            1142     ;       *******************************************
 5942                            1143     ;       *****   BIT RESET CODE CHANGE ROUTINE   ***
 5943                            1144     ;       *******************************************
 5944                                     ***** BEGIN-POOL *****
 5945 00000904 FF00                       DATA FOR SOURCE-LINE 1134
 5946                                     ***** END-POOL *****
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    38
PROGRAM NAME =

 5947 00000906                   1145     _RST_CHG:                                       ; 00001111B     F
 5948                            1146             SUB_START
 5949 00000906 4F22                   M           STS.L   PR,@-R15                ;[必要]
 5950                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 5951                            1147     
 5952                            1148             _SEQ_SET_RST_CMD        _RST_CODE,_RST_CODE_END,BIT_AREA=2,ADR_AREA=8,COD_AREA1=4,
                                          COD_AREA2=4,COD_AREA3=4
 5953                                 M   
 5954 00000908 D118                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 5955 0000090A 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 5956 0000090C 8946                   M           BT      _JMP_C8000008                   ; IF ADR >= 127 THEN JUMP
 5957                                 M   ;
 5958 0000090E D018                   M           MOV.L   #(_RST_CODE_END-_RST_CODE),R0           ; 転送 BYTE長
 5959 00000910 D318                   M           MOV.L   #_RST_CODE,R3                   ; Read CODE MOVE        (12 BYTE)
 5960                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 5961 00000912 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 5962                                 M   
 5963                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 5964 00000914 D118                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 5965 00000916 410B                   M           JSR     @R1                     ;
 5966 00000918 0009                   M           NOP                                     ;
 5967                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 5968                                 M   
 5969 0000091A D018                   M           MOV.L   #H'FFFFFF00,R0                  ;
 5970                                 M   
 5971                                 M   ;       *** BIT SET ***
 5972 0000091C D118                   M           MOV.L   #2,R1                   ; ﾒﾓﾘのところ
 5973 0000091E 341C                   M           ADD     R1,R4                           ; +2
 5974 00000920 D118                   M           MOV.L   #_SEQ_BBIT_CHG_TBL,R1           ; ﾒﾓﾘのところ +0
 5975 00000922 4A00                   M           SHLL    R10                             ; *2
 5976 00000924 31AC                   M           ADD     R10,R1                          ;
 5977 00000926 6111                   M           MOV.W   @R1,R1                          ; BIT LOAD
 5978 00000928 6241                   M           MOV.W   @R4,R2                          ; ﾒﾓﾘのところの命令LOAD
 5979 0000092A 2209                   M           AND     R0,R2                           ; BITﾃﾞｰﾀのところをｸﾘｱ
 5980 0000092C 221B                   M           OR      R1,R2                           ;
 5981 0000092E 2421                   M           MOV.W   R2,@R4                          ; BIT SET
 5982                                 M   
 5983                                 M   ;       *** SHLL命令はBIT7以下ならNOPに置換える ***
 5984 00000930 D215                   M           MOV.L   #_NOP_SHLL8_R3_TBL0,R2          ;
 5985 00000932 32AC                   M           ADD     R10,R2                          ;
 5986 00000934 6221                   M           MOV.W   @R2,R2                          ; NOP or SHLL8命令LOAD
 5987 00000936 D115                   M           MOV.L   #4,R1                           ; ﾒﾓﾘのところ
 5988 00000938 341C                   M           ADD     R1,R4                           ; 8+2=10  SWAP.Bの命令 LOAD
 5989 0000093A 2421                   M           MOV.W   R2,@R4                          ; NOP or SWAP命令 WRITE
 5990                                 M   
 5991                                 M   ;       *** ADR SET ***
 5992 0000093C D114                   M           MOV.L   #8,R1                   ; ﾒﾓﾘのところ
 5993 0000093E 341C                   M           ADD     R1,R4                           ; 2+6=8
 5994 00000940 6241                   M           MOV.W   @R4,R2                          ;
 5995 00000942 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 5996 00000944 4800                   M           SHLL    R8                              ; ADR*2
 5997 00000946 228B                   M           OR      R8,R2                           ;
 5998 00000948 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 5999                                 M   
 6000                                 M   ;       *** OFFSET SET ***
 6001 0000094A D110                   M           MOV.L   #4,R1                   ; ﾒﾓﾘのところ
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    39
PROGRAM NAME =

 6002 0000094C 341C                   M           ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 6003 0000094E D011                   M           MOV.L   #_SEQ_MOVCMD_R1RD_TBL,R0        ;
 6004 00000950 4900                   M           SHLL    R9                              ; OFFSET*2
 6005 00000952 309C                   M           ADD     R9,R0                           ;
 6006 00000954 6001                   M           MOV.W   @R0,R0                          ;
 6007 00000956 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 6008                                 M   
 6009                                 M   ;       *** OFFSET SET ***
 6010 00000958 D10C                   M           MOV.L   #4,R1                   ; ﾒﾓﾘのところ
 6011 0000095A 341C                   M           ADD     R1,R4                           ; 12+4=16  MOV.B R1,@(R0,R*)の命令 LOAD
 6012 0000095C D00E                   M           MOV.L   #_SEQ_MOVCMD_R1WR_TBL,R0        ;
 6013 0000095E 309C                   M           ADD     R9,R0                           ;
 6014 00000960 6001                   M           MOV.W   @R0,R0                          ;
 6015 00000962 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 6016                                 M   
 6017 00000964 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 6018                                 M           M_BRA   _JMP_EX00008                    ;
 6019 00000966 A01A                   M           BRA     _JMP_EX00008
 6020 00000968 0009                   M           NOP
 6021                                 M   ;
 6022                                 M   ***** BEGIN-POOL *****
 6023 0000096A 0000                   M   DATA FOR SOURCE-LINE 1148
 6024 0000096C 0000007F               M   DATA FOR SOURCE-LINE 1148
 6025 00000970 00000000               M   DATA FOR SOURCE-LINE 1148
 6026 00000974 00000000               M   DATA FOR SOURCE-LINE 1148
 6027 00000978 00000000               M   DATA FOR SOURCE-LINE 1148
 6028 0000097C FFFFFF00               M   DATA FOR SOURCE-LINE 1148
 6029 00000980 00000002               M   DATA FOR SOURCE-LINE 1148
 6030 00000984 00000000               M   DATA FOR SOURCE-LINE 1148
 6031 00000988 00000000               M   DATA FOR SOURCE-LINE 1148
 6032 0000098C 00000004               M   DATA FOR SOURCE-LINE 1148,1148,1148
 6033 00000990 00000008               M   DATA FOR SOURCE-LINE 1148
 6034 00000994 00000000               M   DATA FOR SOURCE-LINE 1148
 6035 00000998 00000000               M   DATA FOR SOURCE-LINE 1148
 6036                                 M   ***** END-POOL *****
 6037 0000099C                        M   _JMP_C8000008:
 6038 0000099C 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 6039                                 M   
 6040 0000099E                        M   _JMP_EX00008:
 6041                            1149     
 6042                            1150             SUB_END
 6043                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 6044 0000099E 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 6045                            1151             M_RTS
 6046 000009A0 000B                   M           RTS                             ;RTSの後ろの
 6047 000009A2 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 6048                            1152     
 6049                            1153     ;       *******************************************
 6050                            1154     ;       *****   WTMR CODE CHANGE ROUTINE        ***
 6051                            1155     ;       *******************************************
 6052                                     ***** BEGIN-POOL *****
 6053 000009A4 FF00                       DATA FOR SOURCE-LINE 1148
 6054                                     ***** END-POOL *****
 6055 000009A6                   1156     _WTMR_CHG:                      ; 00010000B     10
 6056                            1157             SUB_START
 6057 000009A6 4F22                   M           STS.L   PR,@-R15                ;[必要]
 6058                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    40
PROGRAM NAME =

 6059                            1158     
 6060                            1159             _SEQ_WTMR_WCTR_CMD      _WTMR_CODE,_WTMR_CODE_END,ADR_AREA=0
 6061                                 M   
 6062 000009A8 D109                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 6063 000009AA 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 6064 000009AC 891C                   M           BT      _JMP_C8000009                   ; IF ADR >= 127 THEN JUMP
 6065                                 M   ;
 6066 000009AE D009                   M           MOV.L   #(_WTMR_CODE_END-_WTMR_CODE),R0         ; 転送 BYTE長
 6067 000009B0 D309                   M           MOV.L   #_WTMR_CODE,R3                  ; Read CODE MOVE        (12 BYTE)
 6068                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 6069 000009B2 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 6070                                 M   
 6071                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 6072 000009B4 D109                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 6073 000009B6 410B                   M           JSR     @R1                     ;
 6074 000009B8 0009                   M           NOP                                     ;
 6075                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 6076                                 M   
 6077 000009BA D009                   M           MOV.L   #H'FFFFFF00,R0                  ;
 6078                                 M   ;       *** ADR SET ***
 6079 000009BC D109                   M           MOV.L   #0,R1                   ; ﾒﾓﾘのところ
 6080 000009BE 341C                   M           ADD     R1,R4                           ; +0
 6081 000009C0 6241                   M           MOV.W   @R4,R2                          ;
 6082 000009C2 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 6083                                 M   ;;;;;   SHLL    R8                              ; ADR*2
 6084 000009C4 228B                   M           OR      R8,R2                           ;
 6085 000009C6 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 6086                                 M   
 6087 000009C8 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 6088                                 M           M_BRA   _JMP_EX00009                    ;
 6089 000009CA A00E                   M           BRA     _JMP_EX00009
 6090 000009CC 0009                   M           NOP
 6091                                 M   ;
 6092                                 M   ***** BEGIN-POOL *****
 6093 000009CE 0000                   M   DATA FOR SOURCE-LINE 1159
 6094 000009D0 0000007F               M   DATA FOR SOURCE-LINE 1159
 6095 000009D4 00000000               M   DATA FOR SOURCE-LINE 1159
 6096 000009D8 00000000               M   DATA FOR SOURCE-LINE 1159
 6097 000009DC 00000000               M   DATA FOR SOURCE-LINE 1159
 6098 000009E0 FFFFFF00               M   DATA FOR SOURCE-LINE 1159
 6099 000009E4 00000000               M   DATA FOR SOURCE-LINE 1159
 6100                                 M   ***** END-POOL *****
 6101 000009E8                        M   _JMP_C8000009:
 6102 000009E8 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 6103                                 M   
 6104 000009EA                        M   _JMP_EX00009:
 6105                            1160     
 6106                            1161             SUB_END
 6107                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 6108 000009EA 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 6109                            1162             M_RTS
 6110 000009EC 000B                   M           RTS                             ;RTSの後ろの
 6111 000009EE 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 6112                            1163     
 6113                            1164     
 6114                            1165     
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    41
PROGRAM NAME =

 6115                            1166     ;       *******************************************
 6116                            1167     ;       *****   WCTR CODE CHANGE ROUTINE        ***
 6117                            1168     ;       *******************************************
 6118                                     ***** BEGIN-POOL *****
 6119 000009F0 FF00                       DATA FOR SOURCE-LINE 1159
 6120                                     ***** END-POOL *****
 6121 000009F2                   1169     _WCTR_CHG:                      ; 00010010B     12
 6122                            1170             SUB_START
 6123 000009F2 4F22                   M           STS.L   PR,@-R15                ;[必要]
 6124                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 6125                            1171     
 6126                            1172             _SEQ_WTMR_WCTR_CMD      _WCTR_CODE,_WCTR_CODE_END,ADR_AREA=0
 6127                                 M   
 6128 000009F4 D109                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 6129 000009F6 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 6130 000009F8 891C                   M           BT      _JMP_C8000010                   ; IF ADR >= 127 THEN JUMP
 6131                                 M   ;
 6132 000009FA D009                   M           MOV.L   #(_WCTR_CODE_END-_WCTR_CODE),R0         ; 転送 BYTE長
 6133 000009FC D309                   M           MOV.L   #_WCTR_CODE,R3                  ; Read CODE MOVE        (12 BYTE)
 6134                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 6135 000009FE 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 6136                                 M   
 6137                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 6138 00000A00 D109                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 6139 00000A02 410B                   M           JSR     @R1                     ;
 6140 00000A04 0009                   M           NOP                                     ;
 6141                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 6142                                 M   
 6143 00000A06 D009                   M           MOV.L   #H'FFFFFF00,R0                  ;
 6144                                 M   ;       *** ADR SET ***
 6145 00000A08 D109                   M           MOV.L   #0,R1                   ; ﾒﾓﾘのところ
 6146 00000A0A 341C                   M           ADD     R1,R4                           ; +0
 6147 00000A0C 6241                   M           MOV.W   @R4,R2                          ;
 6148 00000A0E 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 6149                                 M   ;;;;;   SHLL    R8                              ; ADR*2
 6150 00000A10 228B                   M           OR      R8,R2                           ;
 6151 00000A12 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 6152                                 M   
 6153 00000A14 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 6154                                 M           M_BRA   _JMP_EX00010                    ;
 6155 00000A16 A00E                   M           BRA     _JMP_EX00010
 6156 00000A18 0009                   M           NOP
 6157                                 M   ;
 6158                                 M   ***** BEGIN-POOL *****
 6159 00000A1A 0000                   M   DATA FOR SOURCE-LINE 1172
 6160 00000A1C 0000007F               M   DATA FOR SOURCE-LINE 1172
 6161 00000A20 00000000               M   DATA FOR SOURCE-LINE 1172
 6162 00000A24 00000000               M   DATA FOR SOURCE-LINE 1172
 6163 00000A28 00000000               M   DATA FOR SOURCE-LINE 1172
 6164 00000A2C FFFFFF00               M   DATA FOR SOURCE-LINE 1172
 6165 00000A30 00000000               M   DATA FOR SOURCE-LINE 1172
 6166                                 M   ***** END-POOL *****
 6167 00000A34                        M   _JMP_C8000010:
 6168 00000A34 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 6169                                 M   
 6170 00000A36                        M   _JMP_EX00010:
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    42
PROGRAM NAME =

 6171                            1173     
 6172                            1174             SUB_END
 6173                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 6174 00000A36 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 6175                            1175             M_RTS
 6176 00000A38 000B                   M           RTS                             ;RTSの後ろの
 6177 00000A3A 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 6178                            1176     
 6179                            1177     ;       *******************************************
 6180                            1178     ;       *****   WSR CODE CHANGE ROUTINE         ***
 6181                            1179     ;       *******************************************
 6182                                     ***** BEGIN-POOL *****
 6183 00000A3C FF00                       DATA FOR SOURCE-LINE 1172
 6184                                     ***** END-POOL *****
 6185 00000A3E                   1180     _WSR_CHG:                       ; 00010100B     14
 6186                            1181             SUB_START
 6187 00000A3E 4F22                   M           STS.L   PR,@-R15                ;[必要]
 6188                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 6189                            1182     
 6190 00000A40 D00B              1183             MOV.L   #(_WSR_CODE_END-_WSR_CODE),R0   ; 転送 BYTE長
 6191 00000A42 D30C              1184             MOV.L   #_WSR_CODE,R3                   ; Read CODE MOVE        (12 BYTE)
 6192                            1185     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 6193 00000A44 64D3              1186             MOV     R13,R4                          ; SEQ ADR. KEEP
 6194                            1187     
 6195                            1188             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 6196 00000A46 D10C                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 6197 00000A48 410B                   M           JSR     @R1                     ;
 6198 00000A4A 0009                   M           NOP                                     ;
 6199                            1189                                                     ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 6200                            1190     
 6201 00000A4C D00B              1191             MOV.L   #H'FFFFFF00,R0                  ;
 6202                            1192     ;       *** DATA_LO SET ***
 6203 00000A4E D10C              1193             MOV.L   #0,R1                           ; ﾒﾓﾘのところ
 6204 00000A50 341C              1194             ADD     R1,R4                           ; +0
 6205 00000A52 6241              1195             MOV.W   @R4,R2                          ;
 6206 00000A54 2209              1196             AND     R0,R2                           ; ﾃﾞｰﾀのところをｸﾘｱ
 6207 00000A56 228B              1197             OR      R8,R2                           ; 下位ﾃﾞｰﾀ
 6208 00000A58 2421              1198             MOV.W   R2,@R4                          ; RAM ADR SET
 6209                            1199     
 6210                            1200     ;       *** DATA_HI SET ***
 6211 00000A5A D10A              1201             MOV.L   #4,R1                           ; ﾒﾓﾘのところ
 6212 00000A5C 341C              1202             ADD     R1,R4                           ; 0+4=4
 6213 00000A5E 6241              1203             MOV.W   @R4,R2                          ;
 6214 00000A60 2209              1204             AND     R0,R2                           ; ﾃﾞｰﾀのところをｸﾘｱ
 6215 00000A62 229B              1205             OR      R9,R2                           ; 上位ﾃﾞｰﾀ
 6216 00000A64 2421              1206             MOV.W   R2,@R4                          ; RAM ADR SET
 6217                            1207     
 6218 00000A66 9002              1208             MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 6219                            1209     
 6220                            1210             SUB_END
 6221                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 6222 00000A68 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 6223                            1211             M_RTS
 6224 00000A6A 000B                   M           RTS                             ;RTSの後ろの
 6225 00000A6C 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 6226                            1212     
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    43
PROGRAM NAME =

 6227                            1213     
 6228                            1214     
 6229                            1215     ;       *******************************************
 6230                            1216     ;       *****   Clear CODE CHANGE ROUTINE       ***
 6231                            1217     ;       *******************************************
 6232                                     ***** BEGIN-POOL *****
 6233 00000A6E 0000                       DATA FOR SOURCE-LINE 1208
 6234 00000A70 00000000                   DATA FOR SOURCE-LINE 1183
 6235 00000A74 00000000                   DATA FOR SOURCE-LINE 1184
 6236 00000A78 00000000                   DATA FOR SOURCE-LINE 1188
 6237 00000A7C FFFFFF00                   DATA FOR SOURCE-LINE 1191
 6238 00000A80 00000000                   DATA FOR SOURCE-LINE 1193
 6239 00000A84 00000004                   DATA FOR SOURCE-LINE 1201
 6240                                     ***** END-POOL *****
 6241 00000A88                   1218     _CLR_CHG:                                       ; 00010110B     16
 6242                            1219             SUB_START
 6243 00000A88 4F22                   M           STS.L   PR,@-R15                ;[必要]
 6244                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 6245                            1220     
 6246                            1221             _SEQ_STW_CLR_CMD        _CLR_CODE,_CLR_CODE_END,ADR_AREA=0,COD_AREA1=4
 6247                                 M   
 6248 00000A8A D10E                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 6249 00000A8C 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 6250 00000A8E 8929                   M           BT      _JMP_C8000011                   ; IF ADR >= 127 THEN JUMP
 6251                                 M   ;
 6252 00000A90 D00D                   M           MOV.L   #(_CLR_CODE_END-_CLR_CODE),R0           ; 転送 BYTE長
 6253 00000A92 D30E                   M           MOV.L   #_CLR_CODE,R3                   ; Read CODE MOVE        (12 BYTE)
 6254                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 6255 00000A94 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 6256                                 M   
 6257                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 6258 00000A96 D10E                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 6259 00000A98 410B                   M           JSR     @R1                     ;
 6260 00000A9A 0009                   M           NOP                                     ;
 6261                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 6262 00000A9C D00D                   M           MOV.L   #H'FFFFFF00,R0                  ;
 6263                                 M   ;       *** ADR SET ***
 6264 00000A9E D10E                   M           MOV.L   #0,R1                   ; ﾒﾓﾘのところ
 6265 00000AA0 341C                   M           ADD     R1,R4                           ; +0
 6266 00000AA2 6241                   M           MOV.W   @R4,R2                          ;
 6267 00000AA4 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 6268 00000AA6 4800                   M           SHLL    R8                              ; ADR*2
 6269 00000AA8 228B                   M           OR      R8,R2                           ;
 6270 00000AAA 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 6271                                 M   
 6272                                 M   ;       *** OFFSET SET ***
 6273 00000AAC D10B                   M           MOV.L   #4,R1                   ; ﾒﾓﾘのところ
 6274 00000AAE 341C                   M           ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 6275 00000AB0 D00B                   M           MOV.L   #_SEQ_ADDCMD_R0_TBL,R0  ;
 6276 00000AB2 4900                   M           SHLL    R9                              ; OFFSET*2
 6277 00000AB4 309C                   M           ADD     R9,R0                           ;
 6278 00000AB6 6001                   M           MOV.W   @R0,R0                          ;
 6279 00000AB8 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 6280                                 M   
 6281 00000ABA 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 6282                                 M           M_BRA   _JMP_EX00011                    ;
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    44
PROGRAM NAME =

 6283 00000ABC A013                   M           BRA     _JMP_EX00011
 6284 00000ABE 0009                   M           NOP
 6285                                 M   ;
 6286                                 M   ***** BEGIN-POOL *****
 6287 00000AC0 0000                   M   DATA FOR SOURCE-LINE 1221
 6288 00000AC2 0000                   M   ALIGNMENT CODE
 6289 00000AC4 0000007F               M   DATA FOR SOURCE-LINE 1221
 6290 00000AC8 00000000               M   DATA FOR SOURCE-LINE 1221
 6291 00000ACC 00000000               M   DATA FOR SOURCE-LINE 1221
 6292 00000AD0 00000000               M   DATA FOR SOURCE-LINE 1221
 6293 00000AD4 FFFFFF00               M   DATA FOR SOURCE-LINE 1221
 6294 00000AD8 00000000               M   DATA FOR SOURCE-LINE 1221
 6295 00000ADC 00000004               M   DATA FOR SOURCE-LINE 1221
 6296 00000AE0 00000000               M   DATA FOR SOURCE-LINE 1221
 6297                                 M   ***** END-POOL *****
 6298 00000AE4                        M   _JMP_C8000011:
 6299 00000AE4 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 6300                                 M   
 6301 00000AE6                        M   _JMP_EX00011:
 6302                            1222     
 6303                            1223             SUB_END
 6304                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 6305 00000AE6 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 6306                            1224             M_RTS
 6307 00000AE8 000B                   M           RTS                             ;RTSの後ろの
 6308 00000AEA 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 6309                            1225     
 6310                                     ***** BEGIN-POOL *****
 6311 00000AEC FF00                       DATA FOR SOURCE-LINE 1221
 6312                                     ***** END-POOL *****
 6313 00000AEE                   1226     _DSET_CHG:                      ; 00011010B     1A
 6314                            1227             SUB_START
 6315 00000AEE 4F22                   M           STS.L   PR,@-R15                ;[必要]
 6316                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 6317                            1228     
 6318 00000AF0 D00B              1229             MOV.L   #(_DS_CODE_END-_DS_CODE),R0     ; 転送 BYTE長
 6319 00000AF2 D30C              1230             MOV.L   #_DS_CODE,R3                    ; Read CODE MOVE        (12 BYTE)
 6320                            1231     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 6321 00000AF4 64D3              1232             MOV     R13,R4                          ; SEQ ADR. KEEP
 6322                            1233     
 6323                            1234             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 6324 00000AF6 D10C                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 6325 00000AF8 410B                   M           JSR     @R1                     ;
 6326 00000AFA 0009                   M           NOP                                     ;
 6327                            1235                                                     ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 6328                            1236     
 6329 00000AFC D00B              1237             MOV.L   #H'FFFFFF00,R0                  ;
 6330                            1238     ;       *** DATA_LO SET ***
 6331 00000AFE D10C              1239             MOV.L   #0,R1                           ; ﾒﾓﾘのところ
 6332 00000B00 341C              1240             ADD     R1,R4                           ; +0
 6333 00000B02 6241              1241             MOV.W   @R4,R2                          ;
 6334 00000B04 2209              1242             AND     R0,R2                           ; ﾃﾞｰﾀのところをｸﾘｱ
 6335 00000B06 228B              1243             OR      R8,R2                           ; 下位ﾃﾞｰﾀ
 6336 00000B08 2421              1244             MOV.W   R2,@R4                          ; RAM ADR SET
 6337                            1245     
 6338                            1246     ;       *** DATA_HI SET ***
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    45
PROGRAM NAME =

 6339 00000B0A D10A              1247             MOV.L   #4,R1                           ; ﾒﾓﾘのところ
 6340 00000B0C 341C              1248             ADD     R1,R4                           ; 0+4=4
 6341 00000B0E 6241              1249             MOV.W   @R4,R2                          ;
 6342 00000B10 2209              1250             AND     R0,R2                           ; ﾃﾞｰﾀのところをｸﾘｱ
 6343 00000B12 229B              1251             OR      R9,R2                           ; 上位ﾃﾞｰﾀ
 6344 00000B14 2421              1252             MOV.W   R2,@R4                          ; RAM ADR SET
 6345                            1253     
 6346 00000B16 9002              1254             MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 6347                            1255     ;
 6348                            1256             SUB_END
 6349                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 6350 00000B18 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 6351                            1257             M_RTS
 6352 00000B1A 000B                   M           RTS                             ;RTSの後ろの
 6353 00000B1C 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 6354                            1258     
 6355                            1259     
 6356                            1260     ;       *******************************************
 6357                            1261     ;       *****   ARG And MRG CODE CHANGE ROUTINE ***
 6358                            1262     ;       *******************************************
 6359                                     ***** BEGIN-POOL *****
 6360 00000B1E 0000                       DATA FOR SOURCE-LINE 1254
 6361 00000B20 00000000                   DATA FOR SOURCE-LINE 1229
 6362 00000B24 00000000                   DATA FOR SOURCE-LINE 1230
 6363 00000B28 00000000                   DATA FOR SOURCE-LINE 1234
 6364 00000B2C FFFFFF00                   DATA FOR SOURCE-LINE 1237
 6365 00000B30 00000000                   DATA FOR SOURCE-LINE 1239
 6366 00000B34 00000004                   DATA FOR SOURCE-LINE 1247
 6367                                     ***** END-POOL *****
 6368 00000B38                   1263     _AMRG_CHG:                      ; 00100000B     20
 6369                            1264             SUB_START
 6370 00000B38 4F22                   M           STS.L   PR,@-R15                ;[必要]
 6371                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 6372                            1265     
 6373 00000B3A D004              1266             MOV.L   #(_AMRG_CODE_END-_AMRG_CODE),R0 ; 転送 BYTE長
 6374 00000B3C D304              1267             MOV.L   #_AMRG_CODE,R3                  ; Read CODE MOVE        (12 BYTE)
 6375                            1268     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 6376 00000B3E 64D3              1269             MOV     R13,R4                          ; SEQ ADR. KEEP
 6377                            1270     
 6378                            1271             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 6379 00000B40 D104                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 6380 00000B42 410B                   M           JSR     @R1                     ;
 6381 00000B44 0009                   M           NOP                                     ;
 6382                            1272     
 6383                            1273             SUB_END
 6384                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 6385 00000B46 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 6386                            1274             M_RTS
 6387 00000B48 000B                   M           RTS                             ;RTSの後ろの
 6388 00000B4A 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 6389                            1275     
 6390                            1276     ;       *******************************************
 6391                            1277     ;       *****   ARG Or MRG CODE CHANGE ROUTINE  ***
 6392                            1278     ;       *******************************************
 6393                                     ***** BEGIN-POOL *****
 6394 00000B4C 00000000                   DATA FOR SOURCE-LINE 1266
 6395 00000B50 00000000                   DATA FOR SOURCE-LINE 1267
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    46
PROGRAM NAME =

 6396 00000B54 00000000                   DATA FOR SOURCE-LINE 1271
 6397                                     ***** END-POOL *****
 6398 00000B58                   1279     _OMRG_CHG:                      ; 00100010B     22
 6399                            1280             SUB_START
 6400 00000B58 4F22                   M           STS.L   PR,@-R15                ;[必要]
 6401                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 6402                            1281     
 6403 00000B5A D004              1282             MOV.L   #(_OMRG_CODE_END-_OMRG_CODE),R0 ; 転送 BYTE長
 6404 00000B5C D304              1283             MOV.L   #_OMRG_CODE,R3                  ; Read CODE MOVE        (12 BYTE)
 6405                            1284     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 6406 00000B5E 64D3              1285             MOV     R13,R4                          ; SEQ ADR. KEEP
 6407                            1286     
 6408                            1287             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 6409 00000B60 D104                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 6410 00000B62 410B                   M           JSR     @R1                     ;
 6411 00000B64 0009                   M           NOP                                     ;
 6412                            1288     
 6413                            1289             SUB_END
 6414                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 6415 00000B66 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 6416                            1290             M_RTS
 6417 00000B68 000B                   M           RTS                             ;RTSの後ろの
 6418 00000B6A 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 6419                            1291     
 6420                            1292     
 6421                            1293     ;       *******************************************
 6422                            1294     ;       *****   Write NRG CODE CHANGE ROUTINE   ***
 6423                            1295     ;       *******************************************
 6424                                     ***** BEGIN-POOL *****
 6425 00000B6C 00000000                   DATA FOR SOURCE-LINE 1282
 6426 00000B70 00000000                   DATA FOR SOURCE-LINE 1283
 6427 00000B74 00000000                   DATA FOR SOURCE-LINE 1287
 6428                                     ***** END-POOL *****
 6429 00000B78                   1296     _WNRG_CHG:                      ; 00100100B     24
 6430                            1297             SUB_START
 6431 00000B78 4F22                   M           STS.L   PR,@-R15                ;[必要]
 6432                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 6433                            1298     
 6434 00000B7A D004              1299             MOV.L   #(_WNRG_CODE_END-_WNRG_CODE),R0 ; 転送 BYTE長
 6435 00000B7C D304              1300             MOV.L   #_WNRG_CODE,R3                  ; Read CODE MOVE        (12 BYTE)
 6436                            1301     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 6437 00000B7E 64D3              1302             MOV     R13,R4                          ; SEQ ADR. KEEP
 6438                            1303     
 6439                            1304             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 6440 00000B80 D104                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 6441 00000B82 410B                   M           JSR     @R1                     ;
 6442 00000B84 0009                   M           NOP                                     ;
 6443                            1305     
 6444                            1306             SUB_END
 6445                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 6446 00000B86 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 6447                            1307             M_RTS
 6448 00000B88 000B                   M           RTS                             ;RTSの後ろの
 6449 00000B8A 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 6450                            1308     
 6451                            1309     ;       ***************************************************
 6452                            1310     ;       *****   Write Not NRG CODE CHANGE ROUTINE       ***
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    47
PROGRAM NAME =

 6453                            1311     ;       ***************************************************
 6454                                     ***** BEGIN-POOL *****
 6455 00000B8C 00000000                   DATA FOR SOURCE-LINE 1299
 6456 00000B90 00000000                   DATA FOR SOURCE-LINE 1300
 6457 00000B94 00000000                   DATA FOR SOURCE-LINE 1304
 6458                                     ***** END-POOL *****
 6459 00000B98                   1312     _WNNRG_CHG:                     ; 00100101B     25
 6460                            1313             SUB_START
 6461 00000B98 4F22                   M           STS.L   PR,@-R15                ;[必要]
 6462                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 6463                            1314     
 6464 00000B9A D004              1315             MOV.L   #(_WNNRG_CODE_END-_WNNRG_CODE),R0       ; 転送 BYTE長
 6465 00000B9C D304              1316             MOV.L   #_WNNRG_CODE,R3                         ; Read CODE MOVE        (12 BYTE)
 6466                            1317     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 6467 00000B9E 64D3              1318             MOV     R13,R4                          ; SEQ ADR. KEEP
 6468                            1319     
 6469                            1320             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1                  ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 6470 00000BA0 D104                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 6471 00000BA2 410B                   M           JSR     @R1                     ;
 6472 00000BA4 0009                   M           NOP                                     ;
 6473                            1321     
 6474                            1322             SUB_END
 6475                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 6476 00000BA6 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 6477                            1323             M_RTS
 6478 00000BA8 000B                   M           RTS                             ;RTSの後ろの
 6479 00000BAA 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 6480                            1324     
 6481                            1325     ;       ***************************************************
 6482                            1326     ;       *****   Program End CODE CHANGE ROUTINE         ***
 6483                            1327     ;       ***************************************************
 6484                                     ***** BEGIN-POOL *****
 6485 00000BAC 00000000                   DATA FOR SOURCE-LINE 1315
 6486 00000BB0 00000000                   DATA FOR SOURCE-LINE 1316
 6487 00000BB4 00000000                   DATA FOR SOURCE-LINE 1320
 6488                                     ***** END-POOL *****
 6489 00000BB8                   1328     _END_CHG:                       ; 00101010B     2A
 6490                            1329             SUB_START
 6491 00000BB8 4F22                   M           STS.L   PR,@-R15                ;[必要]
 6492                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 6493                            1330     
 6494 00000BBA D005              1331             MOV.L   #(_END_CODE_END-_END_CODE),R0   ; 転送 BYTE長
 6495 00000BBC D305              1332             MOV.L   #_END_CODE,R3                   ; Read CODE MOVE        (12 BYTE)
 6496                            1333     ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 6497 00000BBE 64D3              1334             MOV     R13,R4                          ; SEQ ADR. KEEP
 6498                            1335     
 6499                            1336             FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 6500 00000BC0 D105                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 6501 00000BC2 410B                   M           JSR     @R1                     ;
 6502 00000BC4 0009                   M           NOP                                     ;
 6503                            1337     
 6504 00000BC6 9002              1338             MOV.W   #_SQ_NML_END,R0                 ; END CODE SET
 6505                            1339     
 6506                            1340             SUB_END
 6507                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 6508 00000BC8 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 6509                            1341             M_RTS
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    48
PROGRAM NAME =

 6510 00000BCA 000B                   M           RTS                             ;RTSの後ろの
 6511 00000BCC 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 6512                            1342     
 6513                            1343     
 6514                            1344     ;       ***************************************************
 6515                            1345     ;       *****   CARD DATA LOAD CODE CHANGE ROUTINE      ***
 6516                            1346     ;       ***************************************************
 6517                                     ***** BEGIN-POOL *****
 6518 00000BCE 0055                       DATA FOR SOURCE-LINE 1338
 6519 00000BD0 00000000                   DATA FOR SOURCE-LINE 1331
 6520 00000BD4 00000000                   DATA FOR SOURCE-LINE 1332
 6521 00000BD8 00000000                   DATA FOR SOURCE-LINE 1336
 6522                                     ***** END-POOL *****
 6523 00000BDC                   1347     _LDW_CHG:                       ; 00110000B     30
 6524                            1348             SUB_START
 6525 00000BDC 4F22                   M           STS.L   PR,@-R15                ;[必要]
 6526                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 6527                            1349     
 6528                            1350             _SEQ_LDW_CMP_OPE_CMD    _LDW_CODE,_LDW_CODE_END,ADR_AREA=0,COD_AREA1=4
 6529                                 M   
 6530 00000BDE D10E                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 6531 00000BE0 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 6532 00000BE2 8929                   M           BT      _JMP_C8000012                   ; IF ADR >= 127 THEN JUMP
 6533                                 M   ;
 6534 00000BE4 D00D                   M           MOV.L   #(_LDW_CODE_END-_LDW_CODE),R0           ; 転送 BYTE長
 6535 00000BE6 D30E                   M           MOV.L   #_LDW_CODE,R3                   ; Read CODE MOVE        (12 BYTE)
 6536                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 6537 00000BE8 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 6538                                 M   
 6539                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 6540 00000BEA D10E                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 6541 00000BEC 410B                   M           JSR     @R1                     ;
 6542 00000BEE 0009                   M           NOP                                     ;
 6543                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 6544                                 M   
 6545 00000BF0 D00D                   M           MOV.L   #H'FFFFFF00,R0                  ;
 6546                                 M   ;       *** ADR SET ***
 6547 00000BF2 D10E                   M           MOV.L   #0,R1                   ; ﾒﾓﾘのところ
 6548 00000BF4 341C                   M           ADD     R1,R4                           ; +0
 6549 00000BF6 6241                   M           MOV.W   @R4,R2                          ;
 6550 00000BF8 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 6551 00000BFA 4800                   M           SHLL    R8                              ; ADR*2
 6552 00000BFC 228B                   M           OR      R8,R2                           ;
 6553 00000BFE 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 6554                                 M   
 6555                                 M   ;       *** OFFSET SET ***
 6556 00000C00 D10B                   M           MOV.L   #4,R1                   ; ﾒﾓﾘのところ
 6557 00000C02 341C                   M           ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 6558 00000C04 D00B                   M           MOV.L   #_SEQ_MOVCMD_R3RD_TBL,R0        ;
 6559 00000C06 4900                   M           SHLL    R9                              ; OFFSET*2
 6560 00000C08 309C                   M           ADD     R9,R0                           ;
 6561 00000C0A 6001                   M           MOV.W   @R0,R0                          ;
 6562 00000C0C 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 6563                                 M   
 6564 00000C0E 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 6565                                 M           M_BRA   _JMP_EX00012                    ;
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    49
PROGRAM NAME =

 6566 00000C10 A013                   M           BRA     _JMP_EX00012
 6567 00000C12 0009                   M           NOP
 6568                                 M   ;
 6569                                 M   ***** BEGIN-POOL *****
 6570 00000C14 0000                   M   DATA FOR SOURCE-LINE 1350
 6571 00000C16 0000                   M   ALIGNMENT CODE
 6572 00000C18 0000007F               M   DATA FOR SOURCE-LINE 1350
 6573 00000C1C 00000000               M   DATA FOR SOURCE-LINE 1350
 6574 00000C20 00000000               M   DATA FOR SOURCE-LINE 1350
 6575 00000C24 00000000               M   DATA FOR SOURCE-LINE 1350
 6576 00000C28 FFFFFF00               M   DATA FOR SOURCE-LINE 1350
 6577 00000C2C 00000000               M   DATA FOR SOURCE-LINE 1350
 6578 00000C30 00000004               M   DATA FOR SOURCE-LINE 1350
 6579 00000C34 00000000               M   DATA FOR SOURCE-LINE 1350
 6580                                 M   ***** END-POOL *****
 6581 00000C38                        M   _JMP_C8000012:
 6582 00000C38 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 6583                                 M   
 6584 00000C3A                        M   _JMP_EX00012:
 6585                            1351     
 6586                            1352             SUB_END
 6587                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 6588 00000C3A 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 6589                            1353             M_RTS
 6590 00000C3C 000B                   M           RTS                             ;RTSの後ろの
 6591 00000C3E 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 6592                            1354     
 6593                            1355     
 6594                            1356     
 6595                            1357     ;       ***********************************************************
 6596                            1358     ;       *****   条件なしCARD DATA LOAD CODE CHANGE ROUTINE      ***
 6597                            1359     ;       ***********************************************************
 6598                                     ***** BEGIN-POOL *****
 6599 00000C40 FF00                       DATA FOR SOURCE-LINE 1350
 6600                                     ***** END-POOL *****
 6601 00000C42                   1360     _LDWU_CHG:                      ; 00110010B     32
 6602                            1361             SUB_START
 6603 00000C42 4F22                   M           STS.L   PR,@-R15                ;[必要]
 6604                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 6605                            1362     
 6606                            1363             _SEQ_LDW_CMP_OPE_CMD    _LDWU_CODE,_LDWU_CODE_END,ADR_AREA=0,COD_AREA1=4
 6607                                 M   
 6608 00000C44 D10D                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 6609 00000C46 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 6610 00000C48 8928                   M           BT      _JMP_C8000013                   ; IF ADR >= 127 THEN JUMP
 6611                                 M   ;
 6612 00000C4A D00D                   M           MOV.L   #(_LDWU_CODE_END-_LDWU_CODE),R0         ; 転送 BYTE長
 6613 00000C4C D30D                   M           MOV.L   #_LDWU_CODE,R3                  ; Read CODE MOVE        (12 BYTE)
 6614                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 6615 00000C4E 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 6616                                 M   
 6617                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 6618 00000C50 D10D                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 6619 00000C52 410B                   M           JSR     @R1                     ;
 6620 00000C54 0009                   M           NOP                                     ;
 6621                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    50
PROGRAM NAME =

 6622                                 M   
 6623 00000C56 D00D                   M           MOV.L   #H'FFFFFF00,R0                  ;
 6624                                 M   ;       *** ADR SET ***
 6625 00000C58 D10D                   M           MOV.L   #0,R1                   ; ﾒﾓﾘのところ
 6626 00000C5A 341C                   M           ADD     R1,R4                           ; +0
 6627 00000C5C 6241                   M           MOV.W   @R4,R2                          ;
 6628 00000C5E 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 6629 00000C60 4800                   M           SHLL    R8                              ; ADR*2
 6630 00000C62 228B                   M           OR      R8,R2                           ;
 6631 00000C64 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 6632                                 M   
 6633                                 M   ;       *** OFFSET SET ***
 6634 00000C66 D10B                   M           MOV.L   #4,R1                   ; ﾒﾓﾘのところ
 6635 00000C68 341C                   M           ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 6636 00000C6A D00B                   M           MOV.L   #_SEQ_MOVCMD_R3RD_TBL,R0        ;
 6637 00000C6C 4900                   M           SHLL    R9                              ; OFFSET*2
 6638 00000C6E 309C                   M           ADD     R9,R0                           ;
 6639 00000C70 6001                   M           MOV.W   @R0,R0                          ;
 6640 00000C72 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 6641                                 M   
 6642 00000C74 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 6643                                 M           M_BRA   _JMP_EX00013                    ;
 6644 00000C76 A012                   M           BRA     _JMP_EX00013
 6645 00000C78 0009                   M           NOP
 6646                                 M   ;
 6647                                 M   ***** BEGIN-POOL *****
 6648 00000C7A 0000                   M   DATA FOR SOURCE-LINE 1363
 6649 00000C7C 0000007F               M   DATA FOR SOURCE-LINE 1363
 6650 00000C80 00000000               M   DATA FOR SOURCE-LINE 1363
 6651 00000C84 00000000               M   DATA FOR SOURCE-LINE 1363
 6652 00000C88 00000000               M   DATA FOR SOURCE-LINE 1363
 6653 00000C8C FFFFFF00               M   DATA FOR SOURCE-LINE 1363
 6654 00000C90 00000000               M   DATA FOR SOURCE-LINE 1363
 6655 00000C94 00000004               M   DATA FOR SOURCE-LINE 1363
 6656 00000C98 00000000               M   DATA FOR SOURCE-LINE 1363
 6657                                 M   ***** END-POOL *****
 6658 00000C9C                        M   _JMP_C8000013:
 6659 00000C9C 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 6660                                 M   
 6661 00000C9E                        M   _JMP_EX00013:
 6662                            1364     
 6663                            1365             SUB_END
 6664                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 6665 00000C9E 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 6666                            1366             M_RTS
 6667 00000CA0 000B                   M           RTS                             ;RTSの後ろの
 6668 00000CA2 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 6669                            1367     
 6670                            1368     
 6671                            1369     ;       ***************************************************
 6672                            1370     ;       *****   CARD DATA STORE CODE CHANGE ROUTINE     ***
 6673                            1371     ;       ***************************************************
 6674                                     ***** BEGIN-POOL *****
 6675 00000CA4 FF00                       DATA FOR SOURCE-LINE 1363
 6676                                     ***** END-POOL *****
 6677 00000CA6                   1372     _STW_CHG:                       ; 00111110B     3E
 6678                            1373             SUB_START
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    51
PROGRAM NAME =

 6679 00000CA6 4F22                   M           STS.L   PR,@-R15                ;[必要]
 6680                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 6681                            1374     
 6682                            1375             _SEQ_STW_CLR_CMD        _STW_CODE,_STW_CODE_END,ADR_AREA=0,COD_AREA1=4
 6683                                 M   
 6684 00000CA8 D10D                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 6685 00000CAA 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 6686 00000CAC 8928                   M           BT      _JMP_C8000014                   ; IF ADR >= 127 THEN JUMP
 6687                                 M   ;
 6688 00000CAE D00D                   M           MOV.L   #(_STW_CODE_END-_STW_CODE),R0           ; 転送 BYTE長
 6689 00000CB0 D30D                   M           MOV.L   #_STW_CODE,R3                   ; Read CODE MOVE        (12 BYTE)
 6690                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 6691 00000CB2 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 6692                                 M   
 6693                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 6694 00000CB4 D10D                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 6695 00000CB6 410B                   M           JSR     @R1                     ;
 6696 00000CB8 0009                   M           NOP                                     ;
 6697                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 6698 00000CBA D00D                   M           MOV.L   #H'FFFFFF00,R0                  ;
 6699                                 M   ;       *** ADR SET ***
 6700 00000CBC D10D                   M           MOV.L   #0,R1                   ; ﾒﾓﾘのところ
 6701 00000CBE 341C                   M           ADD     R1,R4                           ; +0
 6702 00000CC0 6241                   M           MOV.W   @R4,R2                          ;
 6703 00000CC2 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 6704 00000CC4 4800                   M           SHLL    R8                              ; ADR*2
 6705 00000CC6 228B                   M           OR      R8,R2                           ;
 6706 00000CC8 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 6707                                 M   
 6708                                 M   ;       *** OFFSET SET ***
 6709 00000CCA D10B                   M           MOV.L   #4,R1                   ; ﾒﾓﾘのところ
 6710 00000CCC 341C                   M           ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 6711 00000CCE D00B                   M           MOV.L   #_SEQ_ADDCMD_R0_TBL,R0  ;
 6712 00000CD0 4900                   M           SHLL    R9                              ; OFFSET*2
 6713 00000CD2 309C                   M           ADD     R9,R0                           ;
 6714 00000CD4 6001                   M           MOV.W   @R0,R0                          ;
 6715 00000CD6 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 6716                                 M   
 6717 00000CD8 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 6718                                 M           M_BRA   _JMP_EX00014                    ;
 6719 00000CDA A012                   M           BRA     _JMP_EX00014
 6720 00000CDC 0009                   M           NOP
 6721                                 M   ;
 6722                                 M   ***** BEGIN-POOL *****
 6723 00000CDE 0000                   M   DATA FOR SOURCE-LINE 1375
 6724 00000CE0 0000007F               M   DATA FOR SOURCE-LINE 1375
 6725 00000CE4 00000000               M   DATA FOR SOURCE-LINE 1375
 6726 00000CE8 00000000               M   DATA FOR SOURCE-LINE 1375
 6727 00000CEC 00000000               M   DATA FOR SOURCE-LINE 1375
 6728 00000CF0 FFFFFF00               M   DATA FOR SOURCE-LINE 1375
 6729 00000CF4 00000000               M   DATA FOR SOURCE-LINE 1375
 6730 00000CF8 00000004               M   DATA FOR SOURCE-LINE 1375
 6731 00000CFC 00000000               M   DATA FOR SOURCE-LINE 1375
 6732                                 M   ***** END-POOL *****
 6733 00000D00                        M   _JMP_C8000014:
 6734 00000D00 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    52
PROGRAM NAME =

 6735                                 M   
 6736 00000D02                        M   _JMP_EX00014:
 6737                            1376     
 6738                            1377             SUB_END
 6739                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 6740 00000D02 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 6741                            1378             M_RTS
 6742 00000D04 000B                   M           RTS                             ;RTSの後ろの
 6743 00000D06 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 6744                            1379     
 6745                            1380     ;       ***********************************************************
 6746                            1381     ;       *****   条件なしCARD DATA STORE CODE CHANGE ROUTINE     ***
 6747                            1382     ;       ***********************************************************
 6748                                     ***** BEGIN-POOL *****
 6749 00000D08 FF00                       DATA FOR SOURCE-LINE 1375
 6750                                     ***** END-POOL *****
 6751 00000D0A                   1383     _STWU_CHG:                      ; 00111100B     3E
 6752                            1384             SUB_START
 6753 00000D0A 4F22                   M           STS.L   PR,@-R15                ;[必要]
 6754                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 6755                            1385     
 6756                            1386             _SEQ_STW_CLR_CMD        _STWU_CODE,_STWU_CODE_END,ADR_AREA=0,COD_AREA1=4
 6757                                 M   
 6758 00000D0C D10D                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 6759 00000D0E 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 6760 00000D10 8928                   M           BT      _JMP_C8000015                   ; IF ADR >= 127 THEN JUMP
 6761                                 M   ;
 6762 00000D12 D00D                   M           MOV.L   #(_STWU_CODE_END-_STWU_CODE),R0         ; 転送 BYTE長
 6763 00000D14 D30D                   M           MOV.L   #_STWU_CODE,R3                  ; Read CODE MOVE        (12 BYTE)
 6764                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 6765 00000D16 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 6766                                 M   
 6767                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 6768 00000D18 D10D                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 6769 00000D1A 410B                   M           JSR     @R1                     ;
 6770 00000D1C 0009                   M           NOP                                     ;
 6771                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 6772 00000D1E D00D                   M           MOV.L   #H'FFFFFF00,R0                  ;
 6773                                 M   ;       *** ADR SET ***
 6774 00000D20 D10D                   M           MOV.L   #0,R1                   ; ﾒﾓﾘのところ
 6775 00000D22 341C                   M           ADD     R1,R4                           ; +0
 6776 00000D24 6241                   M           MOV.W   @R4,R2                          ;
 6777 00000D26 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 6778 00000D28 4800                   M           SHLL    R8                              ; ADR*2
 6779 00000D2A 228B                   M           OR      R8,R2                           ;
 6780 00000D2C 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 6781                                 M   
 6782                                 M   ;       *** OFFSET SET ***
 6783 00000D2E D10B                   M           MOV.L   #4,R1                   ; ﾒﾓﾘのところ
 6784 00000D30 341C                   M           ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 6785 00000D32 D00B                   M           MOV.L   #_SEQ_ADDCMD_R0_TBL,R0  ;
 6786 00000D34 4900                   M           SHLL    R9                              ; OFFSET*2
 6787 00000D36 309C                   M           ADD     R9,R0                           ;
 6788 00000D38 6001                   M           MOV.W   @R0,R0                          ;
 6789 00000D3A 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 6790                                 M   
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    53
PROGRAM NAME =

 6791 00000D3C 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 6792                                 M           M_BRA   _JMP_EX00015                    ;
 6793 00000D3E A012                   M           BRA     _JMP_EX00015
 6794 00000D40 0009                   M           NOP
 6795                                 M   ;
 6796                                 M   ***** BEGIN-POOL *****
 6797 00000D42 0000                   M   DATA FOR SOURCE-LINE 1386
 6798 00000D44 0000007F               M   DATA FOR SOURCE-LINE 1386
 6799 00000D48 00000000               M   DATA FOR SOURCE-LINE 1386
 6800 00000D4C 00000000               M   DATA FOR SOURCE-LINE 1386
 6801 00000D50 00000000               M   DATA FOR SOURCE-LINE 1386
 6802 00000D54 FFFFFF00               M   DATA FOR SOURCE-LINE 1386
 6803 00000D58 00000000               M   DATA FOR SOURCE-LINE 1386
 6804 00000D5C 00000004               M   DATA FOR SOURCE-LINE 1386
 6805 00000D60 00000000               M   DATA FOR SOURCE-LINE 1386
 6806                                 M   ***** END-POOL *****
 6807 00000D64                        M   _JMP_C8000015:
 6808 00000D64 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 6809                                 M   
 6810 00000D66                        M   _JMP_EX00015:
 6811                            1387     
 6812                            1388             SUB_END
 6813                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 6814 00000D66 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 6815                            1389             M_RTS
 6816 00000D68 000B                   M           RTS                             ;RTSの後ろの
 6817 00000D6A 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 6818                            1390     
 6819                            1391     ;       ***************************************************
 6820                            1392     ;       *****   CMP EQ CODE CHANGE ROUTINE              ***
 6821                            1393     ;       ***************************************************
 6822                                     ***** BEGIN-POOL *****
 6823 00000D6C FF00                       DATA FOR SOURCE-LINE 1386
 6824                                     ***** END-POOL *****
 6825 00000D6E                   1394     _EQ_CHG:                        ; 01000000B     40
 6826                            1395             SUB_START
 6827 00000D6E 4F22                   M           STS.L   PR,@-R15                ;[必要]
 6828                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 6829                            1396     
 6830                            1397             _SEQ_LDW_CMP_OPE_CMD    _EQ_CODE,_EQ_CODE_END,ADR_AREA=0,COD_AREA1=4
 6831                                 M   
 6832 00000D70 D10D                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 6833 00000D72 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 6834 00000D74 8928                   M           BT      _JMP_C8000016                   ; IF ADR >= 127 THEN JUMP
 6835                                 M   ;
 6836 00000D76 D00D                   M           MOV.L   #(_EQ_CODE_END-_EQ_CODE),R0             ; 転送 BYTE長
 6837 00000D78 D30D                   M           MOV.L   #_EQ_CODE,R3                    ; Read CODE MOVE        (12 BYTE)
 6838                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 6839 00000D7A 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 6840                                 M   
 6841                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 6842 00000D7C D10D                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 6843 00000D7E 410B                   M           JSR     @R1                     ;
 6844 00000D80 0009                   M           NOP                                     ;
 6845                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 6846                                 M   
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    54
PROGRAM NAME =

 6847 00000D82 D00D                   M           MOV.L   #H'FFFFFF00,R0                  ;
 6848                                 M   ;       *** ADR SET ***
 6849 00000D84 D10D                   M           MOV.L   #0,R1                   ; ﾒﾓﾘのところ
 6850 00000D86 341C                   M           ADD     R1,R4                           ; +0
 6851 00000D88 6241                   M           MOV.W   @R4,R2                          ;
 6852 00000D8A 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 6853 00000D8C 4800                   M           SHLL    R8                              ; ADR*2
 6854 00000D8E 228B                   M           OR      R8,R2                           ;
 6855 00000D90 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 6856                                 M   
 6857                                 M   ;       *** OFFSET SET ***
 6858 00000D92 D10B                   M           MOV.L   #4,R1                   ; ﾒﾓﾘのところ
 6859 00000D94 341C                   M           ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 6860 00000D96 D00B                   M           MOV.L   #_SEQ_MOVCMD_R3RD_TBL,R0        ;
 6861 00000D98 4900                   M           SHLL    R9                              ; OFFSET*2
 6862 00000D9A 309C                   M           ADD     R9,R0                           ;
 6863 00000D9C 6001                   M           MOV.W   @R0,R0                          ;
 6864 00000D9E 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 6865                                 M   
 6866 00000DA0 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 6867                                 M           M_BRA   _JMP_EX00016                    ;
 6868 00000DA2 A012                   M           BRA     _JMP_EX00016
 6869 00000DA4 0009                   M           NOP
 6870                                 M   ;
 6871                                 M   ***** BEGIN-POOL *****
 6872 00000DA6 0000                   M   DATA FOR SOURCE-LINE 1397
 6873 00000DA8 0000007F               M   DATA FOR SOURCE-LINE 1397
 6874 00000DAC 00000000               M   DATA FOR SOURCE-LINE 1397
 6875 00000DB0 00000000               M   DATA FOR SOURCE-LINE 1397
 6876 00000DB4 00000000               M   DATA FOR SOURCE-LINE 1397
 6877 00000DB8 FFFFFF00               M   DATA FOR SOURCE-LINE 1397
 6878 00000DBC 00000000               M   DATA FOR SOURCE-LINE 1397
 6879 00000DC0 00000004               M   DATA FOR SOURCE-LINE 1397
 6880 00000DC4 00000000               M   DATA FOR SOURCE-LINE 1397
 6881                                 M   ***** END-POOL *****
 6882 00000DC8                        M   _JMP_C8000016:
 6883 00000DC8 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 6884                                 M   
 6885 00000DCA                        M   _JMP_EX00016:
 6886                            1398     
 6887                            1399             SUB_END
 6888                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 6889 00000DCA 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 6890                            1400             M_RTS
 6891 00000DCC 000B                   M           RTS                             ;RTSの後ろの
 6892 00000DCE 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 6893                            1401     
 6894                            1402     
 6895                            1403     ;       ***************************************************
 6896                            1404     ;       *****   CMP NE CODE CHANGE ROUTINE              ***
 6897                            1405     ;       ***************************************************
 6898                                     ***** BEGIN-POOL *****
 6899 00000DD0 FF00                       DATA FOR SOURCE-LINE 1397
 6900                                     ***** END-POOL *****
 6901 00000DD2                   1406     _NE_CHG:                        ; 01000010B     42
 6902                            1407             SUB_START
 6903 00000DD2 4F22                   M           STS.L   PR,@-R15                ;[必要]
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    55
PROGRAM NAME =

 6904                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 6905                            1408     
 6906                            1409             _SEQ_LDW_CMP_OPE_CMD    _NE_CODE,_NE_CODE_END,ADR_AREA=0,COD_AREA1=4
 6907                                 M   
 6908 00000DD4 D10D                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 6909 00000DD6 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 6910 00000DD8 8928                   M           BT      _JMP_C8000017                   ; IF ADR >= 127 THEN JUMP
 6911                                 M   ;
 6912 00000DDA D00D                   M           MOV.L   #(_NE_CODE_END-_NE_CODE),R0             ; 転送 BYTE長
 6913 00000DDC D30D                   M           MOV.L   #_NE_CODE,R3                    ; Read CODE MOVE        (12 BYTE)
 6914                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 6915 00000DDE 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 6916                                 M   
 6917                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 6918 00000DE0 D10D                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 6919 00000DE2 410B                   M           JSR     @R1                     ;
 6920 00000DE4 0009                   M           NOP                                     ;
 6921                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 6922                                 M   
 6923 00000DE6 D00D                   M           MOV.L   #H'FFFFFF00,R0                  ;
 6924                                 M   ;       *** ADR SET ***
 6925 00000DE8 D10D                   M           MOV.L   #0,R1                   ; ﾒﾓﾘのところ
 6926 00000DEA 341C                   M           ADD     R1,R4                           ; +0
 6927 00000DEC 6241                   M           MOV.W   @R4,R2                          ;
 6928 00000DEE 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 6929 00000DF0 4800                   M           SHLL    R8                              ; ADR*2
 6930 00000DF2 228B                   M           OR      R8,R2                           ;
 6931 00000DF4 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 6932                                 M   
 6933                                 M   ;       *** OFFSET SET ***
 6934 00000DF6 D10B                   M           MOV.L   #4,R1                   ; ﾒﾓﾘのところ
 6935 00000DF8 341C                   M           ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 6936 00000DFA D00B                   M           MOV.L   #_SEQ_MOVCMD_R3RD_TBL,R0        ;
 6937 00000DFC 4900                   M           SHLL    R9                              ; OFFSET*2
 6938 00000DFE 309C                   M           ADD     R9,R0                           ;
 6939 00000E00 6001                   M           MOV.W   @R0,R0                          ;
 6940 00000E02 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 6941                                 M   
 6942 00000E04 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 6943                                 M           M_BRA   _JMP_EX00017                    ;
 6944 00000E06 A012                   M           BRA     _JMP_EX00017
 6945 00000E08 0009                   M           NOP
 6946                                 M   ;
 6947                                 M   ***** BEGIN-POOL *****
 6948 00000E0A 0000                   M   DATA FOR SOURCE-LINE 1409
 6949 00000E0C 0000007F               M   DATA FOR SOURCE-LINE 1409
 6950 00000E10 00000000               M   DATA FOR SOURCE-LINE 1409
 6951 00000E14 00000000               M   DATA FOR SOURCE-LINE 1409
 6952 00000E18 00000000               M   DATA FOR SOURCE-LINE 1409
 6953 00000E1C FFFFFF00               M   DATA FOR SOURCE-LINE 1409
 6954 00000E20 00000000               M   DATA FOR SOURCE-LINE 1409
 6955 00000E24 00000004               M   DATA FOR SOURCE-LINE 1409
 6956 00000E28 00000000               M   DATA FOR SOURCE-LINE 1409
 6957                                 M   ***** END-POOL *****
 6958 00000E2C                        M   _JMP_C8000017:
 6959 00000E2C 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    56
PROGRAM NAME =

 6960                                 M   
 6961 00000E2E                        M   _JMP_EX00017:
 6962                            1410     
 6963                            1411             SUB_END
 6964                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 6965 00000E2E 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 6966                            1412             M_RTS
 6967 00000E30 000B                   M           RTS                             ;RTSの後ろの
 6968 00000E32 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 6969                            1413     
 6970                            1414     
 6971                            1415     ;       ***************************************************
 6972                            1416     ;       *****   CMP GT CODE CHANGE ROUTINE              ***
 6973                            1417     ;       ***************************************************
 6974                                     ***** BEGIN-POOL *****
 6975 00000E34 FF00                       DATA FOR SOURCE-LINE 1409
 6976                                     ***** END-POOL *****
 6977 00000E36                   1418     _GT_CHG:                        ; 01000100B     44
 6978                            1419             SUB_START
 6979 00000E36 4F22                   M           STS.L   PR,@-R15                ;[必要]
 6980                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 6981                            1420     
 6982                            1421             _SEQ_LDW_CMP_OPE_CMD    _GT_CODE,_GT_CODE_END,ADR_AREA=0,COD_AREA1=4
 6983                                 M   
 6984 00000E38 D10D                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 6985 00000E3A 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 6986 00000E3C 8928                   M           BT      _JMP_C8000018                   ; IF ADR >= 127 THEN JUMP
 6987                                 M   ;
 6988 00000E3E D00D                   M           MOV.L   #(_GT_CODE_END-_GT_CODE),R0             ; 転送 BYTE長
 6989 00000E40 D30D                   M           MOV.L   #_GT_CODE,R3                    ; Read CODE MOVE        (12 BYTE)
 6990                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 6991 00000E42 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 6992                                 M   
 6993                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 6994 00000E44 D10D                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 6995 00000E46 410B                   M           JSR     @R1                     ;
 6996 00000E48 0009                   M           NOP                                     ;
 6997                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 6998                                 M   
 6999 00000E4A D00D                   M           MOV.L   #H'FFFFFF00,R0                  ;
 7000                                 M   ;       *** ADR SET ***
 7001 00000E4C D10D                   M           MOV.L   #0,R1                   ; ﾒﾓﾘのところ
 7002 00000E4E 341C                   M           ADD     R1,R4                           ; +0
 7003 00000E50 6241                   M           MOV.W   @R4,R2                          ;
 7004 00000E52 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 7005 00000E54 4800                   M           SHLL    R8                              ; ADR*2
 7006 00000E56 228B                   M           OR      R8,R2                           ;
 7007 00000E58 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 7008                                 M   
 7009                                 M   ;       *** OFFSET SET ***
 7010 00000E5A D10B                   M           MOV.L   #4,R1                   ; ﾒﾓﾘのところ
 7011 00000E5C 341C                   M           ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 7012 00000E5E D00B                   M           MOV.L   #_SEQ_MOVCMD_R3RD_TBL,R0        ;
 7013 00000E60 4900                   M           SHLL    R9                              ; OFFSET*2
 7014 00000E62 309C                   M           ADD     R9,R0                           ;
 7015 00000E64 6001                   M           MOV.W   @R0,R0                          ;
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    57
PROGRAM NAME =

 7016 00000E66 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 7017                                 M   
 7018 00000E68 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 7019                                 M           M_BRA   _JMP_EX00018                    ;
 7020 00000E6A A012                   M           BRA     _JMP_EX00018
 7021 00000E6C 0009                   M           NOP
 7022                                 M   ;
 7023                                 M   ***** BEGIN-POOL *****
 7024 00000E6E 0000                   M   DATA FOR SOURCE-LINE 1421
 7025 00000E70 0000007F               M   DATA FOR SOURCE-LINE 1421
 7026 00000E74 00000000               M   DATA FOR SOURCE-LINE 1421
 7027 00000E78 00000000               M   DATA FOR SOURCE-LINE 1421
 7028 00000E7C 00000000               M   DATA FOR SOURCE-LINE 1421
 7029 00000E80 FFFFFF00               M   DATA FOR SOURCE-LINE 1421
 7030 00000E84 00000000               M   DATA FOR SOURCE-LINE 1421
 7031 00000E88 00000004               M   DATA FOR SOURCE-LINE 1421
 7032 00000E8C 00000000               M   DATA FOR SOURCE-LINE 1421
 7033                                 M   ***** END-POOL *****
 7034 00000E90                        M   _JMP_C8000018:
 7035 00000E90 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 7036                                 M   
 7037 00000E92                        M   _JMP_EX00018:
 7038                            1422     
 7039                            1423             SUB_END
 7040                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 7041 00000E92 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 7042                            1424             M_RTS
 7043 00000E94 000B                   M           RTS                             ;RTSの後ろの
 7044 00000E96 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 7045                            1425     
 7046                            1426     
 7047                            1427     ;       ***************************************************
 7048                            1428     ;       *****   CMP LE CODE CHANGE ROUTINE              ***
 7049                            1429     ;       ***************************************************
 7050                                     ***** BEGIN-POOL *****
 7051 00000E98 FF00                       DATA FOR SOURCE-LINE 1421
 7052                                     ***** END-POOL *****
 7053 00000E9A                   1430     _LE_CHG:                        ; 01001000B     48
 7054                            1431             SUB_START
 7055 00000E9A 4F22                   M           STS.L   PR,@-R15                ;[必要]
 7056                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 7057                            1432     
 7058                            1433             _SEQ_LDW_CMP_OPE_CMD    _LE_CODE,_LE_CODE_END,ADR_AREA=0,COD_AREA1=4
 7059                                 M   
 7060 00000E9C D10D                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 7061 00000E9E 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 7062 00000EA0 8928                   M           BT      _JMP_C8000019                   ; IF ADR >= 127 THEN JUMP
 7063                                 M   ;
 7064 00000EA2 D00D                   M           MOV.L   #(_LE_CODE_END-_LE_CODE),R0             ; 転送 BYTE長
 7065 00000EA4 D30D                   M           MOV.L   #_LE_CODE,R3                    ; Read CODE MOVE        (12 BYTE)
 7066                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 7067 00000EA6 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 7068                                 M   
 7069                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 7070 00000EA8 D10D                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 7071 00000EAA 410B                   M           JSR     @R1                     ;
 7072 00000EAC 0009                   M           NOP                                     ;
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    58
PROGRAM NAME =

 7073                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 7074                                 M   
 7075 00000EAE D00D                   M           MOV.L   #H'FFFFFF00,R0                  ;
 7076                                 M   ;       *** ADR SET ***
 7077 00000EB0 D10D                   M           MOV.L   #0,R1                   ; ﾒﾓﾘのところ
 7078 00000EB2 341C                   M           ADD     R1,R4                           ; +0
 7079 00000EB4 6241                   M           MOV.W   @R4,R2                          ;
 7080 00000EB6 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 7081 00000EB8 4800                   M           SHLL    R8                              ; ADR*2
 7082 00000EBA 228B                   M           OR      R8,R2                           ;
 7083 00000EBC 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 7084                                 M   
 7085                                 M   ;       *** OFFSET SET ***
 7086 00000EBE D10B                   M           MOV.L   #4,R1                   ; ﾒﾓﾘのところ
 7087 00000EC0 341C                   M           ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 7088 00000EC2 D00B                   M           MOV.L   #_SEQ_MOVCMD_R3RD_TBL,R0        ;
 7089 00000EC4 4900                   M           SHLL    R9                              ; OFFSET*2
 7090 00000EC6 309C                   M           ADD     R9,R0                           ;
 7091 00000EC8 6001                   M           MOV.W   @R0,R0                          ;
 7092 00000ECA 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 7093                                 M   
 7094 00000ECC 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 7095                                 M           M_BRA   _JMP_EX00019                    ;
 7096 00000ECE A012                   M           BRA     _JMP_EX00019
 7097 00000ED0 0009                   M           NOP
 7098                                 M   ;
 7099                                 M   ***** BEGIN-POOL *****
 7100 00000ED2 0000                   M   DATA FOR SOURCE-LINE 1433
 7101 00000ED4 0000007F               M   DATA FOR SOURCE-LINE 1433
 7102 00000ED8 00000000               M   DATA FOR SOURCE-LINE 1433
 7103 00000EDC 00000000               M   DATA FOR SOURCE-LINE 1433
 7104 00000EE0 00000000               M   DATA FOR SOURCE-LINE 1433
 7105 00000EE4 FFFFFF00               M   DATA FOR SOURCE-LINE 1433
 7106 00000EE8 00000000               M   DATA FOR SOURCE-LINE 1433
 7107 00000EEC 00000004               M   DATA FOR SOURCE-LINE 1433
 7108 00000EF0 00000000               M   DATA FOR SOURCE-LINE 1433
 7109                                 M   ***** END-POOL *****
 7110 00000EF4                        M   _JMP_C8000019:
 7111 00000EF4 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 7112                                 M   
 7113 00000EF6                        M   _JMP_EX00019:
 7114                            1434     
 7115                            1435             SUB_END
 7116                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 7117 00000EF6 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 7118                            1436             M_RTS
 7119 00000EF8 000B                   M           RTS                             ;RTSの後ろの
 7120 00000EFA 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 7121                            1437     
 7122                            1438     
 7123                            1439     ;       ***************************************************
 7124                            1440     ;       *****   ADD CODE CHANGE ROUTINE                 ***
 7125                            1441     ;       ***************************************************
 7126                                     ***** BEGIN-POOL *****
 7127 00000EFC FF00                       DATA FOR SOURCE-LINE 1433
 7128                                     ***** END-POOL *****
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    59
PROGRAM NAME =

 7129 00000EFE                   1442     _ADD_CHG:                       ; 01010000B     50
 7130                            1443             SUB_START
 7131 00000EFE 4F22                   M           STS.L   PR,@-R15                ;[必要]
 7132                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 7133                            1444     
 7134                            1445             _SEQ_LDW_CMP_OPE_CMD    _ADD_CODE,_ADD_CODE_END,ADR_AREA=0,COD_AREA1=4
 7135                                 M   
 7136 00000F00 D10D                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 7137 00000F02 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 7138 00000F04 8928                   M           BT      _JMP_C8000020                   ; IF ADR >= 127 THEN JUMP
 7139                                 M   ;
 7140 00000F06 D00D                   M           MOV.L   #(_ADD_CODE_END-_ADD_CODE),R0           ; 転送 BYTE長
 7141 00000F08 D30D                   M           MOV.L   #_ADD_CODE,R3                   ; Read CODE MOVE        (12 BYTE)
 7142                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 7143 00000F0A 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 7144                                 M   
 7145                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 7146 00000F0C D10D                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 7147 00000F0E 410B                   M           JSR     @R1                     ;
 7148 00000F10 0009                   M           NOP                                     ;
 7149                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 7150                                 M   
 7151 00000F12 D00D                   M           MOV.L   #H'FFFFFF00,R0                  ;
 7152                                 M   ;       *** ADR SET ***
 7153 00000F14 D10D                   M           MOV.L   #0,R1                   ; ﾒﾓﾘのところ
 7154 00000F16 341C                   M           ADD     R1,R4                           ; +0
 7155 00000F18 6241                   M           MOV.W   @R4,R2                          ;
 7156 00000F1A 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 7157 00000F1C 4800                   M           SHLL    R8                              ; ADR*2
 7158 00000F1E 228B                   M           OR      R8,R2                           ;
 7159 00000F20 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 7160                                 M   
 7161                                 M   ;       *** OFFSET SET ***
 7162 00000F22 D10B                   M           MOV.L   #4,R1                   ; ﾒﾓﾘのところ
 7163 00000F24 341C                   M           ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 7164 00000F26 D00B                   M           MOV.L   #_SEQ_MOVCMD_R3RD_TBL,R0        ;
 7165 00000F28 4900                   M           SHLL    R9                              ; OFFSET*2
 7166 00000F2A 309C                   M           ADD     R9,R0                           ;
 7167 00000F2C 6001                   M           MOV.W   @R0,R0                          ;
 7168 00000F2E 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 7169                                 M   
 7170 00000F30 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 7171                                 M           M_BRA   _JMP_EX00020                    ;
 7172 00000F32 A012                   M           BRA     _JMP_EX00020
 7173 00000F34 0009                   M           NOP
 7174                                 M   ;
 7175                                 M   ***** BEGIN-POOL *****
 7176 00000F36 0000                   M   DATA FOR SOURCE-LINE 1445
 7177 00000F38 0000007F               M   DATA FOR SOURCE-LINE 1445
 7178 00000F3C 00000000               M   DATA FOR SOURCE-LINE 1445
 7179 00000F40 00000000               M   DATA FOR SOURCE-LINE 1445
 7180 00000F44 00000000               M   DATA FOR SOURCE-LINE 1445
 7181 00000F48 FFFFFF00               M   DATA FOR SOURCE-LINE 1445
 7182 00000F4C 00000000               M   DATA FOR SOURCE-LINE 1445
 7183 00000F50 00000004               M   DATA FOR SOURCE-LINE 1445
 7184 00000F54 00000000               M   DATA FOR SOURCE-LINE 1445
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    60
PROGRAM NAME =

 7185                                 M   ***** END-POOL *****
 7186 00000F58                        M   _JMP_C8000020:
 7187 00000F58 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 7188                                 M   
 7189 00000F5A                        M   _JMP_EX00020:
 7190                            1446     
 7191                            1447             SUB_END
 7192                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 7193 00000F5A 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 7194                            1448             M_RTS
 7195 00000F5C 000B                   M           RTS                             ;RTSの後ろの
 7196 00000F5E 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 7197                            1449     
 7198                            1450     
 7199                            1451     ;       ***************************************************
 7200                            1452     ;       *****   SUB CODE CHANGE ROUTINE                 ***
 7201                            1453     ;       ***************************************************
 7202                                     ***** BEGIN-POOL *****
 7203 00000F60 FF00                       DATA FOR SOURCE-LINE 1445
 7204                                     ***** END-POOL *****
 7205 00000F62                   1454     _SUB_CHG:                       ; 01010010B     52
 7206                            1455             SUB_START
 7207 00000F62 4F22                   M           STS.L   PR,@-R15                ;[必要]
 7208                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 7209                            1456     
 7210                            1457             _SEQ_LDW_CMP_OPE_CMD    _SUB_CODE,_SUB_CODE_END,ADR_AREA=0,COD_AREA1=4
 7211                                 M   
 7212 00000F64 D10D                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 7213 00000F66 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 7214 00000F68 8928                   M           BT      _JMP_C8000021                   ; IF ADR >= 127 THEN JUMP
 7215                                 M   ;
 7216 00000F6A D00D                   M           MOV.L   #(_SUB_CODE_END-_SUB_CODE),R0           ; 転送 BYTE長
 7217 00000F6C D30D                   M           MOV.L   #_SUB_CODE,R3                   ; Read CODE MOVE        (12 BYTE)
 7218                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 7219 00000F6E 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 7220                                 M   
 7221                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 7222 00000F70 D10D                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 7223 00000F72 410B                   M           JSR     @R1                     ;
 7224 00000F74 0009                   M           NOP                                     ;
 7225                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 7226                                 M   
 7227 00000F76 D00D                   M           MOV.L   #H'FFFFFF00,R0                  ;
 7228                                 M   ;       *** ADR SET ***
 7229 00000F78 D10D                   M           MOV.L   #0,R1                   ; ﾒﾓﾘのところ
 7230 00000F7A 341C                   M           ADD     R1,R4                           ; +0
 7231 00000F7C 6241                   M           MOV.W   @R4,R2                          ;
 7232 00000F7E 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 7233 00000F80 4800                   M           SHLL    R8                              ; ADR*2
 7234 00000F82 228B                   M           OR      R8,R2                           ;
 7235 00000F84 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 7236                                 M   
 7237                                 M   ;       *** OFFSET SET ***
 7238 00000F86 D10B                   M           MOV.L   #4,R1                   ; ﾒﾓﾘのところ
 7239 00000F88 341C                   M           ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 7240 00000F8A D00B                   M           MOV.L   #_SEQ_MOVCMD_R3RD_TBL,R0        ;
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    61
PROGRAM NAME =

 7241 00000F8C 4900                   M           SHLL    R9                              ; OFFSET*2
 7242 00000F8E 309C                   M           ADD     R9,R0                           ;
 7243 00000F90 6001                   M           MOV.W   @R0,R0                          ;
 7244 00000F92 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 7245                                 M   
 7246 00000F94 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 7247                                 M           M_BRA   _JMP_EX00021                    ;
 7248 00000F96 A012                   M           BRA     _JMP_EX00021
 7249 00000F98 0009                   M           NOP
 7250                                 M   ;
 7251                                 M   ***** BEGIN-POOL *****
 7252 00000F9A 0000                   M   DATA FOR SOURCE-LINE 1457
 7253 00000F9C 0000007F               M   DATA FOR SOURCE-LINE 1457
 7254 00000FA0 00000000               M   DATA FOR SOURCE-LINE 1457
 7255 00000FA4 00000000               M   DATA FOR SOURCE-LINE 1457
 7256 00000FA8 00000000               M   DATA FOR SOURCE-LINE 1457
 7257 00000FAC FFFFFF00               M   DATA FOR SOURCE-LINE 1457
 7258 00000FB0 00000000               M   DATA FOR SOURCE-LINE 1457
 7259 00000FB4 00000004               M   DATA FOR SOURCE-LINE 1457
 7260 00000FB8 00000000               M   DATA FOR SOURCE-LINE 1457
 7261                                 M   ***** END-POOL *****
 7262 00000FBC                        M   _JMP_C8000021:
 7263 00000FBC 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 7264                                 M   
 7265 00000FBE                        M   _JMP_EX00021:
 7266                            1458     
 7267                            1459             SUB_END
 7268                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 7269 00000FBE 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 7270                            1460             M_RTS
 7271 00000FC0 000B                   M           RTS                             ;RTSの後ろの
 7272 00000FC2 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 7273                            1461     
 7274                            1462     ;       ***************************************************
 7275                            1463     ;       *****   ANDW CODE CHANGE ROUTINE                ***
 7276                            1464     ;       ***************************************************
 7277                                     ***** BEGIN-POOL *****
 7278 00000FC4 FF00                       DATA FOR SOURCE-LINE 1457
 7279                                     ***** END-POOL *****
 7280 00000FC6                   1465     _ANDW_CHG:                      ; 01011010B     5A
 7281                            1466             SUB_START
 7282 00000FC6 4F22                   M           STS.L   PR,@-R15                ;[必要]
 7283                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 7284                            1467     
 7285                            1468             _SEQ_LDW_CMP_OPE_CMD    _ANDW_CODE,_ANDW_CODE_END,ADR_AREA=0,COD_AREA1=4
 7286                                 M   
 7287 00000FC8 D10D                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 7288 00000FCA 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 7289 00000FCC 8928                   M           BT      _JMP_C8000022                   ; IF ADR >= 127 THEN JUMP
 7290                                 M   ;
 7291 00000FCE D00D                   M           MOV.L   #(_ANDW_CODE_END-_ANDW_CODE),R0         ; 転送 BYTE長
 7292 00000FD0 D30D                   M           MOV.L   #_ANDW_CODE,R3                  ; Read CODE MOVE        (12 BYTE)
 7293                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 7294 00000FD2 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 7295                                 M   
 7296                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 7297 00000FD4 D10D                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    62
PROGRAM NAME =

 7298 00000FD6 410B                   M           JSR     @R1                     ;
 7299 00000FD8 0009                   M           NOP                                     ;
 7300                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 7301                                 M   
 7302 00000FDA D00D                   M           MOV.L   #H'FFFFFF00,R0                  ;
 7303                                 M   ;       *** ADR SET ***
 7304 00000FDC D10D                   M           MOV.L   #0,R1                   ; ﾒﾓﾘのところ
 7305 00000FDE 341C                   M           ADD     R1,R4                           ; +0
 7306 00000FE0 6241                   M           MOV.W   @R4,R2                          ;
 7307 00000FE2 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 7308 00000FE4 4800                   M           SHLL    R8                              ; ADR*2
 7309 00000FE6 228B                   M           OR      R8,R2                           ;
 7310 00000FE8 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 7311                                 M   
 7312                                 M   ;       *** OFFSET SET ***
 7313 00000FEA D10B                   M           MOV.L   #4,R1                   ; ﾒﾓﾘのところ
 7314 00000FEC 341C                   M           ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 7315 00000FEE D00B                   M           MOV.L   #_SEQ_MOVCMD_R3RD_TBL,R0        ;
 7316 00000FF0 4900                   M           SHLL    R9                              ; OFFSET*2
 7317 00000FF2 309C                   M           ADD     R9,R0                           ;
 7318 00000FF4 6001                   M           MOV.W   @R0,R0                          ;
 7319 00000FF6 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 7320                                 M   
 7321 00000FF8 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 7322                                 M           M_BRA   _JMP_EX00022                    ;
 7323 00000FFA A012                   M           BRA     _JMP_EX00022
 7324 00000FFC 0009                   M           NOP
 7325                                 M   ;
 7326                                 M   ***** BEGIN-POOL *****
 7327 00000FFE 0000                   M   DATA FOR SOURCE-LINE 1468
 7328 00001000 0000007F               M   DATA FOR SOURCE-LINE 1468
 7329 00001004 00000000               M   DATA FOR SOURCE-LINE 1468
 7330 00001008 00000000               M   DATA FOR SOURCE-LINE 1468
 7331 0000100C 00000000               M   DATA FOR SOURCE-LINE 1468
 7332 00001010 FFFFFF00               M   DATA FOR SOURCE-LINE 1468
 7333 00001014 00000000               M   DATA FOR SOURCE-LINE 1468
 7334 00001018 00000004               M   DATA FOR SOURCE-LINE 1468
 7335 0000101C 00000000               M   DATA FOR SOURCE-LINE 1468
 7336                                 M   ***** END-POOL *****
 7337 00001020                        M   _JMP_C8000022:
 7338 00001020 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 7339                                 M   
 7340 00001022                        M   _JMP_EX00022:
 7341                            1469     
 7342                            1470             SUB_END
 7343                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 7344 00001022 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 7345                            1471             M_RTS
 7346 00001024 000B                   M           RTS                             ;RTSの後ろの
 7347 00001026 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 7348                            1472     
 7349                            1473     
 7350                            1474     ;       ***************************************************
 7351                            1475     ;       *****   ORW CODE CHANGE ROUTINE                 ***
 7352                            1476     ;       ***************************************************
 7353                                     ***** BEGIN-POOL *****
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    63
PROGRAM NAME =

 7354 00001028 FF00                       DATA FOR SOURCE-LINE 1468
 7355                                     ***** END-POOL *****
 7356 0000102A                   1477     _ORW_CHG:                       ; 01011100B     5C
 7357                            1478             SUB_START
 7358 0000102A 4F22                   M           STS.L   PR,@-R15                ;[必要]
 7359                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 7360                            1479     
 7361                            1480             _SEQ_LDW_CMP_OPE_CMD    _ORW_CODE,_ORW_CODE_END,ADR_AREA=0,COD_AREA1=4
 7362                                 M   
 7363 0000102C D10D                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 7364 0000102E 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 7365 00001030 8928                   M           BT      _JMP_C8000023                   ; IF ADR >= 127 THEN JUMP
 7366                                 M   ;
 7367 00001032 D00D                   M           MOV.L   #(_ORW_CODE_END-_ORW_CODE),R0           ; 転送 BYTE長
 7368 00001034 D30D                   M           MOV.L   #_ORW_CODE,R3                   ; Read CODE MOVE        (12 BYTE)
 7369                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 7370 00001036 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 7371                                 M   
 7372                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 7373 00001038 D10D                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 7374 0000103A 410B                   M           JSR     @R1                     ;
 7375 0000103C 0009                   M           NOP                                     ;
 7376                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 7377                                 M   
 7378 0000103E D00D                   M           MOV.L   #H'FFFFFF00,R0                  ;
 7379                                 M   ;       *** ADR SET ***
 7380 00001040 D10D                   M           MOV.L   #0,R1                   ; ﾒﾓﾘのところ
 7381 00001042 341C                   M           ADD     R1,R4                           ; +0
 7382 00001044 6241                   M           MOV.W   @R4,R2                          ;
 7383 00001046 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 7384 00001048 4800                   M           SHLL    R8                              ; ADR*2
 7385 0000104A 228B                   M           OR      R8,R2                           ;
 7386 0000104C 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 7387                                 M   
 7388                                 M   ;       *** OFFSET SET ***
 7389 0000104E D10B                   M           MOV.L   #4,R1                   ; ﾒﾓﾘのところ
 7390 00001050 341C                   M           ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 7391 00001052 D00B                   M           MOV.L   #_SEQ_MOVCMD_R3RD_TBL,R0        ;
 7392 00001054 4900                   M           SHLL    R9                              ; OFFSET*2
 7393 00001056 309C                   M           ADD     R9,R0                           ;
 7394 00001058 6001                   M           MOV.W   @R0,R0                          ;
 7395 0000105A 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 7396                                 M   
 7397 0000105C 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 7398                                 M           M_BRA   _JMP_EX00023                    ;
 7399 0000105E A012                   M           BRA     _JMP_EX00023
 7400 00001060 0009                   M           NOP
 7401                                 M   ;
 7402                                 M   ***** BEGIN-POOL *****
 7403 00001062 0000                   M   DATA FOR SOURCE-LINE 1480
 7404 00001064 0000007F               M   DATA FOR SOURCE-LINE 1480
 7405 00001068 00000000               M   DATA FOR SOURCE-LINE 1480
 7406 0000106C 00000000               M   DATA FOR SOURCE-LINE 1480
 7407 00001070 00000000               M   DATA FOR SOURCE-LINE 1480
 7408 00001074 FFFFFF00               M   DATA FOR SOURCE-LINE 1480
 7409 00001078 00000000               M   DATA FOR SOURCE-LINE 1480
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    64
PROGRAM NAME =

 7410 0000107C 00000004               M   DATA FOR SOURCE-LINE 1480
 7411 00001080 00000000               M   DATA FOR SOURCE-LINE 1480
 7412                                 M   ***** END-POOL *****
 7413 00001084                        M   _JMP_C8000023:
 7414 00001084 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 7415                                 M   
 7416 00001086                        M   _JMP_EX00023:
 7417                            1481     
 7418                            1482             SUB_END
 7419                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 7420 00001086 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 7421                            1483             M_RTS
 7422 00001088 000B                   M           RTS                             ;RTSの後ろの
 7423 0000108A 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 7424                            1484     
 7425                            1485     
 7426                            1486     ;       ***************************************************
 7427                            1487     ;       *****   XORW CODE CHANGE ROUTINE                ***
 7428                            1488     ;       ***************************************************
 7429                                     ***** BEGIN-POOL *****
 7430 0000108C FF00                       DATA FOR SOURCE-LINE 1480
 7431                                     ***** END-POOL *****
 7432 0000108E                   1489     _XORW_CHG:                      ; 01011110B     5E
 7433                            1490             SUB_START
 7434 0000108E 4F22                   M           STS.L   PR,@-R15                ;[必要]
 7435                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 7436                            1491     
 7437                            1492             _SEQ_LDW_CMP_OPE_CMD    _XORW_CODE,_XORW_CODE_END,ADR_AREA=0,COD_AREA1=4
 7438                                 M   
 7439 00001090 D10D                   M           MOV.L   #_SEQ_CARD_MAX,R1               ; 127
 7440 00001092 3813                   M           CMP/GE  R1,R8                           ; CA.DBA DATA CHECK
 7441 00001094 8928                   M           BT      _JMP_C8000024                   ; IF ADR >= 127 THEN JUMP
 7442                                 M   ;
 7443 00001096 D00D                   M           MOV.L   #(_XORW_CODE_END-_XORW_CODE),R0         ; 転送 BYTE長
 7444 00001098 D30D                   M           MOV.L   #_XORW_CODE,R3                  ; Read CODE MOVE        (12 BYTE)
 7445                                 M   ;;;2011-01-04 鎮aho     MOV.L   R13,R4                          ; SEQ ADR. KEEP
 7446 0000109A 64D3                   M           MOV     R13,R4                          ; SEQ ADR. KEEP
 7447                                 M   
 7448                                 M           FAR_JSR #_SEQ_CODE_BLOCK_MV,R1          ; ｺｰﾄﾞのﾌﾞﾛｯｸ転送 INPUT R0,R3,R13
 7449 0000109C D10D                   M           MOV.L   #_SEQ_CODE_BLOCK_MV,R1          ;ﾃｰﾌﾞﾙｱﾄﾞﾚｽの内容をREGへ
 7450 0000109E 410B                   M           JSR     @R1                     ;
 7451 000010A0 0009                   M           NOP                                     ;
 7452                                 M                                                   ; 一括して転送してからﾒﾓﾘのとこだけあとで
                                          入れ直す。
 7453                                 M   
 7454 000010A2 D00D                   M           MOV.L   #H'FFFFFF00,R0                  ;
 7455                                 M   ;       *** ADR SET ***
 7456 000010A4 D10D                   M           MOV.L   #0,R1                   ; ﾒﾓﾘのところ
 7457 000010A6 341C                   M           ADD     R1,R4                           ; +0
 7458 000010A8 6241                   M           MOV.W   @R4,R2                          ;
 7459 000010AA 2209                   M           AND     R0,R2                           ; ADRﾃﾞｰﾀのところをｸﾘｱ
 7460 000010AC 4800                   M           SHLL    R8                              ; ADR*2
 7461 000010AE 228B                   M           OR      R8,R2                           ;
 7462 000010B0 2421                   M           MOV.W   R2,@R4                          ; RAM ADR SET
 7463                                 M   
 7464                                 M   ;       *** OFFSET SET ***
 7465 000010B2 D10B                   M           MOV.L   #4,R1                   ; ﾒﾓﾘのところ
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    65
PROGRAM NAME =

 7466 000010B4 341C                   M           ADD     R1,R4                           ; 8+4=12  MOV.B @(R0,R*),R1の命令 LOAD
 7467 000010B6 D00B                   M           MOV.L   #_SEQ_MOVCMD_R3RD_TBL,R0        ;
 7468 000010B8 4900                   M           SHLL    R9                              ; OFFSET*2
 7469 000010BA 309C                   M           ADD     R9,R0                           ;
 7470 000010BC 6001                   M           MOV.W   @R0,R0                          ;
 7471 000010BE 2401                   M           MOV.W   R0,@R4                          ; 命令置換え
 7472                                 M   
 7473 000010C0 9001                   M           MOV.W   #_SQ_NML_COD,R0                 ; NORMAL END
 7474                                 M           M_BRA   _JMP_EX00024                    ;
 7475 000010C2 A012                   M           BRA     _JMP_EX00024
 7476 000010C4 0009                   M           NOP
 7477                                 M   ;
 7478                                 M   ***** BEGIN-POOL *****
 7479 000010C6 0000                   M   DATA FOR SOURCE-LINE 1492
 7480 000010C8 0000007F               M   DATA FOR SOURCE-LINE 1492
 7481 000010CC 00000000               M   DATA FOR SOURCE-LINE 1492
 7482 000010D0 00000000               M   DATA FOR SOURCE-LINE 1492
 7483 000010D4 00000000               M   DATA FOR SOURCE-LINE 1492
 7484 000010D8 FFFFFF00               M   DATA FOR SOURCE-LINE 1492
 7485 000010DC 00000000               M   DATA FOR SOURCE-LINE 1492
 7486 000010E0 00000004               M   DATA FOR SOURCE-LINE 1492
 7487 000010E4 00000000               M   DATA FOR SOURCE-LINE 1492
 7488                                 M   ***** END-POOL *****
 7489 000010E8                        M   _JMP_C8000024:
 7490 000010E8 9002                   M           MOV.W   #_SQ_ERR_END,R0                 ; ERR END
 7491                                 M   
 7492 000010EA                        M   _JMP_EX00024:
 7493                            1493     
 7494                            1494             SUB_END
 7495                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 7496 000010EA 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 7497                            1495             M_RTS
 7498 000010EC 000B                   M           RTS                             ;RTSの後ろの
 7499 000010EE 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 7500                            1496     
 7501                            1497     ;       ***********************************
 7502                            1498     ;       ***     ｺｰﾄﾞのﾌﾞﾛｯｸ転送         ***
 7503                            1499     ;       ***********************************
 7504                            1500     ;       INPUT   R0,R3,R13
 7505                            1501     ;       USE     R1
 7506                            1502     
 7507                                     ***** BEGIN-POOL *****
 7508 000010F0 FF00                       DATA FOR SOURCE-LINE 1492
 7509                                     ***** END-POOL *****
 7510 000010F2                   1503     _SEQ_CODE_BLOCK_MV:
 7511                            1504             SUB_START
 7512 000010F2 4F22                   M           STS.L   PR,@-R15                ;[必要]
 7513                                 M   ;;;;;;; ADD     #-4,R15                 ;[不要?]
 7514                            1505     
 7515 000010F4                   1506     _SEQ_CODE_BLOCK_LOOP:
 7516 000010F4 2008              1507             TST     R0,R0                           ; COUNTER CHECK
 7517 000010F6 8909              1508             BT      _SEQ_CD_BLOCK_MV_EXIT           ; 0 THEN EXIT
 7518                            1509     
 7519 000010F8 6131              1510             MOV.W   @R3,R1                          ; SEQ_ROM
 7520 000010FA 2D11              1511             MOV.W   R1,@R13                         ; SEQ_RAM
 7521 000010FC D102              1512             MOV.L   #2,R1                           ;
 7522 000010FE 3018              1513             SUB     R1,R0                           ; COUNTER -2
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    66
PROGRAM NAME =

 7523 00001100 331C              1514             ADD     R1,R3                           ; ROM ADR. +2
 7524 00001102 3D1C              1515             ADD     R1,R13                          ; RAM ADR. +2
 7525                            1516             M_BRA   _SEQ_CODE_BLOCK_LOOP            ;
 7526 00001104 AFF6                   M           BRA     _SEQ_CODE_BLOCK_LOOP
 7527 00001106 0009                   M           NOP
 7528                            1517     
 7529                                     ***** BEGIN-POOL *****
 7530 00001108 00000002                   DATA FOR SOURCE-LINE 1512
 7531                                     ***** END-POOL *****
 7532 0000110C                   1518     _SEQ_CD_BLOCK_MV_EXIT:
 7533                            1519     
 7534                            1520             SUB_END
 7535                                 M   ;;;;;;; ADD     #4,R15                  ;[不要?]
 7536 0000110C 4F26                   M           LDS.L   @R15+,PR                ;[必要]
 7537                            1521             M_RTS
 7538 0000110E 000B                   M           RTS                             ;RTSの後ろの
 7539 00001110 0009                   M           NOP                             ;@R15+,PRはﾀﾞﾒ
 7540                            1522     
 7541                            1523     
 7542                            1524             .END
  *****TOTAL ERRORS       0
  *****TOTAL WARNINGS     0
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    67

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

BIT0                                      EQU  00000001     15*
BIT1                                      EQU  00000002     16*
BIT10                                     EQU  00000400     25*
BIT11                                     EQU  00000800     26*
BIT12                                     EQU  00001000     27*
BIT13                                     EQU  00002000     28*
BIT14                                     EQU  00004000     29*
BIT15                                     EQU  00008000     30*
BIT16                                     EQU  00010000     31*
BIT17                                     EQU  00020000     32*
BIT18                                     EQU  00040000     33*
BIT19                                     EQU  00080000     34*
BIT2                                      EQU  00000004     17* 4431 
BIT20                                     EQU  00100000     35*
BIT21                                     EQU  00200000     36*
BIT22                                     EQU  00400000     37*
BIT23                                     EQU  00800000     38*
BIT24                                     EQU  01000000     39*
BIT25                                     EQU  02000000     40*
BIT26                                     EQU  04000000     41*
BIT27                                     EQU  08000000     42*
BIT28                                     EQU  10000000     43*
BIT29                                     EQU  20000000     44*
BIT3                                      EQU  00000008     18*
BIT30                                     EQU  40000000     45*
BIT31                                     EQU  80000000     46*
BIT4                                      EQU  00000010     19*
BIT5                                      EQU  00000020     20*
BIT6                                      EQU  00000040     21*
BIT7                                      EQU  00000080     22*
BIT8                                      EQU  00000100     23*
BIT9                                      EQU  00000200     24*
DREG                                      EQU  00000000   3057*
GA1_PFEX                                  EQU  00000084   2173*
GA1_PGEX                                  EQU  00000000   2200*
GA1_PHEX                                  EQU  00000000   2212*
GA2_PFEX                                  EQU  000000D0   2660*
GA2_PGEX                                  EQU  00000061   2697*
GA2_PHEX                                  EQU  00000000   2721*
H_BYTE                                    EQU  00000000     82*
L_BYTE                                    EQU  00000001     81*
NBIT0                                     EQU  000000FE     49*
NBIT1                                     EQU  000000FD     50*
NBIT10                                    EQU  0000FBFF     60*
NBIT11                                    EQU  0000F7FF     61*
NBIT12                                    EQU  0000EFFF     62*
NBIT13                                    EQU  0000DFFF     63*
NBIT14                                    EQU  0000BFFF     64*
NBIT15                                    EQU  00007FFF     65*
NBIT2                                     EQU  000000FB     51*
NBIT3                                     EQU  000000F7     52*
NBIT4                                     EQU  000000EF     53*
NBIT5                                     EQU  000000DF     54*
NBIT6                                     EQU  000000BF     55*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    68

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

NBIT7                                     EQU  0000007F     56*
NBIT8                                     EQU  0000FEFF     58*
NBIT9                                     EQU  0000FDFF     59*
P                                P        SCT  00000000   4279*
SEQ_RUN_CHG1_DBE                 P             0000012C   4507  4509*
XBIT0                                     EQU  00000000     68*
XBIT1                                     EQU  00000001     69*
XBIT2                                     EQU  00000002     70*
XBIT3                                     EQU  00000003     71*
XBIT4                                     EQU  00000004     72*
XBIT5                                     EQU  00000005     73*
XBIT6                                     EQU  00000006     74*
XBIT7                                     EQU  00000007     75*
_ADD_CHG                         P        EXPT 00000EFE   2986  7129*
_ADD_CMD                                  EQU  00000044   3076*
_ADD_CODE                                 IMPT 00000000   2941  7140  7141 
_ADD_CODE_END                             IMPT 00000000   2942  7140 
_ADD_SUB                                  IMPT 00000000   2866 
_AMRG_CHG                        P        EXPT 00000B38   2973  6368*
_AMRG_CODE                                IMPT 00000000   2899  6373  6374 
_AMRG_CODE_END                            IMPT 00000000   2900  6373 
_ANDN_CHG                        P        EXPT 00000312   2959  4899*
_ANDN_CODE                                IMPT 00000000   2883  4914  4915 
_ANDN_CODE_END                            IMPT 00000000   2884  4914 
_ANDW_CHG                        P        EXPT 00000FC6   2988  7280*
_ANDW_CMD                                 EQU  00000038   3073*
_ANDW_CODE                                IMPT 00000000   2935  7291  7292 
_ANDW_CODE_END                            IMPT 00000000   2936  7291 
_ANDW_SUB                                 IMPT 00000000   2863 
_AND_CHG                         P        EXPT 0000028A   2958  4799*
_AND_CODE                                 IMPT 00000000   2881  4814  4815 
_AND_CODE_END                             IMPT 00000000   2882  4814 
_BAMRA                                    IMPT 00000000    295 
_BAMRB                                    IMPT 00000000    298 
_BARA                                     IMPT 00000000    294 
_BARB                                     IMPT 00000000    297 
_BASRA                                    IMPT 00000000    283 
_BASRB                                    IMPT 00000000    284 
_BBIT_CHG_TBL                             IMPT 00000000   3003 
_BBRA                                     IMPT 00000000    296 
_BBRB                                     IMPT 00000000    299 
_BCR1                                     IMPT 00000000    305 
_BCR2                                     IMPT 00000000    306 
_BDMRB                                    IMPT 00000000    301 
_BDRB                                     IMPT 00000000    300 
_BRCR                                     IMPT 00000000    302 
_CB_BAKUP_CMD1                            EQU  00005678    114*
_CB_BAKUP_CMD2                            EQU  00001234    115*
_CB_BAK_SUM_COD1                          EQU  5AA51234    112*
_CB_BAK_SUM_COD2                          EQU  A55A4321    113*
_CB_ERR_INFO_MEM                          EQU  00000080    138*
_CB_ERR_INFO_PSIZE                        EQU  00000008    139*
_CB_STS_BUF_1BLK                          EQU  00000040    117*  119 
_CB_STS_BUF_BLKMAX                        EQU  00000008    118*  119 
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    69

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_CB_STS_BUF_MAX                           EQU  00000200    119*
_CB_TRD_BEFORE                            EQU  00000060    127*
_CB_TRD_BUF_DP_MAX                        EQU  00000080    131*
_CB_TRD_BUF_MAX                           EQU  00000800    128*
_CB_TRD_DP_1CNT                           EQU  00000008    130*
_CB_TRD_DP_CH                             EQU  00000004    123*
_CB_TRD_SMP_CNT                           EQU  00000080    126*
_CCR                                      IMPT 00000000    285 
_CHCR0                                    IMPT 00000000    326 
_CHCR1                                    IMPT 00000000    330 
_CHCR2                                    IMPT 00000000    334 
_CHCR3                                    IMPT 00000000    338 
_CLR_CHG                         P        EXPT 00000A88   2971  6241*
_CLR_CMD                                  EQU  0000000C   3062*
_CLR_CODE                                 IMPT 00000000   2909  6252  6253 
_CLR_CODE_END                             IMPT 00000000   2910  6252 
_CLR_SUB                                  IMPT 00000000   2852 
_CTR_CMD                                  EQU  00000014   3064*
_DAR0                                     IMPT 00000000    324 
_DAR1                                     IMPT 00000000    328 
_DAR2                                     IMPT 00000000    332 
_DAR3                                     IMPT 00000000    336 
_DA_CNV_DT0                               IMPT 00000000   2835 
_DMAOR                                    IMPT 00000000    339 
_DMATCR0                                  IMPT 00000000    325 
_DMATCR1                                  IMPT 00000000    329 
_DMATCR2                                  IMPT 00000000    333 
_DMATCR3                                  IMPT 00000000    337 
_DSET_CHG                        P        EXPT 00000AEE   2972  6313*
_DS_CODE                                  IMPT 00000000   2907  6318  6319 
_DS_CODE_END                              IMPT 00000000   2908  6318 
_DUMMY_SUM_CODE                           EQU  5AA53CC3    105*
_END_CHG                         P        EXPT 00000BB8   2977  6489*
_END_CMD                                  EQU  0000004C   3078*
_END_CODE                                 IMPT 00000000   2945  6494  6495 
_END_CODE_END                             IMPT 00000000   2946  6494 
_END_SUB                                  IMPT 00000000   2868 
_EQ_CHG                          P        EXPT 00000D6E   2982  6825*
_EQ_CMD                                   EQU  00000028   3069*
_EQ_CODE                                  IMPT 00000000   2927  6836  6837 
_EQ_CODE_END                              IMPT 00000000   2928  6836 
_EQ_SUB                                   IMPT 00000000   2859 
_EXPEVT                                   IMPT 00000000    287 
_FRQCR                                    IMPT 00000000    342 
_GPIOIC                                   IMPT 00000000    320 
_GT_CHG                          P        EXPT 00000E36   2984  6977*
_GT_CMD                                   EQU  00000030   3071*
_GT_CODE                                  IMPT 00000000   2931  6988  6989 
_GT_CODE_END                              IMPT 00000000   2932  6988 
_GT_SUB                                   IMPT 00000000   2861 
_ICR                                      IMPT 00000000    349 
_INTEVT                                   IMPT 00000000    288 
_INT_2MS_SEL                              IMPT 00000000   2803 
_IPRA                                     IMPT 00000000    350 
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    70

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_IPRB                                     IMPT 00000000    351 
_IPRC                                     IMPT 00000000    352 
_IPRD                                     IMPT 00000000    353 
_JMP_C8000000                    P             00000280   4710  4781*
_JMP_C8000001                    P             00000308   4812  4880*
_JMP_C8000002                    P             00000390   4912  4980*
_JMP_C8000003                    P             00000418   5011  5079*
_JMP_C8000004                    P             000004A0   5110  5178*
_JMP_C8000005                    P             000005A8   5298  5360*
_JMP_C8000006                    P             000006A4   5468  5530*
_JMP_C8000007                    P             0000086C   5756  5837*
_JMP_C8000008                    P             0000099C   5956  6037*
_JMP_C8000009                    P             000009E8   6064  6101*
_JMP_C8000010                    P             00000A34   6130  6167*
_JMP_C8000011                    P             00000AE4   6250  6298*
_JMP_C8000012                    P             00000C38   6532  6581*
_JMP_C8000013                    P             00000C9C   6610  6658*
_JMP_C8000014                    P             00000D00   6686  6733*
_JMP_C8000015                    P             00000D64   6760  6807*
_JMP_C8000016                    P             00000DC8   6834  6882*
_JMP_C8000017                    P             00000E2C   6910  6958*
_JMP_C8000018                    P             00000E90   6986  7034*
_JMP_C8000019                    P             00000EF4   7062  7110*
_JMP_C8000020                    P             00000F58   7138  7186*
_JMP_C8000021                    P             00000FBC   7214  7262*
_JMP_C8000022                    P             00001020   7289  7337*
_JMP_C8000023                    P             00001084   7365  7413*
_JMP_C8000024                    P             000010E8   7441  7489*
_JMP_EX00000                     P             00000282   4764  4784*
_JMP_EX00001                     P             0000030A   4864  4883*
_JMP_EX00002                     P             00000392   4964  4983*
_JMP_EX00003                     P             0000041A   5063  5082*
_JMP_EX00004                     P             000004A2   5162  5181*
_JMP_EX00005                     P             000005AA   5343  5363*
_JMP_EX00006                     P             000006A6   5513  5533*
_JMP_EX00007                     P             0000086E   5819  5840*
_JMP_EX00008                     P             0000099E   6019  6040*
_JMP_EX00009                     P             000009EA   6089  6104*
_JMP_EX00010                     P             00000A36   6155  6170*
_JMP_EX00011                     P             00000AE6   6283  6301*
_JMP_EX00012                     P             00000C3A   6566  6584*
_JMP_EX00013                     P             00000C9E   6644  6661*
_JMP_EX00014                     P             00000D02   6719  6736*
_JMP_EX00015                     P             00000D66   6793  6810*
_JMP_EX00016                     P             00000DCA   6868  6885*
_JMP_EX00017                     P             00000E2E   6944  6961*
_JMP_EX00018                     P             00000E92   7020  7037*
_JMP_EX00019                     P             00000EF6   7096  7113*
_JMP_EX00020                     P             00000F5A   7172  7189*
_JMP_EX00021                     P             00000FBE   7248  7265*
_JMP_EX00022                     P             00001022   7323  7340*
_JMP_EX00023                     P             00001086   7399  7416*
_JMP_EX00024                     P             000010EA   7475  7492*
_LDN_CHG                         P        EXPT 000001FA   2957  4701*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    71

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_LDN_CODE                                 IMPT 00000000   2879  4712  4713 
_LDN_CODE_END                             IMPT 00000000   2880  4712 
_LDWU_CHG                        P        EXPT 00000C42   2979  6601*
_LDWU_CODE                                IMPT 00000000   2921  6612  6613 
_LDWU_CODE_END                            IMPT 00000000   2922  6612 
_LDW_CHG                         P        EXPT 00000BDC   2978  6523*
_LDW_CMD                                  EQU  00000020   3067*
_LDW_CODE                                 IMPT 00000000   2919  6534  6535 
_LDW_CODE_END                             IMPT 00000000   2920  6534 
_LDW_SUB                                  IMPT 00000000   2857 
_LD_C80                          P             000001F0   4612  4684*
_LD_CHG                          P        EXPT 00000168   2956  4598*
_LD_CHG_EX                       P             000001F2   4666  4687*
_LD_CODE                                  IMPT 00000000   2877  4614  4615 
_LD_CODE_END                              IMPT 00000000   2878  4614 
_LE_CHG                          P        EXPT 00000E9A   2985  7053*
_LE_CMD                                   EQU  00000034   3072*
_LE_CODE                                  IMPT 00000000   2933  7064  7065 
_LE_CODE_END                              IMPT 00000000   2934  7064 
_LE_SUB                                   IMPT 00000000   2862 
_MCR                                      IMPT 00000000    310 
_MMUCR                                    IMPT 00000000    282 
_NE_CHG                          P        EXPT 00000DD2   2983  6901*
_NE_CMD                                   EQU  0000002C   3070*
_NE_CODE                                  IMPT 00000000   2929  6912  6913 
_NE_CODE_END                              IMPT 00000000   2930  6912 
_NE_SUB                                   IMPT 00000000   2860 
_NOP_CHG                         P        EXPT 00000148   2955  4561*
_NOP_CODE                                 IMPT 00000000   2875  4566 
_NOP_CODE_END                             IMPT 00000000   2876 
_NOP_SHLL8_R0_TBL0                        IMPT 00000000   3015 
_NOP_SHLL8_R1_TBL0                        IMPT 00000000   3016 
_NOP_SHLL8_R2_TBL0                        IMPT 00000000   3017  5324  5405  5494 
_NOP_SHLL8_R3_TBL0                        IMPT 00000000   3018  5581  5784  5984 
_NOP_SHLL8_R4_TBL0                        IMPT 00000000   3019 
_NOP_SWAP_TBL0                            IMPT 00000000   3014  4656  4754  4854  4954  5053  5152  5243  5685 
_OMRG_CHG                        P        EXPT 00000B58   2974  6398*
_OMRG_CODE                                IMPT 00000000   2901  6403  6404 
_OMRG_CODE_END                            IMPT 00000000   2902  6403 
_ORN_C80                         P             00000528   5201  5269*
_ORN_CHG                         P        EXPT 00000422   2961  5097*
_ORN_CHG_EX                      P             0000052A   5253  5272*
_ORN_CODE                                 IMPT 00000000   2887  5112  5113  5203  5204 
_ORN_CODE_END                             IMPT 00000000   2888  5112  5203 
_ORW_CHG                         P        EXPT 0000102A   2989  7356*
_ORW_CMD                                  EQU  0000003C   3074*
_ORW_CODE                                 IMPT 00000000   2937  7367  7368 
_ORW_CODE_END                             IMPT 00000000   2938  7367 
_ORW_SUB                                  IMPT 00000000   2864 
_OR_CHG                          P        EXPT 0000039A   2960  4998*
_OR_CODE                                  IMPT 00000000   2885  5013  5014 
_OR_CODE_END                              IMPT 00000000   2886  5013 
_PCR                                      IMPT 00000000    311 
_PCTRA                                    IMPT 00000000    316 
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    72

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_PCTRB                                    IMPT 00000000    318 
_PDTRA                                    IMPT 00000000    317 
_PDTRB                                    IMPT 00000000    319  4429 
_PLF_CHG                         P        EXPT 0000062E   2963  5459*
_PLF_CMD                                  EQU  00000008   3061*
_PLF_CODE                                 IMPT 00000000   2897  5470  5471 
_PLF_CODE_END                             IMPT 00000000   2898  5470 
_PLF_SUB                                  IMPT 00000000   2851 
_PLS_C80                         P             00000624   5379  5440*
_PLS_CHG                         P        EXPT 00000532   2962  5289*
_PLS_CHG_EX                      P             00000626   5424  5443*
_PLS_CMD                                  EQU  00000004   3060*
_PLS_CODE                                 IMPT 00000000   2895  5300  5301  5381  5382 
_PLS_CODE_END                             IMPT 00000000   2896  5300  5381 
_PLS_SUB                                  IMPT 00000000   2850 
_PTEA                                     IMPT 00000000    289 
_PTEH                                     IMPT 00000000    278 
_PTEL                                     IMPT 00000000    279 
_PVP_COM_ADR                              IMPT 00000000   4307  4339 
_PVP_COM_ERR                              IMPT 00000000   4308  4341 
_QACR0                                    IMPT 00000000    290 
_QACR1                                    IMPT 00000000    291 
_RFCR                                     IMPT 00000000    315 
_RMIO2_IN_DATA                            IMPT 00000000   2833 
_RMIO_IN_DATA                             IMPT 00000000   2832 
_RST_CHG                         P        EXPT 00000906   2967  5947*
_RST_CODE                                 IMPT 00000000   2893  5958  5959 
_RST_CODE_END                             IMPT 00000000   2894  5958 
_RTCNT                                    IMPT 00000000    313 
_RTCOR                                    IMPT 00000000    314 
_RTCSR                                    IMPT 00000000    312 
_SAR0                                     IMPT 00000000    323 
_SAR1                                     IMPT 00000000    327 
_SAR2                                     IMPT 00000000    331 
_SAR3                                     IMPT 00000000    335 
_SCBRR1                                   IMPT 00000000    371 
_SCBRR2                                   IMPT 00000000    381 
_SCFCR2                                   IMPT 00000000    386 
_SCFDR2                                   IMPT 00000000    387 
_SCFRDR2                                  IMPT 00000000    385 
_SCFSR2                                   IMPT 00000000    384 
_SCFTDR2                                  IMPT 00000000    383 
_SCLSR2                                   IMPT 00000000    389 
_SCRDR1                                   IMPT 00000000    375 
_SCSCMR1                                  IMPT 00000000    376 
_SCSCR1                                   IMPT 00000000    372 
_SCSCR2                                   IMPT 00000000    382 
_SCSMR1                                   IMPT 00000000    370 
_SCSMR2                                   IMPT 00000000    380 
_SCSPTR1                                  IMPT 00000000    377 
_SCSPTR2                                  IMPT 00000000    388 
_SCSSR1                                   IMPT 00000000    374 
_SCTDR1                                   IMPT 00000000    373 
_SEQ_ADDCMD_R0_TBL                        IMPT 00000000   3012  6275  6711  6785 
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    73

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_SEQ_ADR                                  EQU  00000000   3038*
_SEQ_ADR_HI                               EQU  00000000   3043*
_SEQ_ADR_LO                               EQU  00000000   3044*
_SEQ_ARG1_DATA                            IMPT 00000000    433  4370 
_SEQ_ASM_RAM_TOP                          IMPT 00000000    402 
_SEQ_BBIT_CHG_TBL                         IMPT 00000000   3004  4627  4725  4825  4925  5024  5123  5214  5313  5394  5483  5570 
                                                          5674  5774  5872  5974 
_SEQ_BIT                                  EQU  00000000   3037*
_SEQ_CARD_MAX                             EQU  0000007F   3034* 4610  4708  4810  4910  5009  5108  5199  5296  5377  5466  5553 
                                                          5659  5754  5855  5954  6062  6128  6248  6530  6608  6684  6758  6832 
                                                          6908  6984  7060  7136  7212  7287  7363  7439 
_SEQ_CARD_RAM                             IMPT 00000000    417 
_SEQ_CD_BLOCK_MV_EXIT            P             0000110C   7517  7532*
_SEQ_CHG_TBL0                             IMPT 00000000   3000  4465 
_SEQ_CMP_ERR                              IMPT 00000000    432  4345 
_SEQ_CMP_ERR_ADR                          IMPT 00000000    438  4335 
_SEQ_CODE_BLOCK_LOOP             P             000010F4   7515* 7526 
_SEQ_CODE_BLOCK_MV               P             000010F2   4620  4718  4820  4920  5019  5118  5209  5306  5387  5476  5563  5669 
                                                          5764  5865  5964  6072  6138  6196  6258  6324  6379  6409  6440  6470 
                                                          6500  6540  6618  6694  6768  6842  6918  6994  7070  7146  7222  7297 
                                                          7373  7449  7510*
_SEQ_COM1_END                             IMPT 00000000   4281  4418 
_SEQ_COM1_TOP                             IMPT 00000000   4280  4410 
_SEQ_CTR_CARD_TOP                         EQU  00000430   3082*
_SEQ_CTR_DATA                             IMPT 00000000    426 
_SEQ_CTR_DT                               EQU  00000000   3041*
_SEQ_DRG1_DATA                            IMPT 00000000    436 
_SEQ_DT_HI                                EQU  00000000   3047*
_SEQ_DT_LO                                EQU  00000000   3046*
_SEQ_END_CODE                    P             00000004   4293* 4352 
_SEQ_GBR_TBL                              IMPT 00000000   3002 
_SEQ_MAX_BYTE                             EQU  0000001C   3029* 4414 
_SEQ_MOVCMD_R0RD_TBL                      IMPT 00000000   3005  4649  4747  4847  4947  5046  5145  5236 
_SEQ_MOVCMD_R1RD_TBL                      IMPT 00000000   3006  5601  5803  5894  6003 
_SEQ_MOVCMD_R1WR_TBL                      IMPT 00000000   3007  5610  5705  5812  5903  6012 
_SEQ_MOVCMD_R3RD_TBL                      IMPT 00000000   3009  6558  6636  6860  6936  7012  7088  7164  7240  7315  7391  7467 
_SEQ_MOVCMD_R3WR_TBL                      IMPT 00000000   3010 
_SEQ_MRG1_DATA                            IMPT 00000000    434  4372 
_SEQ_NRG1_DATA                            IMPT 00000000    435  4375 
_SEQ_OFFSET_ADR1                          EQU  00000000   3049*
_SEQ_OFFSET_ADR2                          EQU  000000C8   3050*
_SEQ_OFFSET_ADR3                          EQU  00000190   3051*
_SEQ_OFFSET_ADR4                          EQU  0000021C   3052*
_SEQ_OFFSET_ADR5                          EQU  000002F8   3053*
_SEQ_OFFSET_ADR6                          EQU  00000384   3054*
_SEQ_OFFSET_ADR7                          EQU  00000424   3055*
_SEQ_RUN1                                 IMPT 00000000    409  4411 
_SEQ_RUN1_END                             IMPT 00000000    410  4412 
_SEQ_RUN1_TOP                             IMPT 00000000    408  4320 
_SEQ_RUN_CHG1                    P             0000009C   4331  4405*
_SEQ_RUN_CHG1_100                P             000000AC   4420* 4521 
_SEQ_RUN_CHG1_300                P             000000E0   4462*
_SEQ_RUN_CHG1_800                P             00000124   4480  4502*
_SEQ_RUN_CHG1_END                P             00000138   4483  4528*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    74

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_SEQ_RUN_CHG1_ERR_END            P        EXPT 0000013E   2991  4448  4451  4485  4535*
_SEQ_RUN_CHG1_EXIT               P             00000140   4532  4538*
_SEQ_RUN_CHG_MAIN                P        EXPT 0000000A   4283  4314*
_SEQ_RUN_CHG_MAIN020             P             00000052   4349  4366*
_SEQ_SEEK_CARD_TBL                        IMPT 00000000   3022 
_SEQ_SEEK_WBIT_TBL                        IMPT 00000000   3021 
_SEQ_SR_FLG                               IMPT 00000000    429 
_SEQ_START_CODE                  P             00000000   4287* 4321 
_SEQ_TMR_CARD_TOP                         EQU  00000424   3081*
_SEQ_TMR_DATA                             IMPT 00000000    422 
_SEQ_TMR_DT                               EQU  00000000   3040*
_SET_C80                         P             000008FC   5857  5928*
_SET_CHG                         P        EXPT 000007D6   2966  5747*
_SET_CHG_EX                      P             000008FE   5910  5931*
_SET_CODE                                 IMPT 00000000   2891  5758  5759  5859  5860 
_SET_CODE_END                             IMPT 00000000   2892  5758  5859 
_SQ000                                    EQU  00000000   3161*
_SQ001                                    EQU  00000002   3162*
_SQ002                                    EQU  00000004   3163*
_SQ003                                    EQU  00000006   3164*
_SQ004                                    EQU  00000008   3165*
_SQ005                                    EQU  0000000A   3166*
_SQ006                                    EQU  0000000C   3167*
_SQ007                                    EQU  0000000E   3168*
_SQ008                                    EQU  00000010   3169*
_SQ009                                    EQU  00000012   3170*
_SQ010                                    EQU  00000014   3171*
_SQ011                                    EQU  00000016   3172*
_SQ012                                    EQU  00000018   3173*
_SQ013                                    EQU  0000001A   3174*
_SQ014                                    EQU  0000001C   3175*
_SQ015                                    EQU  0000001E   3176*
_SQ016                                    EQU  00000020   3177*
_SQ017                                    EQU  00000022   3178*
_SQ018                                    EQU  00000024   3179*
_SQ019                                    EQU  00000026   3180*
_SQ020                                    EQU  00000028   3181*
_SQ021                                    EQU  0000002A   3182*
_SQ022                                    EQU  0000002C   3183*
_SQ023                                    EQU  0000002E   3184*
_SQ024                                    EQU  00000030   3185*
_SQ025                                    EQU  00000032   3186*
_SQ026                                    EQU  00000034   3187*
_SQ027                                    EQU  00000036   3188*
_SQ028                                    EQU  00000038   3189*
_SQ029                                    EQU  0000003A   3190*
_SQ030                                    EQU  0000003C   3191*
_SQ031                                    EQU  0000003E   3192*
_SQ032                                    EQU  00000040   3193*
_SQ033                                    EQU  00000042   3194*
_SQ034                                    EQU  00000044   3195*
_SQ035                                    EQU  00000046   3196*
_SQ036                                    EQU  00000048   3197*
_SQ037                                    EQU  0000004A   3198*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    75

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_SQ038                                    EQU  0000004C   3199*
_SQ039                                    EQU  0000004E   3200*
_SQ040                                    EQU  00000050   3201*
_SQ041                                    EQU  00000052   3202*
_SQ042                                    EQU  00000054   3203*
_SQ043                                    EQU  00000056   3204*
_SQ044                                    EQU  00000058   3205*
_SQ045                                    EQU  0000005A   3206*
_SQ046                                    EQU  0000005C   3207*
_SQ047                                    EQU  0000005E   3208*
_SQ048                                    EQU  00000060   3209*
_SQ049                                    EQU  00000062   3210*
_SQ050                                    EQU  00000064   3211*
_SQ051                                    EQU  00000066   3212*
_SQ052                                    EQU  00000068   3213*
_SQ053                                    EQU  0000006A   3214*
_SQ054                                    EQU  0000006C   3215*
_SQ055                                    EQU  0000006E   3216*
_SQ056                                    EQU  00000070   3217*
_SQ057                                    EQU  00000072   3218*
_SQ058                                    EQU  00000074   3219*
_SQ059                                    EQU  00000076   3220*
_SQ060                                    EQU  00000078   3221*
_SQ061                                    EQU  0000007A   3222*
_SQ062                                    EQU  0000007C   3223*
_SQ063                                    EQU  0000007E   3224*
_SQ064                                    EQU  00000080   3225*
_SQ065                                    EQU  00000082   3226*
_SQ066                                    EQU  00000084   3227*
_SQ067                                    EQU  00000086   3228*
_SQ068                                    EQU  00000088   3229*
_SQ069                                    EQU  0000008A   3230*
_SQ070                                    EQU  0000008C   3231*
_SQ071                                    EQU  0000008E   3232*
_SQ072                                    EQU  00000090   3233*
_SQ073                                    EQU  00000092   3234*
_SQ074                                    EQU  00000094   3235*
_SQ075                                    EQU  00000096   3236*
_SQ076                                    EQU  00000098   3237*
_SQ077                                    EQU  0000009A   3238*
_SQ078                                    EQU  0000009C   3239*
_SQ079                                    EQU  0000009E   3240*
_SQ080                                    EQU  000000A0   3241*
_SQ081                                    EQU  000000A2   3242*
_SQ082                                    EQU  000000A4   3243*
_SQ083                                    EQU  000000A6   3244*
_SQ084                                    EQU  000000A8   3245*
_SQ085                                    EQU  000000AA   3246*
_SQ086                                    EQU  000000AC   3247*
_SQ087                                    EQU  000000AE   3248*
_SQ088                                    EQU  000000B0   3249*
_SQ089                                    EQU  000000B2   3250*
_SQ090                                    EQU  000000B4   3251*
_SQ091                                    EQU  000000B6   3252*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    76

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_SQ092                                    EQU  000000B8   3253*
_SQ093                                    EQU  000000BA   3254*
_SQ094                                    EQU  000000BC   3255*
_SQ095                                    EQU  000000BE   3256*
_SQ096                                    EQU  000000C0   3257*
_SQ097                                    EQU  000000C2   3258*
_SQ098                                    EQU  000000C4   3259*
_SQ099                                    EQU  000000C6   3260*
_SQ100                                    EQU  000000C8   3262*
_SQ101                                    EQU  000000CA   3263*
_SQ102                                    EQU  000000CC   3264*
_SQ103                                    EQU  000000CE   3265*
_SQ104                                    EQU  000000D0   3266*
_SQ105                                    EQU  000000D2   3267*
_SQ106                                    EQU  000000D4   3268*
_SQ107                                    EQU  000000D6   3269*
_SQ108                                    EQU  000000D8   3270*
_SQ109                                    EQU  000000DA   3271*
_SQ110                                    EQU  000000DC   3272*
_SQ111                                    EQU  000000DE   3273*
_SQ112                                    EQU  000000E0   3274*
_SQ113                                    EQU  000000E2   3275*
_SQ114                                    EQU  000000E4   3276*
_SQ115                                    EQU  000000E6   3277*
_SQ116                                    EQU  000000E8   3278*
_SQ117                                    EQU  000000EA   3279*
_SQ118                                    EQU  000000EC   3280*
_SQ119                                    EQU  000000EE   3281*
_SQ120                                    EQU  000000F0   3282*
_SQ121                                    EQU  000000F2   3283*
_SQ122                                    EQU  000000F4   3284*
_SQ123                                    EQU  000000F6   3285*
_SQ124                                    EQU  000000F8   3286*
_SQ125                                    EQU  000000FA   3287*
_SQ126                                    EQU  000000FC   3288*
_SQ127                                    EQU  000000FE   3289*
_SQ128                                    EQU  00000100   3290*
_SQ129                                    EQU  00000102   3291*
_SQ130                                    EQU  00000104   3292*
_SQ131                                    EQU  00000106   3293*
_SQ132                                    EQU  00000108   3294*
_SQ133                                    EQU  0000010A   3295*
_SQ134                                    EQU  0000010C   3296*
_SQ135                                    EQU  0000010E   3297*
_SQ136                                    EQU  00000110   3298*
_SQ137                                    EQU  00000112   3299*
_SQ138                                    EQU  00000114   3300*
_SQ139                                    EQU  00000116   3301*
_SQ140                                    EQU  00000118   3302*
_SQ141                                    EQU  0000011A   3303*
_SQ142                                    EQU  0000011C   3304*
_SQ143                                    EQU  0000011E   3305*
_SQ144                                    EQU  00000120   3306*
_SQ145                                    EQU  00000122   3307*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    77

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_SQ146                                    EQU  00000124   3308*
_SQ147                                    EQU  00000126   3309*
_SQ148                                    EQU  00000128   3310*
_SQ149                                    EQU  0000012A   3311*
_SQ150                                    EQU  0000012C   3312*
_SQ151                                    EQU  0000012E   3313*
_SQ152                                    EQU  00000130   3314*
_SQ153                                    EQU  00000132   3315*
_SQ154                                    EQU  00000134   3316*
_SQ155                                    EQU  00000136   3317*
_SQ156                                    EQU  00000138   3318*
_SQ157                                    EQU  0000013A   3319*
_SQ158                                    EQU  0000013C   3320*
_SQ159                                    EQU  0000013E   3321*
_SQ160                                    EQU  00000140   3322*
_SQ161                                    EQU  00000142   3323*
_SQ162                                    EQU  00000144   3324*
_SQ163                                    EQU  00000146   3325*
_SQ164                                    EQU  00000148   3326*
_SQ165                                    EQU  0000014A   3327*
_SQ166                                    EQU  0000014C   3328*
_SQ167                                    EQU  0000014E   3329*
_SQ168                                    EQU  00000150   3330*
_SQ169                                    EQU  00000152   3331*
_SQ170                                    EQU  00000154   3332*
_SQ171                                    EQU  00000156   3333*
_SQ172                                    EQU  00000158   3334*
_SQ173                                    EQU  0000015A   3335*
_SQ174                                    EQU  0000015C   3336*
_SQ175                                    EQU  0000015E   3337*
_SQ176                                    EQU  00000160   3338*
_SQ177                                    EQU  00000162   3339*
_SQ178                                    EQU  00000164   3340*
_SQ179                                    EQU  00000166   3341*
_SQ180                                    EQU  00000168   3342*
_SQ181                                    EQU  0000016A   3343*
_SQ182                                    EQU  0000016C   3344*
_SQ183                                    EQU  0000016E   3345*
_SQ184                                    EQU  00000170   3346*
_SQ185                                    EQU  00000172   3347*
_SQ186                                    EQU  00000174   3348*
_SQ187                                    EQU  00000176   3349*
_SQ188                                    EQU  00000178   3350*
_SQ189                                    EQU  0000017A   3351*
_SQ190                                    EQU  0000017C   3352*
_SQ191                                    EQU  0000017E   3353*
_SQ192                                    EQU  00000180   3354*
_SQ193                                    EQU  00000182   3355*
_SQ194                                    EQU  00000184   3356*
_SQ195                                    EQU  00000186   3357*
_SQ196                                    EQU  00000188   3358*
_SQ197                                    EQU  0000018A   3359*
_SQ198                                    EQU  0000018C   3360*
_SQ199                                    EQU  0000018E   3361*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    78

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_SQ200                                    EQU  00000190   3363*
_SQ201                                    EQU  00000192   3364*
_SQ202                                    EQU  00000194   3365*
_SQ203                                    EQU  00000196   3366*
_SQ204                                    EQU  00000198   3367*
_SQ205                                    EQU  0000019A   3368*
_SQ206                                    EQU  0000019C   3369*
_SQ207                                    EQU  0000019E   3370*
_SQ208                                    EQU  000001A0   3371*
_SQ209                                    EQU  000001A2   3372*
_SQ210                                    EQU  000001A4   3373*
_SQ211                                    EQU  000001A6   3374*
_SQ212                                    EQU  000001A8   3375*
_SQ213                                    EQU  000001AA   3376*
_SQ214                                    EQU  000001AC   3377*
_SQ215                                    EQU  000001AE   3378*
_SQ216                                    EQU  000001B0   3379*
_SQ217                                    EQU  000001B2   3380*
_SQ218                                    EQU  000001B4   3381*
_SQ219                                    EQU  000001B6   3382*
_SQ220                                    EQU  000001B8   3383*
_SQ221                                    EQU  000001BA   3384*
_SQ222                                    EQU  000001BC   3385*
_SQ223                                    EQU  000001BE   3386*
_SQ224                                    EQU  000001C0   3387*
_SQ225                                    EQU  000001C2   3388*
_SQ226                                    EQU  000001C4   3389*
_SQ227                                    EQU  000001C6   3390*
_SQ228                                    EQU  000001C8   3391*
_SQ229                                    EQU  000001CA   3392*
_SQ230                                    EQU  000001CC   3393*
_SQ231                                    EQU  000001CE   3394*
_SQ232                                    EQU  000001D0   3395*
_SQ233                                    EQU  000001D2   3396*
_SQ234                                    EQU  000001D4   3397*
_SQ235                                    EQU  000001D6   3398*
_SQ236                                    EQU  000001D8   3399*
_SQ237                                    EQU  000001DA   3400*
_SQ238                                    EQU  000001DC   3401*
_SQ239                                    EQU  000001DE   3402*
_SQ240                                    EQU  000001E0   3403*
_SQ241                                    EQU  000001E2   3404*
_SQ242                                    EQU  000001E4   3405*
_SQ243                                    EQU  000001E6   3406*
_SQ244                                    EQU  000001E8   3407*
_SQ245                                    EQU  000001EA   3408*
_SQ246                                    EQU  000001EC   3409*
_SQ247                                    EQU  000001EE   3410*
_SQ248                                    EQU  000001F0   3411*
_SQ249                                    EQU  000001F2   3412*
_SQ250                                    EQU  000001F4   3413*
_SQ251                                    EQU  000001F6   3414*
_SQ252                                    EQU  000001F8   3415*
_SQ253                                    EQU  000001FA   3416*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    79

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_SQ254                                    EQU  000001FC   3417*
_SQ255                                    EQU  000001FE   3418*
_SQ256                                    EQU  00000200   3419*
_SQ257                                    EQU  00000202   3420*
_SQ258                                    EQU  00000204   3421*
_SQ259                                    EQU  00000206   3422*
_SQ260                                    EQU  00000208   3423*
_SQ261                                    EQU  0000020A   3424*
_SQ262                                    EQU  0000020C   3425*
_SQ263                                    EQU  0000020E   3426*
_SQ264                                    EQU  00000210   3427*
_SQ265                                    EQU  00000212   3428*
_SQ266                                    EQU  00000214   3429*
_SQ267                                    EQU  00000216   3430*
_SQ268                                    EQU  00000218   3431*
_SQ269                                    EQU  0000021A   3432*
_SQ270                                    EQU  0000021C   3433*
_SQ271                                    EQU  0000021E   3434*
_SQ272                                    EQU  00000220   3435*
_SQ273                                    EQU  00000222   3436*
_SQ274                                    EQU  00000224   3437*
_SQ275                                    EQU  00000226   3438*
_SQ276                                    EQU  00000228   3439*
_SQ277                                    EQU  0000022A   3440*
_SQ278                                    EQU  0000022C   3441*
_SQ279                                    EQU  0000022E   3442*
_SQ280                                    EQU  00000230   3443*
_SQ281                                    EQU  00000232   3444*
_SQ282                                    EQU  00000234   3445*
_SQ283                                    EQU  00000236   3446*
_SQ284                                    EQU  00000238   3447*
_SQ285                                    EQU  0000023A   3448*
_SQ286                                    EQU  0000023C   3449*
_SQ287                                    EQU  0000023E   3450*
_SQ288                                    EQU  00000240   3451*
_SQ289                                    EQU  00000242   3452*
_SQ290                                    EQU  00000244   3453*
_SQ291                                    EQU  00000246   3454*
_SQ292                                    EQU  00000248   3455*
_SQ293                                    EQU  0000024A   3456*
_SQ294                                    EQU  0000024C   3457*
_SQ295                                    EQU  0000024E   3458*
_SQ296                                    EQU  00000250   3459*
_SQ297                                    EQU  00000252   3460*
_SQ298                                    EQU  00000254   3461*
_SQ299                                    EQU  00000256   3462*
_SQ300                                    EQU  00000258   3464*
_SQ301                                    EQU  0000025A   3465*
_SQ302                                    EQU  0000025C   3466*
_SQ303                                    EQU  0000025E   3467*
_SQ304                                    EQU  00000260   3468*
_SQ305                                    EQU  00000262   3469*
_SQ306                                    EQU  00000264   3470*
_SQ307                                    EQU  00000266   3471*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    80

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_SQ308                                    EQU  00000268   3472*
_SQ309                                    EQU  0000026A   3473*
_SQ310                                    EQU  0000026C   3474*
_SQ311                                    EQU  0000026E   3475*
_SQ312                                    EQU  00000270   3476*
_SQ313                                    EQU  00000272   3477*
_SQ314                                    EQU  00000274   3478*
_SQ315                                    EQU  00000276   3479*
_SQ316                                    EQU  00000278   3480*
_SQ317                                    EQU  0000027A   3481*
_SQ318                                    EQU  0000027C   3482*
_SQ319                                    EQU  0000027E   3483*
_SQ320                                    EQU  00000280   3484*
_SQ321                                    EQU  00000282   3485*
_SQ322                                    EQU  00000284   3486*
_SQ323                                    EQU  00000286   3487*
_SQ324                                    EQU  00000288   3488*
_SQ325                                    EQU  0000028A   3489*
_SQ326                                    EQU  0000028C   3490*
_SQ327                                    EQU  0000028E   3491*
_SQ328                                    EQU  00000290   3492*
_SQ329                                    EQU  00000292   3493*
_SQ330                                    EQU  00000294   3494*
_SQ331                                    EQU  00000296   3495*
_SQ332                                    EQU  00000298   3496*
_SQ333                                    EQU  0000029A   3497*
_SQ334                                    EQU  0000029C   3498*
_SQ335                                    EQU  0000029E   3499*
_SQ336                                    EQU  000002A0   3500*
_SQ337                                    EQU  000002A2   3501*
_SQ338                                    EQU  000002A4   3502*
_SQ339                                    EQU  000002A6   3503*
_SQ340                                    EQU  000002A8   3504*
_SQ341                                    EQU  000002AA   3505*
_SQ342                                    EQU  000002AC   3506*
_SQ343                                    EQU  000002AE   3507*
_SQ344                                    EQU  000002B0   3508*
_SQ345                                    EQU  000002B2   3509*
_SQ346                                    EQU  000002B4   3510*
_SQ347                                    EQU  000002B6   3511*
_SQ348                                    EQU  000002B8   3512*
_SQ349                                    EQU  000002BA   3513*
_SQ350                                    EQU  000002BC   3514*
_SQ351                                    EQU  000002BE   3515*
_SQ352                                    EQU  000002C0   3516*
_SQ353                                    EQU  000002C2   3517*
_SQ354                                    EQU  000002C4   3518*
_SQ355                                    EQU  000002C6   3519*
_SQ356                                    EQU  000002C8   3520*
_SQ357                                    EQU  000002CA   3521*
_SQ358                                    EQU  000002CC   3522*
_SQ359                                    EQU  000002CE   3523*
_SQ360                                    EQU  000002D0   3524*
_SQ361                                    EQU  000002D2   3525*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    81

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_SQ362                                    EQU  000002D4   3526*
_SQ363                                    EQU  000002D6   3527*
_SQ364                                    EQU  000002D8   3528*
_SQ365                                    EQU  000002DA   3529*
_SQ366                                    EQU  000002DC   3530*
_SQ367                                    EQU  000002DE   3531*
_SQ368                                    EQU  000002E0   3532*
_SQ369                                    EQU  000002E2   3533*
_SQ370                                    EQU  000002E4   3534*
_SQ371                                    EQU  000002E6   3535*
_SQ372                                    EQU  000002E8   3536*
_SQ373                                    EQU  000002EA   3537*
_SQ374                                    EQU  000002EC   3538*
_SQ375                                    EQU  000002EE   3539*
_SQ376                                    EQU  000002F0   3540*
_SQ377                                    EQU  000002F2   3541*
_SQ378                                    EQU  000002F4   3542*
_SQ379                                    EQU  000002F6   3543*
_SQ380                                    EQU  000002F8   3544*
_SQ381                                    EQU  000002FA   3545*
_SQ382                                    EQU  000002FC   3546*
_SQ383                                    EQU  000002FE   3547*
_SQ384                                    EQU  00000300   3548*
_SQ385                                    EQU  00000302   3549*
_SQ386                                    EQU  00000304   3550*
_SQ387                                    EQU  00000306   3551*
_SQ388                                    EQU  00000308   3552*
_SQ389                                    EQU  0000030A   3553*
_SQ390                                    EQU  0000030C   3554*
_SQ391                                    EQU  0000030E   3555*
_SQ392                                    EQU  00000310   3556*
_SQ393                                    EQU  00000312   3557*
_SQ394                                    EQU  00000314   3558*
_SQ395                                    EQU  00000316   3559*
_SQ396                                    EQU  00000318   3560*
_SQ397                                    EQU  0000031A   3561*
_SQ398                                    EQU  0000031C   3562*
_SQ399                                    EQU  0000031E   3563*
_SQ400                                    EQU  00000320   3565*
_SQ401                                    EQU  00000322   3566*
_SQ402                                    EQU  00000324   3567*
_SQ403                                    EQU  00000326   3568*
_SQ404                                    EQU  00000328   3569*
_SQ405                                    EQU  0000032A   3570*
_SQ406                                    EQU  0000032C   3571*
_SQ407                                    EQU  0000032E   3572*
_SQ408                                    EQU  00000330   3573*
_SQ409                                    EQU  00000332   3574*
_SQ410                                    EQU  00000334   3575*
_SQ411                                    EQU  00000336   3576*
_SQ412                                    EQU  00000338   3577*
_SQ413                                    EQU  0000033A   3578*
_SQ414                                    EQU  0000033C   3579*
_SQ415                                    EQU  0000033E   3580*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    82

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_SQ416                                    EQU  00000340   3581*
_SQ417                                    EQU  00000342   3582*
_SQ418                                    EQU  00000344   3583*
_SQ419                                    EQU  00000346   3584*
_SQ420                                    EQU  00000348   3585*
_SQ421                                    EQU  0000034A   3586*
_SQ422                                    EQU  0000034C   3587*
_SQ423                                    EQU  0000034E   3588*
_SQ424                                    EQU  00000350   3589*
_SQ425                                    EQU  00000352   3590*
_SQ426                                    EQU  00000354   3591*
_SQ427                                    EQU  00000356   3592*
_SQ428                                    EQU  00000358   3593*
_SQ429                                    EQU  0000035A   3594*
_SQ430                                    EQU  0000035C   3595*
_SQ431                                    EQU  0000035E   3596*
_SQ432                                    EQU  00000360   3597*
_SQ433                                    EQU  00000362   3598*
_SQ434                                    EQU  00000364   3599*
_SQ435                                    EQU  00000366   3600*
_SQ436                                    EQU  00000368   3601*
_SQ437                                    EQU  0000036A   3602*
_SQ438                                    EQU  0000036C   3603*
_SQ439                                    EQU  0000036E   3604*
_SQ440                                    EQU  00000370   3605*
_SQ441                                    EQU  00000372   3606*
_SQ442                                    EQU  00000374   3607*
_SQ443                                    EQU  00000376   3608*
_SQ444                                    EQU  00000378   3609*
_SQ445                                    EQU  0000037A   3610*
_SQ446                                    EQU  0000037C   3611*
_SQ447                                    EQU  0000037E   3612*
_SQ448                                    EQU  00000380   3613*
_SQ449                                    EQU  00000382   3614*
_SQ450                                    EQU  00000384   3615*
_SQ451                                    EQU  00000386   3616*
_SQ452                                    EQU  00000388   3617*
_SQ453                                    EQU  0000038A   3618*
_SQ454                                    EQU  0000038C   3619*
_SQ455                                    EQU  0000038E   3620*
_SQ456                                    EQU  00000390   3621*
_SQ457                                    EQU  00000392   3622*
_SQ458                                    EQU  00000394   3623*
_SQ459                                    EQU  00000396   3624*
_SQ460                                    EQU  00000398   3625*
_SQ461                                    EQU  0000039A   3626*
_SQ462                                    EQU  0000039C   3627*
_SQ463                                    EQU  0000039E   3628*
_SQ464                                    EQU  000003A0   3629*
_SQ465                                    EQU  000003A2   3630*
_SQ466                                    EQU  000003A4   3631*
_SQ467                                    EQU  000003A6   3632*
_SQ468                                    EQU  000003A8   3633*
_SQ469                                    EQU  000003AA   3634*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    83

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_SQ470                                    EQU  000003AC   3635*
_SQ471                                    EQU  000003AE   3636*
_SQ472                                    EQU  000003B0   3637*
_SQ473                                    EQU  000003B2   3638*
_SQ474                                    EQU  000003B4   3639*
_SQ475                                    EQU  000003B6   3640*
_SQ476                                    EQU  000003B8   3641*
_SQ477                                    EQU  000003BA   3642*
_SQ478                                    EQU  000003BC   3643*
_SQ479                                    EQU  000003BE   3644*
_SQ480                                    EQU  000003C0   3645*
_SQ481                                    EQU  000003C2   3646*
_SQ482                                    EQU  000003C4   3647*
_SQ483                                    EQU  000003C6   3648*
_SQ484                                    EQU  000003C8   3649*
_SQ485                                    EQU  000003CA   3650*
_SQ486                                    EQU  000003CC   3651*
_SQ487                                    EQU  000003CE   3652*
_SQ488                                    EQU  000003D0   3653*
_SQ489                                    EQU  000003D2   3654*
_SQ490                                    EQU  000003D4   3655*
_SQ491                                    EQU  000003D6   3656*
_SQ492                                    EQU  000003D8   3657*
_SQ493                                    EQU  000003DA   3658*
_SQ494                                    EQU  000003DC   3659*
_SQ495                                    EQU  000003DE   3660*
_SQ496                                    EQU  000003E0   3661*
_SQ497                                    EQU  000003E2   3662*
_SQ498                                    EQU  000003E4   3663*
_SQ499                                    EQU  000003E6   3664*
_SQ500                                    EQU  000003E8   3666*
_SQ501                                    EQU  000003EA   3667*
_SQ502                                    EQU  000003EC   3668*
_SQ503                                    EQU  000003EE   3669*
_SQ504                                    EQU  000003F0   3670*
_SQ505                                    EQU  000003F2   3671*
_SQ506                                    EQU  000003F4   3672*
_SQ507                                    EQU  000003F6   3673*
_SQ508                                    EQU  000003F8   3674*
_SQ509                                    EQU  000003FA   3675*
_SQ510                                    EQU  000003FC   3676*
_SQ511                                    EQU  000003FE   3677*
_SQ512                                    EQU  00000400   3678*
_SQ513                                    EQU  00000402   3679*
_SQ514                                    EQU  00000404   3680*
_SQ515                                    EQU  00000406   3681*
_SQ516                                    EQU  00000408   3682*
_SQ517                                    EQU  0000040A   3683*
_SQ518                                    EQU  0000040C   3684*
_SQ519                                    EQU  0000040E   3685*
_SQ520                                    EQU  00000410   3686*
_SQ521                                    EQU  00000412   3687*
_SQ522                                    EQU  00000414   3688*
_SQ523                                    EQU  00000416   3689*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    84

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_SQ524                                    EQU  00000418   3690*
_SQ525                                    EQU  0000041A   3691*
_SQ526                                    EQU  0000041C   3692*
_SQ527                                    EQU  0000041E   3693*
_SQ528                                    EQU  00000420   3694*
_SQ529                                    EQU  00000422   3695*
_SQ530                                    EQU  00000424   3696*
_SQ531                                    EQU  00000426   3697*
_SQ532                                    EQU  00000428   3698*
_SQ533                                    EQU  0000042A   3699*
_SQ534                                    EQU  0000042C   3700*
_SQ535                                    EQU  0000042E   3701*
_SQ536                                    EQU  00000430   3702*
_SQ537                                    EQU  00000432   3703*
_SQ538                                    EQU  00000434   3704*
_SQ539                                    EQU  00000436   3705*
_SQ540                                    EQU  00000438   3706*
_SQ541                                    EQU  0000043A   3707*
_SQ542                                    EQU  0000043C   3708*
_SQ543                                    EQU  0000043E   3709*
_SQ544                                    EQU  00000440   3710*
_SQ545                                    EQU  00000442   3711*
_SQ546                                    EQU  00000444   3712*
_SQ547                                    EQU  00000446   3713*
_SQ548                                    EQU  00000448   3714*
_SQ549                                    EQU  0000044A   3715*
_SQ550                                    EQU  0000044C   3716*
_SQ551                                    EQU  0000044E   3717*
_SQ552                                    EQU  00000450   3718*
_SQ553                                    EQU  00000452   3719*
_SQ554                                    EQU  00000454   3720*
_SQ555                                    EQU  00000456   3721*
_SQ556                                    EQU  00000458   3722*
_SQ557                                    EQU  0000045A   3723*
_SQ558                                    EQU  0000045C   3724*
_SQ559                                    EQU  0000045E   3725*
_SQ560                                    EQU  00000460   3726*
_SQ561                                    EQU  00000462   3727*
_SQ562                                    EQU  00000464   3728*
_SQ563                                    EQU  00000466   3729*
_SQ564                                    EQU  00000468   3730*
_SQ565                                    EQU  0000046A   3731*
_SQ566                                    EQU  0000046C   3732*
_SQ567                                    EQU  0000046E   3733*
_SQ568                                    EQU  00000470   3734*
_SQ569                                    EQU  00000472   3735*
_SQ570                                    EQU  00000474   3736*
_SQ571                                    EQU  00000476   3737*
_SQ572                                    EQU  00000478   3738*
_SQ573                                    EQU  0000047A   3739*
_SQ574                                    EQU  0000047C   3740*
_SQ575                                    EQU  0000047E   3741*
_SQ576                                    EQU  00000480   3742*
_SQ577                                    EQU  00000482   3743*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    85

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_SQ578                                    EQU  00000484   3744*
_SQ579                                    EQU  00000486   3745*
_SQ580                                    EQU  00000488   3746*
_SQ581                                    EQU  0000048A   3747*
_SQ582                                    EQU  0000048C   3748*
_SQ583                                    EQU  0000048E   3749*
_SQ584                                    EQU  00000490   3750*
_SQ585                                    EQU  00000492   3751*
_SQ586                                    EQU  00000494   3752*
_SQ587                                    EQU  00000496   3753*
_SQ588                                    EQU  00000498   3754*
_SQ589                                    EQU  0000049A   3755*
_SQ590                                    EQU  0000049C   3756*
_SQ591                                    EQU  0000049E   3757*
_SQ592                                    EQU  000004A0   3758*
_SQ593                                    EQU  000004A2   3759*
_SQ594                                    EQU  000004A4   3760*
_SQ595                                    EQU  000004A6   3761*
_SQ596                                    EQU  000004A8   3762*
_SQ597                                    EQU  000004AA   3763*
_SQ598                                    EQU  000004AC   3764*
_SQ599                                    EQU  000004AE   3765*
_SQ600                                    EQU  000004B0   3767*
_SQ601                                    EQU  000004B2   3768*
_SQ602                                    EQU  000004B4   3769*
_SQ603                                    EQU  000004B6   3770*
_SQ604                                    EQU  000004B8   3771*
_SQ605                                    EQU  000004BA   3772*
_SQ606                                    EQU  000004BC   3773*
_SQ607                                    EQU  000004BE   3774*
_SQ608                                    EQU  000004C0   3775*
_SQ609                                    EQU  000004C2   3776*
_SQ610                                    EQU  000004C4   3777*
_SQ611                                    EQU  000004C6   3778*
_SQ612                                    EQU  000004C8   3779*
_SQ613                                    EQU  000004CA   3780*
_SQ614                                    EQU  000004CC   3781*
_SQ615                                    EQU  000004CE   3782*
_SQ616                                    EQU  000004D0   3783*
_SQ617                                    EQU  000004D2   3784*
_SQ618                                    EQU  000004D4   3785*
_SQ619                                    EQU  000004D6   3786*
_SQ620                                    EQU  000004D8   3787*
_SQ621                                    EQU  000004DA   3788*
_SQ622                                    EQU  000004DC   3789*
_SQ623                                    EQU  000004DE   3790*
_SQ624                                    EQU  000004E0   3791*
_SQ625                                    EQU  000004E2   3792*
_SQ626                                    EQU  000004E4   3793*
_SQ627                                    EQU  000004E6   3794*
_SQ628                                    EQU  000004E8   3795*
_SQ629                                    EQU  000004EA   3796*
_SQ630                                    EQU  000004EC   3797*
_SQ631                                    EQU  000004EE   3798*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    86

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_SQ632                                    EQU  000004F0   3799*
_SQ633                                    EQU  000004F2   3800*
_SQ634                                    EQU  000004F4   3801*
_SQ635                                    EQU  000004F6   3802*
_SQ636                                    EQU  000004F8   3803*
_SQ637                                    EQU  000004FA   3804*
_SQ638                                    EQU  000004FC   3805*
_SQ639                                    EQU  000004FE   3806*
_SQ640                                    EQU  00000500   3807*
_SQ641                                    EQU  00000502   3808*
_SQ642                                    EQU  00000504   3809*
_SQ643                                    EQU  00000506   3810*
_SQ644                                    EQU  00000508   3811*
_SQ645                                    EQU  0000050A   3812*
_SQ646                                    EQU  0000050C   3813*
_SQ647                                    EQU  0000050E   3814*
_SQ648                                    EQU  00000510   3815*
_SQ649                                    EQU  00000512   3816*
_SQ650                                    EQU  00000514   3817*
_SQ651                                    EQU  00000516   3818*
_SQ652                                    EQU  00000518   3819*
_SQ653                                    EQU  0000051A   3820*
_SQ654                                    EQU  0000051C   3821*
_SQ655                                    EQU  0000051E   3822*
_SQ656                                    EQU  00000520   3823*
_SQ657                                    EQU  00000522   3824*
_SQ658                                    EQU  00000524   3825*
_SQ659                                    EQU  00000526   3826*
_SQ660                                    EQU  00000528   3827*
_SQ661                                    EQU  0000052A   3828*
_SQ662                                    EQU  0000052C   3829*
_SQ663                                    EQU  0000052E   3830*
_SQ664                                    EQU  00000530   3831*
_SQ665                                    EQU  00000532   3832*
_SQ666                                    EQU  00000534   3833*
_SQ667                                    EQU  00000536   3834*
_SQ668                                    EQU  00000538   3835*
_SQ669                                    EQU  0000053A   3836*
_SQ670                                    EQU  0000053C   3837*
_SQ671                                    EQU  0000053E   3838*
_SQ672                                    EQU  00000540   3839*
_SQ673                                    EQU  00000542   3840*
_SQ674                                    EQU  00000544   3841*
_SQ675                                    EQU  00000546   3842*
_SQ676                                    EQU  00000548   3843*
_SQ677                                    EQU  0000054A   3844*
_SQ678                                    EQU  0000054C   3845*
_SQ679                                    EQU  0000054E   3846*
_SQ680                                    EQU  00000550   3847*
_SQ681                                    EQU  00000552   3848*
_SQ682                                    EQU  00000554   3849*
_SQ683                                    EQU  00000556   3850*
_SQ684                                    EQU  00000558   3851*
_SQ685                                    EQU  0000055A   3852*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    87

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_SQ686                                    EQU  0000055C   3853*
_SQ687                                    EQU  0000055E   3854*
_SQ688                                    EQU  00000560   3855*
_SQ689                                    EQU  00000562   3856*
_SQ690                                    EQU  00000564   3857*
_SQ691                                    EQU  00000566   3858*
_SQ692                                    EQU  00000568   3859*
_SQ693                                    EQU  0000056A   3860*
_SQ694                                    EQU  0000056C   3861*
_SQ695                                    EQU  0000056E   3862*
_SQ696                                    EQU  00000570   3863*
_SQ697                                    EQU  00000572   3864*
_SQ698                                    EQU  00000574   3865*
_SQ699                                    EQU  00000576   3866*
_SQCB200                                  EQU  00000000   3088*
_SQCB201                                  EQU  00000002   3089*
_SQCB202                                  EQU  00000004   3090*
_SQCB203                                  EQU  00000006   3091*
_SQCB204                                  EQU  00000008   3092*
_SQCB205                                  EQU  0000000A   3093*
_SQCB206                                  EQU  0000000C   3094*
_SQCB207                                  EQU  0000000E   3095*
_SQCB208                                  EQU  00000010   3096*
_SQCB209                                  EQU  00000012   3097*
_SQCB210                                  EQU  00000014   3098*
_SQCB211                                  EQU  00000016   3099*
_SQCB212                                  EQU  00000018   3100*
_SQCB213                                  EQU  0000001A   3101*
_SQCB214                                  EQU  0000001C   3102*
_SQCB215                                  EQU  0000001E   3103*
_SQCB216                                  EQU  00000020   3104*
_SQCB217                                  EQU  00000022   3105*
_SQCB218                                  EQU  00000024   3106*
_SQCB219                                  EQU  00000026   3107*
_SQCB220                                  EQU  00000028   3108*
_SQCB221                                  EQU  0000002A   3109*
_SQCB222                                  EQU  0000002C   3110*
_SQCB223                                  EQU  0000002E   3111*
_SQCB224                                  EQU  00000030   3112*
_SQCB225                                  EQU  00000032   3113*
_SQCB226                                  EQU  00000034   3114*
_SQCB227                                  EQU  00000036   3115*
_SQCB228                                  EQU  00000038   3116*
_SQCB229                                  EQU  0000003A   3117*
_SQCB230                                  EQU  0000003C   3118*
_SQCB231                                  EQU  0000003E   3119*
_SQCB232                                  EQU  00000040   3120*
_SQCB233                                  EQU  00000042   3121*
_SQCB234                                  EQU  00000044   3122*
_SQCB235                                  EQU  00000046   3123*
_SQCB236                                  EQU  00000048   3124*
_SQCB237                                  EQU  0000004A   3125*
_SQCB238                                  EQU  0000004C   3126*
_SQCB239                                  EQU  0000004E   3127*
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    88

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_SQCB240                                  EQU  00000050   3128*
_SQCB241                                  EQU  00000052   3129*
_SQCB242                                  EQU  00000054   3130*
_SQCB243                                  EQU  00000056   3131*
_SQCB244                                  EQU  00000058   3132*
_SQCB245                                  EQU  0000005A   3133*
_SQCB246                                  EQU  0000005C   3134*
_SQCB247                                  EQU  0000005E   3135*
_SQCB248                                  EQU  00000060   3136*
_SQCB249                                  EQU  00000062   3137*
_SQCB250                                  EQU  00000064   3138*
_SQCB251                                  EQU  00000066   3139*
_SQCB252                                  EQU  00000068   3140*
_SQCB253                                  EQU  0000006A   3141*
_SQCB254                                  EQU  0000006C   3142*
_SQCB255                                  EQU  0000006E   3143*
_SQCB256                                  EQU  00000070   3144*
_SQCB257                                  EQU  00000072   3145*
_SQCB258                                  EQU  00000074   3146*
_SQCB259                                  EQU  00000076   3147*
_SQCB260                                  EQU  00000078   3148*
_SQCB261                                  EQU  0000007A   3149*
_SQCB262                                  EQU  0000007C   3150*
_SQCB263                                  EQU  0000007E   3151*
_SQCB264                                  EQU  00000080   3152*
_SQCB265                                  EQU  00000082   3153*
_SQCB266                                  EQU  00000084   3154*
_SQCB267                                  EQU  00000086   3155*
_SQCB268                                  EQU  00000088   3156*
_SQCB269                                  EQU  0000008A   3157*
_SQ_CB_DAT1                               EQU  00000046   3084*
_SQ_ERR_END                               EQU  0000FF00   3033* 4536  4685  4782  4881  4981  5080  5179  5270  5361  5441  5531 
                                                          5636  5730  5838  5929  6038  6102  6168  6299  6582  6659  6734  6808 
                                                          6883  6959  7035  7111  7187  7263  7338  7414  7490 
_SQ_NML_COD                               EQU  00000000   3031* 4479  4571  4664  4762  4862  4962  5061  5160  5251  5341  5422 
                                                          5511  5615  5711  5817  5908  6017  6087  6153  6218  6281  6346  6564 
                                                          6642  6717  6791  6866  6942  7018  7094  7170  7246  7321  7397  7473 
_SQ_NML_END                               EQU  00000055   3032* 4482  6504 
_START_ACK_COD                            EQU  00004321    213*
_START_REQ_COD                            EQU  00009876    212*
_STBCR                                    IMPT 00000000    343 
_STBCR2                                   IMPT 00000000    346 
_STWU_CHG                        P        EXPT 00000D0A   2980  6751*
_STWU_CODE                                IMPT 00000000   2923  6762  6763 
_STWU_CODE_END                            IMPT 00000000   2924  6762 
_STW_CHG                         P        EXPT 00000CA6   2981  6677*
_STW_CMD                                  EQU  00000024   3068*
_STW_CODE                                 IMPT 00000000   2925  6688  6689 
_STW_CODE_END                             IMPT 00000000   2926  6688 
_STW_SUB                                  IMPT 00000000   2858 
_ST_C80                          P             00000744   5555  5635*
_ST_CHG                          P        EXPT 000006AE   2964  5548*
_ST_CHG_EX                       P             00000746   5617  5638*
_ST_CODE                                  IMPT 00000000   2889  5557  5558 
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    89

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_ST_CODE_END                              IMPT 00000000   2890  5557 
_SUB_CHG                         P        EXPT 00000F62   2987  7205*
_SUB_CMD                                  EQU  00000048   3077*
_SUB_CODE                                 IMPT 00000000   2943  7216  7217 
_SUB_CODE_END                             IMPT 00000000   2944  7216 
_SUB_SUB                                  IMPT 00000000   2867 
_TCNT0                                    IMPT 00000000    359 
_TCNT1                                    IMPT 00000000    362 
_TCNT2                                    IMPT 00000000    365 
_TCOR0                                    IMPT 00000000    358 
_TCOR1                                    IMPT 00000000    361 
_TCOR2                                    IMPT 00000000    364 
_TCPR2                                    IMPT 00000000    367 
_TCR0                                     IMPT 00000000    360 
_TCR1                                     IMPT 00000000    363 
_TCR2                                     IMPT 00000000    366 
_TEA                                      IMPT 00000000    281 
_TMR_CMD                                  EQU  00000010   3063*
_TOCR                                     IMPT 00000000    356 
_TRA                                      IMPT 00000000    286 
_TSTR                                     IMPT 00000000    357 
_TTB                                      IMPT 00000000    280 
_VUPCHECK_EQU                             EQU  11AB3739     98*
_WCR1                                     IMPT 00000000    307 
_WCR2                                     IMPT 00000000    308 
_WCR3                                     IMPT 00000000    309 
_WCTR_CHG                        P        EXPT 000009F2   2969  6121*
_WCTR_CODE                                IMPT 00000000   2913  6132  6133 
_WCTR_CODE_END                            IMPT 00000000   2914  6132 
_WCTR_SUB                                 IMPT 00000000   2854 
_WNNRG_CHG                       P        EXPT 00000B98   2976  6459*
_WNNRG_CODE                               IMPT 00000000   2905  6464  6465 
_WNNRG_CODE_END                           IMPT 00000000   2906  6464 
_WNRG_CHG                        P        EXPT 00000B78   2975  6429*
_WNRG_CODE                                IMPT 00000000   2903  6434  6435 
_WNRG_CODE_END                            IMPT 00000000   2904  6434 
_WSC_C80                         P             000007CC   5661  5729*
_WSC_CHG                         P        EXPT 0000074E   2965  5654*
_WSC_CHG_EX                      P             000007CE   5713  5732*
_WSC_CMD                                  EQU  00000018   3065*
_WSC_CODE                                 IMPT 00000000   2915  5663  5664 
_WSC_CODE_END                             IMPT 00000000   2916  5663 
_WSC_SUB                                  IMPT 00000000   2855 
_WSR_CHG                         P        EXPT 00000A3E   2970  6185*
_WSR_CMD                                  EQU  0000001C   3066*
_WSR_CODE                                 IMPT 00000000   2917  6190  6191 
_WSR_CODE_END                             IMPT 00000000   2918  6190 
_WSR_SUB                                  IMPT 00000000   2856 
_WTCNT                                    IMPT 00000000    344 
_WTCSR                                    IMPT 00000000    345 
_WTMR_CHG                        P        EXPT 000009A6   2968  6055*
_WTMR_CODE                                IMPT 00000000   2911  6066  6067 
_WTMR_CODE_END                            IMPT 00000000   2912  6066 
_WTMR_SUB                                 IMPT 00000000   2853 
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    90

*** CROSS REFERENCE LIST

NAME                             SECTION  ATTR VALUE             SEQUENCE

_XORW_CHG                        P        EXPT 0000108E   2990  7432*
_XORW_CMD                                 EQU  00000040   3075*
_XORW_CODE                                IMPT 00000000   2939  7443  7444 
_XORW_CODE_END                            IMPT 00000000   2940  7443 
_XORW_SUB                                 IMPT 00000000   2865 
_data_init2_timer                         IMPT 00000000   2800 
_mem_chk_flg                              IMPT 00000000   2802 
_sram_top                                 IMPT 00000000   2798 
*** SuperH RISC engine ASSEMBLER V.7.01.02.000 ***    11/14/21 17:25:08                                                  PAGE    91

*** SECTION DATA LIST

SECTION                          ATTRIBUTE    SIZE             START

P                                REL-CODE    000001112        
